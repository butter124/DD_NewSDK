#pragma once

// Dungeon Defenders (10.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class UDKGame.AlienWareAPI
// 0x0000 (0x003C - 0x003C)
class UAlienWareAPI : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AlienWareAPI");
		return ptr;
	}


	void STATIC_LightEvent(const struct FLinearColor& InColor, float FadeInTime, float FadeOutTime, float Duration, unsigned long bIsPulsing, float PulseOnInterval, float PulseOffInterval, float PulseFadeTime);
	void STATIC_Update(float DeltaTime);
	void STATIC_SetAllDefaultLightColors(const struct FLinearColor& cColor);
	void STATIC_SetAllLightColors(const struct FLinearColor& cColor);
};


// Class UDKGame.BaseStatObject
// 0x0008 (0x0044 - 0x003C)
class UBaseStatObject : public UObject
{
public:
	int                                                StatUniqueID;                                             // 0x003C(0x0004) (Edit, Const, DuplicateTransient)
	unsigned long                                      bDebug : 1;                                               // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.BaseStatObject");
		return ptr;
	}

};


// Class UDKGame.BuffNativeObject
// 0x0048 (0x0084 - 0x003C)
class UBuffNativeObject : public UObject
{
public:
	int                                                buffUniqueID;                                             // 0x003C(0x0004) (Edit, Const, DuplicateTransient)
	class AActor*                                      Owner;                                                    // 0x0040(0x0004)
	class APawn*                                       Instigator;                                               // 0x0044(0x0004)
	class AWorldInfo*                                  WorldInfo;                                                // 0x0048(0x0004)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x004C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                TargetingTeam;                                            // 0x0050(0x0004)
	float                                              CreationTime;                                             // 0x0054(0x0004)
	struct FVector                                     Location;                                                 // 0x0058(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0064(0x000C)
	class AActor*                                      BasedOn;                                                  // 0x0070(0x0004)
	class USkeletalMeshComponent*                      BasedOnMesh;                                              // 0x0074(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       BasedOnName;                                              // 0x0078(0x0008)
	unsigned long                                      bDebug : 1;                                               // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.BuffNativeObject");
		return ptr;
	}


	void MarkBuffPendingKill();
};


// Class UDKGame.DunDef3DNote
// 0x0004 (0x0220 - 0x021C)
class ADunDef3DNote : public AActor
{
public:
	class UTextComponent*                              TextComponent;                                            // 0x021C(0x0004) (Edit, Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef3DNote");
		return ptr;
	}

};


// Class UDKGame.DunDef_AnimNodeScaleRateBySpeed
// 0x0018 (0x0110 - 0x00F8)
class UDunDef_AnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                                // 0x00F8(0x0004) (Edit)
	float                                              BaseRate;                                                 // 0x00FC(0x0004) (Edit)
	float                                              MaxRate;                                                  // 0x0100(0x0004) (Edit)
	float                                              MinRate;                                                  // 0x0104(0x0004) (Edit)
	float                                              MinFlightRate;                                            // 0x0108(0x0004) (Edit)
	unsigned long                                      AllowFlightScaling : 1;                                   // 0x010C(0x0004) (Edit)
	unsigned long                                      NodeRelevant : 1;                                         // 0x010C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_AnimNodeScaleRateBySpeed");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqAct_EnemyWaveSpawner
// 0x00A0 (0x0198 - 0x00F8)
class UDunDef_SeqAct_EnemyWaveSpawner : public USeqAct_Latent
{
public:
	TArray<struct FEnemyWaveEntry>                     EnemyWaves;                                               // 0x00F8(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              SpawnPoints;                                              // 0x0104(0x000C) (Edit, NeedCtorLink)
	float                                              EnemyNumberMultiplier;                                    // 0x0110(0x0004) (Edit)
	float                                              WaveIntervalMultiplier;                                   // 0x0114(0x0004) (Edit)
	unsigned long                                      DeathsDecrementKillCount : 1;                             // 0x0118(0x0004) (Edit)
	unsigned long                                      IgnoreMaxEnemyLimit : 1;                                  // 0x0118(0x0004) (Edit)
	unsigned long                                      bRandomSpawnPoints : 1;                                   // 0x0118(0x0004) (Edit)
	unsigned long                                      MaxNumberOfSimultaneousEnemiesScaleByPlayerCount : 1;     // 0x0118(0x0004) (Edit)
	unsigned long                                      bSpawnForever : 1;                                        // 0x0118(0x0004) (Edit)
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                              // 0x0118(0x0004) (Edit)
	unsigned long                                      bNavigateToInitialCustomNode : 1;                         // 0x0118(0x0004) (Edit)
	unsigned long                                      bOverrideDifficultySetOffset : 1;                         // 0x0118(0x0004) (Edit)
	unsigned long                                      bEvenlySpaceWaveSpawns : 1;                               // 0x0118(0x0004) (Edit)
	unsigned long                                      bUseSpawnClumps : 1;                                      // 0x0118(0x0004) (Edit)
	unsigned long                                      bForceDontEvenlySpaceSpawns : 1;                          // 0x0118(0x0004) (Edit)
	unsigned long                                      UseMinSpawnClumpValue : 1;                                // 0x0118(0x0004) (Edit)
	unsigned long                                      bDisableSlowgreAcceleration : 1;                          // 0x0118(0x0004) (Edit)
	unsigned long                                      AllKilled : 1;                                            // 0x0118(0x0004) (Transient)
	unsigned long                                      AllSpawned : 1;                                           // 0x0118(0x0004) (Transient)
	unsigned long                                      IsActive : 1;                                             // 0x0118(0x0004) (Transient)
	TArray<struct FActorTargetingMultiplier>           ActorTargetingMultipliers;                                // 0x011C(0x000C) (Edit, NeedCtorLink)
	float                                              MaximumNumberOfSimultaneousEnemies;                       // 0x0128(0x0004) (Edit)
	TArray<float>                                      WaveIndexedMaximumNumberOfSimultaneousEnemies;            // 0x012C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      MaxNumberOfSimultaneousEnemiesScaleByPlayerAmounts;       // 0x0138(0x000C) (Edit, NeedCtorLink)
	float                                              TimeToRespawnAfterReachingMaximum;                        // 0x0144(0x0004) (Edit)
	float                                              DifficultySetOffsetOverrideValue;                         // 0x0148(0x0004) (Edit)
	int                                                NavigateToInitialCustomNodeID;                            // 0x014C(0x0004) (Edit)
	int                                                OverrideEnemyTargetingTeam;                               // 0x0150(0x0004) (Edit)
	int                                                SpawnClumpAbsoluteAmount;                                 // 0x0154(0x0004) (Edit)
	float                                              SpawnClumpRelativePercent;                                // 0x0158(0x0004) (Edit)
	int                                                TotalSpawnedInClump;                                      // 0x015C(0x0004) (Transient)
	int                                                SpawnClump;                                               // 0x0160(0x0004) (Transient)
	float                                              MaximumSpawnTimer;                                        // 0x0164(0x0004) (Transient)
	int                                                TotalNumEnemies;                                          // 0x0168(0x0004) (Transient)
	int                                                NumEnemiesKilled;                                         // 0x016C(0x0004) (Transient)
	float                                              WaveSpawnTimer;                                           // 0x0170(0x0004) (Transient)
	float                                              TriggeredPercentDeath;                                    // 0x0174(0x0004) (Transient)
	int                                                NumEnemiesSpawned;                                        // 0x0178(0x0004) (Transient)
	int                                                CurrentSpawnPointIndex;                                   // 0x017C(0x0004) (Transient)
	TArray<class AActor*>                              SpawnedEnemies;                                           // 0x0180(0x000C) (Transient, NeedCtorLink)
	int                                                KillCountSpawnInterval;                                   // 0x018C(0x0004) (Transient)
	int                                                KillCountRemainingAtLastSpawn;                            // 0x0190(0x0004) (Transient)
	int                                                ActualKillCountSpawnInterval;                             // 0x0194(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_EnemyWaveSpawner");
		return ptr;
	}


	void NotifyDied(class ADunDefEnemy* Enemy);
	unsigned long Update(float DeltaTime);
	void Tick(float DeltaTime);
	void NativeWaveUpdating(float DeltaTime, int masterWaveNum, int missionSwitch, int numDunDefPlayers);
	void Reset();
	void UpdateWave(int it, float DeltaTime);
	int GetNumEnemiesRemainingToKill();
	int GetNumEnemiesRemainingToSpawn();
	int GetMasterWaveNumber();
};


// Class UDKGame.DunDef_UIAction_PlayMovie
// 0x0018 (0x0104 - 0x00EC)
class UDunDef_UIAction_PlayMovie : public UUIAction
{
public:
	struct FString                                     MovieFile;                                                // 0x00EC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bDelayNextAvaiableActivation : 1;                         // 0x00F8(0x0004) (Edit)
	unsigned long                                      justEnabled : 1;                                          // 0x00F8(0x0004) (Transient)
	unsigned long                                      MovieActive : 1;                                          // 0x00F8(0x0004) (Transient)
	float                                              NextAvaiableActivationDelay;                              // 0x00FC(0x0004) (Edit)
	float                                              LastFinishedTime;                                         // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_PlayMovie");
		return ptr;
	}


	unsigned long Update(float DeltaTime);
};


// Class UDKGame.DunDefDamageType
// 0x004C (0x00D4 - 0x0088)
class UDunDefDamageType : public UDamageType
{
public:
	struct FString                                     FriendlyName;                                             // 0x0088(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AdjectiveName;                                            // 0x0094(0x000C) (Edit, Localized, NeedCtorLink)
	struct FLinearColor                                DamageColor;                                              // 0x00A0(0x0010) (Edit)
	class USoundCue*                                   HitTargetSound;                                           // 0x00B0(0x0004) (Edit)
	unsigned long                                      PlayHitTargetSound : 1;                                   // 0x00B4(0x0004) (Edit)
	unsigned long                                      IgnoreResistances : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      IsElementalDamage : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsPassive : 1;                                           // 0x00B4(0x0004) (Edit)
	unsigned long                                      bForceSpawnImpactEmitterActor : 1;                        // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIgnoreMomentumResistance : 1;                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bAllowClientSideDamage : 1;                               // 0x00B4(0x0004) (Edit)
	class USurface*                                    DamageTypeIcon;                                           // 0x00B8(0x0004) (Edit)
	class USurface*                                    WeaponDamageTypeIcon;                                     // 0x00BC(0x0004) (Edit)
	float                                              MinimumIntervalForDamageOfThisType;                       // 0x00C0(0x0004) (Edit)
	class AEmitter*                                    ElementalEffectOverride;                                  // 0x00C4(0x0004) (Edit)
	int                                                DamageNumbersRPCQueueLimit;                               // 0x00C8(0x0004) (Edit)
	TEnumAsByte<EElementTrait>                         ElementalTrait;                                           // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	int                                                DamageTypeArrayIndex;                                     // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType");
		return ptr;
	}


	TEnumAsByte<EElementTrait> STATIC_GetElementalTrait();
	unsigned long STATIC_IsPassiveDamageType(class UClass* tDamageType);
};


// Class UDKGame.DunDefHeroManagerNative
// 0x003D (0x0079 - 0x003C)
class UDunDefHeroManagerNative : public UObject
{
public:
	TArray<struct FProgressEntry>                      ProgressEntries;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCoreUnlockEntry>                    CoreUnlockEntries;                                        // 0x0048(0x000C) (Edit, NeedCtorLink)
	TArray<struct FAchievementSaveEntry>               AchievementEntries;                                       // 0x0054(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCrystalCoreEntry>                   CrystalCoreSettings;                                      // 0x0060(0x000C) (NeedCtorLink)
	TArray<struct FGameDamageEntry>                    GameDamageEntries;                                        // 0x006C(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EMultiplayerModes>                     CurrentMultiplayerMode;                                   // 0x0078(0x0001) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHeroManagerNative");
		return ptr;
	}


	TArray<struct FString> GetModMapNames(unsigned long bSubscribed);
	void ServerCheckForDuplicateDroppedEquipment(int EquipmentID1, int EquipmentID2);
	void CheckForDuplicateEquipment(int EquipmentID1, int EquipmentID2);
	class UHeroEquipmentNative* STATIC_GetEquipmentOfType(TArray<class UHeroEquipmentNative*> InEquipments, int InEquipmentType, unsigned long bFindSecondary);
	int GetDamageTypeIndex(class UClass* TheDamageType);
	void SetOnlineMode(TEnumAsByte<EMultiplayerModes> NewMode);
};


// Class UDKGame.HeroEquipmentNative
// 0x0164 (0x01A0 - 0x003C)
class UHeroEquipmentNative : public UObject
{
public:
	int                                                StatModifiers[0xB];                                       // 0x003C(0x0004) (Edit)
	struct FDamageReduction                            DamageReductions[0x4];                                    // 0x0068(0x0008) (Edit)
	int                                                WeaponDamageBonus;                                        // 0x0088(0x0004) (Edit)
	int                                                WeaponNumberOfProjectilesBonus;                           // 0x008C(0x0004) (Edit)
	int                                                WeaponSpeedOfProjectilesBonus;                            // 0x0090(0x0004) (Edit)
	class UClass*                                      WeaponAdditionalDamageType;                               // 0x0094(0x0004) (Edit)
	int                                                WeaponAdditionalDamageAmount;                             // 0x0098(0x0004) (Edit)
	float                                              WeaponDrawScaleMultiplier;                                // 0x009C(0x0004) (Edit)
	float                                              MaxRandomElementalDamageMultiplier;                       // 0x00A0(0x0004) (Edit)
	float                                              WeaponSwingSpeedMultiplier;                               // 0x00A4(0x0004) (Edit)
	unsigned long                                      WeaponReloadSpeedBonusUse : 1;                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      bIgnoreLevelRequirement : 1;                              // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponKnockbackBonusUse : 1;                              // 0x00A8(0x0004) (Edit)
	unsigned long                                      bCanBeUpgraded : 1;                                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      AllowRenamingAtMaxUpgrade : 1;                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      bForceUseParentTemplate : 1;                              // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponAltDamageBonusUse : 1;                              // 0x00A8(0x0004) (Edit)
	unsigned long                                      bDisableTheRandomization : 1;                             // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponBlockingBonusUse : 1;                               // 0x00A8(0x0004) (Edit)
	unsigned long                                      bDontCalculateLevelRequirement : 1;                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponClipAmmoBonusUse : 1;                               // 0x00A8(0x0004) (Edit)
	unsigned long                                      bDontUseLevelName : 1;                                    // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponChargeSpeedBonusUse : 1;                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      WeaponShotsPerSecondBonusUse : 1;                         // 0x00A8(0x0004) (Edit)
	unsigned long                                      UseWeaponCoreStats : 1;                                   // 0x00A8(0x0004) (Edit)
	unsigned long                                      bIsLocked : 1;                                            // 0x00A8(0x0004) (Transient)
	unsigned long                                      bWasAttached : 1;                                         // 0x00A8(0x0004) (Transient)
	unsigned long                                      bIsShopEquipment : 1;                                     // 0x00A8(0x0004) (Transient)
	unsigned long                                      bIsSecondary : 1;                                         // 0x00A8(0x0004) (Transient)
	unsigned long                                      bIsNameOnlineVerified : 1;                                // 0x00A8(0x0004)
	unsigned long                                      bIsForgerNameOnlineVerified : 1;                          // 0x00A8(0x0004)
	unsigned long                                      bWasAddedToDefenderStore : 1;                             // 0x00A8(0x0004) (Transient)
	int                                                WeaponReloadSpeedBonus;                                   // 0x00AC(0x0004) (Edit)
	int                                                WeaponKnockbackBonus;                                     // 0x00B0(0x0004) (Edit)
	int                                                WeaponAltDamageBonus;                                     // 0x00B4(0x0004) (Edit)
	int                                                WeaponBlockingBonus;                                      // 0x00B8(0x0004) (Edit)
	int                                                WeaponClipAmmoBonus;                                      // 0x00BC(0x0004) (Edit)
	int                                                AdditionalAllowedUpgradeResistancePoints;                 // 0x00C0(0x0004) (Edit)
	int                                                RequirementLevelOverride;                                 // 0x00C4(0x0004) (Edit)
	int                                                WeaponChargeSpeedBonus;                                   // 0x00C8(0x0004) (Edit)
	int                                                WeaponShotsPerSecondBonus;                                // 0x00CC(0x0004) (Edit)
	unsigned char                                      NameIndex_Base;                                           // 0x00D0(0x0001) (Edit)
	unsigned char                                      NameIndex_QualityDescriptor;                              // 0x00D1(0x0001) (Edit)
	unsigned char                                      NameIndex_DamageReduction;                                // 0x00D2(0x0001) (Edit)
	unsigned char                                      PrimaryColorSet;                                          // 0x00D3(0x0001) (Edit)
	unsigned char                                      SecondaryColorSet;                                        // 0x00D4(0x0001) (Edit)
	unsigned char                                      bCantBeDropped;                                           // 0x00D5(0x0001) (Edit)
	unsigned char                                      bCantBeSold;                                              // 0x00D6(0x0001) (Edit)
	unsigned char                                      bAutoLockInItemBox;                                       // 0x00D7(0x0001) (Edit)
	unsigned char                                      bDidOnetimeEffect;                                        // 0x00D8(0x0001) (Edit)
	unsigned char                                      ManualLR;                                                 // 0x00D9(0x0001) (Edit)
	TEnumAsByte<EEquipmentType>                        EquipmentType;                                            // 0x00DA(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00DB(0x0001) MISSED OFFSET
	TArray<struct FLinearColor>                        PrimaryColorSets;                                         // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FLinearColor>                        SecondaryColorSets;                                       // 0x00E8(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                PrimaryColorOverride;                                     // 0x00F4(0x0010) (Edit)
	struct FLinearColor                                SecondaryColorOverride;                                   // 0x0104(0x0010) (Edit)
	int                                                MaximumSellWorth;                                         // 0x0114(0x0004) (Edit)
	int                                                MinimumSellWorth;                                         // 0x0118(0x0004) (Edit)
	int                                                ShopMinimumSellWorth;                                     // 0x011C(0x0004) (Edit)
	int                                                MaxEquipmentLevel;                                        // 0x0120(0x0004) (Edit)
	struct FString                                     UserEquipmentName;                                        // 0x0124(0x000C) (Edit, NeedCtorLink)
	struct FString                                     EquipmentDescription;                                     // 0x0130(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                StatEquipmentIDs[0x3];                                    // 0x013C(0x0004) (Edit)
	int                                                StatEquipmentTiers[0x3];                                  // 0x0148(0x0004) (Edit)
	struct FLinearColor                                QualityBeamColorOverride;                                 // 0x0154(0x0010) (Edit)
	int                                                equipmentTemplateUniqueID;                                // 0x0164(0x0004) (Edit, Const, DuplicateTransient)
	struct FString                                     UserForgerName;                                           // 0x0168(0x000C) (NeedCtorLink)
	struct FVector                                     DroppedLocation;                                          // 0x0174(0x000C) (Transient)
	int                                                FolderID;                                                 // 0x0180(0x0004) (Transient)
	int                                                Level;                                                    // 0x0184(0x0004)
	int                                                StoredMana;                                               // 0x0188(0x0004)
	int                                                UserID;                                                   // 0x018C(0x0004)
	float                                              MyRatingPercent;                                          // 0x0190(0x0004)
	float                                              MyRating;                                                 // 0x0194(0x0004)
	int                                                EquipmentID1;                                             // 0x0198(0x0004)
	int                                                EquipmentID2;                                             // 0x019C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipmentNative");
		return ptr;
	}


	float AccelInterp(float Source, float Destination, float DeltaTime, float AccelRate, float InBrakingPercent, float InAirBrakingFriction, float InAirFriction, float InYawAccelSpeed, float* Velocity);
	float ContinousDistanceBetween(float Source, float Destination);
	float ContinousInterp(float Source, float Destination, float Alpha, unsigned long bIsConstant);
	struct FEquipmentSaveInfo GetSaveInfo();
	void STATIC_CovertEquipementsToSaveInfos(int InUserID, TArray<class UHeroEquipmentNative*> InEquipments, TArray<struct FEquipmentSaveInfo>* outInfos);
};


// Class UDKGame.DataListEntryInterface
// 0x0000 (0x003C - 0x003C)
class UDataListEntryInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DataListEntryInterface");
		return ptr;
	}


	unsigned long IsRootEntry();
	int GetFolderID();
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetDataString(int dataSetType);
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
};


// Class UDKGame.HeroEquipment
// 0x0854 (0x09F4 - 0x01A0)
class UHeroEquipment : public UHeroEquipmentNative
{
public:
	struct FString                                     EquipmentName;                                            // 0x01A0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FEG_StatRandomizer                          StatModifierRandomizers[0xB];                             // 0x01AC(0x0028) (Edit)
	unsigned long                                      bForceRandomDLCColor : 1;                                 // 0x0364(0x0004) (Edit)
	unsigned long                                      bUseShotsPerSecondRandomizerMult : 1;                     // 0x0364(0x0004) (Edit)
	unsigned long                                      bForceAllowDropping : 1;                                  // 0x0364(0x0004) (Edit)
	unsigned long                                      bForceAllowSelling : 1;                                   // 0x0364(0x0004) (Edit)
	unsigned long                                      bDoTranscendentLevelBoost : 1;                            // 0x0364(0x0004) (Edit)
	unsigned long                                      bUseLevelRequirementOverrides : 1;                        // 0x0364(0x0004) (Edit)
	unsigned long                                      bForceRandomizerWithMinEquipmentLevel : 1;                // 0x0364(0x0004) (Edit)
	unsigned long                                      bAllowSellingToExceedSoftManaCap : 1;                     // 0x0364(0x0004) (Edit)
	unsigned long                                      bCanBeEquipped : 1;                                       // 0x0364(0x0004) (Edit)
	unsigned long                                      bForceUseEquipmentDrawScale : 1;                          // 0x0364(0x0004) (Edit)
	unsigned long                                      bDistributeManaUponDroppedDestruction : 1;                // 0x0364(0x0004) (Edit)
	unsigned long                                      bAllowDroppedDestruction : 1;                             // 0x0364(0x0004) (Edit)
	unsigned long                                      bDontHideEquipmentAttachmentInFPV : 1;                    // 0x0364(0x0004) (Edit)
	unsigned long                                      bEncumberHero : 1;                                        // 0x0364(0x0004) (Edit)
	unsigned long                                      bIconUseEquipmentRating : 1;                              // 0x0364(0x0004) (Edit)
	unsigned long                                      bPlayerShopForceToMinimumSellWorth : 1;                   // 0x0364(0x0004) (Edit)
	unsigned long                                      bMaxEquipLevelUseAltCalc : 1;                             // 0x0364(0x0004) (Edit)
	unsigned long                                      bUseExtraQualityDamage : 1;                               // 0x0364(0x0004) (Edit)
	unsigned long                                      bUseSecondExtraQualityDamage : 1;                         // 0x0364(0x0004) (Edit)
	unsigned long                                      AllowNameRandomization : 1;                               // 0x0364(0x0004) (Edit)
	unsigned long                                      OnlyRandomizeBaseName : 1;                                // 0x0364(0x0004) (Edit)
	unsigned long                                      bNoNegativeRandomizations : 1;                            // 0x0364(0x0004) (Edit)
	unsigned long                                      WeaponAdditionalDamageTypeNotPoison : 1;                  // 0x0364(0x0004) (Edit)
	unsigned long                                      UsesEquipmentAttachments : 1;                             // 0x0364(0x0004) (Edit)
	unsigned long                                      UseColorSets : 1;                                         // 0x0364(0x0004) (Edit)
	unsigned long                                      RandomizeColorSets : 1;                                   // 0x0364(0x0004) (Edit)
	unsigned long                                      ForceQualityBeam : 1;                                     // 0x0364(0x0004) (Edit)
	unsigned long                                      bUsePreviewZOffsetting : 1;                               // 0x0364(0x0004) (Edit)
	unsigned long                                      bUseSelectionPreviewScale : 1;                            // 0x0364(0x0004) (Edit)
	unsigned long                                      bUsePawnWeaponDamageCallback : 1;                         // 0x0364(0x0004) (Edit)
	unsigned long                                      bUsePawnDamageCallback : 1;                               // 0x0364(0x0004) (Edit)
	unsigned long                                      bCantSave : 1;                                            // 0x0364(0x0004) (Edit)
	unsigned long                                      bCantPutInItemBox : 1;                                    // 0x0368(0x0004) (Edit)
	unsigned long                                      ProvideHealOnBlock : 1;                                   // 0x0368(0x0004) (Edit)
	unsigned long                                      bIsConsumable : 1;                                        // 0x0368(0x0004) (Edit)
	unsigned long                                      isStackable : 1;                                          // 0x0368(0x0004) (Edit)
	unsigned long                                      bSetRandomizerMultipliers : 1;                            // 0x0368(0x0004) (Transient)
	unsigned long                                      bPlayerShopPurchasePending : 1;                           // 0x0368(0x0004) (Transient)
	unsigned long                                      bEnchantmentsInitalized : 1;                              // 0x0368(0x0004) (Transient)
	unsigned long                                      bDontDisplayPetSize : 1;                                  // 0x0368(0x0004) (Edit)
	unsigned long                                      bCanModifyParticleColour : 1;                             // 0x0368(0x0004) (Edit)
	unsigned long                                      bUseHighDigitManaTokenValue : 1;                          // 0x0368(0x0004) (Edit)
	int                                                RandomizerStatModifierGoNegativeThreshold;                // 0x036C(0x0004) (Edit)
	int                                                MaxUpgradeableSpeedOfProjectilesBonus;                    // 0x0370(0x0004) (Edit)
	float                                              RandomizerStatModifierGoNegativeMultiplier;               // 0x0374(0x0004) (Edit)
	float                                              RandomizerStatModifierGoNegativeChance;                   // 0x0378(0x0004) (Edit)
	class ADunDefWeapon*                               EquipmentWeaponTemplate;                                  // 0x037C(0x0004) (Edit)
	float                                              RandomizerQualityMultiplier;                              // 0x0380(0x0004) (Edit)
	float                                              LevelRequirementRatingOffset;                             // 0x0384(0x0004) (Edit)
	float                                              MinElementalDamageIncreasePerLevel;                       // 0x0388(0x0004) (Edit)
	float                                              HighLevelRequirementsRatingThreshold;                     // 0x038C(0x0004) (Edit)
	float                                              MaximumSellWorthUpgradeDepreciationFactor;                // 0x0390(0x0004) (Edit)
	float                                              TranscendentLevelBoostAmount;                             // 0x0394(0x0004) (Edit)
	float                                              TranscendentLevelBoostRandomizerPower;                    // 0x0398(0x0004) (Edit)
	float                                              HighResaleWorthPower;                                     // 0x039C(0x0004) (Edit)
	float                                              SupremeLevelBoostAmount;                                  // 0x03A0(0x0004) (Edit)
	float                                              SupremeLevelBoostRandomizerPower;                         // 0x03A4(0x0004) (Edit)
	float                                              UltimateLevelBoostAmount;                                 // 0x03A8(0x0004) (Edit)
	float                                              UltimateLevelBoostRandomizerPower;                        // 0x03AC(0x0004) (Edit)
	TArray<struct FLevelRequirementOverride>           LevelRequirementOverrides;                                // 0x03B0(0x000C) (Edit, NeedCtorLink)
	struct FEG_StatRandomizer                          WeaponDamageBonusRandomizer;                              // 0x03BC(0x0028) (Edit)
	int                                                OneTime_ExpBonus;                                         // 0x03E4(0x0004) (Edit)
	int                                                HighLevelThreshold;                                       // 0x03E8(0x0004) (Edit)
	int                                                MaxHeroStatValue;                                         // 0x03EC(0x0004) (Edit)
	int                                                TranscendentMaxHeroStatValue;                             // 0x03F0(0x0004) (Edit)
	int                                                SupremeMaxHeroStatValue;                                  // 0x03F4(0x0004) (Edit)
	int                                                MinTranscendentLevel;                                     // 0x03F8(0x0004) (Edit)
	int                                                MinSupremeLevel;                                          // 0x03FC(0x0004) (Edit)
	int                                                UltimateMaxHeroStatValue;                                 // 0x0400(0x0004) (Edit)
	int                                                UltimatePlusMaxHeroStatValue;                             // 0x0404(0x0004) (Edit)
	int                                                MinUltimateLevel;                                         // 0x0408(0x0004) (Edit)
	TArray<struct FString>                             DescriptionStringOriginalReplacements;                    // 0x040C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             DescriptionStringNewReplacements;                         // 0x0418(0x000C) (Edit, NeedCtorLink)
	struct FEG_StatRandomizer                          WeaponAltDamageBonusRandomizer;                           // 0x0424(0x0028) (Edit)
	struct FEG_StatRandomizer                          DamageReductionRandomizers[0x4];                          // 0x044C(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponClipAmmoBonusRandomizer;                            // 0x04EC(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponReloadSpeedBonusRandomizer;                         // 0x0514(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponKnockbackBonusRandomizer;                           // 0x053C(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponChargeSpeedBonusRandomizer;                         // 0x0564(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponBlockingBonusRandomizer;                            // 0x058C(0x0028) (Edit)
	struct FEG_StatRandomizer                          MaxEquipmentLevelRandomizer;                              // 0x05B4(0x0028) (Edit)
	float                                              SellWorthLinearFactor;                                    // 0x05DC(0x0004) (Edit)
	float                                              SellWorthExponentialFactor;                               // 0x05E0(0x0004) (Edit)
	float                                              SellWorthMin;                                             // 0x05E4(0x0004) (Edit)
	float                                              SellWorthMax;                                             // 0x05E8(0x0004) (Edit)
	float                                              SellRatingExponent;                                       // 0x05EC(0x0004) (Edit)
	float                                              SellWorthEquipmentRatingBase;                             // 0x05F0(0x0004) (Edit)
	float                                              ElementalDamageMultiplier;                                // 0x05F4(0x0004) (Edit)
	float                                              ShopSellWorthLinearFactor;                                // 0x05F8(0x0004) (Edit)
	float                                              ShopSellWorthExponentialFactor;                           // 0x05FC(0x0004) (Edit)
	float                                              ShopSellWorthMin;                                         // 0x0600(0x0004) (Edit)
	float                                              ShopSellWorthMax;                                         // 0x0604(0x0004) (Edit)
	float                                              ShopSellRatingExponent;                                   // 0x0608(0x0004) (Edit)
	float                                              ShopSellWorthEquipmentRatingBase;                         // 0x060C(0x0004) (Edit)
	float                                              ShopSellWorthWeaponMultiplier;                            // 0x0610(0x0004) (Edit)
	float                                              ShopSellWorthWeaponExponentialFactorMult;                 // 0x0614(0x0004) (Edit)
	float                                              AltDamageRandomizerMult;                                  // 0x0618(0x0004) (Edit)
	float                                              MaxShopSellWorth;                                         // 0x061C(0x0004) (Edit)
	float                                              ShopSellWorthMinWeaponMultiplier;                         // 0x0620(0x0004) (Edit)
	float                                              ShopSellWorthMaxWeaponMultiplier;                         // 0x0624(0x0004) (Edit)
	float                                              ShopSellWorthRatingWeaponMultiplier;                      // 0x0628(0x0004) (Edit)
	float                                              ManaCostPerLevelMaxQualityMultiplierAdditional;           // 0x062C(0x0004) (Edit)
	float                                              HighLevelManaCostPerLevelMaxQualityMultiplierAdditional;  // 0x0630(0x0004) (Edit)
	float                                              ManaCostPerLevelExponentialFactorAdditional;              // 0x0634(0x0004) (Edit)
	float                                              HighLevelManaCostPerLevelExponentialFactorAdditional;     // 0x0638(0x0004) (Edit)
	float                                              WeaponDrawScaleRandomizerExtraMultiplier;                 // 0x063C(0x0004) (Edit)
	TArray<int>                                        EquipLevelRequirements;                                   // 0x0640(0x000C) (Edit, NeedCtorLink)
	int                                                ExtraQualityUpgradeDamageNumberDescriptor;                // 0x064C(0x0004) (Edit)
	int                                                SecondExtraQualityUpgradeDamageNumberDescriptor;          // 0x0650(0x0004) (Edit)
	float                                              ElementalDamageIncreasePerLevelMultiplier;                // 0x0654(0x0004) (Edit)
	float                                              DamageIncreasePerLevelMultiplier;                         // 0x0658(0x0004) (Edit)
	float                                              UltimateDamageIncreasePerLevelMultiplier;                 // 0x065C(0x0004) (Edit)
	float                                              ExtraQualityDamageIncreasePerLevelMultiplier;             // 0x0660(0x0004) (Edit)
	float                                              SecondExtraQualityDamageIncreasePerLevelMultiplier;       // 0x0664(0x0004) (Edit)
	float                                              MaxElementalDamageIncreasePerLevel;                       // 0x0668(0x0004) (Edit)
	float                                              MaxDamageIncreasePerLevel;                                // 0x066C(0x0004) (Edit)
	float                                              UltimateMaxDamageIncreasePerLevel;                        // 0x0670(0x0004) (Edit)
	float                                              ExtraQualityMaxDamageIncreasePerLevel;                    // 0x0674(0x0004) (Edit)
	float                                              SecondExtraQualityMaxDamageIncreasePerLevel;              // 0x0678(0x0004) (Edit)
	float                                              SelectionPreviewScaleMultiplier;                          // 0x067C(0x0004) (Edit)
	float                                              AltDamageIncreasePerLevelMultiplier;                      // 0x0680(0x0004) (Edit)
	float                                              AltMaxDamageIncreasePerLevel;                             // 0x0684(0x0004) (Edit)
	float                                              PrimaryColorOverrideMultiplier;                           // 0x0688(0x0004) (Edit)
	float                                              SecondaryColorOverrideMultiplier;                         // 0x068C(0x0004) (Edit)
	float                                              GlobalSelectionPreviewScaleMultiplier;                    // 0x0690(0x0004) (Edit)
	float                                              ShopSellWorthMaxExponentAbsolute;                         // 0x0694(0x0004) (Edit)
	float                                              EquipmentRatingPercentBase;                               // 0x0698(0x0004) (Edit)
	float                                              WeaponEquipmentRatingPercentBase;                         // 0x069C(0x0004) (Edit)
	TArray<float>                                      QualityShopCostMultipliers;                               // 0x06A0(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      QualityShopCostCaps;                                      // 0x06AC(0x000C) (Edit, NeedCtorLink)
	int                                                WeaponKnockbackMax;                                       // 0x06B8(0x0004) (Edit)
	int                                                MaxNonTranscendentStatRollValue;                          // 0x06BC(0x0004) (Edit)
	int                                                MinDamageBonus;                                           // 0x06C0(0x0004) (Edit)
	int                                                MinEquipmentLevels;                                       // 0x06C4(0x0004) (Edit)
	int                                                LevelRequirementOffset;                                   // 0x06C8(0x0004) (Edit)
	struct FEG_StatRandomizer                          WeaponShotsPerSecondBonusRandomizer;                      // 0x06CC(0x0028) (Edit)
	int                                                WeaponNumberOfProjectilesQualityBaseline;                 // 0x06F4(0x0004) (Edit)
	int                                                DamageReductionUpgradeInterval;                           // 0x06F8(0x0004) (Edit)
	struct FEG_StatRandomizer                          WeaponNumberOfProjectilesBonusRandomizer;                 // 0x06FC(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponSpeedOfProjectilesBonusRandomizer;                  // 0x0724(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponAdditionalDamageAmountRandomizer;                   // 0x074C(0x0028) (Edit)
	struct FEG_StatRandomizer                          WeaponDrawScaleMultiplierRandomizer;                      // 0x0774(0x0028) (Edit)
	TArray<class ADunDefDroppedEquipment*>             DroppedEquipmentTemplates;                                // 0x079C(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EWeaponType>                           weaponType;                                               // 0x07A8(0x0001) (Edit)
	unsigned char                                      EquipmentSetID;                                           // 0x07A9(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x07AA(0x0002) MISSED OFFSET
	TArray<TEnumAsByte<EAccessoryType>>                AccessoryRequirements;                                    // 0x07AC(0x000C) (Edit, NeedCtorLink)
	float                                              ManaCostPerLevelLinearFactor;                             // 0x07B8(0x0004) (Edit)
	float                                              IconColorMultPrimary;                                     // 0x07BC(0x0004) (Edit)
	float                                              IconColorMultSecondary;                                   // 0x07C0(0x0004) (Edit)
	float                                              ManaCostPerLevelExponentialFactor;                        // 0x07C4(0x0004) (Edit)
	float                                              ManaCostPerLevelMinQualityMultiplier;                     // 0x07C8(0x0004) (Edit)
	float                                              ManaCostPerLevelMaxQualityMultiplier;                     // 0x07CC(0x0004) (Edit)
	float                                              RespawnTimeMultiplier;                                    // 0x07D0(0x0004) (Edit)
	float                                              TotalRandomizerMultiplier;                                // 0x07D4(0x0004) (Edit)
	TArray<struct FEquipmentAttachmentInfo>            EquipmentAttachmentInfos;                                 // 0x07D8(0x000C) (Edit, Component, NeedCtorLink)
	struct FString                                     LevelString;                                              // 0x07E4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ForgedByDescription;                                      // 0x07F0(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              Ultimate93Chance;                                         // 0x07FC(0x0004) (Edit)
	float                                              UltimatePlusChance;                                       // 0x0800(0x0004) (Edit)
	float                                              UltimatePlusPlusChance;                                   // 0x0804(0x0004) (Edit)
	float                                              RuthlessUltimate93Chance;                                 // 0x0808(0x0004) (Edit)
	float                                              RuthlessUltimatePlusChance;                               // 0x080C(0x0004) (Edit)
	float                                              RuthlessUltimatePlusPlusChance;                           // 0x0810(0x0004) (Edit)
	float                                              PrimaryColorSetIntensity;                                 // 0x0814(0x0004) (Edit)
	float                                              PrimaryColorSetPow;                                       // 0x0818(0x0004) (Edit)
	float                                              SecondaryColorSetIntensity;                               // 0x081C(0x0004) (Edit)
	float                                              SecondaryColorSetPow;                                     // 0x0820(0x0004) (Edit)
	float                                              WeaponDrawScaleGlobalMultiplier;                          // 0x0824(0x0004) (Edit)
	float                                              IconScaleMultiplier;                                      // 0x0828(0x0004) (Edit)
	float                                              FullEquipmentSetStatMultiplier;                           // 0x082C(0x0004) (Edit)
	float                                              MythicalFullEquipmentSetStatMultiplier;                   // 0x0830(0x0004) (Edit)
	float                                              TranscendentFullEquipmentSetStatMultiplier;               // 0x0834(0x0004) (Edit)
	float                                              SupremeFullEquipmentSetStatMultiplier;                    // 0x0838(0x0004) (Edit)
	float                                              UltimateFullEquipmentSetStatMultiplier;                   // 0x083C(0x0004) (Edit)
	float                                              WeaponDamageDisplayValueScale;                            // 0x0840(0x0004) (Edit)
	float                                              RatingPercentForLevelUpCostExponent;                      // 0x0844(0x0004) (Edit)
	float                                              WeaponDamageBonusRandomizerMultiplier;                    // 0x0848(0x0004) (Edit)
	float                                              AdditionalWeaponDamageBonusRandomizerMultiplier;          // 0x084C(0x0004) (Edit)
	float                                              SellWorthMultiplierLevelBase;                             // 0x0850(0x0004) (Edit)
	float                                              SellWorthMultiplierLevelMin;                              // 0x0854(0x0004) (Edit)
	float                                              SellWorthMultiplierLevelMax;                              // 0x0858(0x0004) (Edit)
	struct FLinearColor                                ExtraEquipmentColorMultiplier;                            // 0x085C(0x0010) (Edit)
	struct FName                                       ExtraEquipmentColorMultiplierMaterialParamName;           // 0x086C(0x0008) (Edit)
	float                                              PreviewMinOffsetScale;                                    // 0x0874(0x0004) (Edit)
	float                                              PreviewMinOffsetZ;                                        // 0x0878(0x0004) (Edit)
	float                                              PreviewMaxOffsetScale;                                    // 0x087C(0x0004) (Edit)
	float                                              PreviewMaxOffsetZ;                                        // 0x0880(0x0004) (Edit)
	class UMaterialInstanceConstant*                   EquipmentIconMat;                                         // 0x0884(0x0004) (Edit)
	struct FString                                     AdditionalDescription;                                    // 0x0888(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DamageDescription;                                        // 0x0894(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<struct FString>                             EquipmentStatNames;                                       // 0x08A0(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<struct FString>                             EquipmentStatDescriptions;                                // 0x08AC(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<class USurface*>                            EquipmentStatIcons;                                       // 0x08B8(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                IconColorAddPrimary;                                      // 0x08C4(0x0010) (Edit)
	struct FLinearColor                                IconColorAddSecondary;                                    // 0x08D4(0x0010) (Edit)
	struct FString                                     BaseForgerName;                                           // 0x08E4(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ComparisonSimilarRatingAllowance;                         // 0x08F0(0x0004) (Edit)
	float                                              ComparisonRatingExponent;                                 // 0x08F4(0x0004) (Edit)
	float                                              PlayerSpeedMultiplier;                                    // 0x08F8(0x0004) (Edit)
	float                                              PlayerGravityMultiplier;                                  // 0x08FC(0x0004) (Edit)
	struct FColor                                      GivenEquipmentMessageColor;                               // 0x0900(0x0004) (Edit)
	struct FString                                     GivenEquipmentMessageString;                              // 0x0904(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     RequiredLevelString;                                      // 0x0910(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     RequiredClassString;                                      // 0x091C(0x000C) (Edit, Localized, NeedCtorLink)
	class USoundCue*                                   EquipSound;                                               // 0x0928(0x0004) (Edit)
	struct FVector                                     PreviewTranslationOffset;                                 // 0x092C(0x000C) (Edit)
	float                                              ProtonChargeBlastDamageMultiplier;                        // 0x0938(0x0004) (Edit)
	float                                              HealingPerBlock;                                          // 0x093C(0x0004) (Edit)
	struct FString                                     BackupUserForgerName;                                     // 0x0940(0x000C) (Transient, NeedCtorLink)
	struct FString                                     BackupUserEquipmentName;                                  // 0x094C(0x000C) (Transient, NeedCtorLink)
	float                                              MyNonUpgradeLevelRating;                                  // 0x0958(0x0004) (Transient)
	int                                                PlayerShopSellAmount;                                     // 0x095C(0x0004) (Transient)
	struct FHighDigitInt                               PlayerShopSellAmountHDI;                                  // 0x0960(0x0010) (Transient)
	float                                              DebugPreTranscendentEquipmentRating;                      // 0x0970(0x0004) (Transient)
	TArray<struct FEG_StatMatchingString>              RandomBaseNames;                                          // 0x0974(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEG_StatMatchingString>              DamageReductionNames;                                     // 0x0980(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEG_StatMatchingString>              QualityDescriptorNames;                                   // 0x098C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEG_StatMatchingString>              QualityDescriptorRealNames;                               // 0x0998(0x000C) (Edit, NeedCtorLink)
	float                                              MinWeaponScale;                                           // 0x09A4(0x0004) (Edit)
	float                                              WeaponDamageMultiplier;                                   // 0x09A8(0x0004) (Edit)
	float                                              WeaponAltDamageMultiplier;                                // 0x09AC(0x0004) (Edit)
	class ACosmeticSetBonus*                           CosmeticSet;                                              // 0x09B0(0x0004) (Edit)
	TArray<struct FLevelRange>                         MaxLevelRangeDifficultyArray;                             // 0x09B4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentComparison>                compareSets;                                              // 0x09C0(0x000C) (Transient, NeedCtorLink)
	class UDunDefHero*                                 EquipmentHero;                                            // 0x09CC(0x0004) (Transient)
	TArray<class UStatObject_Equipment*>               DefaultEnchantments;                                      // 0x09D0(0x000C) (Edit, NeedCtorLink)
	TArray<class UStatObject_Equipment*>               StatObjectArray;                                          // 0x09DC(0x000C) (NeedCtorLink)
	struct FString                                     CustomEffectText;                                         // 0x09E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment");
		return ptr;
	}


	void setStackSize(int stackSize);
	int getStackSize();
	class UStatObject_Equipment* GenerateStatObject(class UStatObject_Equipment* StatObjectTemplate);
	void LoadEnchantments(class ADunDefPlayer* tPlayer, unsigned long bisDropped, class AActor* DroppedActor);
	void ClearEnchantments();
	unsigned long RemoveEnchantment(int SlotIndex);
	unsigned long AddEnchantment(int SlotIndex, int BuffID, int BuffTier);
	void STATIC_LoadComparisonBiases(TArray<struct FString>* statMultipliersForComparison);
	unsigned long GetEquipmentOverrideStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, int* OverridenValue, int* doesEquipmentModify);
	struct FHighDigitInt GetManaTokenHDIValue();
	unsigned long AllowDroppedDestruction();
	unsigned long CanBeDropped();
	struct FString GetDescription();
	void SwappedShop(unsigned long swappedToShop);
	void RemoveFromDefenderStore();
	void SoldFromPlayerShop(class ADunDefPlayerController* buyerPC);
	void AddToDefenderStore(unsigned long IsFromPlayerShop);
	struct FString GetURLString(unsigned long IsFromPlayerShop, unsigned long bAppending);
	int GetPlayerShopSellAmount();
	class ATradeManager* UsedInTradeManager();
	void CopyRandomizersFromTemplate(class UHeroEquipment* aTemplate);
	float GetIconDrawScale();
	float GetEquipmentDrawScale();
	unsigned long AllowStoringInItemBox();
	unsigned long AllowSaving();
	float GetRespawnTimeMultiplier();
	unsigned long AllowSelling();
	struct FString GetDenialReasonString(int denialreason);
	struct FString GetClassRequirementString();
	struct FString GetLevelRequirementString();
	int GetLevelRequirement();
	void SetLocked(unsigned long bSetLocked);
	unsigned long IsNameFullyVerified();
	void LocalCustomForgerNameVerified();
	void LocalCustomNameVerified();
	struct FString GetCustomCreatorName();
	struct FString GetCustomName();
	unsigned long DoesCustomNameNeedVerification();
	void ShutDown(unsigned long isDestruction);
	struct FString GetGivenEquipmentMessage();
	float GetWorldSeconds();
	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	unsigned long IsAuthority();
	void NotifyEquipment_WeaponDidDamage(class ADunDefPlayer* fromPlayer, const TScriptInterface<class UDunDefTargetableInterface>& aTarget, int Damage, const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType);
	void NotifyEquipment_PawnDied();
	void NotifyEquipment_PawnJumped();
	void NotifyEquipment_PawnAttacked(int FireMode);
	void NotifyEquipment_PawnTookDamage(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	class UActorComponent* GetEquipmentAttachedComponent(int equipmentAttachmentIndex, unsigned long bForceLookup);
	void ExecHeroEvent(const struct FName& EventName, const struct FName& nameParam1, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1);
	class ADunDefPlayer* GetPlayerPawn(unsigned long bForceLookup);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	float GetFullEquipmentSetMultiplier(unsigned long bValueLessThenZero);
	unsigned long HasFullEquipmentSet();
	unsigned long MatchesEquipmentIDNumbers(int anEquipmentID1, int anEquipmentID2);
	unsigned long MatchesEquipmentIDNetInfo(struct FEquipmentNetInfo* netInfo);
	unsigned long MatchesEquipmentID(class UHeroEquipment* OtherEquipment);
	void CloseAnyEquipmentInfoGUI();
	unsigned long IsInAnyEquipmentInfoGUI(class ULocalPlayer** PlayerOwnerOfGUI);
	int CompareDamageResistance(class UHeroEquipment* OtherEquipment, class UClass* damageResistanceType, int* otherEquipmentValue);
	int CompareHeroStat(class UHeroEquipment* OtherEquipment, TEnumAsByte<ELevelUpValueType> statType, int* otherEquipmentValue);
	int CompareEquipmentStat(class UHeroEquipment* OtherEquipment, TEnumAsByte<EEquipmentStatType> statType, int* otherEquipmentValue);
	int GetNumStatsForRows();
	struct FString GetForgerName(unsigned char* IsCustomForger);
	unsigned long GetNonZeroResistanceStatAtIndex(int StatIndex, class UClass** FoundStatType);
	unsigned long GetNonZeroHeroStatAtIndex(int StatIndex, TEnumAsByte<ELevelUpValueType>* FoundStatType);
	unsigned long GetNonZeroEquipmentStatAtIndex(int StatIndex, TEnumAsByte<EEquipmentStatType>* FoundStatType);
	void SetResistanceStatValue(int resistanceIndex, int Value);
	void SetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, int Value);
	struct FString GetEquipmentStatString(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long includeStatLevelUp, int* signType);
	float GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp);
	struct FString GetEquipmentStatName(TEnumAsByte<EEquipmentStatType> equipmentStatType);
	class USurface* GetEquipmentStatIcon(TEnumAsByte<EEquipmentStatType> equipmentStatType);
	struct FString GetEquipmentStatDescription(TEnumAsByte<EEquipmentStatType> equipmentStatType);
	class USurface* GetEquipmentIcon();
	unsigned long UsesColorOverrides();
	unsigned long UsesColorSets();
	void ReattachEquipment(unsigned long bIgnoreAttachFX);
	void LogEquipStats();
	void RefreshedValues();
	void ReceivedPlayerActor(class ADunDefPlayer* Player);
	void RemovedFromHero();
	void AddAttachments(class ADunDefPlayer* Player);
	void RemoveAttachments();
	void LocalFirstTimeEquipped(class UDunDefHero* ownerHero, class ADunDefPlayerReplicationInfo* OwnerPRI, class ADunDefPlayer* OwnerPlayer);
	void AddedToHero();
	void SetOwnerNoSee(class ADunDefPlayer* aPlayer, unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon);
	void RemoveEquipmentAttachment(class USkeletalMeshComponent* thePlayerMesh, class AActor* AttachToActor);
	void AddEquipmentAttachment(class USkeletalMeshComponent* thePlayerMesh, unsigned long attachWeapon, class AActor* AttachToActor, unsigned long bForce, unsigned long bIgnoreAttachFX);
	void AttachedComponent(class UPrimitiveComponent* aComp);
	void CheckNameVerification();
	void ApplyAltDamageMultiplierDisplay(int* Value);
	int GetAltDamageIncreaseDisplay(int Value);
	void ApplyElementalDamageMultiplierDisplay(int* Value);
	int GetElementalDamageIncreaseDisplay(int Value);
	int GetBaseDamage();
	int GetShiftClickUpgradeCount();
	void ApplyPrimaryDamageMultiplierDisplay(int* StatValue);
	int GetPrimaryDamageIncreaseDisplay(int Value);
	int GetStatLevelUpAmountIterations(TEnumAsByte<EEquipmentStatType> EQS, int Value, int statSubIndex);
	unsigned long CheckStatLevelUpIterations(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, int EquipmentLevelToCheck, float Value);
	unsigned long ApplyLevelUp(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, const struct FString& setUserEquipmentName, const struct FString& setUserForgerName, unsigned long refresh);
	int GetNextStatLevelUpValue(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long SetAsValue);
	int GetDamageResistanceStatIndex(class UClass* tDamageType);
	unsigned long AllowStatLevelUp(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement);
	int GetMaxHeroStatValue();
	unsigned long NextLevelIsMaximumLevel();
	unsigned long AtMaximumLevel();
	unsigned long AllowManaInvestment(unsigned long bJustForce);
	unsigned long CanLevelUp(unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement);
	unsigned long InvestMana(class ADunDefPlayerController* PC, int AmountDesired, unsigned long bJustForce);
	float GetManaPercentageOfLevelUp();
	int GetRemainingManaForLevelUp();
	struct FHighDigitInt GetShopWorth();
	int GetEquipmentWorth(unsigned long bForceResaleWorth);
	int GetManaRequirementForLevelUp();
	int GetAltWeaponDamage();
	int GetWeaponDamage();
	unsigned long UseEquipmentDrawScale();
	unsigned long IsWeapon();
	int GetHowManyDamageReductionTypes();
	struct FEquipmentColorSet GetEquipmentColorSet(unsigned long bIsIcon);
	float GetEquipmentRatingPercent(unsigned long bForceCalculation);
	int GetComparisonIndex(class UHeroEquipment* OtherEquipment);
	float GetRemovalRating();
	float GetArmourRating();
	float GetEquipmentRating(unsigned long bForceCalculation, unsigned long bIgnorePotentialUpgradeLevels, unsigned long forceUseCompareArmour);
	struct FString GetEquipmentName();
	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	void DetermineUltQuality();
	unsigned char GetNameIndex_QualityDescriptor();
	int GetMaxEquipmentLevel();
	void SanitiseRandomizers();
	void GenerateUniqueID();
	int GetIndexOfRandomStatName(const struct FString& stringName, TArray<struct FEG_StatMatchingString>* StatStringArray);
	void ResetStatsToTemplate();
	float GenerateRandomizerValue(float equipmentQuality, struct FEG_StatRandomizer* randomizer);
	void HandleConsumables(class UHeroEquipment* consumable);
	unsigned long AcceptConsumables();
	class ADunDefWeapon* GetEquipmentWeaponTemplate();
	int GetStatValueAndSign(TEnumAsByte<ELevelUpValueType> valueType, unsigned long includeStatLevelUp, int* signType);
	int GetDamageResistanceAndSign(class UClass* DamageType, unsigned long includeStatLevelUp, int* signType);
	int GetDamageResistance(class UClass* DamageType, unsigned long includeStatLevelUp);
	void SetHeroStatValue(TEnumAsByte<ELevelUpValueType> valueType, int Value);
	int GetStatValue(TEnumAsByte<ELevelUpValueType> valueType, unsigned long includeStatLevelUp, unsigned long bIncludeFullSetMultiplier);
	class UHeroEquipment* STATIC_CreateEquipmentFromNetInfo(class UDunDefHero* ownerHero, class UObject* AltOwnerObject, class UObject* fromDroppedEquipment, struct FEquipmentNetInfo* netInfo);
	struct FEquipmentNetInfo STATIC_ConvertSaveInfoToNetInfo(struct FEquipmentSaveInfo* saveInfo);
	void InitFromNetInfo(const struct FEquipmentNetInfo& Info, class UObject* fromDroppedEquipment);
	struct FEquipmentNetInfo GetNetInfo(unsigned long UseSelfAsTemplate, unsigned long bForceNotOnHero);
	struct FString GetFullEquipmentName();
	unsigned long IsRootEntry();
	int GetFolderID();
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetDataString(int dataSetType);
};


// Class UDKGame.NativeDunDefHero
// 0x0000 (0x003C - 0x003C)
class UNativeDunDefHero : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefHero");
		return ptr;
	}


	void RemoveEquipment(class UHeroEquipmentNative* equipmentNative, unsigned long DoNotDrop);
};


// Class UDKGame._DataTypes
// 0x0018 (0x0054 - 0x003C)
class U_DataTypes : public UObject
{
public:
	struct FScriptDelegate                             __ItemSortComparer__Delegate;                             // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PetSizeSortComparer__Delegate;                          // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame._DataTypes");
		return ptr;
	}


	unsigned long STATIC_SizeCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_LevelCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_NameCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_ManaCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_RatingCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_QualityCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	unsigned long STATIC_TypeCompare(class UHeroEquipment* A, class UHeroEquipment* B);
	int STATIC_TypeScoreHeroEquipment(class UHeroEquipment* A);
	void STATIC_Merge(int Low, int Mid, int High, const struct FScriptDelegate& comparer, TArray<class UHeroEquipment*>* arr);
	void STATIC_MergeSortPets(int Low, int High, const struct FScriptDelegate& comparer, TArray<class UHeroEquipment*>* arr);
	void STATIC_MergeSortItems(int Low, int High, const struct FScriptDelegate& comparer, TArray<class UHeroEquipment*>* arr);
	unsigned long STATIC_PetSizeSortComparer(class UHeroEquipment_Familiar* A, class UHeroEquipment_Familiar* B);
	unsigned long STATIC_ItemSortComparer(class UHeroEquipment* A, class UHeroEquipment* B);
	struct FHQArray STATIC_InitializeHQArray(TArray<class UHeroEquipment*> A);
	struct FString STATIC_GraphicsQualtyToString(unsigned char aGraphicsQualitybyte);
	unsigned char STATIC_GraphicsQualtyToByte(const struct FString& aGraphicsQualityString);
	struct FString STATIC_SortingFilterToString(unsigned char aSortingFilterByte);
	unsigned char STATIC_SortingFilterToByte(const struct FString& aSortingFilterString);
};


// Class UDKGame.DunDefHero
// 0x0580 (0x05BC - 0x003C)
class UDunDefHero : public UNativeDunDefHero
{
public:
	int                                                HeroAttachmentScaleType;                                  // 0x003C(0x0004) (Edit)
	TArray<struct FString>                             DefaultHeroNames;                                         // 0x0040(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bLockedInDemo : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bAltFireAutoTarget : 1;                                   // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsMeleeHero : 1;                                         // 0x004C(0x0004) (Edit)
	unsigned long                                      bDisplayClassNameWhenLocked : 1;                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bDisplayClassDescriptionWhenLocked : 1;                   // 0x004C(0x0004) (Edit)
	unsigned long                                      bDisplayRandomHeroNameWhenLocked : 1;                     // 0x004C(0x0004) (Edit)
	unsigned long                                      bPlaySelectionAnims : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bHiddenWhenLocked : 1;                                    // 0x004C(0x0004) (Edit)
	unsigned long                                      bHiddenInDemo : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bGetActiveEquipmentWeaponInHand : 1;                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsPurchasable : 1;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bIncludeInActiveTemplatesList : 1;                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseLargeDescription : 1;                                 // 0x004C(0x0004) (Edit)
	unsigned long                                      bOverridePreviewAnimSet : 1;                              // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsLocalLoadedHero : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bIsNameOnlineVerified : 1;                                // 0x004C(0x0004)
	unsigned long                                      bIsNameOnlineRejected : 1;                                // 0x004C(0x0004)
	unsigned long                                      bHasCompleteArmorSet : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bWantsSecondaryWeaponForComparison : 1;                   // 0x004C(0x0004) (Edit)
	unsigned long                                      bAlwaysForceMainHandWeap : 1;                             // 0x004C(0x0004) (Edit)
	int                                                SkillIndex;                                               // 0x0050(0x0004) (Edit)
	float                                              HighLevelExpBonusPercent;                                 // 0x0054(0x0004) (Edit)
	float                                              ExpBonusPercent;                                          // 0x0058(0x0004) (Edit)
	float                                              MouseChaseCameraOffsetY;                                  // 0x005C(0x0004) (Edit)
	unsigned char                                      StatLevelRequirementOverrides[0xB];                       // 0x0060(0x0001) (Edit)
	unsigned char                                      UniqueTemplateHeroID;                                     // 0x006B(0x0001) (Edit, Const)
	TEnumAsByte<EHeroType>                             MyHeroType;                                               // 0x006C(0x0001) (Edit)
	unsigned char                                      bDidRespec;                                               // 0x006D(0x0001)
	unsigned char                                      bGaveExpBonus;                                            // 0x006E(0x0001)
	unsigned char                                      bAllowRename;                                             // 0x006F(0x0001)
	unsigned char                                      SubstituteNameIndex;                                      // 0x0070(0x0001)
	TEnumAsByte<EWeaponType>                           HeroWeaponType;                                           // 0x0071(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	struct FString                                     String_ApplyRespec;                                       // 0x0074(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_NoPointsToRespec;                                  // 0x0080(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_NoLevelForExpBonus;                                // 0x008C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_ApplyRename;                                       // 0x0098(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_AlreadyGaveExpBonus;                               // 0x00A4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_BoughtRespec;                                      // 0x00B0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_BoughtRename;                                      // 0x00BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_BoughtXPBonus;                                     // 0x00C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     String_AtMaxLevel;                                        // 0x00D4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     GivenCostumeString;                                       // 0x00E0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     GiveHeroString;                                           // 0x00EC(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                CostOfRespec;                                             // 0x00F8(0x0004) (Edit)
	int                                                CostOfRename;                                             // 0x00FC(0x0004) (Edit)
	int                                                CostOfExpBonus;                                           // 0x0100(0x0004) (Edit)
	class USoundCue*                                   BoughtServiceSound;                                       // 0x0104(0x0004) (Edit)
	class USoundCue*                                   RemovedHeroSelectionSound;                                // 0x0108(0x0004) (Edit)
	struct FColor                                      BoughtServiceColor;                                       // 0x010C(0x0004) (Edit)
	struct FColor                                      GivenCostumeColor;                                        // 0x0110(0x0004) (Edit)
	int                                                CurrentCostumeIndex;                                      // 0x0114(0x0004) (Edit)
	int                                                HeroUnlockID;                                             // 0x0118(0x0004) (Edit)
	class UAnimSet*                                    OverridePreviewAnimSet;                                   // 0x011C(0x0004) (Edit)
	float                                              StatMultInitial_HeroSpeed;                                // 0x0120(0x0004) (Edit)
	float                                              StatMultFull_HeroSpeed;                                   // 0x0124(0x0004) (Edit)
	float                                              StatMultInitial_HeroAbilityOne;                           // 0x0128(0x0004) (Edit)
	float                                              StatExpInitial_HeroAbilityOne;                            // 0x012C(0x0004) (Edit)
	float                                              StatMultFull_HeroAbilityOne;                              // 0x0130(0x0004) (Edit)
	float                                              StatExptFull_HeroAbilityOne;                              // 0x0134(0x0004) (Edit)
	float                                              StatMultInitial_HeroAbilityTwo;                           // 0x0138(0x0004) (Edit)
	float                                              StatExpInitial_HeroAbilityTwo;                            // 0x013C(0x0004) (Edit)
	float                                              StatMultFull_HeroAbilityTwo;                              // 0x0140(0x0004) (Edit)
	float                                              StatExptFull_HeroAbilityTwo;                              // 0x0144(0x0004) (Edit)
	float                                              StatMultInitial_DefenseHealth;                            // 0x0148(0x0004) (Edit)
	float                                              StatExpInitial_DefenseHealth;                             // 0x014C(0x0004) (Edit)
	float                                              StatMultFull_DefenseHealth;                               // 0x0150(0x0004) (Edit)
	float                                              StatExptFull_DefenseHealth;                               // 0x0154(0x0004) (Edit)
	float                                              StatMultInitial_DefenseDamage;                            // 0x0158(0x0004) (Edit)
	float                                              StatExpInitial_DefenseDamage;                             // 0x015C(0x0004) (Edit)
	float                                              StatMultFull_DefenseDamage;                               // 0x0160(0x0004) (Edit)
	float                                              StatExptFull_DefenseDamage;                               // 0x0164(0x0004) (Edit)
	float                                              StatMultInitial_DefenseAttackRate;                        // 0x0168(0x0004) (Edit)
	float                                              StatExpInitial_DefenseAttackRate;                         // 0x016C(0x0004) (Edit)
	float                                              StatMultInitial_DefenseAOE;                               // 0x0170(0x0004) (Edit)
	float                                              StatExpInitial_DefenseAOE;                                // 0x0174(0x0004) (Edit)
	float                                              StatMultFull_DefenseAOE;                                  // 0x0178(0x0004) (Edit)
	float                                              StatExptFull_DefenseAOE;                                  // 0x017C(0x0004) (Edit)
	float                                              StatMultInitial_HeroSpeed_Competitive;                    // 0x0180(0x0004) (Edit)
	float                                              StatMultFull_HeroSpeed_Competitive;                       // 0x0184(0x0004) (Edit)
	float                                              StatMultInitial_HeroAbilityOne_Competitive;               // 0x0188(0x0004) (Edit)
	float                                              StatExpInitial_HeroAbilityOne_Competitive;                // 0x018C(0x0004) (Edit)
	float                                              StatMultFull_HeroAbilityOne_Competitive;                  // 0x0190(0x0004) (Edit)
	float                                              StatExptFull_HeroAbilityOne_Competitive;                  // 0x0194(0x0004) (Edit)
	float                                              StatMultInitial_HeroAbilityTwo_Competitive;               // 0x0198(0x0004) (Edit)
	float                                              StatExpInitial_HeroAbilityTwo_Competitive;                // 0x019C(0x0004) (Edit)
	float                                              StatMultFull_HeroAbilityTwo_Competitive;                  // 0x01A0(0x0004) (Edit)
	float                                              StatExptFull_HeroAbilityTwo_Competitive;                  // 0x01A4(0x0004) (Edit)
	float                                              StatMultInitial_DefenseHealth_Competitive;                // 0x01A8(0x0004) (Edit)
	float                                              StatExpInitial_DefenseHealth_Competitive;                 // 0x01AC(0x0004) (Edit)
	float                                              StatMultFull_DefenseHealth_Competitive;                   // 0x01B0(0x0004) (Edit)
	float                                              StatExptFull_DefenseHealth_Competitive;                   // 0x01B4(0x0004) (Edit)
	float                                              StatMultInitial_DefenseDamage_Competitive;                // 0x01B8(0x0004) (Edit)
	float                                              StatExpInitial_DefenseDamage_Competitive;                 // 0x01BC(0x0004) (Edit)
	float                                              StatMultFull_DefenseDamage_Competitive;                   // 0x01C0(0x0004) (Edit)
	float                                              StatExptFull_DefenseDamage_Competitive;                   // 0x01C4(0x0004) (Edit)
	float                                              StatMultInitial_DefenseAttackRate_Competitive;            // 0x01C8(0x0004) (Edit)
	float                                              StatExpInitial_DefenseAttackRate_Competitive;             // 0x01CC(0x0004) (Edit)
	float                                              StatMultInitial_DefenseAOE_Competitive;                   // 0x01D0(0x0004) (Edit)
	float                                              StatExpInitial_DefenseAOE_Competitive;                    // 0x01D4(0x0004) (Edit)
	float                                              StatMultFull_DefenseAOE_Competitive;                      // 0x01D8(0x0004) (Edit)
	float                                              StatExptFull_DefenseAOE_Competitive;                      // 0x01DC(0x0004) (Edit)
	struct FString                                     PurchaseURLSteam;                                         // 0x01E0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PurchaseURLGeneral;                                       // 0x01EC(0x000C) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EAccessoryType>>                AccessoryTypes;                                           // 0x01F8(0x000C) (Edit, NeedCtorLink)
	class ADunDefPlayerReplicationInfo*                OwnerPRI;                                                 // 0x0204(0x0004) (Transient)
	TArray<struct FHotKey>                             HotKeys;                                                  // 0x0208(0x000C) (Edit, NeedCtorLink)
	TArray<struct FHeroCostumeTemplate>                HeroCostumes;                                             // 0x0214(0x000C) (Edit, NeedCtorLink)
	struct FString                                     StatNames[0xB];                                           // 0x0220(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StatDescriptions[0xB];                                    // 0x02A4(0x000C) (Edit, Localized, NeedCtorLink)
	class USurface*                                    StatIcons[0xB];                                           // 0x0328(0x0004) (Edit, Const)
	class USurface*                                    EquipmentStatIcons[0xB];                                  // 0x0354(0x0004) (Edit, Const)
	class ADunDefPlayer*                               PlayerTemplate;                                           // 0x0380(0x0004) (Edit)
	class UActionWheel*                                ActionWheelTemplate;                                      // 0x0384(0x0004) (Edit)
	class ADunDefPlayerAbility*                        WeaponAbilityTemplate;                                    // 0x0388(0x0004) (Edit)
	TArray<class ADunDefPlayerAbility*>                PlayerAbilityTemplates;                                   // 0x038C(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefPlayerAbility*>                AdditionalAbilityTemplates;                               // 0x0398(0x000C) (Edit, NeedCtorLink)
	TArray<class UActionWheelEntry*>                   AdditionalActionWheelEntries;                             // 0x03A4(0x000C) (Edit, NeedCtorLink)
	class ADunDefPlayer*                               PlayerTemplate_Competitive;                               // 0x03B0(0x0004) (Edit)
	class UActionWheel*                                ActionWheelTemplate_Competitive;                          // 0x03B4(0x0004) (Edit)
	class ADunDefPlayerAbility*                        WeaponAbilityTemplate_Competitive;                        // 0x03B8(0x0004) (Edit)
	TArray<class ADunDefPlayerAbility*>                PlayerAbilityTemplates_Competitive;                       // 0x03BC(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefPlayerAbility*>                AdditionalAbilityTemplates_Competitive;                   // 0x03C8(0x000C) (Edit, NeedCtorLink)
	TArray<class UActionWheelEntry*>                   AdditionalActionWheelEntries_Competitive;                 // 0x03D4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     HeroClassDisplayName;                                     // 0x03E0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     HeroClassDescription;                                     // 0x03EC(0x000C) (Edit, Localized, NeedCtorLink)
	class ADunDefWeapon*                               HeroDefaultWeaponTemplate;                                // 0x03F8(0x0004) (Edit)
	class UUI_HeroInfo*                                HeroInfoUITemplate;                                       // 0x03FC(0x0004) (Edit)
	struct FLinearColor                                ClassNameColor;                                           // 0x0400(0x0010) (Edit)
	class UMaterialInstanceConstant*                   HeroIconMaterial;                                         // 0x0410(0x0004) (Edit)
	class UMaterialInterface*                          ColorableMiniMapIconMat;                                  // 0x0414(0x0004) (Edit)
	class USurface*                                    TalkingFrame;                                             // 0x0418(0x0004) (Edit)
	class USurface*                                    TalkingIcon;                                              // 0x041C(0x0004) (Edit)
	float                                              HeroTalkingSize;                                          // 0x0420(0x0004) (Edit)
	float                                              TalkingFrameSize;                                         // 0x0424(0x0004) (Edit)
	float                                              TalkingIconSize;                                          // 0x0428(0x0004) (Edit)
	float                                              TalkingIconOffsetX;                                       // 0x042C(0x0004) (Edit)
	float                                              TalkingIconOffsetY;                                       // 0x0430(0x0004) (Edit)
	float                                              TalkingNameTextSize;                                      // 0x0434(0x0004) (Edit)
	float                                              TalkingNameTextOffsetX;                                   // 0x0438(0x0004) (Edit)
	float                                              TalkingNameTextOffsetY;                                   // 0x043C(0x0004) (Edit)
	float                                              TalkingYOffset;                                           // 0x0440(0x0004) (Edit)
	float                                              TalkingYPadding;                                          // 0x0444(0x0004) (Edit)
	float                                              TalkingXPadding;                                          // 0x0448(0x0004) (Edit)
	float                                              TalkingScale;                                             // 0x044C(0x0004) (Edit)
	class UFont*                                       TalkingNameTextFont;                                      // 0x0450(0x0004) (Edit)
	class UTexture2D*                                  TinyIcon;                                                 // 0x0454(0x0004) (Edit, Const)
	struct FString                                     TinyIconPath;                                             // 0x0458(0x000C) (Transient, NeedCtorLink)
	TArray<TEnumAsByte<EHeroType>>                     MyHeroTypes;                                              // 0x0464(0x000C) (Edit, NeedCtorLink)
	float                                              StatBoostCapInitial_HeroDamage;                           // 0x0470(0x0004) (Edit)
	float                                              StatExpFull_HeroDamage;                                   // 0x0474(0x0004) (Edit)
	float                                              StatExpInitial_HeroDamage;                                // 0x0478(0x0004) (Edit)
	float                                              StatMultInitial_HeroDamage;                               // 0x047C(0x0004) (Edit)
	float                                              StatMultFull_HeroDamage;                                  // 0x0480(0x0004) (Edit)
	float                                              HeroDefenseAttackRateLinearFactor;                        // 0x0484(0x0004) (Edit)
	float                                              HeroDefenseAttackRateExponentialFactor;                   // 0x0488(0x0004) (Edit)
	float                                              HeroHealthExponentialFactor;                              // 0x048C(0x0004) (Edit)
	float                                              HeroHealthLinearFactor;                                   // 0x0490(0x0004) (Edit)
	float                                              HeroHealthExponentialFactor_Competitive;                  // 0x0494(0x0004) (Edit)
	float                                              HeroHealthLinearFactor_Competitive;                       // 0x0498(0x0004) (Edit)
	float                                              MaximumDamageResistance;                                  // 0x049C(0x0004) (Edit)
	float                                              StatBoostCapInitial_HeroDamage_Competitive;               // 0x04A0(0x0004) (Edit)
	float                                              StatExpFull_HeroDamage_Competitive;                       // 0x04A4(0x0004) (Edit)
	float                                              StatExpInitial_HeroDamage_Competitive;                    // 0x04A8(0x0004) (Edit)
	float                                              StatMultInitial_HeroDamage_Competitive;                   // 0x04AC(0x0004) (Edit)
	float                                              StatMultFull_HeroDamage_Competitive;                      // 0x04B0(0x0004) (Edit)
	float                                              HeroDefenseAttackRateLinearFactor_Competitive;            // 0x04B4(0x0004) (Edit)
	float                                              HeroDefenseAttackRateExponentialFactor_Competitive;       // 0x04B8(0x0004) (Edit)
	int                                                GameplayInstanceID;                                       // 0x04BC(0x0004)
	int                                                HeroHealthModifier;                                       // 0x04C0(0x0004)
	int                                                HeroSpeedModifier;                                        // 0x04C4(0x0004)
	int                                                HeroDamageModifier;                                       // 0x04C8(0x0004)
	int                                                HeroCastingModifier;                                      // 0x04CC(0x0004)
	int                                                HeroAbilityOneModifier;                                   // 0x04D0(0x0004)
	int                                                HeroAbilityTwoModifier;                                   // 0x04D4(0x0004)
	int                                                HeroDefenseHealthModifier;                                // 0x04D8(0x0004)
	int                                                HeroDefenseAttackRateModifier;                            // 0x04DC(0x0004)
	int                                                HeroDefenseDamageModifier;                                // 0x04E0(0x0004)
	int                                                HeroDefenseAreaOfEffectModifier;                          // 0x04E4(0x0004)
	int                                                HeroLevel;                                                // 0x04E8(0x0004)
	int                                                HeroLevelCap;                                             // 0x04EC(0x0004) (Edit)
	int                                                HeroLevelCapDemo;                                         // 0x04F0(0x0004) (Edit)
	int                                                HeroExperience;                                           // 0x04F4(0x0004)
	int                                                ManaPower;                                                // 0x04F8(0x0004)
	int                                                LastPawnHealth;                                           // 0x04FC(0x0004)
	class UMaterialInstanceConstant*                   MyHeroIconMatInst;                                        // 0x0500(0x0004) (Transient)
	class UMaterialInstanceConstant*                   MyTalkingHeroIconMatInst;                                 // 0x0504(0x0004) (Transient)
	class UMaterialInstanceConstant*                   MyTalkingIconMatInst;                                     // 0x0508(0x0004) (Transient)
	class UMaterialInstanceConstant*                   ColorableMiniMapIconMatInst;                              // 0x050C(0x0004) (Transient)
	int                                                GUID1;                                                    // 0x0510(0x0004)
	int                                                GUID2;                                                    // 0x0514(0x0004)
	int                                                GUID3;                                                    // 0x0518(0x0004)
	int                                                GUID4;                                                    // 0x051C(0x0004)
	struct FString                                     HeroName;                                                 // 0x0520(0x000C) (NeedCtorLink)
	TArray<struct FHeroColorTemplate>                  colorTemplates;                                           // 0x052C(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                color1;                                                   // 0x0538(0x0010) (Transient)
	struct FLinearColor                                color2;                                                   // 0x0548(0x0010) (Transient)
	struct FLinearColor                                color3;                                                   // 0x0558(0x0010) (Transient)
	class UPlayer*                                     ActivePlayer;                                             // 0x0568(0x0004) (Transient)
	TArray<class UHeroEquipment*>                      HeroEquipments;                                           // 0x056C(0x000C) (NeedCtorLink)
	TArray<class ADunDefTower*>                        HeroTowers;                                               // 0x0578(0x000C) (NeedCtorLink)
	class UHeroEquipment*                              HeroWeaponEquipment;                                      // 0x0584(0x0004)
	TArray<TEnumAsByte<EWeaponType>>                   HeroWeaponTypes;                                          // 0x0588(0x000C) (Edit, NeedCtorLink)
	class UDunDefHero*                                 BasedOnHeroTemplate;                                      // 0x0594(0x0004) (Edit)
	int                                                UserID;                                                   // 0x0598(0x0004)
	struct FColor                                      DeadTalkerColor;                                          // 0x059C(0x0004)
	struct FString                                     TowerHeroInfoString;                                      // 0x05A0(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<TEnumAsByte<EEquipmentType>>                AllowedDualEquipmentTypes;                                // 0x05AC(0x000C) (Edit, NeedCtorLink)
	class ACosmeticSetBonus*                           activeCosmeticSet;                                        // 0x05B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHero");
		return ptr;
	}


	void UpdateBuffValues();
	TArray<class ADunDefTower*> GetHeroTowerArchetypes();
	void OnTowerDestroyed(class ADunDefTower* Tower);
	void OnTowerCreated(class ADunDefTower* Tower);
	unsigned long CheckHeroForCosmeticSet(class ACosmeticSetBonus* theBonus);
	void SetCosmeticSetBonus(class ACosmeticSetBonus* theBonus);
	void CheckForCosmeticSet();
	unsigned long GetEquipmentOverrideStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, int* OverridenValue, int* doesEquipmentModify);
	void DetachAllEquipments();
	void AttachAllEquipments();
	void ReattachAllEquipments();
	void SetOwnerNoSee(class ADunDefPlayer* aPlayer, unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon);
	struct FString GetTowerHeroInfoLabelString();
	unsigned long AllowForSelection(class ULocalPlayer* ForPlayer);
	struct FString GetGivenHeroMessage();
	struct FString GetGivenCostumeMessage(int costumeIndex);
	unsigned long IsHeroUnlocked(class ULocalPlayer* ForPlayer, int* lockedByDemo);
	unsigned long IsCostumeUnlocked(class ULocalPlayer* ForPlayer, int costumeIndex);
	int GetNextUnlockedCostumeIndex(class ULocalPlayer* ForPlayer, int CurrentIndex);
	int GetNumberOfUnlockedCostumes(class ULocalPlayer* ForPlayer);
	class USoundCue* GetRemovedHeroSelectionSound(int CostumeIndexOverride);
	class UAnimSet* GetCharacterAnimSet(int CostumeIndexOverride);
	class ADunDefPlayer* GetPlayerTemplate(int CostumeIndexOverride, unsigned long bForceNoCompetitive);
	class UMaterialInterface* GetHeroIconMaterial(int CostumeIndexOverride);
	class UMaterialInterface* GetColorableMiniMapIconMat(int CostumeIndexOverride);
	class USkeletalMesh* GetCharacterMesh(int CostumeIndexOverride);
	unsigned long AtMaxExperience();
	void CleanUpActionWheel();
	void ResetForNewMap();
	float GetRespawnTimeMultiplier();
	void TransferAllAccessoriesToItemBox();
	void TransferAllArmorToItemBox();
	void TransferAllEquipmentToItemBox();
	void ResetNameVerification();
	int GetCostOfRespec();
	int GetCostOfExpBonus();
	int GetCostOfRename();
	void SetName(const struct FString& NewName);
	unsigned long AllowRenameHero(int bankedMana, struct FString* resultString);
	unsigned long AllowExpBonus(int bankedMana, struct FString* resultString);
	unsigned long AllowRespec(int bankedMana, struct FString* resultString);
	unsigned long DoRename();
	unsigned long DoExpBonus();
	unsigned long DoRespec(unsigned long bDontChargeOrSave);
	class ADunDefPlayerController* GetPC();
	struct FString GetSafeHeroName();
	struct FString GetLeaderboardName();
	struct FString GetSubstituteHeroName();
	void LocalCustomNameRejected();
	void LocalCustomNameVerified();
	struct FString GetCustomName();
	unsigned long DoesCustomNameNeedVerification();
	unsigned long IsAuthority();
	void NotifyHero_WeaponDidDamage(class ADunDefPlayer* fromPlayer, const TScriptInterface<class UDunDefTargetableInterface>& aTarget, int Damage, const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType);
	void NotifyHero_AnimNotifyEquipmentAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void NotifyHero_PawnDied();
	void NotifyHero_PawnJumped();
	void NotifyHero_PawnAttacked(int FireMode);
	void NotifyHero_PawnTookDamage(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void MultiCastHeroEvent(const struct FName& EventName, class UHeroEquipment* forEquipment, const struct FName& nameParam1, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1);
	void ExecHeroEvent(int equpmentIndex, const struct FName& EventName, const struct FName& nameParam1, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1);
	int GetManaPower();
	int GetEquipmentComparisonIndex(class UHeroEquipment* anotherEquipment);
	void DrawTalker(class UCanvas* C, int Count, float Scale, float talkerOpacity);
	unsigned long MeetsHeroLevelRequirement(TEnumAsByte<ELevelUpValueType> statType);
	class ADunDefPlayerAbility* GetPlayerAbilityForStat(TEnumAsByte<ELevelUpValueType> statType);
	struct FString GetPlayerName(unsigned long withHeroName, unsigned long heroNameTwoLines);
	struct FString GetHeroNameWithLevel();
	struct FsHeroGUID GetGUID();
	unsigned long MatchesNetGUID(struct FHeroNetInfo* netInfo);
	unsigned long MatchesGUID(int newGUID1, int newGUID2, int newGUID3, int newGUID4);
	class ADunDefPlayer* GetPlayerPawn(unsigned long bForceLookup);
	class ADunDefPlayerReplicationInfo* GetOwningPRI();
	class UPlayer* GetActivePlayer();
	unsigned long IsLocalLoadedHero();
	unsigned long IsMyGameplayHero(class ADunDefPlayerController* forPlayerController);
	unsigned long IsMyHero(class ADunDefPlayerController* forPlayerController);
	void CheckPointAllocations();
	int GetStatPointsFromLevelUps(int NumLevelUps, int overrideHeroLevel);
	unsigned long AllowPickupWeaponType(TEnumAsByte<EWeaponType> weaponType);
	unsigned long AllowEquipmentPickup(class UHeroEquipment* Equipment, int* reasonForDenial);
	class UHeroEquipment* GetHeroOffHandWeaponEquipment();
	class UHeroEquipment* GetHeroWeaponEquipment();
	class ADunDefWeapon* GetHeroWeaponTemplate(class UHeroEquipment** equipmentRef);
	int GetTotalDamageResistance(class UClass* DamageType, int* AnyNegativeResistances);
	void AdjustDamage(class ADunDefPlayer* ForPlayer, class UClass* DamageType, int* inDamage, struct FVector* Momentum);
	unsigned long IsCarryingHeroWeapon();
	class UHeroEquipment* GetActiveEquipmentOfType(int EquipmentType, unsigned long bFindSecondary, unsigned long bCheckForComparison);
	class UHeroEquipment* GetEquipmentOfType(int EquipmentType, unsigned long bFindSecondary, unsigned long bCheckForComparison);
	void ForceRemoveEquipmentByIndex(int Index);
	void RemoveEquipmentByIndex(int Index, unsigned long DoNotDrop);
	int GetEquipmentIndex(class UHeroEquipment* Equipment);
	void RemoveEquipment(class UHeroEquipmentNative* equipmentNative, unsigned long DoNotDrop);
	void AddEquipment(class UHeroEquipment* Equipment, unsigned long TransferFromItemBox, int atIndex);
	unsigned long ShouldDropMainHandWeapon();
	float GetStatModifier(class UObject* forActor, TEnumAsByte<ELevelUpValueType> levelUpValue);
	float GetPlayerGravityMultiplier();
	float GetPlayerSpeedMultiplier();
	int GetTotalEquipmentStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, int* doesEquipmentModify);
	int GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> statType);
	unsigned long CanLevelUpStat(TEnumAsByte<ELevelUpValueType> levelUpValue, int NumAdditionalPoints);
	void SetStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, int NewValue, unsigned long addValue);
	int GetStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long onlyBaseHeroValue, unsigned long onlyEquipmentValue, int* doesEquipmentModify);
	struct FHeroColorTemplate GetRandomColors();
	void SetColorTemplate(struct FHeroColorTemplate* colorTemp);
	void SetRandomColors();
	void SetColors(const struct FLinearColor& C1, const struct FLinearColor& c2, const struct FLinearColor& C3);
	struct FString GetStatDescription(TEnumAsByte<ELevelUpValueType> levelUpValue);
	class USurface* GetStatIcon(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bIsForEquipment);
	struct FString GetStatName(TEnumAsByte<ELevelUpValueType> levelUpValue);
	float GetTimeToLevelUp();
	int GetManaRequiredForPreviousLevelUp();
	int GetManaRequiredForLevelUp();
	int GetMaxManaPower();
	float GetExperiencePercent();
	int GetExpRequiredForPreviousLevel();
	int GetExpRequiredForNextLevel(int levelTest);
	int GetNumLevelUpsAvailable();
	void DoLevelUp(int NumLevelsToAdd, unsigned long dontSaveHero);
	unsigned long HeroLevelUp();
	unsigned long ReachedLevelCap();
	int GetLevelCap();
	unsigned long CanHeroLevelUp(int levelTest);
	void AddExperience(int experience);
	void UpdateHeroIconMat();
	void InitFromSaveInfo(const struct FHeroSaveInfo& Info);
	struct FHeroSaveInfo GetSaveInfo();
	void GenerateGUID();
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void ReceivedPlayerActor(class ADunDefPlayer* Player);
	void Updated();
	unsigned long CalcToTheLimit();
	unsigned long CalcHasCompleteArmorSet();
	void ShutDown(unsigned long isDestruction);
	void NetApplyUpdatedHeroStats(const struct FHeroNetInfo& Info);
	void InitFromNetInfo(const struct FHeroNetInfo& Info);
	struct FHeroNetInfo GetNetInfo();
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
	unsigned long IsRootEntry();
	int GetFolderID();
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetDataString(int dataSetType);
	class UDunDefHero* GetCurrentHeroTemplate();
};


// Class UDKGame.DunDefHeroManager
// 0x062B (0x06A4 - 0x0079)
class UDunDefHeroManager : public UDunDefHeroManagerNative
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	unsigned long                                      bSentSteamStatsAfterRanked : 1;                           // 0x007C(0x0004)
	unsigned long                                      bDataListReturnDLCMissionsOnly : 1;                       // 0x007C(0x0004) (Transient)
	unsigned long                                      bDataListReturnModMissionsOnly : 1;                       // 0x007C(0x0004) (Transient)
	unsigned long                                      bDataListReturnLostMissionsOnly : 1;                      // 0x007C(0x0004) (Transient)
	unsigned long                                      ShowFloatingDamageNumbers : 1;                            // 0x007C(0x0004) (Edit)
	unsigned long                                      bConsoleCommandHack : 1;                                  // 0x007C(0x0004) (Transient)
	unsigned long                                      bIsAFKShopSearch : 1;                                     // 0x007C(0x0004) (Transient)
	unsigned long                                      ShowTutorials : 1;                                        // 0x007C(0x0004)
	unsigned long                                      bNightmareUnlocked : 1;                                   // 0x007C(0x0004)
	unsigned long                                      AutoCreateSomeHeroes : 1;                                 // 0x007C(0x0004)
	unsigned long                                      bRankedRemoteConnectionActive : 1;                        // 0x007C(0x0004) (Transient)
	unsigned long                                      MainMenuGoDirectlyToMultiplayerBrowser : 1;               // 0x007C(0x0004) (Transient)
	unsigned long                                      bDataListReturnExpansionAsRegularCampaign : 1;            // 0x007C(0x0004) (Transient)
	unsigned long                                      bDataListReturnModMissionsAsRegularMissions : 1;          // 0x007C(0x0004) (Transient)
	unsigned long                                      Initialized : 1;                                          // 0x007C(0x0004)
	unsigned long                                      bShowDamageFlashing : 1;                                  // 0x007C(0x0004)
	unsigned long                                      corruptData : 1;                                          // 0x007C(0x0004)
	unsigned long                                      reallyCorruptData : 1;                                    // 0x007C(0x0004)
	unsigned long                                      ShowTitleScreen : 1;                                      // 0x007C(0x0004)
	unsigned long                                      bDisplayedSaveNotification : 1;                           // 0x007C(0x0004)
	unsigned long                                      DoSaveLoad : 1;                                           // 0x007C(0x0004)
	unsigned long                                      UnlockAllLevels : 1;                                      // 0x007C(0x0004)
	unsigned long                                      UnlockUnchained : 1;                                      // 0x007C(0x0004)
	unsigned long                                      UnlockInclusive : 1;                                      // 0x007C(0x0004)
	unsigned long                                      bCheatsEnabled : 1;                                       // 0x007C(0x0004) (Transient)
	unsigned long                                      bDevMode : 1;                                             // 0x007C(0x0004) (Transient)
	TArray<struct FMissionCompletionEquipmentDropEntry> MissionCompletionEquipmentDropEntries;                    // 0x0080(0x000C) (Edit, NeedCtorLink)
	TArray<class UHeroEquipment*>                      LocalPlayerShopEntries;                                   // 0x008C(0x000C) (NeedCtorLink)
	TArray<struct FItemFolder>                         ItemFolders;                                              // 0x0098(0x000C) (Transient, NeedCtorLink)
	TArray<struct FItemFolder>                         LocalShopItemFolders;                                     // 0x00A4(0x000C) (Transient, NeedCtorLink)
	class UDunDefGameSettings*                         CurrentGameSettings;                                      // 0x00B0(0x0004) (Edit, EditInline)
	struct FString                                     DifficultyNames[0x6];                                     // 0x00B4(0x000C) (Localized, NeedCtorLink)
	struct FColor                                      DifficultyColors[0x6];                                    // 0x00FC(0x0004) (Edit)
	TArray<struct FOptionsEntry>                       OptionsSettings;                                          // 0x0114(0x000C) (NeedCtorLink)
	float                                              EquipmentQualityMultiplierCheat;                          // 0x0120(0x0004)
	TArray<struct FCampaignLevelEntry>                 CampaignLevelEntries;                                     // 0x0124(0x000C) (Edit, NeedCtorLink)
	TArray<class UCampaignLevelEntryObject*>           CampaignLevelEntryObjects;                                // 0x0130(0x000C) (NeedCtorLink)
	TArray<class UDunDefHero*>                         HeroTemplates;                                            // 0x013C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DefaultStatNames[0xB];                                    // 0x0148(0x000C) (Edit, Localized, NeedCtorLink)
	class ADunDefDroppedEquipment*                     DroppedEquipmentTemplates[0x6];                           // 0x01CC(0x0004) (Edit)
	TArray<struct FEquipmentDropEntry>                 EquipmentDropEntries;                                     // 0x01E4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 OverrideEquipmentDropEntries;                             // 0x01F0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 ArmourDropEntries;                                        // 0x01FC(0x000C) (Edit, NeedCtorLink)
	TArray<class UHeroEquipment*>                      AdditionalEquipmentReferences;                            // 0x0208(0x000C) (Edit, NeedCtorLink)
	TArray<class UObject*>                             ExtraReferences;                                          // 0x0214(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalEquipmentEntries;                               // 0x0220(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             RandomDeathStrings;                                       // 0x022C(0x000C) (Edit, Localized, NeedCtorLink)
	class UParticleSystem*                             LockedCoreVFX;                                            // 0x0238(0x0004) (Edit)
	TArray<struct FCrystalCoreData>                    CrystalCores;                                             // 0x023C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStatsSaveEntry>                     StatsEntries;                                             // 0x0248(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   RankedConnectingSound;                                    // 0x0254(0x0004) (Edit)
	TArray<struct FString>                             ProTips;                                                  // 0x0258(0x000C) (Edit, Localized, NeedCtorLink)
	TEnumAsByte<EEquipmentType>                        ShopEquipmentTypes[0x3];                                  // 0x0264(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0267(0x0001) MISSED OFFSET
	float                                              ShopItemQualityMutliplier;                                // 0x0268(0x0004) (Edit)
	float                                              ShopItemQualityAddition;                                  // 0x026C(0x0004) (Edit)
	float                                              ShopRarityMultiplier;                                     // 0x0270(0x0004) (Edit)
	float                                              ShopRarityAddition;                                       // 0x0274(0x0004) (Edit)
	TArray<class UObject*>                             AdditionalReferences;                                     // 0x0278(0x000C) (Edit, NeedCtorLink)
	TArray<class UTexture2D*>                          MultiplayerModeImages;                                    // 0x0284(0x000C) (Edit, NeedCtorLink)
	class UHeroEquipment*                              TokenEquipmentArchetype;                                  // 0x0290(0x0004) (Edit)
	TArray<int>                                        GameLogicIntArray;                                        // 0x0294(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AvailableProTips;                                         // 0x02A0(0x000C) (NeedCtorLink)
	class UDunDefAchievementManager*                   TheAchievementManager;                                    // 0x02AC(0x0004) (Edit, EditInline)
	class UDunDefPostProcessManager*                   ThePostProcessManager;                                    // 0x02B0(0x0004) (Edit, EditInline)
	struct FString                                     YesString;                                                // 0x02B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NoString;                                                 // 0x02C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LoadingRankedHeroesTitle;                                 // 0x02CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LoadingRankedHeroesDescription;                           // 0x02D8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FailedLoadingRankedHeroesTitle;                           // 0x02E4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FailedLoadingRankedHeroesDescription;                     // 0x02F0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LoginAuthenticationError;                                 // 0x02FC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     CustomMissionString;                                      // 0x0308(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LoginBannedError;                                         // 0x0314(0x000C) (Localized, NeedCtorLink)
	TArray<int>                                        ShownTutorialSets;                                        // 0x0320(0x000C) (NeedCtorLink)
	struct FString                                     MapTagOverride;                                           // 0x032C(0x000C) (NeedCtorLink)
	struct FString                                     NightmareDLCURL;                                          // 0x0338(0x000C) (NeedCtorLink)
	TArray<TScriptInterface<class UDataListEntryInterface>> LocalLoadedHeroes;                                        // 0x0344(0x000C) (NeedCtorLink)
	TArray<class UDunDefHero*>                         ActiveHeroes;                                             // 0x0350(0x000C) (NeedCtorLink)
	struct FShopEquipmentSet                           ShopEquipments[0x3];                                      // 0x035C(0x000C) (NeedCtorLink)
	TArray<class UHeroEquipment*>                      ItemBoxEquipments;                                        // 0x0380(0x000C) (NeedCtorLink)
	TArray<struct FItemBoxEntry>                       ItemBoxEntries;                                           // 0x038C(0x000C) (NeedCtorLink)
	TArray<class UHeroEquipment*>                      LobbyEquipments;                                          // 0x0398(0x000C) (NeedCtorLink)
	TArray<struct FDLCEquipmentEntry>                  DLCEquipmentEntries;                                      // 0x03A4(0x000C) (NeedCtorLink)
	class USaveHelper*                                 HeroSaver;                                                // 0x03B0(0x0004)
	class UProfanityFilter*                            ProfanityChecker;                                         // 0x03B4(0x0004)
	TArray<struct FPlayerUserID>                       RegisteredUserIDs;                                        // 0x03B8(0x000C) (NeedCtorLink)
	int                                                CurrentUserID;                                            // 0x03C4(0x0004)
	int                                                PrimaryController;                                        // 0x03C8(0x0004)
	int                                                UniqueRemoteID;                                           // 0x03CC(0x0004)
	struct FCrystalCoreOptions                         coreOptions;                                              // 0x03D0(0x0034)
	struct FOptionsFixedStruct                         defaultSettingsFixed;                                     // 0x0404(0x00A4) (NeedCtorLink)
	struct FString                                     defaultResolution;                                        // 0x04A8(0x000C) (NeedCtorLink)
	struct FOptionsInfo                                DefaultSettings;                                          // 0x04B4(0x0104) (NeedCtorLink)
	TArray<struct FLevelProgressInfo>                  defaultBeaten;                                            // 0x05B8(0x000C) (NeedCtorLink)
	TArray<struct FLevelProgressInfo>                  defaultProgress;                                          // 0x05C4(0x000C) (NeedCtorLink)
	TArray<struct FLevelProgressInfo>                  remoteDefaultProgress;                                    // 0x05D0(0x000C) (NeedCtorLink)
	TArray<int>                                        loadedIDs;                                                // 0x05DC(0x000C) (NeedCtorLink)
	struct FString                                     LobbyLevelName;                                           // 0x05E8(0x000C) (Localized, NeedCtorLink)
	int                                                HostStatsIndex;                                           // 0x05F4(0x0004)
	TArray<int>                                        KickedSessions;                                           // 0x05F8(0x000C) (NeedCtorLink)
	int                                                KickedSessionsMax;                                        // 0x0604(0x0004) (Edit)
	struct FString                                     CorruptSaveTitle;                                         // 0x0608(0x000C) (Localized, NeedCtorLink)
	struct FString                                     CorruptSaveMsg;                                           // 0x0614(0x000C) (Localized, NeedCtorLink)
	TArray<class UDunDefHero*>                         heroesToVerify;                                           // 0x0620(0x000C) (NeedCtorLink)
	TArray<class UHeroEquipment*>                      equipmentToVerify;                                        // 0x062C(0x000C) (NeedCtorLink)
	TArray<class UTexture2D*>                          difficultyIcons;                                          // 0x0638(0x000C) (Edit, NeedCtorLink)
	int                                                currentSaveVersion;                                       // 0x0644(0x0004)
	struct FString                                     RankedModeWelcomeMessage;                                 // 0x0648(0x000C) (Transient, NeedCtorLink)
	float                                              baseEquipMult;                                            // 0x0654(0x0004)
	float                                              TrueBossRushSplits[0xA];                                  // 0x0658(0x0004)
	float                                              TrueBossRushStartTime;                                    // 0x0680(0x0004)
	int                                                TrueBossRushCurrentSplit;                                 // 0x0684(0x0004)
	struct FRuthlessMapModifiers                       MapModifiers;                                             // 0x0688(0x0008) (Edit)
	TArray<class UClass*>                              RuthlessLiveGameInfoOverride;                             // 0x0690(0x000C) (Edit, NeedCtorLink)
	class UHeroManagerResources*                       HeroResources;                                            // 0x069C(0x0004)
	class UHeroManagerResources*                       HeroManagerResourcesTemplate;                             // 0x06A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHeroManager");
		return ptr;
	}


	void GiveManaToken(class ULocalPlayer* PlayerOwner, const struct FHighDigitInt& tokenAmount, unsigned long bForce);
	struct FString GetCurrentOnlineSessionName();
	TArray<struct FString> GetRestrictedPremiumMapTags();
	TArray<struct FString> GetNotOwnedRestrictedPremiumMapTags();
	void RearrangeHeroes(const TScriptInterface<class UDataListEntryInterface>& hero1, const TScriptInterface<class UDataListEntryInterface>& hero2);
	unsigned long HasAnyPremiumMissionLocked(unsigned long checkSpecialMissions, unsigned long checkExpansionMissions);
	float GetCurrentMissionEquipmentRandomizerMultiplier(unsigned long bIsForShop);
	int GetNextHeroIndexForSelection(class ULocalPlayer* ForPlayer, int fromClassIndex, unsigned long nextClass);
	int GetMetaFlagLenght(struct FOptionsFixedStruct* tOptions);
	int GetMetaFlags(int metaFlagIndex, int valueToSet, struct FOptionsFixedStruct* tOptions);
	int GetOrSetMetaFlags(int metaFlagIndex, int valueToSet, struct FOptionsFixedStruct* tOptions);
	class UTexture2D* GetMultiplayerModeImage();
	void RankedMode_LoginAuthenticationError();
	void RankedMode_KeepAliveTimedOut();
	void RankedMode_LoadingFailed();
	void RankedMode_LoginBanned();
	void RankedMode_SeriesError(const struct FString& Title, const struct FString& Message);
	void RankedMode_LoadingComplete(const struct FString& WelcomeMessage);
	void SetMultiplayerMode(TEnumAsByte<EMultiplayerModes> NewMode, unsigned long bForce);
	void ResetForNewMap();
	unsigned long IsCheatsEnabled();
	int GetNumShopEquipments();
	void VerifyHeroNames();
	class UHeroEquipment* GetEquipmentFromItemBox(int forUserID, int EquipmentID1, int EquipmentID2);
	void SetRandomShopEquipments(float qualityLevel, float extraRarity);
	void RemoveShopEquipment(class UHeroEquipment* anEquipment);
	unsigned long STATIC_CheckOnlineNameVerification(unsigned long bDontRequireOnline);
	void InstallAllDLCEquipments();
	void InstallDLCEquipments(int UserID);
	void AddDLCEquipmentEntry(const struct FDLCEquipmentEntry& equipEntry);
	void AddCampaignLevelEntry(const struct FCampaignLevelEntry& withEntry);
	void RemoveDLCLevelEntries();
	int GetIndexOfEntry(const struct FCampaignLevelEntry& Entry);
	void SetOptionCampaignTag(int UserID, const struct FString& campaignTag, unsigned long forceSave);
	void SetOptionDifficulty(int UserID, unsigned char difficulty);
	unsigned long ShowTutorial(int TutorialSet, unsigned long SetTutorialCompleted);
	unsigned long IsBanned(int SessionId);
	void AddKickedSession(int SessionId);
	int STATIC_GetMaxBankedMana();
	unsigned long BankAllMana(int GameplayInstanceID);
	class UDunDefHero* GetHeroTemplateWithID(int Id);
	struct FString GetRandomProTip();
	struct FString GetStatsStringForLevel(const struct FCampaignLevelEntry& levelEntry, int difficulty, int Mode);
	int GetStatsIndexForLevel(const struct FCampaignLevelEntry& levelEntry, int difficulty, int Mode);
	int GetModeTypeIndex();
	int GetStatsIndex();
	struct FString GetCurrentStatsString();
	int GetStatsIndexFromDataStore(const struct FString& campaignTag, int difficulty, int Mode, unsigned long bIsWrite);
	struct FString GetStatsString(const struct FString& campaignTag, int difficulty, int Mode, unsigned long bIsWrite);
	int GetNumberOfMissionsUnlocked(unsigned long IsSpecialMission);
	unsigned long GetNextCampaignLevelEntry(int currentLevelIndex, struct FCampaignLevelEntry* nextLevelEntry, class UCampaignLevelEntryObject** nextLevelObject);
	TArray<class UTexture2D*> GetHeroIconsForAccessoryTypes(TArray<TEnumAsByte<EAccessoryType>>* AccessoryTypes);
	TArray<class UTexture2D*> GetHeroIconsForWeaponType(TEnumAsByte<EWeaponType> weaponType);
	class UDunDefHero* GetHeroTemplateForWeaponType(TEnumAsByte<EWeaponType> weaponType);
	int CountItemsInFolder(class ADunDefPlayerController* PC, int FolderID, unsigned long playerShop);
	unsigned long ChangeLockedStatusAllEquipment(class ADunDefPlayerController* PC, int FolderID, unsigned long val);
	unsigned long SellAllEquipment(class ADunDefPlayerController* PC, int FolderID);
	unsigned long SellEquipmentToBank(class ADunDefPlayerController* PC, class UHeroEquipment* Equipment, unsigned long bDontRefreshEquipmentUI);
	void DropEquipmentFromItemBox(class AActor* forgeActor, class UHeroEquipment* Equipment);
	void DeleteEquipmentFromItemBox(int UserID, int EquipmentID1, int EquipmentID2, unsigned long bDontRefreshItemBoxLists);
	void TransferEquipmentFromPlayerShop(class UHeroEquipment* Equipment);
	void TransferEquipmentToPlayerShop(class UHeroEquipment* Equipment);
	void TransferEquipmentFromItemBox(class UDunDefHero* hero, class UHeroEquipment* Equipment, class UHeroEquipment** itemBoxedEquipment);
	int GetMaxItemCount(int UserID);
	unsigned long IsItemBoxFull(int UserID, unsigned long bForceEquipmentIntoItemBox, int* itemCount);
	unsigned long STATIC_IsMacAppStore();
	unsigned long STATIC_IsMacOSGameSpy();
	unsigned long CanStoreInItemBox(class UHeroEquipment* Equipment, int UserID);
	class UHeroEquipment* AddStackedEquipmentToItemBox(class UDunDefHero* hero, unsigned long bAutoLock, unsigned long bDontRefreshItemBoxLists, struct FEquipmentNetInfo* netInfo);
	void AddStackedEquipmentObjectToItemBox(class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long bAutoLock);
	class UHeroEquipment* AddEquipmentToItemBox(class UDunDefHero* hero, unsigned long bAutoLock, unsigned long bDontRefreshItemBoxLists, struct FEquipmentNetInfo* netInfo);
	void AddEquipmentObjectToItemBox(class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long bAutoLock);
	class UHeroEquipment* TransferEquipmentToItemBox(class UDunDefHero* hero, class UHeroEquipment* Equipment, int insertAtIndex, unsigned long bAutoLock);
	void RefreshItemBoxEquipmentLists(int UserID);
	void ResetTutorials();
	void SetCampaignEntryTag(const struct FString& entryTag);
	class UCampaignLevelEntryObject* GetCampaignLevelObjectForOnlineSubSystemInfo(const struct FString& ValueCheck);
	class UCampaignLevelEntryObject* GetCampaignLevelObjectForTag(const struct FString& entryTag);
	int GetCampaignLevelIndex(const struct FString& MapName, struct FCampaignLevelEntry* levelEntry, class UCampaignLevelEntryObject** levelEntryObject);
	struct FString GetCurrentMapFileName(const struct FString& MapName, unsigned long bWantFileExtension);
	int GetCampaignLevelId(const struct FCampaignLevelEntry& levelEntry);
	struct FCampaignLevelEntry GetLevelEntryWithTag(const struct FString& Tag);
	struct FCampaignLevelEntry GetLevelEntryWithId(int Id);
	struct FString GetLevelNameForId(int Id);
	struct FString GetLevelNameForContextID(int ContextId);
	struct FString GetLevelNameForIndex(int campaignIndex);
	class UCampaignLevelEntryObject* GetCurrentCampaignLevelObject();
	struct FCampaignLevelEntry GetCurrentCampaignLevelEntry();
	int GetCurrentCampaignLevelIndex();
	class UHeroEquipment* GetWeightedRandomEquipmentFromDropEntries(unsigned long ignoreWeighting, float extraWeighting, TArray<struct FEquipmentDropEntry>* DropEntries);
	class UHeroEquipment* GetCustomEquipmentDrop(float CustomEquipmentDropValueMin, float CustomEquipmentDropValueMax, float extraEquipmentRarityWeighting, float qualityValue, TEnumAsByte<EEquipmentType> TypeFilter, unsigned long bIsShop, TArray<struct FEquipmentDropEntry>* DropEntries, TArray<struct FEquipmentDropEntry>* AdditionalDropEntries);
	unsigned long CanAnyPlayerUseWeaponType(TEnumAsByte<EWeaponType> weaponType, unsigned long bIsShop);
	class UHeroEquipment* GetGlobalEquipmentDrop(float GlobalEquipmentDropValueMin, float GlobalEquipmentDropValueMax, float extraRarityWeighting, float qualityValue, TEnumAsByte<EEquipmentType> TypeFilter, unsigned long bUseCustomAdditionalEquipmentList, unsigned long bIsShop, unsigned long bForceAddArmour, TArray<struct FEquipmentDropEntry>* CustomAdditionalEquipmentList);
	class ADunDefDroppedEquipment* ServerCreateDroppedEquipment(class UHeroEquipment* Equipment, class AActor* fromActor, float equipmentQuality, unsigned long useEquipmentObjectAsTemplate, unsigned long spawnFromDir, const struct FRotator& dirToSpawn, float AngleAllowance, unsigned long useSpawnPos, const struct FVector& spawnAtPos, int remoteUserID, unsigned long backupOldItemNames, unsigned long bDontCheckForDuplicates);
	class UClass* GetNotPoisonDamageType(unsigned long elementalEffect);
	class UClass* GetRandomDamageType(unsigned long elementalEffect);
	class ADunDefEmitterSpawnable* GetElementalImpactEffect(class UClass* TheDamageType);
	class UParticleSystem* GetElementalWeaponEffect(class UClass* TheDamageType, float* extraEffectScale);
	void GetDamageTypeEntry(class UClass* TheDamageType, struct FGameDamageEntry* damageEntry);
	class UClass* GetDamageTypeFromIndex(int Index);
	int GetDamageTypeIndex(class UClass* TheDamageType);
	class UUI_HeroInfo* ShowHeroInfo(class UDunDefHero* hero, class ULocalPlayer* PlayerOwner, unsigned char ForceSceneStackPriority);
	class UHeroEquipment* AddEquipmentFromNetInfo(class UDunDefHero* forHero, class UObject* ownerObject, unsigned long bCheckRequirements, int atIndex, struct FEquipmentNetInfo* netInfo);
	class UHeroEquipment* AddEquipmentFromSaveInfo(class UDunDefHero* forHero, struct FEquipmentSaveInfo* saveInfo);
	class UDunDefHero* GetActiveHero(class UPlayer* thePlayer, unsigned long CreateNewHeroIfNone);
	class UDunDefHero* GetFirstLoadedAvailableHero(int UserID);
	int GetActiveHeroIndex(class UDunDefHero* forHero);
	int GetFreeHeroIndex();
	void NotifyHeroLeft(class UDunDefHero* hero);
	void NotifyPlayerLeft(class UPlayer* thePlayer);
	void SetActiveHero(class UDunDefHero* hero, class UPlayer* thePlayer, unsigned long bServerDontInitializePC);
	void RemoveActiveHero(class UDunDefHero* hero);
	struct FString GetRandomHeroName(class UDunDefHero* forHero);
	class UDunDefHero* CreateNewHero(class UPlayer* thePlayer, class UDunDefHero* HeroTemplate, const struct FString& HeroName);
	void DeleteLoadedHero(class UDunDefHero* hero, class ULocalPlayer* byPlayer);
	class UDunDefHero* CreateHeroFromNetInfo(class UPlayer* thePlayer, class UObject* AltOwnerObject, unsigned long bServerDontInitializePC, struct FHeroNetInfo* netInfo);
	class UDunDefHero* CreateHeroFromSaveInfo(int UserID, struct FHeroSaveInfo* theHeroSaveInfo);
	int GetPrimaryUserID();
	void CheckSaveInLobby();
	unsigned long StoreDroppedLobbyEquipments();
	TArray<class UHeroEquipment*> GetLobbyEquipments(int UserID);
	void CreateLobbyLevelDroppedEquipment(class ADunDefGameReplicationInfo* gInfo);
	void SaveHeroes(int theUserID, unsigned long bForceLocal);
	void SaveHeroesFancily(int theUserID, unsigned long bIsRemote);
	void SaveForPlayer(class ULocalPlayer* LP);
	void SaveForEveryone();
	unsigned long HasUniqueProfile(int PlayerIndex);
	class UDunDefPlayerStats* GetPrimaryStats();
	struct FOptionsInfo GetPrimaryOptions();
	unsigned long IsPrimaryPlayerOrGuest(class ULocalPlayer* playerToCheck);
	class ULocalPlayer* GetPrimaryPlayer();
	int GetPrimaryPlayerIndex();
	struct FCrystalCoreOptions GetPrimaryCore();
	void VerifyStrings();
	void AddHeroForVerification(class UDunDefHero* heroToAdd);
	void VerificationComplete(unsigned long bVerified, int StringID, unsigned char StringType);
	class UDunDefHero* FindHeroVerificationEntry(int Id);
	class UHeroEquipment* FindEquipmentVerificationEntry(int Id);
	unsigned long LoadHeroes(int UserID, unsigned long backup);
	unsigned long LoadHeroesFancily(int UserID, unsigned long backup, unsigned long bIsRemote, unsigned long bUseSteamCloud);
	void RemoveHeroes(int UserID, unsigned long remote, unsigned long bForceClearStats);
	void SetPrimaryPlayer(int ControllerId, unsigned long bConvert);
	void RemoveSponsoredGuests(int UserID);
	void InitCustomCampaignLevelEntry(struct FCampaignLevelEntry* newEntry);
	void Initialize();
	void RefreshModMapsList();
	void STATIC_ModMapToInfo(const struct FString& Source, struct FString* FriendlyName, struct FString* OnlineSubsystemInfo);
	void GetDefaultOptions(int UserID, struct FOptionsInfo* myOptions);
	void FixUserIDs(int PlayerIndex);
	struct FString GetUserNickname(int UserID, unsigned long remote);
	void SetUserNickname(const struct FString& NickName, int UserID, unsigned long remote);
	void InitializeUserIds(TArray<int> userIDList, int defaultUserID);
	void RefreshOptionsForAll();
	void RefreshOptions();
	void RefreshCores();
	void DoLoading(int UserID);
	void ShowReallyCorruptError();
	void ShowCorruptError();
	void LoadSave(int UserID);
	unsigned long HasPlayerBeaten(class ADunDefPlayerController* ForPlayer, TArray<struct FString> Tags, int difficultyToCheck, unsigned long exact, unsigned long bIsHardcore, int* anyDifficulty);
	unsigned long HasAnyoneBeaten(const struct FString& campaignTag, TEnumAsByte<EGameDifficulty> difficulty, unsigned long bOnlyCheckLocal, unsigned long bIsMinimumDifficulty, unsigned long bIsHardcore);
	unsigned long HasAnyoneUnlocked(const struct FString& campaignTag, unsigned long OnlyLocal);
	TArray<struct FLevelProgressInfo> GetBeatenLevels(int UserID, unsigned long remote);
	TArray<struct FLevelProgressInfo> GetProgress(int UserID, unsigned long remote);
	void UpdateMissionCompleteEquipmentDropEntries();
	void AddBeatenLevel(const struct FString& thisLevel, TEnumAsByte<EGameDifficulty> difficulty, int UserID, unsigned long remote, unsigned long bForce, unsigned long bDontRefreshEquipmentDropEntries, unsigned long bIsHardcoreMode);
	void AddProgress(const struct FString& nextLevel, TEnumAsByte<EGameDifficulty> difficulty, int UserID, unsigned long remote, unsigned long bForce);
	void RemoveLocalHeroOrCostumeUnlock(class UDunDefHero* aHeroTemplate, int costumeIndex);
	void RemoveLocalProgress(const struct FString& LevelTag);
	struct FCrystalCoreOptions GetCrystalCoreSettings(int UserID);
	struct FHighDigitInt GetItemBoxInfo(int UserID);
	void UpdateItemBox(int UserID, struct FHighDigitInt* itemBox);
	struct FItemBoxInfo STATIC_ConvertToItemBox(const struct FHighDigitInt& In);
	struct FHighDigitInt STATIC_ConvertToHDInt(const struct FItemBoxInfo& In);
	struct FHighDigitInt STATIC_CalculateBankedMana(const struct FHighDigitInt& HighInt);
	void AddCrystalCoreSettings(const struct FCrystalCoreOptions& customCore, int UserID);
	void SetOptions(const struct FOptionsInfo& newOptions, unsigned long doSave, class ULocalPlayer* ForPlayer, unsigned long bShallowSet, unsigned long bDoResolutionChange);
	struct FOptionsInfo GetOptionsInfo(int UserID);
	unsigned long HasOptionsInfo(int UserID);
	void AddOptionsInfo(const struct FOptionsInfo& customOptions, int UserID);
	struct FAchievementInfo GetAchievements(int UserID, unsigned long remote);
	void AddAchievements(const struct FAchievementInfo& newAchievements, int UserID, unsigned long remote);
	struct FCoreUnlockInfo GetCoreUnlockInfo(int UserID);
	void AddCoreUnlockInfo(const struct FCoreUnlockInfo& newCoreUnlockInfo, int UserID);
	void RemoveRemoteStats();
	unsigned long HasStats(int UserID, unsigned long remote);
	int GetPlayerStatsIndex(int UserID, unsigned long remote);
	class UDunDefPlayerStats* FindStatsByName(const struct FString& UserName, int* UserID, int* remote);
	class UDunDefPlayerStats* GetStats(int UserID, unsigned long remote, unsigned long Initialize);
	void AddStats(class UDunDefPlayerStats* playerStats, int UserID, unsigned long remote);
	void ZeroOutAchievements(struct FAchievementInfo* newAchievements);
	void RemoveNullEntries();
	unsigned long HasNullEntries();
	void MarkAsUnloaded(int UserID);
	void MarkAsLoaded(int UserID);
	unsigned long HasBeenLoaded(int UserID);
	class ULocalPlayer* GetPlayerFromUserID(int UserID);
	unsigned long GetPlayerUserIDOfPlayer(class ULocalPlayer* LP, struct FPlayerUserID* myID);
	int GetUserIDOfPlayer(class ULocalPlayer* LP);
	int GetPlayerIndex(int UserID);
	unsigned long GetPlayerUserID(int PlayerIndex, struct FPlayerUserID* myID);
	int GetUserID(int PlayerIndex);
	void RemovePlayersWithoutHeroes(class ULocalPlayer* PlayerToSkip, unsigned long bRemovePlayerWhoCantPlayOnline, unsigned long bJustRemove);
	void UnregisterUserID(int ControllerId, unsigned long remote);
	void UpdateRegisteredUsers();
	void PromoteUser(int PlayerIndex, int UserID);
	void RegisterUserID(int PlayerIndex, int UserID, int GuestID, unsigned long remote, const struct FString& NickName);
	int FindRemoteIDByName(const struct FString& PlayerName);
	int GetUniqueRemoteID();
	int GetNumAvailableHeroes(class ULocalPlayer* LP);
	int GetNumLoadedHeroes(int myUserID);
	unsigned long IsUnderLoadedHeroesCap(int myUserID);
	class UDunDefHero* GetDefaultHero(int Index);
	void GetSortedItemBoxDataEntries(int myUserID, int FolderID, TArray<TScriptInterface<class UDataListEntryInterface>>* altSet);
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
	void ItemChangedFolder(class UHeroEquipment* InEquipment, int FolderID);
	void UpdateItemsFolder(class UHeroEquipment* InEquipment, int FolderID);
	struct FString GetFolderName(int FolderID, unsigned long bItemBox);
	struct FString GetFolderPath(int FolderID, unsigned long bItemBox);
	void UpdateFolderName(int FolderID, const struct FString& NewName, unsigned long bItemBox);
	unsigned long UpdateFolderParent(int FolderID, int NewParentID, unsigned long bItemBox);
	int GetParentFolder(int FolderID, unsigned long bItemBox);
	void DeleteFolder(int FolderID, unsigned long bItemBox);
	int CreateFolder(const struct FString& FolderName, int InParentID, unsigned long bItemBox);
	unsigned long ValidFolder(int FolderID, unsigned long bItemBox);
	void RefreshItems(unsigned long bItemBox);
	int FolderSpan(int FolderID, unsigned long bItemBox);
	int STATIC_FolderSpan_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	int FolderDepth(int FolderID, unsigned long bItemBox);
	int STATIC_FolderDepth_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	int SubFolderCount(int ParentFolderID, unsigned long bItemBox);
	int SubFolderCount_Helper(int ParentFolderID, TArray<struct FItemFolder>* InItemFolders);
	int STATIC_CreateFolder_Helper(const struct FString& FolderName, int InParentID, TArray<struct FItemFolder>* InItemFolders);
	struct FString STATIC_GetFolderName_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	struct FString STATIC_GetFolderPath_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	void STATIC_UpdateFolderName_Helper(int FolderID, const struct FString& NewName, TArray<struct FItemFolder>* InItemFolders);
	void STATIC_UpdateFolderParent_Helper(int FolderID, int NewParentID, TArray<struct FItemFolder>* InItemFolders);
	unsigned long STATIC_IsChildFolderOf(int rootParentID, int checkFolderID, TArray<struct FItemFolder>* FolderList);
	int STATIC_GetParentFolder_Helper(int InID, TArray<struct FItemFolder>* InItemFolders);
	void STATIC_DeleteFolder_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	void STATIC_DeleteFolderWhoseParent_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	unsigned long STATIC_ValidFolder_Helper(int FolderID, TArray<struct FItemFolder>* InItemFolders);
	void SyncAllEquipmentToDefendersStore(int UserID);
	struct FString GenerateAllEquipmentURLs(int UserID);
	struct FString GetStatName(TEnumAsByte<ELevelUpValueType> levelUpValue, TEnumAsByte<EWeaponType> weaponType);
	class UDunDefHeroManager* STATIC_GetHeroManager();
};


// Class UDKGame.DunDefDataStore_GameSearch
// 0x0024 (0x00CC - 0x00A8)
class UDunDefDataStore_GameSearch : public UUIDataStore_OnlineGameSearch
{
public:
	class UDunDefDataProvider_ServerDetails*           ServerDetailsProvider;                                    // 0x00A8(0x0004)
	struct FString                                     Filter;                                                   // 0x00AC(0x000C) (NeedCtorLink)
	unsigned long                                      findPasswordProtectedServers : 1;                         // 0x00B8(0x0004)
	struct FString                                     filterPlayerNick;                                         // 0x00BC(0x000C) (NeedCtorLink)
	int                                                GamespyVersionID;                                         // 0x00C8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataStore_GameSearch");
		return ptr;
	}


	int STATIC_GetNativeGamespyVersion();
	void Registered(class ULocalPlayer* PlayerOwner);
	unsigned long SubmitGameSearch(unsigned char ControllerIndex, int numParticipatingLocalPlayers, unsigned long bInvalidateExistingSearchResults);
	void SetupGamespyFilter(int numParticipatingLocalPlayers);
	unsigned long AppendSizeCheck(const struct FString& AppendString, int Size, struct FString* currentString);
	void SetupXboxFilter();
	void SetupSteamworksPreFilter(class UOnlineGameSearch* GameSearch);
	void SetupFilter(int numParticipatingLocalPlayers);
};


// Class UDKGame.DunDefDataStore_OnlineStats
// 0x0014 (0x00FC - 0x00E8)
class UDunDefDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
	int                                                StartIndex;                                               // 0x00E8(0x0004)
	int                                                RowCount;                                                 // 0x00EC(0x0004)
	struct FString                                     StatsReadString;                                          // 0x00F0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataStore_OnlineStats");
		return ptr;
	}


	struct FString GetTopEntryValue(const struct FName& entryTag);
	int GetStatIndexForClass(const struct FString& classString);
	void SetStatsReadString(const struct FString& InStatsReadString);
	unsigned long RefreshStats(unsigned char ControllerIndex);
	void SetStatsReadInfo();
};


// Class UDKGame.DunDefGameSearchCommon
// 0x0020 (0x013C - 0x011C)
class UDunDefGameSearchCommon : public UOnlineGameSearch
{
public:
	int                                                QuickMatchCampaignWeight;                                 // 0x011C(0x0004) (Config)
	int                                                QuickMatchLobbyWeight;                                    // 0x0120(0x0004) (Config)
	int                                                QuickMatchBuildWeight;                                    // 0x0124(0x0004) (Config)
	int                                                QuickMatch5LevelWeight;                                   // 0x0128(0x0004) (Config)
	int                                                QuickMatch10LevelWeight;                                  // 0x012C(0x0004) (Config)
	int                                                QuickMatch15LevelWeight;                                  // 0x0130(0x0004) (Config)
	int                                                QuickMatchGreatPingWeight;                                // 0x0134(0x0004) (Config)
	int                                                QuickMatchOKPingWeight;                                   // 0x0138(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSearchCommon");
		return ptr;
	}

};


// Class UDKGame.DunDefGameSearch_Xbox
// 0x0014 (0x0150 - 0x013C)
class UDunDefGameSearch_Xbox : public UDunDefGameSearchCommon
{
public:
	struct FSettingsProperty                           dummyProperty;                                            // 0x013C(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSearch_Xbox");
		return ptr;
	}


	void RemoveProperty(int PropertyId);
	void AddProperties();
};


// Class UDKGame.DunDefGameSearchQuick_Xbox
// 0x0000 (0x0150 - 0x0150)
class UDunDefGameSearchQuick_Xbox : public UDunDefGameSearch_Xbox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSearchQuick_Xbox");
		return ptr;
	}


	void AddProperties();
	int GetHeroLevel();
	void SortSearchResults();
};


// Class UDKGame.DunDefGameSearchCoop
// 0x0000 (0x013C - 0x013C)
class UDunDefGameSearchCoop : public UDunDefGameSearchCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSearchCoop");
		return ptr;
	}

};


// Class UDKGame.DunDefGameSearchQuick
// 0x0000 (0x013C - 0x013C)
class UDunDefGameSearchQuick : public UDunDefGameSearchCoop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSearchQuick");
		return ptr;
	}


	int GetHeroLevel();
	void SortSearchResults();
};


// Class UDKGame.DunDefInputNative
// 0x0000 (0x0170 - 0x0170)
class UDunDefInputNative : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefInputNative");
		return ptr;
	}


	void PlayerInput(float DeltaTime);
	void NativePlayerInput(float DeltaTime);
	void NativeAdjustMouseSensitivity(float FOVScale);
	float NativeSmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount);
	void NativeClearSmoothing();
	unsigned long IsRotatingCamera();
};


// Class UDKGame.DunDefNativeUIScene
// 0x0028 (0x05AC - 0x0584)
class UDunDefNativeUIScene : public UUIScene
{
public:
	TArray<struct FDunDefUIAnimation>                  UIAnimationSequences;                                     // 0x0584(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           SoundsToStopOnDeactivate;                                 // 0x0590(0x000C) (NeedCtorLink)
	TArray<struct FUIAnimationSound>                   soundQueue;                                               // 0x059C(0x000C) (NeedCtorLink)
	unsigned long                                      soundsInQueue : 1;                                        // 0x05A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefNativeUIScene");
		return ptr;
	}


	void StopDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long bFinalize);
	float PlayDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed);
	void PlayUIAnimationSound(class USoundCue* Cue, unsigned long stopOnDeactivate);
	void STATIC_CallNativeProcessKey(class UUIScreenObject* onObject, const struct FName& keyPressed, int PlayerIndex, int ControllerId, TEnumAsByte<EInputEvent> EventType);
	struct FString STATIC_GetAlphaNumeric(const struct FString& fullString, unsigned long removeSpaces, unsigned long removeBrackets);
	struct FString STATIC_FormatTime(int Seconds);
	struct FString STATIC_FormatNumber(int Number);
	void RequestViewportUpdate();
	void OnPostEditChange(const struct FName& PropertyChanged);
	unsigned long IsKeyboardOwned();
	void SceneActivated(unsigned long bInitialActivation);
	void STATIC_InitStateExecution(class UObject* onObject);
};


// Class UDKGame.DunDefNativeViewportClient
// 0x0014 (0x013C - 0x0128)
class UDunDefNativeViewportClient : public UGameViewportClient
{
public:
	TArray<class UUIEditBox*>                          SplitscreenEditboxes;                                     // 0x0128(0x000C) (NeedCtorLink)
	class UGameUISceneClient*                          theSceneClient;                                           // 0x0134(0x0004) (Transient)
	class UDunDefHeroManagerNative*                    TheHeroManagerNative;                                     // 0x0138(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefNativeViewportClient");
		return ptr;
	}


	void STATIC_GetAvailableResolutions(TArray<struct FScreenResolution>* Resolutions);
	unsigned long HasAnyGlobalInputLockingScene(class ULocalPlayer* thePlayer);
	unsigned long HasAnyInputLockingSceneOpen(class ULocalPlayer* thePlayer, unsigned long bCountAnyLockingOwner);
	void STATIC_SetNumericalProperty(const struct FString& ObjClass, const struct FString& PropertyName, float Value, unsigned long bPermanent);
	unsigned long STATIC_IsPC();
	void STATIC_SetDemoMode(unsigned long demoMode);
	unsigned long STATIC_IsDemoMode();
	unsigned long STATIC_CheckShouldSkipFloatingText(const struct FVector& Location, float FrustumRadius);
	unsigned long STATIC_CheckInLocalPlayersInfluence(const struct FVector& Location, float FrustumRadius, float DistanceInfluence);
	unsigned long STATIC_CheckInLocalPlayersRanges(const struct FVector& Location, float SphereRadius);
	unsigned long STATIC_CheckInLocalPlayersFrustums(const struct FVector& Location, float SphereRadius);
	void STATIC_CheckStaticMeshForBadCollisions(class UStaticMesh* Mesh);
	int STATIC_GetNumMaterialsForStaticMesh(class UStaticMeshComponent* Component);
	unsigned long STATIC_IsStaticMeshComponentTranslucent(class UStaticMeshComponent* Component);
	float STATIC_GetVertexDensityForComponent(class UStaticMeshComponent* Component);
	int STATIC_GetNumParticlesForComponent(class UParticleSystemComponent* Component);
	class UHUDWidgetScene* STATIC_CreateHUDScene(class ULocalPlayer* ForPlayer);
	struct FString STATIC_PrintFloat(float Value, int numDecimals, unsigned long forceDecimals);
	struct FString STATIC_TruncateNumber(float Value, int numDecimals);
	unsigned long CompareTransformedString(const struct FString& InString, const struct FString& TransformedString);
	void FilteredConsoleCommands(const struct FString& InCommand, unsigned long bFullUnlock);
	int STATIC_CountDynamicActorsWithArchetype(class UObject* InArchetype);
	void StopMovie();
	unsigned long IsMoviePlaying();
	void PlayMovie(const struct FString& MovieName);
	void ShowPathTargets(unsigned long SetToValue);
	void SetUsedPathWeight(int withValue);
	void STATIC_SetParticleLODBias(int LODLevel);
	void ShowDynamicLights(unsigned long setWith);
	void ShowDynamicShadows(unsigned long setWith);
	void SetKeyboardInputID(int withId);
	void SetJoystickOffset(int withOffset);
	int GetJoystickOffset();
};


// Class UDKGame.DunDefOnlineGameSettingsConsole
// 0x0110 (0x01F8 - 0x00E8)
class UDunDefOnlineGameSettingsConsole : public UOnlineGameSettings
{
public:
	struct FString                                     LT;                                                       // 0x00E8(0x000C) (NeedCtorLink, DataBinding)
	int                                                IWM;                                                      // 0x00F4(0x0004) (DataBinding)
	int                                                PureStrategyMode;                                         // 0x00F8(0x0004) (DataBinding)
	int                                                StartWave;                                                // 0x00FC(0x0004) (DataBinding)
	int                                                GameDifficulty;                                           // 0x0100(0x0004) (DataBinding)
	int                                                InfiniteBuildTime;                                        // 0x0104(0x0004) (DataBinding)
	int                                                SessionId;                                                // 0x0108(0x0004) (DataBinding)
	int                                                IsInLobby;                                                // 0x010C(0x0004) (DataBinding)
	int                                                MC;                                                       // 0x0110(0x0004) (DataBinding)
	struct FString                                     LevelFriendlyName;                                        // 0x0114(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     difficulty;                                               // 0x0120(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     SurvivalMode;                                             // 0x012C(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     InfiniteBuild;                                            // 0x0138(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     pureStrategy;                                             // 0x0144(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     LobbyLevelName;                                           // 0x0150(0x000C) (Localized, NeedCtorLink)
	int                                                MinimumLevel;                                             // 0x015C(0x0004) (DataBinding)
	struct FString                                     OnlineSubsystemInfo;                                      // 0x0160(0x000C) (Transient, NeedCtorLink)
	int                                                Password;                                                 // 0x016C(0x0004) (DataBinding)
	struct FString                                     thePassword;                                              // 0x0170(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     PlayerNick;                                               // 0x017C(0x000C) (NeedCtorLink, DataBinding)
	int                                                isChallenge;                                              // 0x0188(0x0004) (DataBinding)
	int                                                HeroClass;                                                // 0x018C(0x0004) (DataBinding)
	int                                                HeroLevel;                                                // 0x0190(0x0004) (DataBinding)
	struct FString                                     hostInfo;                                                 // 0x0194(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     Ping;                                                     // 0x01A0(0x000C) (NeedCtorLink, DataBinding)
	int                                                demoMode;                                                 // 0x01AC(0x0004) (DataBinding)
	unsigned long                                      IsMobile : 1;                                             // 0x01B0(0x0004) (DataBinding)
	unsigned long                                      isBuildPhase : 1;                                         // 0x01B0(0x0004) (DataBinding)
	unsigned long                                      bIsAFKShopMode : 1;                                       // 0x01B0(0x0004) (DataBinding)
	struct FString                                     scriptVersion;                                            // 0x01B4(0x000C) (NeedCtorLink, DataBinding)
	int                                                nativeVersion;                                            // 0x01C0(0x0004) (DataBinding)
	struct FString                                     PingTextures[0x4];                                        // 0x01C4(0x000C) (NeedCtorLink)
	int                                                GameMode;                                                 // 0x01F4(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOnlineGameSettingsConsole");
		return ptr;
	}


	void SetupDemoAndVersion();
	void CreateUniqueSessionID();
	unsigned long MatchesGameFilter();
	unsigned long Customize();
	unsigned long IsValidLevel(const struct FString& forLevelTag);
	void UpdateGameSpyCustomKeys();
	unsigned long IsSpecialMission(const struct FString& forLevelTag);
};


// Class UDKGame.DunDefPlayerAbilityNative
// 0x0004 (0x0220 - 0x021C)
class ADunDefPlayerAbilityNative : public AActor
{
public:
	unsigned long                                      bForceAbilityTick : 1;                                    // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbilityNative");
		return ptr;
	}


	void AbilityTick(float DeltaTime);
};


// Class UDKGame.DunDefPlayerCameraNative
// 0x0160 (0x0578 - 0x0418)
class ADunDefPlayerCameraNative : public ACamera
{
public:
	float                                              CameraTraceInterpSpeed;                                   // 0x0418(0x0004) (Edit)
	float                                              CameraTraceOffsetDistance;                                // 0x041C(0x0004) (Edit)
	float                                              CameraTraceNormalOffset;                                  // 0x0420(0x0004) (Edit)
	float                                              CameraTraceMinDistance;                                   // 0x0424(0x0004) (Edit)
	struct FVector                                     CameraTraceOffsetPosition;                                // 0x0428(0x000C) (Edit)
	float                                              CameraLateralOffset;                                      // 0x0434(0x0004) (Edit)
	struct FVector                                     CameraVerticalOffset;                                     // 0x0438(0x000C) (Edit)
	float                                              TargetLocationInterpSpeed;                                // 0x0444(0x0004) (Edit)
	float                                              TargetRotationInterpSpeed;                                // 0x0448(0x0004) (Edit)
	float                                              ChaseTargetRotationInterpSpeed;                           // 0x044C(0x0004) (Edit)
	float                                              ChaseMaxRotationInterpSpeed;                              // 0x0450(0x0004) (Edit)
	unsigned long                                      ChaseUseLerpRotation : 1;                                 // 0x0454(0x0004) (Edit)
	unsigned long                                      bNativeValuesReset : 1;                                   // 0x0454(0x0004) (Transient)
	unsigned long                                      bSpectatorCamera : 1;                                     // 0x0454(0x0004) (Transient)
	unsigned long                                      bWantShoulderCamera : 1;                                  // 0x0454(0x0004) (Transient)
	float                                              ChaseMouseMaxPitchUpAngle;                                // 0x0458(0x0004) (Edit)
	float                                              ChaseMouseMaxPitchDownAngle;                              // 0x045C(0x0004) (Edit)
	float                                              PCChasePitchAffectLocationMultiplier;                     // 0x0460(0x0004) (Edit)
	float                                              PCChasePitchAffectLocationInitialOffset;                  // 0x0464(0x0004) (Edit)
	struct FVector                                     TargetLookOffset;                                         // 0x0468(0x000C) (Edit)
	float                                              CameraTransitionInterpTime;                               // 0x0474(0x0004) (Edit)
	float                                              TargetLookDirectionSpeed;                                 // 0x0478(0x0004) (Edit)
	float                                              MaxCameraRotateSpeed;                                     // 0x047C(0x0004) (Edit)
	float                                              CameraOverHeadTugLerpSpeed;                               // 0x0480(0x0004) (Edit)
	float                                              CameraOffsetSpeed;                                        // 0x0484(0x0004) (Edit)
	float                                              CameraOffsetLerpMax;                                      // 0x0488(0x0004) (Edit)
	struct FVector                                     LastFinalCameraOffset;                                    // 0x048C(0x000C) (Transient)
	struct FVector                                     CameraTraceCurrentOffset;                                 // 0x0498(0x000C) (Transient)
	float                                              LastCameraTugInPercent;                                   // 0x04A4(0x0004) (Transient)
	float                                              LastCameraNoRotInterpTime;                                // 0x04A8(0x0004) (Transient)
	struct FVector                                     CurrentUnitSphereTargetLookDirection;                     // 0x04AC(0x000C) (Transient)
	float                                              TraceDistanceFromTargetPosition;                          // 0x04B8(0x0004) (Transient)
	struct FVector                                     CameraTraceTargetOffset;                                  // 0x04BC(0x000C) (Transient)
	struct FVector                                     LastCollidedHitNormal;                                    // 0x04C8(0x000C) (Transient)
	float                                              LastCameraTransitionTime;                                 // 0x04D4(0x0004) (Transient)
	struct FVector                                     TransitionCameraLocation;                                 // 0x04D8(0x000C) (Transient)
	struct FRotator                                    TransitionCameraRotation;                                 // 0x04E4(0x000C) (Transient)
	float                                              TransitionCameraFOV;                                      // 0x04F0(0x0004) (Transient)
	float                                              CameraDistanceMultiplier;                                 // 0x04F4(0x0004) (Transient)
	float                                              CurrentCameraSpin;                                        // 0x04F8(0x0004) (Transient)
	float                                              PendingCameraSpinAmmount;                                 // 0x04FC(0x0004) (Transient)
	float                                              LastPendingCameraSpinAmmount;                             // 0x0500(0x0004) (Transient)
	float                                              TargetCameraSpin;                                         // 0x0504(0x0004) (Transient)
	struct FVector                                     CurrentCameraRotationOffset;                              // 0x0508(0x000C) (Transient)
	struct FRotator                                    CurrentTargetLookRotation;                                // 0x0514(0x000C) (Transient)
	struct FVector                                     CurrentTargetLocation;                                    // 0x0520(0x000C) (Transient)
	float                                              CurrentCameraPitchOffset;                                 // 0x052C(0x0004) (Transient)
	float                                              CurrentCameraPitch;                                       // 0x0530(0x0004) (Transient)
	struct FVector                                     LastCameraLocation;                                       // 0x0534(0x000C) (Transient)
	struct FRotator                                    LastCameraRotation;                                       // 0x0540(0x000C) (Transient)
	float                                              LastCameraFOV;                                            // 0x054C(0x0004) (Transient)
	float                                              ShoulderCameraDistanceMultiplier;                         // 0x0550(0x0004) (Transient)
	float                                              LastPlacingTowerCameraDistance;                           // 0x0554(0x0004) (Transient)
	struct FVector                                     LastDesiredCameraLocation;                                // 0x0558(0x000C) (Transient)
	struct FRotator                                    LastDesiredCameraRotation;                                // 0x0564(0x000C) (Transient)
	float                                              LastDesiredCameraFOV;                                     // 0x0570(0x0004) (Transient)
	float                                              ForcedCameraAccumulator;                                  // 0x0574(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerCameraNative");
		return ptr;
	}


	struct FVector CheckForCollisionTowerPlacement(const struct FVector& TargetLocation, const struct FVector& cameraLocation, float DeltaTime);
	struct FVector CheckForCollision(const struct FVector& TargetLocation, const struct FVector& cameraLocation, float DeltaTime, float tDistanceMultiplier);
	float STATIC_CameraDot(const struct FVector& SrcPosition, const struct FVector& cameraLocation, const struct FRotator& cameraRotation);
	void NativeUpdateViewTargetChase(const struct FRotator& TargetRotation, float DeltaTime, unsigned long bIsGamePad, struct FTViewTarget* OutVT);
	void NativeUpdateViewTargetBase(float DeltaTime, struct FTViewTarget* OutVT);
	void CalculateSpinOffset();
	void SpinCamera(float Amount, unsigned long forceSpin);
	unsigned long IsInShoulderMode();
};


// Class UDKGame.EquipmentDataContainer
// 0x000C (0x0048 - 0x003C)
class UEquipmentDataContainer : public UObject
{
public:
	TArray<struct FSHeroEquipmentItem>                 EquipmentTemplates;                                       // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.EquipmentDataContainer");
		return ptr;
	}

};


// Class UDKGame.HUDWidgetScene
// 0x0028 (0x05AC - 0x0584)
class UHUDWidgetScene : public UUIScene
{
public:
	TArray<class UHUDPrefabContainer*>                 containers;                                               // 0x0584(0x000C) (NeedCtorLink)
	TArray<class UHUDPrefabContainer*>                 dormantContainers;                                        // 0x0590(0x000C) (NeedCtorLink)
	float                                              lastFrameTimeSeconds;                                     // 0x059C(0x0004)
	float                                              LastRenderTimeOffset;                                     // 0x05A0(0x0004)
	class APlayerController*                           Owner;                                                    // 0x05A4(0x0004)
	unsigned long                                      bInLobbyLevel : 1;                                        // 0x05A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HUDWidgetScene");
		return ptr;
	}


	void NotifyLocalPlayerRemoved(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void UIPostRender(class UCanvas* C);
	void Update(float DeltaTime);
	class UUIObject* DrawPrefab(class UUIPrefab* withPrefab, class UObject* onInstance, const struct FVector& withTranslation, unsigned long centerAboutTranslation, const struct FVector& withTransform, const struct FVector& offsetPercents);
	void SceneDeactivated();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.NativeDunDefDamageableTarget
// 0x0000 (0x021C - 0x021C)
class ANativeDunDefDamageableTarget : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefDamageableTarget");
		return ptr;
	}


	unsigned long ActorHudProjection(class AHUD* H, const struct FVector& actLocation, const struct FVector& IconWorldOffset, float IconScale, float IconWidthMultiplier, float IconHeightMultiplier, float DistanceDenominator, float DistanceScaleClampMin, struct FVector* ScreenPos, float* IconDistanceScale, float* IconWidth, float* IconHeight);
	void STATIC_SortActorsByDistance(const struct FVector& SortFromPosition, TArray<class AActor*>* UnsortedTargets);
};


// Class UDKGame.NativeDunDefEnemyController
// 0x005C (0x0438 - 0x03DC)
class ANativeDunDefEnemyController : public AEngineNativeDunDefAIController
{
public:
	unsigned long                                      UseDynamicActorsTargeting_SLOW : 1;                       // 0x03DC(0x0004) (Edit)
	unsigned long                                      bCheckIfTargetWithinPreventionVolumes : 1;                // 0x03DC(0x0004) (Edit)
	unsigned long                                      bUseScriptGetTargetingDesire : 1;                         // 0x03DC(0x0004) (Edit)
	unsigned long                                      bUseNativeFindTarget : 1;                                 // 0x03DC(0x0004) (Edit)
	unsigned long                                      AllowNewTarget : 1;                                       // 0x03DC(0x0004)
	unsigned long                                      bDebuggingTargets : 1;                                    // 0x03DC(0x0004) (Transient)
	unsigned long                                      bCallSetSetTargetInFindTargetIfSame : 1;                  // 0x03DC(0x0004)
	float                                              TargetingRangeLimitMultiplier;                            // 0x03E0(0x0004) (Edit)
	float                                              TargetingDistanceReductionFactorLinear;                   // 0x03E4(0x0004) (Edit)
	float                                              TargetingDistanceReductionFactorExponent;                 // 0x03E8(0x0004) (Edit)
	float                                              AggroFactorDesirabilityMultiplier;                        // 0x03EC(0x0004) (Edit)
	float                                              AggroFactorDecreaseGracePeriod;                           // 0x03F0(0x0004) (Edit)
	float                                              AggroFactorDecreaseSpeed;                                 // 0x03F4(0x0004) (Edit)
	TArray<class AActor*>                              IgnoreTargets;                                            // 0x03F8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FDebugTargetList>                    DebugTargets;                                             // 0x0404(0x000C) (Transient, NeedCtorLink)
	class AActor*                                      Target;                                                   // 0x0410(0x0004)
	TArray<struct FClassTargetingMultiplier>           ClassTargetingMultipliers;                                // 0x0414(0x000C) (Edit, NeedCtorLink)
	TArray<struct FActorTargetingMultiplier>           ActorTargetingMultipliers;                                // 0x0420(0x000C) (NeedCtorLink)
	TArray<struct FAggroEntry>                         AggroEntries;                                             // 0x042C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefEnemyController");
		return ptr;
	}


	float ScriptGetTargetingDesire(class AActor* testTarget);
	float GetTargetingDesire(class AActor* testTarget);
	class AActor* FindTarget(unsigned long bDontSetAsTarget, unsigned long onlyPickSpecifiedClass, class UClass* specifiedClass);
	class AActor* NativeFindTarget(unsigned long bDontSetAsTarget, unsigned long onlyPickSpecifiedClass, class UClass* specifiedClass);
	float GetTargetingMultiplier(class AActor* ActorRef, float baseDesirability);
	float GetAggroDesirability(class AActor* testTarget);
	unsigned long IsWithinTargetingPreventionVolume(class AActor* testTarget);
	void SetTarget(class AActor* NewTarget, unsigned long bDontClearIgnoreList);
};


// Class UDKGame.NativeDunDefGameReplicationInfo
// 0x0040 (0x02BC - 0x027C)
class ANativeDunDefGameReplicationInfo : public AGameReplicationInfo
{
public:
	float                                              EnemyTargetingDistanceLimit;                              // 0x027C(0x0004)
	float                                              MinFloatingDamageCameraDot;                               // 0x0280(0x0004)
	TArray<struct FFloatingDamageEntry>                FloatingDamageEntries;                                    // 0x0284(0x000C) (NeedCtorLink)
	class UFont*                                       DamageTextFriendlyFont;                                   // 0x0290(0x0004)
	class UFont*                                       DamageTextEnemyFont;                                      // 0x0294(0x0004)
	struct FLinearColor                                DamageTextNormalGradientColor;                            // 0x0298(0x0010)
	struct FLinearColor                                DamageTextEnemyGradientColor;                             // 0x02A8(0x0010)
	unsigned long                                      bShowFloatingDamageNumbers : 1;                           // 0x02B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefGameReplicationInfo");
		return ptr;
	}


	void DrawMyHUD(class ADunDefHUD* H);
	void DrawFloatingNumbers(class ANativeDunDefHUD* H);
	void UpdateFloatingDamageEntries(float DeltaTime);
};


// Class UDKGame.NativeDunDefHUD
// 0x0004 (0x094C - 0x0948)
class ANativeDunDefHUD : public AHUD
{
public:
	unsigned long                                      ShowFloatingDamageNumbers : 1;                            // 0x0948(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefHUD");
		return ptr;
	}

};


// Class UDKGame.NativeDunDefPlayerReplicationInfo
// 0x0004 (0x02D8 - 0x02D4)
class ANativeDunDefPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	unsigned long                                      bIsTalking : 1;                                           // 0x02D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeDunDefPlayerReplicationInfo");
		return ptr;
	}


	void STATIC_UpdatePlayerTalking(const struct FUniqueNetId& PlayerNetId, unsigned long isTalking);
};


// Class UDKGame.NativeMain
// 0x001C (0x03AC - 0x0390)
class ANativeMain : public AGameInfo
{
public:
	class UClass*                                      DefaultDunDefController;                                  // 0x0390(0x0004)
	TArray<class AActor*>                              TargetableActors;                                         // 0x0394(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass*>                              EnemyTargetingClassesToIgnore;                            // 0x03A0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.NativeMain");
		return ptr;
	}


	unsigned long STATIC_IsCurrentMapMod();
	unsigned long STATIC_HasPendingInvite();
	int STATIC_GetNumPrimaryDunDefPlayers(unsigned long onlyCountPlayersThatHaveSpawned);
	int STATIC_GetNumNonLocalDunDefPlayers(unsigned long onlyCountPlayersThatHaveSpawned);
	unsigned long STATIC_IsMacOS();
	int STATIC_GetNumDunDefPlayers(unsigned long onlyCountPlayersThatHaveSpawned, unsigned long OnlyCountLocalPlayers);
};


// Class UDKGame.ProfanityFilter
// 0x0000 (0x003C - 0x003C)
class UProfanityFilter : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ProfanityFilter");
		return ptr;
	}


	struct FString Dirty(const struct FString& testString);
	void Init();
};


// Class UDKGame.SaveHelper
// 0x01CC (0x0208 - 0x003C)
class USaveHelper : public UObject
{
public:
	TArray<int>                                        userIDs;                                                  // 0x003C(0x000C) (NeedCtorLink)
	float                                              deviceSelectorDelay;                                      // 0x0048(0x0004) (Config)
	struct FDouble                                     SaveTimers[0x5];                                          // 0x004C(0x0008) (Const, Native)
	struct FString                                     CachedMOTD;                                               // 0x0074(0x000C) (Transient, NeedCtorLink)
	struct FString                                     MSG_MidGameLoadTitle;                                     // 0x0080(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_MidGameLoadMessage;                                   // 0x008C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_NoSaveDeviceTitle;                                    // 0x0098(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_NoSaveDeviceMessage;                                  // 0x00A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_CouldNotLoadTitle;                                    // 0x00B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_CouldNotLoadMessage;                                  // 0x00BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_DeviceRemovedTitle;                                   // 0x00C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_DeviceRemovedMessage;                                 // 0x00D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_DeviceFoundTitle;                                     // 0x00E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_DeviceFoundMessage;                                   // 0x00EC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_NotEnoughSpaceTitle;                                  // 0x00F8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_NotEnoughSpaceMessage;                                // 0x0104(0x000C) (Localized, NeedCtorLink)
	struct FQueuedSave                                 CurrentWrite[0x4];                                        // 0x0110(0x0014) (NeedCtorLink)
	int                                                NeedsWrite[0x4];                                          // 0x0160(0x0004)
	int                                                SavingActive;                                             // 0x0170(0x0004)
	int                                                ValidLoad[0x4];                                           // 0x0174(0x0004)
	int                                                LoadedGUID[0x4];                                          // 0x0184(0x0004)
	int                                                FoundSave[0x4];                                           // 0x0194(0x0004)
	int                                                HasSetDefaultOptions[0x4];                                // 0x01A4(0x0004)
	int                                                HasSaved[0x4];                                            // 0x01B4(0x0004)
	int                                                SaveError[0x4];                                           // 0x01C4(0x0004)
	int                                                HasShownSaveError[0x4];                                   // 0x01D4(0x0004)
	int                                                ShowDeviceRequests[0x4];                                  // 0x01E4(0x0004)
	int                                                ShowDeviceModulo;                                         // 0x01F4(0x0004)
	int                                                MultipleSaves[0x4];                                       // 0x01F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.SaveHelper");
		return ptr;
	}


	void AZURE_LoadfileFailure();
	void AZURE_KeepAliveFailure();
	void AZURE_LoginDuplicateError();
	void AZURE_BannedError();
	void AZURE_LoginSuccessful(const struct FString& MessageOfDay);
	void AZURE_DataLoaded();
	void AZURE_SeriousError();
	void AZURE_UnEndedItemPurchaseSuccess(TArray<struct FPurchasedItem> UnEndedPurchase);
	void AZURE_ItemPurchaseFailure(int OrderID, int ItemId, int itemQuantity);
	void AZURE_ItemPurchaseSuccess(int OrderID, int ItemId, int itemQuantity);
	struct FString STATIC_GetSteamID();
	void STATIC_TriggerHttpEvent(const struct FString& URL, const struct FString& Arguments, unsigned long IsPost);
	struct FString GenerateCompressedValidURL(const struct FString& InString);
	unsigned long STATIC_IsAppPurchased(int AppID, unsigned long bIsDLC);
	void GetUnEndedPurchasedItem();
	void EndItemPurchaseFromStore(int OrderID);
	void BuyItemFromStore(int ItemId, int itemQuantity, int itemPrice, const struct FString& itemDescription, const struct FString& itemCategory);
	void EndRemoteConnection();
	void AcquireRemoteConnection();
	unsigned long ProcessMobileConversion(TArray<struct FHeroAndEquipment>* Heroes, int* mana, TArray<struct FEquipmentSaveInfo>* ItemBoxEquipment, TArray<struct FEquipmentSaveInfo>* LobbyEquipment);
	unsigned long HasMobileConversion();
	unsigned long LoadStorageFile(int UserID, unsigned long bUseBackup, class UObject* GameStorage, class UStatSystem* Stats, unsigned long bIsRemote, unsigned long bUseSteamCloud);
	void SaveStorageFile(int UserID, class UObject* GameStorage, class UStatSystem* Stats, unsigned long bIsRemote);
	void SavingStorageTimerEnd(int TimerID);
	void SavingStorageTimerBegin(int TimerID);
	void DoWork();
	void Update();
	void OpenWebPage(const struct FString& URL);
	void ShowLoginUI(unsigned long bWithGuest);
	TArray<int> GetUserIDs();
	void ShowUserList(int PlayerIndex);
	unsigned long IsSignedIn(int UserID, unsigned long requireLive);
	int GetGuestSponsor(int UserID);
	unsigned long IsUserGuest(int UserID);
	void ClearDeviceCacheForUser(int UserID);
	void SetupDeviceSelectorDelay(int UserID);
	void ClearDeviceSelectionDelegates();
	void SetupDeviceSelectionDelegates();
	void OnSubscribedMapUpdate(unsigned long bWasSuccessful);
	void NotifyStorageDeviceChanged();
	void deviceReadProfileSettingsComplete(unsigned char LocalUserNum, unsigned long bWasSuccessful);
	void deviceSelectedFour(unsigned long bWasSuccessful);
	void deviceSelectedThree(unsigned long bWasSuccessful);
	void deviceSelectedTwo(unsigned long bWasSuccessful);
	void deviceSelectedOne(unsigned long bWasSuccessful);
	void ShowDeviceSelectorUI(int whichController);
	void PromptClosed(int whichController);
	unsigned long WantsDeviceSelector(class UUI_MessageBox* theMessageBox, const struct FString& ButtonPressed, int whichPlayer);
	void DeviceSelectorPromptClosed(class UUI_MessageBox* theMessageBox);
	void ShowSaveError();
	void deviceSelected(int whichController, unsigned long bWasSuccessful);
	unsigned long HasSave(int UserID);
	unsigned long IsSaving();
	void ReEnumerateContent(int ControllerId);
	void UsedFoundStorageDevice(int ControllerId);
	void BootBackToMenu(unsigned long BootWithDisconnect, int ControllerId);
	void OnLoginChangeDelegate(unsigned char ControllerId);
	void LoadToMainMenu(class ULocalPlayer* thePlayer);
	void UsedStorageDeviceDisconnected(int ControllerId);
	unsigned long DeviceRemovedResponse(class UUI_MessageBox* theMessageBox, const struct FString& ButtonPressed, int whichPlayer);
	void OnLoginChange(int UserID);
	void RegisterUserID(int PlayerIndex, int UserID, int GuestID, const struct FString& NickName);
};


// Class UDKGame.StatObjectDataContainer
// 0x000C (0x0048 - 0x003C)
class UStatObjectDataContainer : public UObject
{
public:
	TArray<struct FSStatObject>                        StatObjects;                                              // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.StatObjectDataContainer");
		return ptr;
	}

};


// Class UDKGame.StatSystem
// 0x0060 (0x009C - 0x003C)
class UStatSystem : public UObject
{
public:
	TArray<struct FStatClass>                          statClasses;                                              // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FStatPlayer>                         Players;                                                  // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FStatPlayerMetaData>                 bestOfMetadata;                                           // 0x0054(0x000C) (NeedCtorLink)
	struct FStatBuffer                                 currentBuffer;                                            // 0x0060(0x0020) (Const, NeedCtorLink)
	TArray<struct FStatBuffer>                         storedBuffers;                                            // 0x0080(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               findNameArray;                                            // 0x008C(0x000C) (Const, NeedCtorLink)
	unsigned long                                      shouldBeRecording : 1;                                    // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.StatSystem");
		return ptr;
	}


	int GetAward(int whichAward);
	TArray<struct FStatEntry> GetCumulativeStats(int StatClassIndex, const struct FString& BufferName, int bufferIndex);
	unsigned long HasStats(const struct FString& BufferName, int bufferIndex);
	unsigned long CreateFromArray(TArray<int> fromArray, unsigned long bUseCompression);
	void CreateProxyBuffer(struct FStatProxyBuffer* InBuffer);
	TArray<int> SerializeIntoArray(unsigned long bUseCompression);
	TArray<struct FStatEntry> GetStoredStats(int StatClassIndex, const struct FString& BufferName, int bufferIndex);
	TArray<struct FStatEntry> GetEventStats(const struct FString& BufferName, int bufferIndex);
	void ClearStoredStats(int StatClassIndex, int PC, const struct FString& fromBuffer, const struct FName& SplitName);
	void PurgeTotalBuffers();
	int QueryAccumulatedStatForCurrentBuffer(int StatClassIndex, int PC, const struct FName& SplitName);
	int QueryAccumulatedStat(int StatClassIndex, int PC, const struct FName& SplitName, const struct FString& fromBuffer, int fromBufferIndex, unsigned long bRequiredFromStored);
	void ConglomerateEventAlongTimeline(int StatClassIndex, float StartTime, float EndTime, int numBuckets);
	int GetFirstStatWriter(int StatClassIndex);
	int GetLastStatWriter(int StatClassIndex);
	void CheckTimeBasedAward(int StatClassIndex, int numEventsForAward, float timeForAward, int awardStatClassIndex);
	void ReportGameStat(int StatClassIndex, int Value, class APlayerController* PC, const struct FName& SplitName, float Time, unsigned long sharedStat);
	void ReportStat(int StatClassIndex, int Value, class APlayerController* PC, const struct FName& SplitName, float Time, unsigned long sharedStat);
	unsigned long IsStatRecording();
	void StopStatRecording();
	void StartStatRecording(const struct FString& BufferName, int bufferIndex);
	struct FString GetStatPlayerName(class APlayerController* PC);
	void StatPlayerAdded(class APlayerController* PC, int Index);
	unsigned long HasBestOfValue(int StatClassIndex, const struct FString& BufferName, int bufferIndex);
	struct FStatEntry GetBestOfEntry(int StatClassIndex, const struct FString& BufferName, int bufferIndex);
	unsigned long GetBestOfMetadata(int StatClassIndex, const struct FString& BufferName, int bufferIndex, const struct FName& dataKey, struct FString* DataValue);
	void SetBestOfMetadata(const struct FName& dataKey, const struct FString& DataValue);
	unsigned long GetPlayerMetadata(int PlayerIndex, const struct FName& dataKey, struct FString* DataValue);
	unsigned long SetPlayerMetadata(int PlayerIndex, const struct FName& dataKey, const struct FString& DataValue);
	void AddStatPlayer(class APlayerController* PC, const struct FString& PlayerName);
};


// Class UDKGame.TextComponent
// 0x0032 (0x01F6 - 0x01C4)
class UTextComponent : public UPrimitiveComponent
{
public:
	struct FString                                     TextOut;                                                  // 0x01C4(0x000C) (Edit, NeedCtorLink)
	class UMaterialInterface*                          TextMaterial;                                             // 0x01D0(0x0004) (Edit)
	class UFont*                                       TextFont;                                                 // 0x01D4(0x0004) (Edit)
	struct FColor                                      TextColor;                                                // 0x01D8(0x0004) (Edit)
	unsigned long                                      bFaceScreen : 1;                                          // 0x01DC(0x0004) (Edit)
	struct FVector2D                                   MaximumWorldSpace2DBounds;                                // 0x01E0(0x0008) (Edit)
	struct FVector                                     BoundsExtent;                                             // 0x01E8(0x000C) (Edit)
	TEnumAsByte<ENoteAlignment>                        Alignment;                                                // 0x01F4(0x0001) (Edit)
	TEnumAsByte<ENoteVerticalAlignment>                VerticalAlignment;                                        // 0x01F5(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.TextComponent");
		return ptr;
	}

};


// Class UDKGame.UDKGamePawn
// 0x00E4 (0x056C - 0x0488)
class AUDKGamePawn : public APawn
{
public:
	unsigned long                                      bClientUseRotationInterpolation : 1;                      // 0x0488(0x0004) (Edit)
	unsigned long                                      bUseRotationInterpolation : 1;                            // 0x0488(0x0004) (Edit)
	unsigned long                                      bUseLocationInterpolation : 1;                            // 0x0488(0x0004) (Edit)
	unsigned long                                      bNativeCalculateSpeed : 1;                                // 0x0488(0x0004) (Edit)
	unsigned long                                      bNativeCalculateAirSpeed : 1;                             // 0x0488(0x0004) (Edit)
	unsigned long                                      bSetLocationInterpolation : 1;                            // 0x0488(0x0004) (Transient)
	unsigned long                                      bClientHasSetRotation : 1;                                // 0x0488(0x0004) (Transient)
	unsigned long                                      Dead : 1;                                                 // 0x0488(0x0004) (Net)
	unsigned long                                      TurnAnimationUseConstantSpeed : 1;                        // 0x0488(0x0004) (Edit)
	unsigned long                                      bUseTurnDirectionBlender : 1;                             // 0x0488(0x0004) (Edit)
	unsigned long                                      bUseUpperBodyCustomAnims : 1;                             // 0x0488(0x0004) (Edit)
	unsigned long                                      bDoUseTurnBlender : 1;                                    // 0x0488(0x0004) (Edit)
	unsigned long                                      bClampLookAtPitch : 1;                                    // 0x0488(0x0004) (Edit)
	unsigned long                                      bClampLookAtYaw : 1;                                      // 0x0488(0x0004) (Edit)
	unsigned long                                      bUseConstantMeshInterpolation : 1;                        // 0x0488(0x0004) (Edit)
	unsigned long                                      bConstantLocInterpUseZLerp : 1;                           // 0x0488(0x0004) (Edit)
	float                                              ClientRotationInterpSpeed;                                // 0x048C(0x0004) (Edit)
	float                                              TheLocInterpSpeed;                                        // 0x0490(0x0004) (Edit)
	float                                              MaxLocInterpDistance;                                     // 0x0494(0x0004) (Edit)
	float                                              InterpolatedMeshDrawScale;                                // 0x0498(0x0004)
	struct FVector                                     MeshInterpLoc;                                            // 0x049C(0x000C) (Transient)
	class UAnimNodeBlend*                              TurnInPlaceActiveBlender;                                 // 0x04A8(0x0004)
	class UAnimNodeBlend*                              TurnWhileMovingActiveBlender;                             // 0x04AC(0x0004)
	class UAnimNodeBlend*                              TurnDirectionBlender;                                     // 0x04B0(0x0004)
	struct FName                                       TurnInPlaceActiveBlenderName;                             // 0x04B4(0x0008) (Edit)
	struct FName                                       TurnWhileMovingActiveBlenderName;                         // 0x04BC(0x0008) (Edit)
	float                                              TurnInPlaceMinDeltaYaw;                                   // 0x04C4(0x0004) (Edit)
	class UAnimNodeScalePlayRate*                      TurnInPlaceSpeedScaler;                                   // 0x04C8(0x0004)
	struct FName                                       TurnInPlaceSpeedScalerName;                               // 0x04CC(0x0008) (Edit)
	float                                              TurnInPlaceSpeedDivision;                                 // 0x04D4(0x0004) (Edit)
	float                                              TurnInPlaceBlendInTime;                                   // 0x04D8(0x0004) (Edit)
	float                                              TurnInPlaceBlendOutTime;                                  // 0x04DC(0x0004) (Edit)
	float                                              TurnWhileMovingBlendAmount;                               // 0x04E0(0x0004) (Edit)
	float                                              TurnInPlaceAnimSpeedScalar;                               // 0x04E4(0x0004) (Edit)
	float                                              TurnDirectionBlendTime;                                   // 0x04E8(0x0004) (Edit)
	float                                              LocInterpSpeedBase;                                       // 0x04EC(0x0004) (Edit)
	float                                              LocInterpSpeedZ;                                          // 0x04F0(0x0004) (Edit)
	struct FVector                                     LookAtTargetOffset;                                       // 0x04F4(0x000C) (Edit)
	float                                              MaxLookAtDeltaDegrees;                                    // 0x0500(0x0004) (Edit)
	float                                              MinLookAtPitchDegrees;                                    // 0x0504(0x0004) (Edit)
	float                                              MaxLookAtPitchDegrees;                                    // 0x0508(0x0004) (Edit)
	float                                              MinLookAtYawDegrees;                                      // 0x050C(0x0004) (Edit)
	float                                              MaxLookAtYawDegrees;                                      // 0x0510(0x0004) (Edit)
	float                                              MovementSpeedMultiplier;                                  // 0x0514(0x0004) (Net)
	float                                              MyMovementSpeedMultiplier;                                // 0x0518(0x0004) (Edit)
	float                                              ExtraMovementSpeedMultiplier;                             // 0x051C(0x0004) (Transient)
	float                                              BaseGroundSpeed;                                          // 0x0520(0x0004) (Transient)
	float                                              AnotherExtraMovementSpeedMultiplier;                      // 0x0524(0x0004) (Transient)
	float                                              BaseAirSpeed;                                             // 0x0528(0x0004) (Transient)
	TArray<class UAnimNodePlayCustomAnim*>             CustomAnimNodes;                                          // 0x052C(0x000C) (NeedCtorLink)
	TArray<class UAnimNodePlayCustomAnim*>             UpperBodyCustomAnimNodes;                                 // 0x0538(0x000C) (NeedCtorLink)
	int                                                DesiredLookAtYaw;                                         // 0x0544(0x0004) (Transient)
	int                                                CurrentLookAtYaw;                                         // 0x0548(0x0004) (Transient)
	int                                                DesiredLookAtPitch;                                       // 0x054C(0x0004) (Transient)
	int                                                CurrentLookAtPitch;                                       // 0x0550(0x0004) (Transient)
	struct FVector                                     PreviousLocation;                                         // 0x0554(0x000C) (Transient)
	int                                                PreviousTurnInPlaceYaw;                                   // 0x0560(0x0004) (Transient)
	int                                                PathNodeID;                                               // 0x0564(0x0004) (Edit)
	float                                              lastPawnRubTime;                                          // 0x0568(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UDKGamePawn");
		return ptr;
	}


	struct FRotator GetInterpolatedRotation();
	struct FVector GetInterpolatedLocation();
	struct FVector STATIC_IsolatedCalculateVelocity(const struct FVector& InCurrentVelocity, const struct FVector& InAcceleration, float InMaxSpeed, float InFriction, float InAnisotropicFriction, float InDeltaTime);
	unsigned long IsPlayingCustomAnim(const struct FName& inAnim, float TimeFromEndToConsiderFinished);
	void UpdateLookAtAngles(const struct FVector& TargetLoc);
	void DrawFloatingName(class AHUD* H, class UFont* theFont, const struct FColor& theDrawcolor, const struct FVector& WorldLoc, const struct FString& PlayerName, const struct FString& HeroName, float theScale);
	unsigned long GetAutoAimWeight(class AActor* currentTarget, float checkRange, float MinAutoAimDot, float MinimumDotOverride, float AutoAimDotWeight, float TargetingDesirability, float* AimWeight);
	void UpdateTurnBlender(float DeltaTime, const struct FRotator& YawRotationToCheck, unsigned long bUseTurnBlender);
	struct FRotator UpdateTransformInterpolation(float DeltaTime);
	float STATIC_GetSeededFRand(unsigned char Seed);
};


// Class UDKGame.UILineGraph
// 0x002C (0x04A0 - 0x0474)
class UUILineGraph : public UUIObject
{
public:
	TArray<struct FLineGraphLine>                      lines;                                                    // 0x0474(0x000C) (Edit, NeedCtorLink)
	struct FVector2D                                   MaxValue;                                                 // 0x0480(0x0008) (Edit)
	struct FVector2D                                   MinValue;                                                 // 0x0488(0x0008) (Edit)
	class UMaterialInterface*                          lineMaterial;                                             // 0x0490(0x0004) (Edit)
	struct FVector2D                                   PaddingPercent;                                           // 0x0494(0x0008) (Edit)
	class UUIResolutionContainer*                      rezContainer;                                             // 0x049C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UILineGraph");
		return ptr;
	}

};


// Class UDKGame.UIResolutionContainer
// 0x0040 (0x04B8 - 0x0478)
class UUIResolutionContainer : public UUIContainer
{
public:
	TArray<struct FResolutionFitting>                  fittings;                                                 // 0x0478(0x000C) (Edit, NeedCtorLink)
	TArray<struct FResolutionFitting>                  altFittings;                                              // 0x0484(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EUIAlignment>                          fittingAlignmentHorz;                                     // 0x0490(0x0001) (Edit)
	TEnumAsByte<EUIAlignment>                          fittingAlignmentVert;                                     // 0x0491(0x0001) (Edit)
	TEnumAsByte<EResolutionType>                       emulateResType;                                           // 0x0492(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0493(0x0001) MISSED OFFSET
	int                                                currentFitting;                                           // 0x0494(0x0004) (Edit, Transient, EditConst)
	float                                              currentFittingScale;                                      // 0x0498(0x0004) (Edit, Transient, EditConst)
	TArray<struct FResolutionFitting>                  tempFittings;                                             // 0x049C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FResolutionFitting>                  tempAltFittings;                                          // 0x04A8(0x000C) (Transient, NeedCtorLink)
	float                                              MyUIScalePercent;                                         // 0x04B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIResolutionContainer");
		return ptr;
	}


	void UpdateUIScalePercent(float newUIScalePct);
};


// Class UDKGame.UIScriptWidget
// 0x0020 (0x04CC - 0x04AC)
class UUIScriptWidget : public UUIImage
{
public:
	class USurface*                                    PreviewImage;                                             // 0x04AC(0x0004) (Edit)
	struct FColor                                      WhiteColor;                                               // 0x04B0(0x0004)
	struct FLinearColor                                WhiteLinearColor;                                         // 0x04B4(0x0010)
	class UCanvas*                                     CanvasObject;                                             // 0x04C4(0x0004)
	unsigned long                                      needsMatFlush : 1;                                        // 0x04C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget");
		return ptr;
	}


	void EndUIDrawing(class UCanvas* C);
	struct FLinearColor GetBackgroundDrawColor();
	void UIDraw(class UCanvas* C, class USurface* surf, float XL, float YL, const struct FLinearColor& LinColor, unsigned long FlushMaterial);
	void BeginUIDrawing(class UCanvas* C);
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
};


// Class UDKGame.UIScriptWidget_Button
// 0x0130 (0x05C4 - 0x0494)
class UUIScriptWidget_Button : public UUIButton
{
public:
	class USurface*                                    ButtonBackground;                                         // 0x0494(0x0004) (Edit)
	class USurface*                                    FocusedButtonBackground;                                  // 0x0498(0x0004) (Edit)
	unsigned long                                      bUseDisplayString : 1;                                    // 0x049C(0x0004) (Edit)
	unsigned long                                      bDisplayStringScaleToFit : 1;                             // 0x049C(0x0004) (Edit)
	unsigned long                                      bWrapText : 1;                                            // 0x049C(0x0004) (Edit)
	unsigned long                                      bScaleTextByResolution : 1;                               // 0x049C(0x0004) (Edit)
	unsigned long                                      bIsClickable : 1;                                         // 0x049C(0x0004) (Edit)
	unsigned long                                      bForceOnlyStyleDrawColor : 1;                             // 0x049C(0x0004) (Edit)
	unsigned long                                      bSupportsDraggedOntoRendering : 1;                        // 0x049C(0x0004) (Edit)
	unsigned long                                      bUseTooltip : 1;                                          // 0x049C(0x0004) (Edit)
	unsigned long                                      bPreviewTooltip : 1;                                      // 0x049C(0x0004) (Edit)
	unsigned long                                      bCenterToolTipX : 1;                                      // 0x049C(0x0004) (Edit)
	unsigned long                                      bCenterToolTipY : 1;                                      // 0x049C(0x0004) (Edit)
	unsigned long                                      bDrawToolTipBG : 1;                                       // 0x049C(0x0004) (Edit)
	unsigned long                                      WrapToolTipText : 1;                                      // 0x049C(0x0004) (Edit)
	unsigned long                                      bOffsetToolTipFromOwner : 1;                              // 0x049C(0x0004) (Edit)
	unsigned long                                      isEditorRender : 1;                                       // 0x049C(0x0004) (Transient)
	unsigned long                                      needsMatFlush : 1;                                        // 0x049C(0x0004) (Transient)
	unsigned long                                      bRenderingDraggable : 1;                                  // 0x049C(0x0004) (Transient)
	struct FVector2D                                   DisplayStringPadding;                                     // 0x04A0(0x0008) (Edit)
	float                                              DisplayStringMinScale;                                    // 0x04A8(0x0004) (Edit)
	float                                              DisplayPostFitScaleMultiplier;                            // 0x04AC(0x0004) (Edit)
	struct FString                                     displayString;                                            // 0x04B0(0x000C) (Edit, Localized, NeedCtorLink)
	class UFont*                                       TextFont;                                                 // 0x04BC(0x0004) (Edit)
	struct FColor                                      TextColor;                                                // 0x04C0(0x0004) (Edit)
	float                                              TextScale;                                                // 0x04C4(0x0004) (Edit)
	struct FLinearColor                                TextGradientColor;                                        // 0x04C8(0x0010) (Edit)
	struct FLinearColor                                DisabledBGColor;                                          // 0x04D8(0x0010) (Edit)
	struct FColor                                      DisabledTextColor;                                        // 0x04E8(0x0004) (Edit)
	struct FLinearColor                                DisabledTextGradientColor;                                // 0x04EC(0x0010) (Edit)
	struct FLinearColor                                BackgroundColor;                                          // 0x04FC(0x0010) (Edit)
	struct FLinearColor                                DragColorMultiply;                                        // 0x050C(0x0010) (Edit)
	struct FLinearColor                                FocusedBGColor;                                           // 0x051C(0x0010) (Edit)
	float                                              PressedScaleMultiplier;                                   // 0x052C(0x0004) (Edit)
	float                                              PressedXOffset;                                           // 0x0530(0x0004) (Edit)
	float                                              PressedYOffset;                                           // 0x0534(0x0004) (Edit)
	float                                              TextShadowScaleMultiplier;                                // 0x0538(0x0004) (Edit)
	int                                                CustomData;                                               // 0x053C(0x0004) (Edit)
	int                                                CustomDataTwo;                                            // 0x0540(0x0004) (Edit)
	float                                              ToolTipTextShadowScaleMultiplier;                         // 0x0544(0x0004) (Edit)
	float                                              ToolTipCenterOffsetX;                                     // 0x0548(0x0004) (Edit)
	float                                              ToolTipCenterOffsetY;                                     // 0x054C(0x0004) (Edit)
	float                                              TooltipBGPaddingX;                                        // 0x0550(0x0004) (Edit)
	float                                              TooltipBGPaddingY;                                        // 0x0554(0x0004) (Edit)
	float                                              ToolTipTextScale;                                         // 0x0558(0x0004) (Edit)
	TArray<class USurface*>                            TooltipBGs;                                               // 0x055C(0x000C) (Edit, NeedCtorLink)
	class UFont*                                       ToolTipTextFont;                                          // 0x0568(0x0004) (Edit)
	struct FString                                     MyTooltipString;                                          // 0x056C(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              TooltipFadeInSpeed;                                       // 0x0578(0x0004) (Edit)
	float                                              TooltipFadeOutSpeed;                                      // 0x057C(0x0004) (Edit)
	struct FColor                                      ToolTipTextColor;                                         // 0x0580(0x0004) (Edit)
	struct FLinearColor                                ToolTipBgColor;                                           // 0x0584(0x0010) (Edit)
	float                                              WrapToolTipTextWidth;                                     // 0x0594(0x0004) (Edit)
	float                                              WrapToolTipTextHeight;                                    // 0x0598(0x0004) (Edit)
	float                                              ToolTipOpacity;                                           // 0x059C(0x0004) (Transient)
	struct FColor                                      WhiteColor;                                               // 0x05A0(0x0004)
	struct FLinearColor                                WhiteLinearColor;                                         // 0x05A4(0x0010)
	class UCanvas*                                     CanvasObject;                                             // 0x05B4(0x0004)
	struct FScriptDelegate                             __NotifyWidgetClicked__Delegate;                          // 0x05B8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_Button");
		return ptr;
	}


	void EndUIDrawing(class UCanvas* C);
	void UIDrawRotated(class UCanvas* C, class USurface* surf, float XL, float YL, const struct FRotator& TheRotation, const struct FLinearColor& LinColor, unsigned long FlushMaterial);
	void UIDraw(class UCanvas* C, class USurface* surf, float XL, float YL, const struct FLinearColor& LinColor, unsigned long FlushMaterial);
	void BeginUIDrawing(class UCanvas* C);
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	struct FString GetToolTipString();
	struct FLinearColor GetToolTipBGColor();
	struct FColor GetToolTipTextColor();
	void DrawToolTip(class UCanvas* C, float X1, float X2, float Y1, float Y2, float ScaleX, float ScaleY);
	class USurface* GetToolTipBG(float AspectRatio);
	void GetToolTipTextBlocks(TArray<struct FTextEx>* TextBlocks);
	class USurface* GetBackgroundImage();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	unsigned long SupportsDraggedOntoItem(class UUIScriptWidget_Button* DraggedItem);
	void ApplyRenderOffsets(class UCanvas* C, float* X1, float* X2, float* Y1, float* Y2);
	unsigned long IsClickable();
	unsigned long GetIsPressed();
	float GetScaleMultiplier();
	unsigned long GetFocused(unsigned long IgnoreTopLevelScene);
	struct FColor GetTextDrawColor(unsigned long bEnabled);
	struct FLinearColor GetFocusedBGColor();
	struct FLinearColor GetBackgroundDrawColor(unsigned long bEnabled);
	struct FVector GetCurrentMatrixScale(class UCanvas* C);
	struct FVector ApplyCurrentScreenMatrix(class UCanvas* C, const struct FVector& onVector);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
};


// Class UDKGame.DunDefDamageableTarget
// 0x02EC (0x0508 - 0x021C)
class ADunDefDamageableTarget : public ANativeDunDefDamageableTarget
{
public:
	int                                                Health;                                                   // 0x021C(0x0004) (Edit, Net)
	int                                                MaxHealth;                                                // 0x0220(0x0004) (Edit, Net)
	float                                              BaseMaxHealth;                                            // 0x0224(0x0004)
	float                                              TargetingDesirability;                                    // 0x0228(0x0004) (Edit)
	float                                              DTHealthMultiplier;                                       // 0x022C(0x0004) (Edit)
	float                                              TowerTargetingDesirability;                               // 0x0230(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     HurtEffectTemplate;                                       // 0x0234(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     DiedEffectTemplate;                                       // 0x0238(0x0004) (Edit)
	struct FString                                     DescriptiveName;                                          // 0x023C(0x000C) (Edit, Localized, NeedCtorLink)
	class UMaterialInstanceConstant*                   TheHealthHUDMatTemplate;                                  // 0x0248(0x0004) (Edit)
	float                                              MaxPlayerTargetRange;                                     // 0x024C(0x0004) (Edit)
	unsigned long                                      DrawHealthBar : 1;                                        // 0x0250(0x0004) (Edit)
	unsigned long                                      bDrawHealthBarAtMaxHealth : 1;                            // 0x0250(0x0004) (Edit)
	unsigned long                                      bForceDrawHud : 1;                                        // 0x0250(0x0004) (Edit)
	unsigned long                                      DisplayToolTip : 1;                                       // 0x0250(0x0004) (Edit)
	unsigned long                                      bInvincibleInBuildPhase : 1;                              // 0x0250(0x0004) (Edit)
	unsigned long                                      bForcePlayerTarget : 1;                                   // 0x0250(0x0004) (Edit)
	unsigned long                                      bAutoControlSimulatedPosition : 1;                        // 0x0250(0x0004) (Edit)
	unsigned long                                      IsDead : 1;                                               // 0x0250(0x0004) (Net, Transient)
	unsigned long                                      bCanBePlayerEnemy : 1;                                    // 0x0250(0x0004) (Net, Transient)
	unsigned long                                      UseHealthbarMaterial : 1;                                 // 0x0250(0x0004)
	unsigned long                                      bPlayedDeathEffect : 1;                                   // 0x0250(0x0004) (Transient)
	unsigned long                                      bDidSetPlayerTargetableStatus : 1;                        // 0x0250(0x0004) (Transient)
	unsigned long                                      bDidLowHealthEffects : 1;                                 // 0x0250(0x0004) (Transient)
	unsigned long                                      DoFadeOut : 1;                                            // 0x0250(0x0004) (Transient)
	unsigned long                                      bCalledBaseChange : 1;                                    // 0x0250(0x0004) (Transient)
	unsigned long                                      bAllowSuction : 1;                                        // 0x0250(0x0004) (Edit)
	unsigned long                                      bChainIgnore : 1;                                         // 0x0250(0x0004) (Transient)
	unsigned long                                      bIsWebbed : 1;                                            // 0x0250(0x0004) (Transient)
	unsigned long                                      bForceLineOfSight : 1;                                    // 0x0250(0x0004) (Edit)
	float                                              HealthBarScale;                                           // 0x0254(0x0004) (Edit)
	float                                              HealthBarWidth;                                           // 0x0258(0x0004) (Edit)
	float                                              HealthBarHeight;                                          // 0x025C(0x0004) (Edit)
	struct FVector                                     HealthBarPositionOffset;                                  // 0x0260(0x000C) (Edit)
	float                                              TargetingAttackRangeOffset;                               // 0x026C(0x0004) (Edit)
	float                                              PlayerTargetingDesirability;                              // 0x0270(0x0004) (Edit)
	class UParticleSystemComponent*                    LowHealthParticleEffect;                                  // 0x0274(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LowHealthParticlePercentThreshold;                        // 0x0278(0x0004) (Edit)
	struct FVector                                     HealthyColor;                                             // 0x027C(0x000C) (Edit)
	struct FVector                                     WhiteHealthColor;                                         // 0x0288(0x000C) (Edit)
	struct FVector                                     UnhealthyColor;                                           // 0x0294(0x000C) (Edit)
	class UAudioComponent*                             LowHealthSound;                                           // 0x02A0(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     TargetingLocationOffset;                                  // 0x02A4(0x000C) (Edit)
	float                                              ActivationWeighting;                                      // 0x02B0(0x0004) (Edit)
	float                                              ActivationOffset;                                         // 0x02B4(0x0004) (Edit)
	float                                              NeedRepairHealthPercentThreshold;                         // 0x02B8(0x0004) (Edit)
	int                                                MaxNumberOfAttackers;                                     // 0x02BC(0x0004) (Edit, Const)
	float                                              NetFrequencyOverride;                                     // 0x02C0(0x0004) (Edit)
	float                                              NetPriorityOverride;                                      // 0x02C4(0x0004) (Edit)
	int                                                TargetingTeam;                                            // 0x02C8(0x0004) (Edit, Net)
	struct FString                                     SummonedByString;                                         // 0x02CC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FVector                                     ToolTipScreenOffset;                                      // 0x02D8(0x000C) (Edit)
	TArray<struct FDamageAdjuster>                     DamageAdjusters;                                          // 0x02E4(0x000C) (Edit, NeedCtorLink)
	float                                              LightningTowerDamagePercent;                              // 0x02F0(0x0004) (Edit)
	TArray<class AActor*>                              Attackers;                                                // 0x02F4(0x000C) (Transient, NeedCtorLink)
	float                                              LastTakeDamageTime;                                       // 0x0300(0x0004) (Transient)
	class UMaterialInstanceConstant*                   MyHealthHUDMatInstance;                                   // 0x0304(0x0004) (Transient)
	struct FVector                                     LastHitLocation;                                          // 0x0308(0x000C) (Transient)
	int                                                PreviousHealthChange;                                     // 0x0314(0x0004) (Transient)
	struct FColor                                      RedColor;                                                 // 0x0318(0x0004) (Transient)
	float                                              PreviousHealthPercent;                                    // 0x031C(0x0004) (Transient)
	float                                              MaxPlayerTargetRangeSq;                                   // 0x0320(0x0004) (Transient)
	float                                              LastFloatingTakeDamageTime;                               // 0x0324(0x0004) (Transient)
	float                                              LastHurtEffectTime;                                       // 0x0328(0x0004) (Transient)
	float                                              CurrentToolTipDrawOpacity;                                // 0x032C(0x0004) (Transient)
	float                                              LastToolTipDrawTime;                                      // 0x0330(0x0004) (Transient)
	float                                              DamageAdjustmentMultiplier;                               // 0x0334(0x0004) (Transient)
	int                                                NumVeryRecentDamages;                                     // 0x0338(0x0004) (Transient)
	struct FString                                     SummonedString;                                           // 0x033C(0x000C) (Net, Transient, NeedCtorLink)
	struct FLinearColor                                HealDamageTextColor;                                      // 0x0348(0x0010) (Edit)
	float                                              AuraEffectScale;                                          // 0x0358(0x0004) (Edit)
	float                                              GlobalAuraEffectScale;                                    // 0x035C(0x0004) (Edit)
	TArray<class ADunDefTower_Aura*>                   MyAffectingAuras;                                         // 0x0360(0x000C) (Transient, NeedCtorLink)
	struct FAuraEffect                                 AuraEffects[0xA];                                         // 0x036C(0x0008) (Transient)
	class UParticleSystemComponent*                    AuraPSC[0xA];                                             // 0x03BC(0x0004) (ExportObject, Component, EditInline)
	TArray<class ADunDefTower_ChainLightning*>         ChainingTowers;                                           // 0x03E4(0x000C) (Transient, NeedCtorLink)
	TArray<class UDunDefBuff*>                         DefaultBuffsToSpawn;                                      // 0x03F0(0x000C) (Edit, NeedCtorLink)
	struct FActorLevelUpStatModifier                   Stats[0x7];                                               // 0x03FC(0x0020) (Edit)
	float                                              DefaultBuffSpawnDelay;                                    // 0x04DC(0x0004) (Edit)
	TArray<struct FActorLevelUpStatModifier>           CurrentActorLevelUpStatModifiers;                         // 0x04E0(0x000C) (Transient, NeedCtorLink)
	TScriptInterface<class UIActorModifierInterface>   MyActorStatModifier;                                      // 0x04EC(0x0008) (Net, Transient)
	TEnumAsByte<EStatusEffect>                         CurrentStatusEffect;                                      // 0x04F4(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04F5(0x0003) MISSED OFFSET
	struct FsLastDamageInfo                            LastDamageInfo;                                           // 0x04F8(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageableTarget");
		return ptr;
	}


	float GetStatModifier(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long onlyReturnBaseValue);
	unsigned long GetActorLevelUpStatModifier(TEnumAsByte<ELevelUpValueType> Type, struct FActorLevelUpStatModifier* Modifier);
	void SetActorLevelUpStatModifier(TEnumAsByte<ELevelUpValueType> Type, const struct FActorLevelUpStatModifier& Modifier);
	float CalculateStatValue(float BaseValue, struct FActorLevelUpStatModifier* Modifier);
	void GetBuffedStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bAdditivePass, float* buffVal);
	void SpawnDefaultBuffs();
	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
	unsigned long HasStatusEffect(TEnumAsByte<EStatusEffect> StatusToCheck);
	void RemoveStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AddStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AdjustDealtDamage(class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum);
	void OnBuffRemoved(class UObject* BuffRemoved);
	void OnBuffAdded(class UObject* BuffAdded);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
	unsigned long ForceLineOfSight();
	float GetLightningTowerDamagePercent();
	void setIsWebbed(unsigned long isWebbed);
	unsigned long isWebbed();
	unsigned long GetChainIgnore();
	void SetChainIgnore(unsigned long ignore);
	unsigned long IsBeingChainedBy(class ADunDefTower_ChainLightning* Tower);
	void RemoveFromChainingTowers(class ADunDefTower_ChainLightning* Tower);
	void AddToChainingTowers(class ADunDefTower_ChainLightning* Tower);
	unsigned long AllowSuction();
	struct FVector GetLocation();
	void PSCFinished(class UParticleSystemComponent* PSystem);
	void RemoveAllAuraEffects();
	void HandleAuraEffects();
	void RemoveAuraEffect(class ADunDefTower_Aura* AuraInstance);
	void AddAuraEffect(class ADunDefTower_Aura* AuraInstance);
	unsigned long IsFirstAuraOfType(class ADunDefTower_Aura* AuraInstance);
	void StopAuraEffects();
	void ClientTakeDamage(int DamageAmount, class APawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void BaseChange();
	unsigned long CanDetonate();
	void HealPctOfMaxHealth(float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	int GetHealth(unsigned long bGetMax);
	void Detonate(int SetDetonationsNumber);
	unsigned long ForceMoveActor(class AActor* Mover, const struct FVector& NewLoc);
	class UPrimitiveComponent* GetOverrideTargetComponent();
	void LocalTookDamage(int DamageAmount, const struct FVector& atPosition, class UClass* fromDamageType);
	unsigned long AllowDarknessIgnorance();
	unsigned long ShouldBlockPlayerAim(class APlayerController* PC);
	unsigned long NeedsRepair(unsigned long requireFullHealth);
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	float GetMass();
	void EncroachedBy(class AActor* Other);
	void ClientSingleSetMovement(const struct FVector& endLoc, const struct FRotator& endRot, unsigned long bShouldCollideWorld);
	void ClientDisableMovementReplication(const struct FVector& endedLoc);
	void DisableMovementReplication();
	void EnableMovementReplicationTimer(float Time);
	void SetMovementReplication(unsigned long replicateMovement);
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	struct FString GetToolTipText();
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void NotifyTookDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class AActor* DamageCauser);
	void PlayHitEffect(class UClass* DamageType, const struct FVector& HitLocation);
	void NotifyHealthChange();
	void AddHealth(int howMuch, unsigned long bDontDisplayFloatingNumber);
	void HandleDamageTypeEffects(class UClass* ForDamageType, const struct FVector& HitLocation);
	void ShowHealingFloatingNumbers(int howMuch);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void SubtractHealth(int DamageAmount);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void AdjustDamage(class UClass* DamageType, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, int* DamageAmount, struct FVector* Momentum);
	void PlayDeath();
	void Died(class AController* EventInstigator, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser);
	void Destroyed();
	class ADunDefGameReplicationInfo* GetGRI();
	float GetHealthPercent();
	unsigned long GetCanBePlayerEnemy();
	void SetPlayerTargetableStatus();
	void PostBeginPlay();
	struct FColor GetWhiteHealthColor();
	struct FColor GetHealthColor();
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long OnlyDrawHUDForOwner();
	float DTGetEnemyTargetingDesirability(class ADunDefEnemyController* forController);
	float DTGetTowerTargetingDesirability(class ADunDefTower* forTower);
	float DTGetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	struct FVector GetInterpolatedTargetingLocation(class AActor* RequestedBy);
	struct FVector GetTargetingLocation(class AActor* RequestedBy);
	void OnDestroy_RemoveFromTargetableList();
	void OnPostBeginPlay_AddToTargetableList();
	void UnregisterAttacker(class ADunDefEnemyController* forController);
	void RegisterAttacker(class ADunDefEnemyController* forController);
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	float GetAttackRangeOffset();
	unsigned long IgnoreFriendlyFireDamage(const TScriptInterface<class UDunDefTargetableInterface>& instigatorActor, class AController* OptionalController);
	int GetTargetingTeam();
	unsigned long ForceFriendlyFire(class AActor* Target);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefTower
// 0x031C (0x0824 - 0x0508)
class ADunDefTower : public ADunDefDamageableTarget
{
public:
	class UStaticMeshComponent*                        CollisionMesh;                                            // 0x0508(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      TowerMesh;                                                // 0x050C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0510(0x0004) (Edit, ExportObject, Component, EditInline)
	class ADunDefEmitterSpawnable*                     SpawnInEffectTemplate;                                    // 0x0514(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SellEffectTemplate;                                       // 0x0518(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     LevelVictorySellEffectTemplate;                           // 0x051C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     UpgradeEffectTemplate;                                    // 0x0520(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     DowngradeEffectTemplate;                                  // 0x0524(0x0004) (Edit)
	float                                              SpawnInScaleTime;                                         // 0x0528(0x0004) (Edit)
	float                                              CostOfTotalRepairWorthPercent;                            // 0x052C(0x0004) (Edit)
	float                                              CostOfTotalRepair;                                        // 0x0530(0x0004)
	float                                              TimeOfTotalRepair;                                        // 0x0534(0x0004) (Edit)
	float                                              RepairTimeMultiplier;                                     // 0x0538(0x0004) (Edit)
	float                                              SellMarkdown;                                             // 0x053C(0x0004) (Edit)
	float                                              RepairSpeedMultiplier;                                    // 0x0540(0x0004) (Edit)
	int                                                TowerUnitCost;                                            // 0x0544(0x0004) (Edit, Net)
	int                                                ManaWorth;                                                // 0x0548(0x0004) (Edit)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x054C(0x0004) (Edit)
	class UTexture2D*                                  CreatorHeroInPlayIcon;                                    // 0x0550(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x0554(0x0004) (Edit)
	float                                              MiniMapIconFlashHealthPercentThreshold;                   // 0x0558(0x0004) (Edit)
	float                                              MiniMapIconFlashSpeed;                                    // 0x055C(0x0004) (Edit)
	float                                              MiniMapIconFlashSpeedBuildPhase;                          // 0x0560(0x0004) (Edit)
	float                                              CreatorInActivePlayDamageMultiplier;                      // 0x0564(0x0004) (Edit)
	unsigned long                                      bRotateMiniMapIcon : 1;                                   // 0x0568(0x0004) (Edit)
	unsigned long                                      bCantBeSold : 1;                                          // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowOverlapWithCore : 1;                                // 0x0568(0x0004) (Edit)
	unsigned long                                      bNoSpawnEffect : 1;                                       // 0x0568(0x0004) (Edit)
	unsigned long                                      bShowRepairAbilityHealingNumbers : 1;                     // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowTargetingWhileInvincible : 1;                       // 0x0568(0x0004) (Edit)
	unsigned long                                      bForceTopSelection : 1;                                   // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowCharging : 1;                                       // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowDesummoning : 1;                                    // 0x0568(0x0004) (Edit)
	unsigned long                                      InsanityHealthOverride : 1;                               // 0x0568(0x0004) (Edit)
	unsigned long                                      bOpenable : 1;                                            // 0x0568(0x0004) (Edit)
	unsigned long                                      bIsChildNodeOfTripWire : 1;                               // 0x0568(0x0004)
	unsigned long                                      UseTowerRatingMaterial : 1;                               // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowPushing : 1;                                        // 0x0568(0x0004) (Edit)
	unsigned long                                      bDebugAutoBindToPlayer : 1;                               // 0x0568(0x0004) (Edit)
	unsigned long                                      bReportedSummoned : 1;                                    // 0x0568(0x0004) (Transient)
	unsigned long                                      bKillOnBuildPhase : 1;                                    // 0x0568(0x0004) (Transient)
	unsigned long                                      bAddedTowerUnits : 1;                                     // 0x0568(0x0004) (Transient)
	unsigned long                                      bOldReportedSummoned : 1;                                 // 0x0568(0x0004) (Net)
	unsigned long                                      bDidSpawnEffect : 1;                                      // 0x0568(0x0004) (Net)
	unsigned long                                      bIsTripWire : 1;                                          // 0x0568(0x0004)
	unsigned long                                      bInvisible : 1;                                           // 0x0568(0x0004) (Transient)
	unsigned long                                      bOverrideInstigatorHero : 1;                              // 0x0568(0x0004) (Transient)
	unsigned long                                      bDoDamageFlashing : 1;                                    // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowFamiliarBoosting : 1;                               // 0x0568(0x0004) (Edit)
	unsigned long                                      bUsesAlternateDUCount : 1;                                // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowNegativeStatusAffect : 1;                           // 0x0568(0x0004) (Edit)
	unsigned long                                      bAllowTowerBuff : 1;                                      // 0x0568(0x0004) (Edit)
	unsigned long                                      bDisplayDps : 1;                                          // 0x0568(0x0004) (Edit)
	unsigned long                                      bHideMiniMapTowers : 1;                                   // 0x0568(0x0004) (Transient)
	struct FColor                                      MiniMapLowHealthFlashColor;                               // 0x056C(0x0004) (Edit)
	struct FColor                                      MiniMapLowHealthBuildPhaseFlashColor;                     // 0x0570(0x0004) (Edit)
	float                                              AOEMultiplierScale;                                       // 0x0574(0x0004) (Edit)
	float                                              RepairTimeToHealthExponent;                               // 0x0578(0x0004) (Edit)
	float                                              NightmareRepairTimeToHealthExponent;                      // 0x057C(0x0004) (Edit)
	float                                              NightmareHealthMultiplier;                                // 0x0580(0x0004) (Edit)
	float                                              NightmareDamageMultiplier;                                // 0x0584(0x0004) (Edit)
	float                                              CompetitiveDamageMultiplier;                              // 0x0588(0x0004) (Edit)
	float                                              CompetitiveHealthMultiplier;                              // 0x058C(0x0004) (Edit)
	TArray<struct FTowerUpgradeStat>                   TowerUpgradeInfos;                                        // 0x0590(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        TowerUpgradeCosts;                                        // 0x059C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      TowerUpgradeTimes;                                        // 0x05A8(0x000C) (Edit, NeedCtorLink)
	int                                                MaxUpgradeLevel;                                          // 0x05B4(0x0004) (Edit)
	TArray<class UTexture2D*>                          UpgradeLevelIconTextures;                                 // 0x05B8(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      UpgradeLevelIconSizes;                                    // 0x05C4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ManaText;                                                 // 0x05D0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UpgradeToText;                                            // 0x05DC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      OverlayUpgradeIconColor;                                  // 0x05E8(0x0004) (Edit)
	struct FColor                                      DiedMessageColor;                                         // 0x05EC(0x0004) (Edit)
	struct FColor                                      SummonedMessageColor;                                     // 0x05F0(0x0004) (Edit)
	struct FColor                                      SoldMessageColor;                                         // 0x05F4(0x0004) (Edit)
	float                                              UpgradeMiniMapIconScale;                                  // 0x05F8(0x0004) (Edit)
	float                                              UpgradeIconMiniMapOffsetPercent;                          // 0x05FC(0x0004) (Edit)
	float                                              MinimumFireIntervalForDetailedTooltip;                    // 0x0600(0x0004) (Edit)
	TArray<float>                                      DifficultyHealthMultipliers;                              // 0x0604(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyDamageMultipliers;                              // 0x0610(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      UpgradeLinearMultipliersHealth;                           // 0x061C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      UpgradeLinearMultipliersDamage;                           // 0x0628(0x000C) (Edit, NeedCtorLink)
	int                                                MaxDifficultySets;                                        // 0x0634(0x0004) (Edit)
	float                                              TowerDamageMultiplierExponent;                            // 0x0638(0x0004) (Edit)
	float                                              AttackRateMultiplierExponent;                             // 0x063C(0x0004) (Edit)
	float                                              AOEMultiplierExponent;                                    // 0x0640(0x0004) (Edit)
	float                                              HealthMultiplierExponent;                                 // 0x0644(0x0004) (Edit)
	float                                              ElementalIconSize;                                        // 0x0648(0x0004) (Edit)
	int                                                ManaToDrop;                                               // 0x064C(0x0004) (Edit)
	TArray<float>                                      ManaToDropDifficultyMultipliers;                          // 0x0650(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AttackRangeString;                                        // 0x065C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     NumKillsString;                                           // 0x0668(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     PercentScaleString;                                       // 0x0674(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackDamageString;                                       // 0x0680(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackIntervalString;                                     // 0x068C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackIntervalEndString;                                  // 0x0698(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TowerUnitCostString;                                      // 0x06A4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     HideDetailsString;                                        // 0x06B0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ShowDetailsString;                                        // 0x06BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TowerKilledString;                                        // 0x06C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TowerSummonedString;                                      // 0x06D4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TowerSoldString;                                          // 0x06E0(0x000C) (Edit, Localized, NeedCtorLink)
	class UTexture2D*                                  StatIcon;                                                 // 0x06EC(0x0004) (Edit)
	class USoundCue*                                   ToggleDetailsSound;                                       // 0x06F0(0x0004) (Edit)
	float                                              GlobalHealthBarScaleMult;                                 // 0x06F4(0x0004) (Edit)
	class UClass*                                      DontTargetEnemiesWithElementType;                         // 0x06F8(0x0004) (Edit)
	float                                              AttackRateMultiplier;                                     // 0x06FC(0x0004) (Net)
	float                                              DamageMultiplier;                                         // 0x0700(0x0004) (Net)
	float                                              ReistanceMultiplier;                                      // 0x0704(0x0004) (Net)
	float                                              HealthMultiplier;                                         // 0x0708(0x0004)
	float                                              AOEMultiplier;                                            // 0x070C(0x0004) (Net)
	float                                              DamageMultiplierAdditional;                               // 0x0710(0x0004) (Net)
	int                                                TowerBoostHealAmount;                                     // 0x0714(0x0004)
	TArray<int>                                        CostIncrease;                                             // 0x0718(0x000C) (NeedCtorLink)
	int                                                TowerRatingMaterialIndex;                                 // 0x0724(0x0004) (Edit)
	float                                              NumStatPointsForMaxTowerRating;                           // 0x0728(0x0004) (Edit)
	float                                              HealthBarTowerIconSize;                                   // 0x072C(0x0004) (Edit)
	float                                              theTowerRangeScaler;                                      // 0x0730(0x0004) (Net)
	float                                              TowerRating;                                              // 0x0734(0x0004) (Net)
	float                                              LastTowerFallDamageTime;                                  // 0x0738(0x0004) (Transient)
	float                                              RepairIncrementFloat;                                     // 0x073C(0x0004)
	int                                                StartRepairHealth;                                        // 0x0740(0x0004)
	int                                                CreatedAtPhaseID;                                         // 0x0744(0x0004) (Net)
	int                                                UpgradeLevel;                                             // 0x0748(0x0004) (Edit, Net)
	int                                                heroGUID1;                                                // 0x074C(0x0004) (Net, Transient)
	int                                                heroGUID2;                                                // 0x0750(0x0004) (Net, Transient)
	int                                                heroGUID3;                                                // 0x0754(0x0004) (Net, Transient)
	int                                                heroGUID4;                                                // 0x0758(0x0004) (Net, Transient)
	class UMaterialInstanceConstant*                   TowerRatingMaterialInstance;                              // 0x075C(0x0004) (Transient)
	class UDunDefHero*                                 CreatorHero;                                              // 0x0760(0x0004) (Transient)
	TArray<TScriptInterface<class UTowerBoosterInterface>> TowerBoosters;                                            // 0x0764(0x000C) (Transient, NeedCtorLink)
	TArray<TScriptInterface<class UTowerBoosterInterface>> TowerDeBoosters;                                          // 0x0770(0x000C) (Transient, NeedCtorLink)
	class ADunDefPlayerController*                     InstigatorController;                                     // 0x077C(0x0004) (Transient)
	int                                                NumKills;                                                 // 0x0780(0x0004) (Net, Transient)
	float                                              currentInvisibleSightRange;                               // 0x0784(0x0004) (Transient)
	float                                              LastFlashingDamageTime;                                   // 0x0788(0x0004) (Transient)
	float                                              DamageFlashingDuration;                                   // 0x078C(0x0004) (Edit)
	float                                              DamageFlashingFadeExponent;                               // 0x0790(0x0004) (Edit)
	float                                              DamageFlashingIntensity;                                  // 0x0794(0x0004) (Edit)
	struct FName                                       DamageFlashingScalarParamName;                            // 0x0798(0x0008) (Edit)
	struct FVector                                     TargetingAimOffset;                                       // 0x07A0(0x000C) (Edit)
	class UStatObject*                                 TowerStatModifierTemplate;                                // 0x07AC(0x0004) (Edit)
	TArray<struct FsActorStatDescription>              TowerStatDescriptionEntries;                              // 0x07B0(0x000C) (Edit, NeedCtorLink)
	TArray<TScriptInterface<class UIActorModifierInterface>> CurrentTowerStatModifiers;                                // 0x07BC(0x000C) (Transient, NeedCtorLink)
	class UStatObject*                                 TowerStatModifier;                                        // 0x07C8(0x0004) (Transient)
	struct FString                                     ReplicatedStats[0x6];                                     // 0x07CC(0x000C) (Net, NeedCtorLink)
	float                                              minMinimapOpacity;                                        // 0x0814(0x0004) (Transient)
	float                                              minHealthOpacity;                                         // 0x0818(0x0004) (Transient)
	float                                              maxHealthOpacity;                                         // 0x081C(0x0004) (Transient)
	int                                                maxDisplayedUpgrades;                                     // 0x0820(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower");
		return ptr;
	}


	void ChangedDifficulty(TEnumAsByte<EGameDifficulty> newDifficulty, TEnumAsByte<EGameDifficulty> oldDifficulty);
	void DrawTowerToolTipActorStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetTowerHealth();
	float GetAttackInterval();
	float GetAttackDamage();
	float GetStatModifier(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long onlyReturnBaseValue);
	int GetStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long onlyBaseHeroValue, unsigned long onlyEquipmentValue, int* doesEquipmentModify);
	void RemoveTowerStatModifier(const TScriptInterface<class UIActorModifierInterface>& oldModifier);
	void AddTowerStatModifier(const TScriptInterface<class UIActorModifierInterface>& newModifier);
	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void UpdateReplicatedStats();
	void UpdateBuffValues();
	unsigned long AllowAbilityMove();
	unsigned long UsesRange();
	unsigned long AllowNegativeStatusAffecting();
	unsigned long AllowsFamiliarBoosting();
	void GetAlternateAggroActor(TScriptInterface<class UDunDefTargetableInterface>* AltActor);
	unsigned long AllowEnemyDrain();
	void GetSelectionLocation(class AActor* wantsLocation, struct FVector* bestLoc);
	unsigned long IsPhysicalTower();
	class AActor* GetAlternateActor();
	unsigned long IsMultiActorTower();
	float GetGlobalTowerHealthMultiplier();
	void UpdateDamageFlashing();
	void LocalTookDamage(int DamageAmount, const struct FVector& atPosition, class UClass* fromDamageType);
	void SetInvisible(unsigned long bIsInvisible, float newSightRange);
	unsigned long CanTargetInvisibleTarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	void AdjustDamage(class UClass* DamageType, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, int* DamageAmount, struct FVector* Momentum);
	void ReportSold(class ADunDefPlayerReplicationInfo* byWhom);
	void SetOldReportedSummoned();
	void ReportSummoned();
	void ReportedDeath();
	void KilledTarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	unsigned long CanBeHealed(int byTeam);
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	unsigned long ForceSingleMove(const struct FVector& NewLoc, const struct FRotator& NewRot, unsigned long bShouldCollideWorld);
	unsigned long ForceMoveActor(class AActor* Mover, const struct FVector& NewLoc);
	unsigned long AllowPushing();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void STATIC_SellAllTowers();
	void DelayedTurnOffSkelUpdating();
	void ForceSkelUpdating(unsigned long Force, float delayTurnOff);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void PerformFullHeal();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	struct FVector GetTowerToolTipLocation();
	float STATIC_StaticGetTowerScale(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	void InitTowerRatingMaterial();
	void UpdateTowerRatingMaterial();
	void RefreshTowerRating(class UDunDefHero* hero);
	void DrawUpgradeOverlay(class ADunDefHUD* H, float Opacity, const struct FColor& upgradeOverlayColor);
	int GetNextUpgradeLevel(unsigned long bForceBeyondMaxUpgrade);
	int GetTimeToUpgradeTower();
	int GetCostToUpgradeTower();
	int GetTowerUpgradeLevelStatModifier(TEnumAsByte<ELevelUpValueType> valueType);
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float GetAttackRange();
	void Died(class AController* EventInstigator, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser);
	void ChangedGamePhases(unsigned long IsCombatPhase);
	void DestroyOwnerLeft();
	void TransferTowerOwnership(class APawn* toPawn);
	float GetSellWorth();
	unsigned long Sell(class ADunDefPlayerController* PC);
	unsigned long IsCreatorHeroInActivePlay(class UDunDefHero** theCreatorHero);
	float GetDamageMultiplier();
	float GetPhysicalTowerDamageMultiplier();
	float GetPhysicalTowerHealthMultiplier();
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	void CheckAssociateWithHero(class UDunDefHero* hero, class ADunDefPawn* pawnInstigator, class ADunDefPlayerController* PC);
	unsigned long AllowHeroGUID(int GUID1, int GUID2, int GUID3, int GUID4);
	void InitializeForInstigator(class APawn* Pawn);
	void DoDowngrade();
	void DoUpgrade();
	unsigned long CanBeUpgraded();
	void PlaySellFX();
	float IncrementRepair(float CurrentMana, float DeltaTime);
	void DisableNetUpdateFrequency();
	float GetCurrentRepairPercentage(float StartRepairTime, float RepairSpeed);
	void StartRepair();
	float GetTimeOfTotalRepair();
	float GetTimeToRepair();
	float GetCostToRepair();
	void Destroyed();
	unsigned long NoWorldGeometryOccluding(const struct FVector& End, const struct FVector& Start);
	void AutoBindToPlayer();
	void InitalizeStatObject();
	void PostBeginPlay();
	void TurnOffSpawnEffect();
	void DoSpawnEffect();
	void UpdateAI(float DeltaTime);
	void ReplicatedEvent(const struct FName& VarName);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void DrawUpgradeIcons(class UCanvas* C, float IconDistanceScale, const struct FVector& ScreenPos, float YOffset, float Opacity, unsigned long bIsMiniMap, class ADunDefMiniMap* MiniMap, const struct FRotator& tileRotation);
	class UClass* GetDamageType();
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long HasBeenRendered();
	unsigned long IsPreviousToolTipActor(class ADunDefPlayerController* ownerCheck);
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void getMinimapDrawSettings();
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	float GetLastDamageTime();
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	float GetBoostAmount(TEnumAsByte<ETowerBoostType> boostType);
	TScriptInterface<class UTowerBoosterInterface> GetTowerBooster(TEnumAsByte<ETowerBoostType> boostType, float* boostValue);
	TScriptInterface<class UTowerBoosterInterface> GetTowerDeBooster(TEnumAsByte<ETowerBoostType> boostType, float* boostValue);
	void RemoveTowerDeBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster, int indexOverride);
	void AddTowerDeBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster);
	void RemoveTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster, int indexOverride);
	void AddTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster);
};


// Class UDKGame.DunDefTower_NonPhysical
// 0x0008 (0x082C - 0x0824)
class ADunDefTower_NonPhysical : public ADunDefTower
{
public:
	float                                              RangeScale;                                               // 0x0824(0x0004) (Edit, Net)
	unsigned long                                      bPreferSelectionTraceOverOtherNonPhysicalTowers : 1;      // 0x0828(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_NonPhysical");
		return ptr;
	}


	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	unsigned long IsPhysicalTower();
	float GetPhysicalTowerDamageMultiplier();
	float GetPhysicalTowerHealthMultiplier();
	unsigned long UseForTowerSelectionPassThrough();
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
};


// Class UDKGame.DunDefTower_Aura
// 0x0094 (0x08C0 - 0x082C)
class ADunDefTower_Aura : public ADunDefTower_NonPhysical
{
public:
	unsigned long                                      bAffectPlayers : 1;                                       // 0x082C(0x0004) (Edit)
	unsigned long                                      bAffectEnemies : 1;                                       // 0x082C(0x0004) (Edit)
	unsigned long                                      AllowHeroAttackRateToScaleEffectSet : 1;                  // 0x082C(0x0004) (Edit)
	unsigned long                                      LoseEnergyOverTime : 1;                                   // 0x082C(0x0004) (Edit)
	unsigned long                                      bShutDown : 1;                                            // 0x082C(0x0004) (Net)
	class UParticleSystemComponent*                    AuraIconEffect;                                           // 0x0830(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AuraParticleEffect;                                       // 0x0834(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystem*                             AuraParticleSystemLowQuality;                             // 0x0838(0x0004) (Edit)
	float                                              EffectInterval;                                           // 0x083C(0x0004) (Edit)
	class UParticleSystem*                             AuraPawnEffect;                                           // 0x0840(0x0004) (Edit)
	float                                              LifeEnergy;                                               // 0x0844(0x0004) (Edit, Net)
	float                                              LifeEnergyDecrease;                                       // 0x0848(0x0004) (Edit)
	float                                              LifeEnergyDecreasePerPawnAffected;                        // 0x084C(0x0004) (Edit)
	int                                                MyRadius;                                                 // 0x0850(0x0004) (Edit, Net)
	class UAudioComponent*                             AuraAmbientSoundComponent;                                // 0x0854(0x0004) (Edit, ExportObject, Component, EditInline)
	class USoundCue*                                   AuraSpawnCue;                                             // 0x0858(0x0004) (Edit)
	class UMaterialInterface*                          TowerRatingMaterial;                                      // 0x085C(0x0004) (Edit)
	float                                              AuraBaseRangeScale;                                       // 0x0860(0x0004) (Edit)
	float                                              HealAmountMultiplier;                                     // 0x0864(0x0004) (Edit)
	float                                              RadiusCheckFudgeAmount;                                   // 0x0868(0x0004) (Edit)
	float                                              AuraScaleInterpSpeed;                                     // 0x086C(0x0004) (Edit)
	float                                              NetUpdateFrequencyWhenRepairing;                          // 0x0870(0x0004) (Edit)
	float                                              CustomRadiusMultiplier;                                   // 0x0874(0x0004) (Edit)
	TArray<class UClass*>                              PawnClassesToIgnore;                                      // 0x0878(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              DamagableClassesToAttack;                                 // 0x0884(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AttackDamagePerSecondString;                              // 0x0890(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<class ADunDefPawn*>                         PawnList;                                                 // 0x089C(0x000C) (NeedCtorLink)
	TArray<class ADunDefDamageableTarget*>             DamagableList;                                            // 0x08A8(0x000C) (NeedCtorLink)
	int                                                MaxLifeEnergy;                                            // 0x08B4(0x0004) (Net)
	float                                              StartRepairEnergy;                                        // 0x08B8(0x0004)
	float                                              LastRepairIncrementTime;                                  // 0x08BC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_Aura");
		return ptr;
	}


	float GetGlobalTowerHealthMultiplier();
	float GetDamageMultiplier();
	void RefreshRadius();
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	void PerformFullHeal();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	void InitTowerRatingMaterial();
	void UpdateTowerRatingMaterial();
	void HealPctOfMaxHealth(float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	float IncrementRepair(float CurrentMana, float DeltaTime);
	float GetCurrentRepairPercentage(float StartRepairTime, float RepairSpeed);
	void StartRepair();
	float GetTimeToRepair();
	float GetCostToRepair();
	float GetTimeOfTotalRepair();
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	void RemoveTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster, int indexOverride);
	void AddTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster);
	float GetAttackRange();
	float GetTimedInterval();
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	int GetHealth(unsigned long bGetMax);
	float GetHealthPercent();
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	struct FString GetToolTipText();
	void ScaleAuraEffect();
	void SetRadius(int rad, unsigned long bDontCheckCollidingActors);
	unsigned long TimedEffect(class ADunDefPawn* P);
	void Timer();
	unsigned long IsInRadiusDT(class ADunDefDamageableTarget* dt);
	void ExitEffectDT(class ADunDefDamageableTarget* dt);
	void EntryEffectDT(class ADunDefDamageableTarget* dt);
	unsigned long TimedEffectDT(class ADunDefDamageableTarget* dt);
	void AffectedDTDied(class ADunDefDamageableTarget* dt);
	void LeftRadiusDT(class ADunDefDamageableTarget* dt);
	unsigned long AttacksDT(class ADunDefDamageableTarget* dt);
	void EnteredRadiusDT(class ADunDefDamageableTarget* dt);
	void CheckForDamagableTargets();
	void ExitEffect(class ADunDefPawn* P);
	void EntryEffect(class ADunDefPawn* P);
	void AffectedPawnDied(class ADunDefPawn* DeadPawn);
	void Destroyed();
	void LeftRadius(class ADunDefPawn* P);
	unsigned long IgnoresPawn(class ADunDefPawn* P);
	void EnteredRadius(class ADunDefPawn* P);
	void UnTouch(class AActor* Other);
	unsigned long CanTargetInvisibleTarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ScaleDown();
	void DecreaseLifeEnergy(float X);
	unsigned long IsInRadius(class APawn* P);
	unsigned long IsValidForLifeEnergyDecrease(class ADunDefPawn* P);
	void Tick(float dt);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	unsigned long SameTeamAs(const TScriptInterface<class UDunDefTargetableInterface>& Target);
};


// Class UDKGame.HeroEquipment_Familiar
// 0x0108 (0x0AFC - 0x09F4)
class UHeroEquipment_Familiar : public UHeroEquipment
{
public:
	class USkeletalMesh*                               TheFamiliarMesh;                                          // 0x09F4(0x0004) (Edit)
	float                                              MaxLocInterpDistance;                                     // 0x09F8(0x0004) (Edit)
	float                                              RotationInterpSpeedMax;                                   // 0x09FC(0x0004) (Edit)
	float                                              LocInterpSpeed;                                           // 0x0A00(0x0004) (Edit)
	struct FVector                                     MeshTranslationOffset;                                    // 0x0A04(0x000C) (Edit)
	struct FVector                                     MeshScale3D;                                              // 0x0A10(0x000C) (Edit)
	float                                              MeshScale;                                                // 0x0A1C(0x0004) (Edit)
	unsigned long                                      bEnableMeshInterpolation : 1;                             // 0x0A20(0x0004) (Edit)
	unsigned long                                      bTranslateOtherComponent : 1;                             // 0x0A20(0x0004) (Edit)
	unsigned long                                      bRotateOtherComponent : 1;                                // 0x0A20(0x0004) (Edit)
	unsigned long                                      bDoFamiliarAbilities : 1;                                 // 0x0A20(0x0004) (Edit)
	unsigned long                                      bForceToMinimumSize : 1;                                  // 0x0A20(0x0004) (Edit)
	unsigned long                                      bForceToMaximumSize : 1;                                  // 0x0A20(0x0004) (Edit)
	unsigned long                                      bDoClampMeshZTranslation : 1;                             // 0x0A20(0x0004) (Edit)
	unsigned long                                      bDoubleFamiliarActive : 1;                                // 0x0A20(0x0004) (Transient)
	struct FName                                       CustomAnimNodeNames[0x2];                                 // 0x0A24(0x0008) (Edit)
	struct FName                                       CustomAnimNodeCrossBlenderName;                           // 0x0A34(0x0008) (Edit)
	struct FName                                       HurtAnimation;                                            // 0x0A3C(0x0008) (Edit)
	struct FName                                       DeathAnimation;                                           // 0x0A44(0x0008) (Edit)
	struct FName                                       AttackAnimation;                                          // 0x0A4C(0x0008) (Edit)
	struct FName                                       JumpAnimation;                                            // 0x0A54(0x0008) (Edit)
	struct FName                                       SpawnAnimation;                                           // 0x0A5C(0x0008) (Edit)
	class UParticleSystem*                             OtherParticleSystemToTransform;                           // 0x0A64(0x0004) (Edit)
	struct FName                                       TranslateOtherComponentByBoneName;                        // 0x0A68(0x0008) (Edit)
	float                                              DesiredRotInterpSpeed;                                    // 0x0A70(0x0004) (Edit)
	float                                              HeroExperienceInvestmentMultiplier;                       // 0x0A74(0x0004) (Edit)
	int                                                AttackOctreeCollectionGroup;                              // 0x0A78(0x0004) (Edit)
	int                                                AttachedMeshIndex;                                        // 0x0A7C(0x0004) (Edit)
	float                                              MinRotDegreesForInterp;                                   // 0x0A80(0x0004) (Edit)
	float                                              RotTargetLerpSpeed;                                       // 0x0A84(0x0004) (Edit)
	float                                              MinRotationInterpAngleBase;                               // 0x0A88(0x0004) (Edit)
	float                                              RotationInterpSpeedMin;                                   // 0x0A8C(0x0004) (Edit)
	float                                              DrawScaleOffsetExponent;                                  // 0x0A90(0x0004) (Edit)
	float                                              DrawScaleOffsetMult;                                      // 0x0A94(0x0004) (Edit)
	float                                              SizeScalerMaximumLevel;                                   // 0x0A98(0x0004) (Edit)
	float                                              SizeScalerPower;                                          // 0x0A9C(0x0004) (Edit)
	float                                              MaximumLevelScaleMultiplier;                              // 0x0AA0(0x0004) (Edit)
	struct FVector                                     OtherParticleSystemToTransformOffset;                     // 0x0AA4(0x000C) (Edit)
	float                                              MeshZTranslationClampMinimum;                             // 0x0AB0(0x0004) (Edit)
	float                                              MeshZTranslationClampMaximum;                             // 0x0AB4(0x0004) (Edit)
	float                                              LastAttachedTime;                                         // 0x0AB8(0x0004) (Transient)
	float                                              DoubleFamiliarDegressOffset;                              // 0x0ABC(0x0004) (Edit)
	int                                                LastCustomNodeIndex;                                      // 0x0AC0(0x0004)
	struct FVector                                     MeshInterpLoc;                                            // 0x0AC4(0x000C) (Transient)
	float                                              LastDesiredRot;                                           // 0x0AD0(0x0004) (Transient)
	float                                              LastUnlerpedDesiredRot;                                   // 0x0AD4(0x0004) (Transient)
	float                                              RotTargetLerpPercent;                                     // 0x0AD8(0x0004) (Transient)
	float                                              MeshDirectionRot;                                         // 0x0ADC(0x0004) (Transient)
	float                                              LastMeshDesiredRot;                                       // 0x0AE0(0x0004) (Transient)
	float                                              YawAccelRate;                                             // 0x0AE4(0x0004) (Edit)
	float                                              YawAccelSpeed;                                            // 0x0AE8(0x0004) (Edit)
	float                                              AirFriction;                                              // 0x0AEC(0x0004) (Edit)
	float                                              AirBrakingFriction;                                       // 0x0AF0(0x0004) (Edit)
	float                                              BrakingPercent;                                           // 0x0AF4(0x0004) (Edit)
	float                                              YawYelocity;                                              // 0x0AF8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar");
		return ptr;
	}


	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	void AttachedComponent(class UPrimitiveComponent* aComp);
	void RemovedFromHero();
	void AddedToHero();
	float GetPetMaxDrawScale(unsigned long GetMaxLevel);
	float GetEquipmentDrawScale();
	void AddEquipmentAttachment(class USkeletalMeshComponent* thePlayerMesh, unsigned long attachWeapon, class AActor* AttachToActor, unsigned long bForce, unsigned long bIgnoreAttachFX);
	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void NotifyEquipment_PawnDied();
	void NotifyEquipment_PawnJumped();
	void NotifyEquipment_PawnTookDamage(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void ExecHeroEvent(const struct FName& EventName, const struct FName& nameParam1, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1);
	unsigned long IsPlayingCustomAnim(class USkeletalMeshComponent* MeshComp, const struct FName& inAnim, float TimeFromEndToConsiderFinished);
	class USkeletalMeshComponent* GetMeshComponent(unsigned long bForceLookup);
	float PlayAnimation(const struct FName& AnimName, unsigned long bReplicate, float BlendInTime, float BlendOutTime, float PlayRate, unsigned long bLooping, unsigned long bOverride, unsigned long bForceLookup);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	float GetPetHealingAmount();
	unsigned long LimitPetHealing();
	unsigned long DoPetHealing();
	unsigned long DoFairyAbilities();
	unsigned long DoFamiliarAbilities();
};


// Class UDKGame.DunDefBuff
// 0x027C (0x0300 - 0x0084)
class UDunDefBuff : public UBuffNativeObject
{
public:
	struct FsBuffInfo                                  BuffInfo;                                                 // 0x0084(0x0064) (Edit, NeedCtorLink)
	unsigned long                                      bCanTick : 1;                                             // 0x00E8(0x0004) (Edit)
	unsigned long                                      bCanStack : 1;                                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bStackingResetsTimer : 1;                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      BaseOnOwner : 1;                                          // 0x00E8(0x0004) (Edit)
	unsigned long                                      bStacksAffectStats : 1;                                   // 0x00E8(0x0004) (Edit)
	unsigned long                                      bInstantBuff : 1;                                         // 0x00E8(0x0004) (Edit)
	unsigned long                                      bEnableDynamicBuffUpdating : 1;                           // 0x00E8(0x0004) (Edit)
	unsigned long                                      bReplicateBuff : 1;                                       // 0x00E8(0x0004) (Edit)
	unsigned long                                      bDestroyBuffOnTargetDeath : 1;                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bDestroyBuffOnOwnerDeath : 1;                             // 0x00E8(0x0004) (Edit)
	unsigned long                                      bAddStackOnTimerReset : 1;                                // 0x00E8(0x0004) (Edit)
	unsigned long                                      bStackingAddsStacks : 1;                                  // 0x00E8(0x0004) (Edit)
	unsigned long                                      bLimitNumSameBuffs : 1;                                   // 0x00E8(0x0004) (Edit)
	unsigned long                                      bLimitNumSameBuffs_PerOwner : 1;                          // 0x00E8(0x0004) (Edit)
	unsigned long                                      bKillOldest : 1;                                          // 0x00E8(0x0004) (Edit)
	unsigned long                                      bPreventBossStatChanges : 1;                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      bCheckForStatusEffect : 1;                                // 0x00E8(0x0004) (Edit)
	unsigned long                                      bCheckTargetElementalType : 1;                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bStripElementalResistance : 1;                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOnlyAffectPlayers : 1;                                   // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOnlyAffectEnemies : 1;                                   // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOnlyAffectTowers : 1;                                    // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOnlyAffectPawns : 1;                                     // 0x00E8(0x0004) (Edit)
	unsigned long                                      bAffectsOwner : 1;                                        // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOnlyAffectsOwner : 1;                                    // 0x00E8(0x0004) (Edit)
	unsigned long                                      bSkipOnlyAffect : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bCanBuffBoss : 1;                                         // 0x00E8(0x0004) (Edit)
	unsigned long                                      bApplyToInvincibleTargets : 1;                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bBuffDeadTarget : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bUseCharacterOverlay : 1;                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      bAttachToSocket : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bScaleVFX : 1;                                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bShowBuffNotification : 1;                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      bInitedForClient : 1;                                     // 0x00EC(0x0004) (Transient)
	unsigned long                                      bOnlyRelevantToOwner : 1;                                 // 0x00EC(0x0004) (Transient)
	unsigned long                                      bBuffActive : 1;                                          // 0x00EC(0x0004)
	unsigned long                                      bBuffKilled : 1;                                          // 0x00EC(0x0004)
	unsigned long                                      InitializeAck : 1;                                        // 0x00EC(0x0004)
	int                                                MaxStackCount;                                            // 0x00F0(0x0004) (Edit)
	int                                                BuffTier;                                                 // 0x00F4(0x0004) (Edit)
	float                                              BuffProcInterval;                                         // 0x00F8(0x0004) (Edit)
	float                                              BuffLifeSpan;                                             // 0x00FC(0x0004) (Edit)
	float                                              BuffProcChance;                                           // 0x0100(0x0004) (Edit)
	float                                              BuffRange;                                                // 0x0104(0x0004) (Edit)
	float                                              IntervalBetweenProcs;                                     // 0x0108(0x0004) (Edit)
	float                                              LinearStatIncreasePerStack;                               // 0x010C(0x0004) (Edit)
	float                                              DynamicBuffUpdateInterval;                                // 0x0110(0x0004) (Edit)
	float                                              JumpZMuliplier;                                           // 0x0114(0x0004) (Edit)
	float                                              GravityMuliplier;                                         // 0x0118(0x0004) (Edit)
	float                                              SpeedMultiplier;                                          // 0x011C(0x0004) (Edit)
	int                                                NumSameBuffsLimit;                                        // 0x0120(0x0004) (Edit)
	int                                                NumSameBuffs_PerOwner;                                    // 0x0124(0x0004) (Edit)
	float                                              AdditiveStatModifier[0x11];                               // 0x0128(0x0004) (Edit)
	float                                              MultiplicativeStatModifier[0x11];                         // 0x016C(0x0004) (Edit)
	TArray<class UClass*>                              ClassesToIgnoreForStatChanges;                            // 0x01B0(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      InvalidTargetElementalTypeClass;                          // 0x01BC(0x0004) (Edit)
	int                                                StacksToApplyStatusEffect;                                // 0x01C0(0x0004) (Edit)
	TArray<struct FsElementalCombo>                    ElementalCombos;                                          // 0x01C4(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EStatusEffect>                         StatusEffectToAdd;                                        // 0x01D0(0x0001) (Edit)
	TEnumAsByte<EStatusEffect>                         StatusEffectToRemove;                                     // 0x01D1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01D2(0x0002) MISSED OFFSET
	struct FLinearColor                                OverlayColor;                                             // 0x01D4(0x0010) (Edit)
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x01E4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystem*                             FadeInVFX;                                                // 0x01E8(0x0004) (Edit)
	class UParticleSystem*                             FadeOutVFX;                                               // 0x01EC(0x0004) (Edit)
	class UParticleSystem*                             BuffEffectVFX;                                            // 0x01F0(0x0004) (Edit)
	struct FName                                       VfxAttachSocketName;                                      // 0x01F4(0x0008) (Edit)
	struct FName                                       BuffEffectVfxAttachSocketName;                            // 0x01FC(0x0008) (Edit)
	struct FName                                       ScaleVFXParamName;                                        // 0x0204(0x0008) (Edit)
	float                                              VfxScaleMultiplier;                                       // 0x020C(0x0004) (Edit)
	class UAudioComponent*                             AudioComponent;                                           // 0x0210(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              AudioFadeInVolume;                                        // 0x0214(0x0004) (Edit)
	float                                              AudioFadeOutVolume;                                       // 0x0218(0x0004) (Edit)
	float                                              AudioFadeInTime;                                          // 0x021C(0x0004) (Edit)
	float                                              AudioFadeOutTime;                                         // 0x0220(0x0004) (Edit)
	struct FString                                     MaterialParam;                                            // 0x0224(0x000C) (Edit, NeedCtorLink)
	float                                              MaterialParamValue;                                       // 0x0230(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MaterialToApplyOnBuff;                                    // 0x0234(0x0004) (Edit)
	struct FsBuffNotifcationInfo                       BuffNotifications;                                        // 0x0238(0x00A0) (Edit, NeedCtorLink)
	class ADunDefBuffManager*                          BuffManager;                                              // 0x02D8(0x0004) (Transient)
	int                                                BuffID;                                                   // 0x02DC(0x0004) (Const, Transient)
	class AActor*                                      BuffTarget;                                               // 0x02E0(0x0004) (Transient)
	float                                              TimeAttached;                                             // 0x02E4(0x0004) (Transient)
	float                                              LastProcTime;                                             // 0x02E8(0x0004) (Transient)
	int                                                StackCount;                                               // 0x02EC(0x0004) (Transient)
	class UMaterialInstanceConstant*                   CachedMaterial;                                           // 0x02F0(0x0004) (Transient)
	TScriptInterface<class UIActorModifierInterface>   MyActorStatModifier;                                      // 0x02F4(0x0008) (Transient)
	class ADunDefPlayerController*                     InstigatorController;                                     // 0x02FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBuff");
		return ptr;
	}


	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void UpdateBuffRange(float NewBuffRange);
	void RefreshBuffRange(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
	void ReportHeroSwapped();
	void AdjustTargetDamage(class AActor* forActor, class AController* fromController, class UClass* TheDamageType, class UObject* WhatHitMe, const struct FsLastDamageInfo& damageInfo, int* howMuchDamage, struct FVector* Momentum);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void TriggerEvent(TEnumAsByte<EBuffSpawnEvent> EventToTrigger);
	void ReportOwnerDeath();
	void ReportOwnerJumped();
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
	void ReportHealed(int healedAmount, class AActor* Healer);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void AdjustDealtDamage(class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum);
	class ADunDefHUD* GetHUD();
	void DoBuffNotification(const struct FString& NotificationText, const struct FLinearColor& NotificationTextColor, float NotificationTextDuration);
	void UpdateBuff();
	void GetStatValue(class AActor* forActor, TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bAdditivePass, float* buffVal);
	struct FString GetTierName();
	class USurface* GetBuffIcon(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	struct FString GetBuffDescription(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	struct FString GetBuffName(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	unsigned long CheckProcChance();
	int GetStackCount();
	void SetStackCount(int NewAmount);
	void ResetTimer();
	unsigned long IsEnemy(class AActor* pActor);
	unsigned long IsFriend(class AActor* pActor);
	int GetRemainingShieldHealth();
	int GetTargetingTeam();
	void DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, unsigned long bPersistentLines);
	void DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines);
	void DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines);
	unsigned long IsTimerActive(const struct FName& inTimerFunc);
	void ClearAllTimers();
	void ClearTimer(const struct FName& TimerName);
	void SetTimer(float InRate, unsigned long inbLoop, const struct FName& inTimerFunc, class UObject* inObj);
	void StopSound(class USoundCue* Cue, float FadeOutTime);
	void PlaySound(class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, unsigned long bNoRepToRelevant);
	void UpdateLocation();
	void SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName);
	void AttachComponent(class UActorComponent* Comp);
	void ReattachComponent(class UPrimitiveComponent* Comp);
	void SetLocation(const struct FVector& NewLoc);
	void SetRotation(const struct FRotator& NewRot);
	void InitializeBuffInfo(struct FsBuffNetInfo* initialInfo);
	void Destroyed();
	void SpawnEffect(class UParticleSystem* aParticle, class AActor* theOwner, const struct FVector& Position, const struct FRotator& Orientation, float ScaleFactor, const struct FName& SpawnFromSocket, unsigned long AttachToSocket, unsigned long AttachToActor, unsigned long DontReplicate, unsigned long bIgnoreRenderTime);
	void DisableBuff();
	void EnableBuff();
	void ToggleBuff(unsigned long bBuffEnabled);
	void DeactivateBuff();
	void ActivateBuff();
	void Tick(float DeltaTime);
	unsigned long CheckAlive();
	void BuffEffect();
	void Initialize();
	void SetBuffID(int IDValue);
	unsigned long STATIC_IsValidTarget(class AActor* Target, class AActor* BuffOwner, class UDunDefBuff* aBuffTemplate);
	class UDunDefBuff* STATIC_AddBuff(class AActor* Target, class AActor* BuffOwner, class UDunDefBuff* aBuffTemplate, int aBuffTier, const TScriptInterface<class UIActorModifierInterface>& aActorModifier, class ADunDefPawn* anInstigator, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int NullInstigatorTargetingTeam, unsigned long bForceNoInstigator);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.ActionWheel
// 0x008C (0x00C8 - 0x003C)
class UActionWheel : public UObject
{
public:
	TArray<class UActionWheelEntry*>                   EditorWheelEntries;                                       // 0x003C(0x000C) (Edit, NeedCtorLink)
	class UMaterialInterface*                          GamepadPointingDirectionIcon;                             // 0x0048(0x0004) (Edit)
	class UTexture2D*                                  EntrySelectionBorder;                                     // 0x004C(0x0004) (Edit)
	float                                              EntrySelectionBorderSize;                                 // 0x0050(0x0004) (Edit)
	unsigned long                                      PlaceFirstIconAtCenter : 1;                               // 0x0054(0x0004) (Edit)
	unsigned long                                      bAddAdditionalActionWheelEntriesFromHero : 1;             // 0x0054(0x0004) (Edit)
	unsigned long                                      WaitingForCenterInput : 1;                                // 0x0054(0x0004) (Transient)
	unsigned long                                      bIsVisible : 1;                                           // 0x0054(0x0004)
	unsigned long                                      bWheelFadeBackwards : 1;                                  // 0x0054(0x0004) (Transient)
	float                                              SpinnerInterpSpeed;                                       // 0x0058(0x0004) (Edit)
	class USoundCue*                                   SoundOpen;                                                // 0x005C(0x0004) (Edit)
	class USoundCue*                                   SoundBack;                                                // 0x0060(0x0004) (Edit)
	class USoundCue*                                   SoundSelect;                                              // 0x0064(0x0004) (Edit)
	class USoundCue*                                   SoundStoreHotkey;                                         // 0x0068(0x0004) (Edit)
	class UFont*                                       HotKeyFont;                                               // 0x006C(0x0004) (Edit)
	float                                              wheelYOffset;                                             // 0x0070(0x0004) (Edit)
	float                                              GamepadSpinnerDistancePercent;                            // 0x0074(0x0004) (Edit)
	float                                              GamepadSpinnerSize;                                       // 0x0078(0x0004) (Edit)
	TArray<struct FLinearColor>                        GamepadSpinnerColors;                                     // 0x007C(0x000C) (Edit, NeedCtorLink)
	float                                              ActionWheelCanvasScaleNudgeAmount;                        // 0x0088(0x0004) (Config)
	TArray<class UActionWheelEntry*>                   TopWheelEntries;                                          // 0x008C(0x000C) (Transient, NeedCtorLink)
	class ADunDefPlayerController*                     PCOwner;                                                  // 0x0098(0x0004) (Transient)
	class UActionWheelEntry*                           CurrentSelectedEntry;                                     // 0x009C(0x0004) (Transient)
	class UActionWheelEntry*                           LastSelectedEntry;                                        // 0x00A0(0x0004) (Transient)
	class UActionWheelEntry*                           GamepadHighlightedEntry;                                  // 0x00A4(0x0004) (Transient)
	float                                              LastTimeWaitedForCenterInput;                             // 0x00A8(0x0004) (Transient)
	class UActionWheelEntry*                           LastHighlightedEntry;                                     // 0x00AC(0x0004) (Transient)
	class UActionWheelEntry*                           PreviousHighlightedEntry;                                 // 0x00B0(0x0004) (Transient)
	float                                              CurrentSpinnerYaw;                                        // 0x00B4(0x0004)
	float                                              WheelOpacity;                                             // 0x00B8(0x0004)
	float                                              LastWheelOpacity;                                         // 0x00BC(0x0004)
	float                                              LastOpenTime;                                             // 0x00C0(0x0004) (Transient)
	class UMaterialInstanceConstant*                   GamepadPointingDirectionIconInst;                         // 0x00C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActionWheel");
		return ptr;
	}


	unsigned long ExecutePlayerAbility(class UActionWheelEntry* Entry, unsigned long bForceHideOnAbilityActivate);
	unsigned long SetSelectedEntry(class UActionWheelEntry* Entry, unsigned long playSelectionSound);
	void Destroyed();
	void SetHotKey(int hkIndex);
	void UpdateInput(float DeltaTime);
	void ProcessBack();
	void ProcessSelection();
	void ToggleVisible(unsigned long ForceOff);
	void Hide();
	void Show(class UActionWheelEntry* startingWheelEntry);
	void SetGamepadHiglightedEntry(class UActionWheelEntry* Entry);
	class UActionWheelEntry* GetCenterWheelEntry();
	unsigned long IsVisible();
	void DrawGamepadSpinner(class ADunDefHUD* H, float xCenter, float yCenter, float WheelSize);
	void DrawEntries(class ADunDefHUD* H, unsigned long DrawSpinner, unsigned long DontCheckForMouseOver, unsigned long DontShowLevelUp, float WheelScaleMult, float UseWheelOpacity, TArray<class UActionWheelEntry*>* entries);
	class UUI_PlayerHUD* GetHudUI();
	void DrawHUD(class ADunDefHUD* H);
	TArray<class UActionWheelEntry*> GetVisibleWheelEntries();
	class UActionWheelEntry* FindEntryByNameFromArray(const struct FName& WheelEntryName, TArray<class UActionWheelEntry*>* entries);
	class UActionWheelEntry* FindEntryByName(const struct FName& WheelEntryName);
	void InitializeHotKeys();
	void InitializeWheel(class ADunDefPlayerController* PC);
};


// Class UDKGame.ActionWheelEntry
// 0x0108 (0x0144 - 0x003C)
class UActionWheelEntry : public UObject
{
public:
	struct FName                                       WheelEntryName;                                           // 0x003C(0x0008) (Edit)
	struct FName                                       WheelParentName;                                          // 0x0044(0x0008) (Edit)
	struct FName                                       PlayerAbilityName;                                        // 0x004C(0x0008) (Edit)
	struct FString                                     DoConsoleCommand;                                         // 0x0054(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  EntryIcon;                                                // 0x0060(0x0004) (Edit)
	float                                              IconSize;                                                 // 0x0064(0x0004) (Edit)
	struct FColor                                      IconDefaultColor;                                         // 0x0068(0x0004) (Edit)
	struct FColor                                      IconDisabledColor;                                        // 0x006C(0x0004) (Edit)
	struct FColor                                      IconWarningColor;                                         // 0x0070(0x0004) (Edit)
	struct FString                                     DescriptiveName;                                          // 0x0074(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      FlashOnLevelUp : 1;                                       // 0x0080(0x0004) (Edit)
	unsigned long                                      IsATowerBuildingEntry : 1;                                // 0x0080(0x0004) (Edit)
	unsigned long                                      bForceCloseOnToggleOff : 1;                               // 0x0080(0x0004) (Edit)
	class UFont*                                       ToolTipFont;                                              // 0x0084(0x0004) (Edit)
	float                                              ToolTipTextScale;                                         // 0x0088(0x0004) (Edit)
	class UFont*                                       ManaCostFont;                                             // 0x008C(0x0004) (Edit)
	float                                              ManaCostTextScale;                                        // 0x0090(0x0004) (Edit)
	class UFont*                                       TinyManaCostFont;                                         // 0x0094(0x0004) (Edit)
	float                                              TinyManaCostTextScale;                                    // 0x0098(0x0004) (Edit)
	class UFont*                                       ToolTipDescriptionFont;                                   // 0x009C(0x0004) (Edit)
	struct FString                                     ToolTipDescription;                                       // 0x00A0(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ToolTipDescriptionScale;                                  // 0x00AC(0x0004) (Edit)
	class USoundCue*                                   SoundHighlight;                                           // 0x00B0(0x0004) (Edit)
	float                                              ToolTipYOffset;                                           // 0x00B4(0x0004) (Edit)
	struct FLinearColor                                TextGradientColor;                                        // 0x00B8(0x0010) (Edit)
	struct FLinearColor                                ManaFontTextGradientColor;                                // 0x00C8(0x0010) (Edit)
	float                                              AbilityNameYOffset;                                       // 0x00D8(0x0004) (Edit)
	float                                              DefenseUnitsYOffset;                                      // 0x00DC(0x0004) (Edit)
	float                                              ManaCostTextPercentageOffset;                             // 0x00E0(0x0004) (Edit)
	float                                              CoolDownTextOffsetY;                                      // 0x00E4(0x0004) (Edit)
	float                                              TinyManaCostTextPercentageOffset;                         // 0x00E8(0x0004) (Edit)
	struct FColor                                      SelectedNameTextColor;                                    // 0x00EC(0x0004) (Edit)
	struct FLinearColor                                SelectedNameTextBGColor;                                  // 0x00F0(0x0010) (Edit)
	int                                                ForceHotKeyIndex;                                         // 0x0100(0x0004) (Edit)
	TArray<class UActionWheelEntry*>                   EntryChildren;                                            // 0x0104(0x000C) (Transient, NeedCtorLink)
	class UActionWheelEntry*                           EntryParent;                                              // 0x0110(0x0004) (Transient)
	class ADunDefPlayerAbility*                        EntryPlayerAbility;                                       // 0x0114(0x0004) (Transient)
	class UActionWheel*                                WheelOwner;                                               // 0x0118(0x0004) (Transient)
	float                                              leftBound;                                                // 0x011C(0x0004) (Transient)
	float                                              rightBound;                                               // 0x0120(0x0004) (Transient)
	float                                              topBound;                                                 // 0x0124(0x0004) (Transient)
	float                                              bottomBound;                                              // 0x0128(0x0004) (Transient)
	int                                                CurrentCircleIndex;                                       // 0x012C(0x0004) (Transient)
	float                                              CurrentCircleAngle;                                       // 0x0130(0x0004) (Transient)
	float                                              CurrentCircleAngleAllowance;                              // 0x0134(0x0004) (Transient)
	float                                              LastMouseOverTime;                                        // 0x0138(0x0004) (Transient)
	TEnumAsByte<EACTIONWHEEL_HIGHLIGHTSTATUS>          LastHighlightStatus;                                      // 0x013C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              CurrentMouseOverScale;                                    // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActionWheelEntry");
		return ptr;
	}


	unsigned long ProcessSelection(unsigned long bForceHideOnAbilityActivate);
	unsigned long HandleSelection();
	unsigned long IsMouseOrGamepadOverMe(TEnumAsByte<EPlayerAbilityStatus> Status);
	void DrawEntry(class UCanvas* Canvas, float XPos, float YPos, float origScale, unsigned long DontCheckForMouseOver, unsigned long DisableLevelUpFlashing, float Opacity, unsigned long ForceFullOpacity, float CenterWheelPositionX, float CenterWheelPositionY, unsigned long useTinyManaFont, unsigned long drawSelectionBorder, int hotKeyIndex);
	void AbilityActorDestroyed();
	void Initialize(class UActionWheel* ownerWheel, TArray<class UActionWheelEntry*>* entries);
	void AddChild(class UActionWheelEntry* childEntry);
	class UActionWheelEntry* FindEntryByName(const struct FName& theEntryName);
};


// Class UDKGame.DunDefMapInfo
// 0x02DC (0x0370 - 0x0094)
class UDunDefMapInfo : public UMapInfo
{
public:
	unsigned long                                      IsGameplayLevel : 1;                                      // 0x0094(0x0004) (Edit)
	unsigned long                                      IsLobbyLevel : 1;                                         // 0x0094(0x0004) (Edit)
	unsigned long                                      IsLoadingLevel : 1;                                       // 0x0094(0x0004) (Edit)
	unsigned long                                      bDontUseLobbyEquipments : 1;                              // 0x0094(0x0004) (Edit)
	unsigned long                                      bCursorTrailParticles : 1;                                // 0x0094(0x0004) (Edit)
	unsigned long                                      bDelayedStart : 1;                                        // 0x0094(0x0004) (Edit)
	unsigned long                                      bPreventPureStrategy : 1;                                 // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceNoPreventPureStrategy : 1;                          // 0x0094(0x0004) (Edit)
	unsigned long                                      NavigationShowPathTargets : 1;                            // 0x0094(0x0004) (Edit)
	unsigned long                                      bUseSurvivalSpawnClamping : 1;                            // 0x0094(0x0004) (Edit)
	unsigned long                                      bUseCustomLevelEntry : 1;                                 // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceHardcoreMode : 1;                                   // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableOgreSpawnRateClamping : 1;                        // 0x0094(0x0004) (Edit)
	unsigned long                                      PreventSplitscreenPlayers : 1;                            // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceSurvivalMode : 1;                                   // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableVoiceChat : 1;                                    // 0x0094(0x0004) (Edit)
	unsigned long                                      bForcePureStrategyMode : 1;                               // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceBuildTimer : 1;                                     // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceOldDamageAllBehaviorOnRuthless : 1;                 // 0x0094(0x0004) (Edit)
	unsigned long                                      bMapOverrideDifficulty : 1;                               // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableCameraParticles : 1;                              // 0x0094(0x0004) (Edit)
	unsigned long                                      bReduceDjinns : 1;                                        // 0x0094(0x0004) (Edit)
	unsigned long                                      bReduceSharken : 1;                                       // 0x0094(0x0004) (Edit)
	unsigned long                                      bDoMissionTagOverride : 1;                                // 0x0094(0x0004) (Edit)
	unsigned long                                      bReduceCopters : 1;                                       // 0x0094(0x0004) (Edit)
	unsigned long                                      bReduceOgresRuthless : 1;                                 // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableRuthlessOgreReductionForChallenge : 1;            // 0x0094(0x0004) (Edit)
	unsigned long                                      bDisableCoreHealthIncrease : 1;                           // 0x0094(0x0004) (Edit)
	unsigned long                                      bIgnoreDistantWyvernNavpoints : 1;                        // 0x0094(0x0004) (Edit)
	unsigned long                                      bForceAlternateEnemyGroupScaler : 1;                      // 0x0094(0x0004) (Edit)
	unsigned long                                      bUseLobbyItemRecoveryBounds : 1;                          // 0x0094(0x0004) (Edit)
	unsigned long                                      bOverrideOverlordBounds : 1;                              // 0x0094(0x0004) (Edit)
	int                                                WaveToStartAt;                                            // 0x0098(0x0004) (Edit)
	int                                                MaxTowerUnits;                                            // 0x009C(0x0004) (Edit)
	int                                                AssaultEnemyTargetingDistanceLimit;                       // 0x00A0(0x0004) (Edit)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDrops;                           // 0x00A4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryEasy;           // 0x00B0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryMedium;         // 0x00BC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryHard;           // 0x00C8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryInsane;         // 0x00D4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryNightmare;      // 0x00E0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEquipmentDropEntry>                 AdditionalGlobalEquipmentDropsAfterVictoryRuthless;       // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              GameInfoClasses;                                          // 0x00F8(0x000C) (Edit, NeedCtorLink)
	float                                              EquipmentWeightingMultiplier;                             // 0x0104(0x0004) (Edit)
	float                                              WaveScoreMultiplier;                                      // 0x0108(0x0004) (Edit)
	int                                                MaxNumberOfDroppedEquipment;                              // 0x010C(0x0004) (Edit)
	int                                                DunDefMaxPlayers;                                         // 0x0110(0x0004) (Edit)
	class UUI_GameSetup*                               GameSetupUITemplate;                                      // 0x0114(0x0004) (Edit)
	class UUI_MainMenu*                                MainMenuUITemplate;                                       // 0x0118(0x0004) (Edit)
	class UDunDefUIScene*                              CustomizeCoreScene;                                       // 0x011C(0x0004) (Edit)
	class UDunDefUIScene*                              SaveNotificationUITemplate;                               // 0x0120(0x0004) (Edit)
	struct FString                                     DefaultMissionObjectiveText;                              // 0x0124(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LobbyLevelPreDescription;                                 // 0x0130(0x000C) (Edit, Localized, NeedCtorLink)
	class UParticleSystem*                             FootstepImpactParticle;                                   // 0x013C(0x0004) (Edit)
	class UUI_GameStats*                               GameStatsUITemplate;                                      // 0x0140(0x0004) (Edit)
	TArray<int>                                        MaximumNumberOfEnemies;                                   // 0x0144(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        MaxNumberOfManaTokens;                                    // 0x0150(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      NumPlayerWaveTimeBonusMultipliers;                        // 0x015C(0x000C) (Edit, NeedCtorLink)
	int                                                EquipmentQualityScalingMaxWave;                           // 0x0168(0x0004) (Edit)
	int                                                EquipmentRandomizerMultiplierScalingWave;                 // 0x016C(0x0004) (Edit)
	TArray<float>                                      NumPlayerWaveScoreBonusMultipliers;                       // 0x0170(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefEnemy*>                        MixEnemyArchetypes;                                       // 0x017C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMixEnemyDifficultyThreshold>        MixEnemyDifficultyThresholds;                             // 0x0188(0x000C) (Edit, NeedCtorLink)
	TArray<struct FEnemyAnimTreeOverride>              EnemyAnimTreeOverrides;                                   // 0x0194(0x000C) (Edit, NeedCtorLink)
	float                                              EquipmentRandomizerMultiplierPercentageToUse;             // 0x01A0(0x0004) (Edit)
	int                                                NavigationUsedPathWeight;                                 // 0x01A4(0x0004) (Edit)
	float                                              NavigationEnemySpread;                                    // 0x01A8(0x0004) (Edit)
	struct FCampaignLevelEntry                         CustomLevelEntry;                                         // 0x01AC(0x0118) (Edit, NeedCtorLink)
	float                                              AdditionalEnemySpeed;                                     // 0x02C4(0x0004) (Edit)
	float                                              AdditionalEnemyHealth;                                    // 0x02C8(0x0004) (Edit)
	float                                              AdditionalEnemyDamage;                                    // 0x02CC(0x0004) (Edit)
	float                                              SurvivalEnemyNumbersIncreasePerWaveClamp;                 // 0x02D0(0x0004) (Edit)
	float                                              SurvivalEnemyGroupsIncreasePerWaveClamp;                  // 0x02D4(0x0004) (Edit)
	TEnumAsByte<EGameDifficulty>                       MapOverrideDifficulty;                                    // 0x02D8(0x0001) (Edit)
	TEnumAsByte<EGameDifficulty>                       PIEDifficulty;                                            // 0x02D9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02DA(0x0002) MISSED OFFSET
	TArray<float>                                      AssaultKillPhaseTimeLimits;                               // 0x02DC(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        AssaultLivesRemainings;                                   // 0x02E8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MissionTagOverride;                                       // 0x02F4(0x000C) (Edit, NeedCtorLink)
	float                                              NightmareSurvivalOgreBoostScaler;                         // 0x0300(0x0004) (Edit)
	int                                                IgnoreDistantWyvernNavpointDistance;                      // 0x0304(0x0004) (Edit)
	float                                              AlternateEnemyGroupScalerMultiplier;                      // 0x0308(0x0004) (Edit)
	float                                              RuthlessChallengeScalarMultiplier;                        // 0x030C(0x0004) (Edit)
	TArray<struct FCustomMapWideModifier>              MapWideRuthlessModifersArray;                             // 0x0310(0x000C) (Edit, NeedCtorLink)
	TArray<struct FOverrideRuthlessModifiersPerEnemyTemplate> OverridePerTemplateArray;                                 // 0x031C(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     LobbyItemRecoveryMinBounds;                               // 0x0328(0x000C) (Edit)
	struct FVector                                     LobbyItemRecoveryMaxBounds;                               // 0x0334(0x000C) (Edit)
	struct FVector                                     LobbyItemRecoveryDestination;                             // 0x0340(0x000C) (Edit)
	float                                              OverlordMinHeight;                                        // 0x034C(0x0004) (Edit)
	float                                              OverlordMaxHeight;                                        // 0x0350(0x0004) (Edit)
	struct FVector2D                                   OverlordMinXYBounds;                                      // 0x0354(0x0008) (Edit)
	struct FVector2D                                   OverlordMaxXYBounds;                                      // 0x035C(0x0008) (Edit)
	TArray<struct FCameraParticleInfo>                 CameraParticles;                                          // 0x0364(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefMapInfo");
		return ptr;
	}


	int GetMaxPlayers();
	unsigned long EnableVoiceChat(class ADunDefBasePlayerController* aPC);
	unsigned long AllowConsole();
};


// Class UDKGame.DunDefBasePlayerController
// 0x0094 (0x06B4 - 0x0620)
class ADunDefBasePlayerController : public AGamePlayerController
{
public:
	TArray<struct FCameraParticleInfo>                 CameraParticles;                                          // 0x0620(0x000C) (Edit, NeedCtorLink)
	TArray<class UParticleSystemComponent*>            cameraParticleComponents;                                 // 0x062C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FString                                     curMovie;                                                 // 0x0638(0x000C) (NeedCtorLink)
	int                                                remoteUserID;                                             // 0x0644(0x0004)
	int                                                statPlayerIndex;                                          // 0x0648(0x0004)
	int                                                HostStatIndex;                                            // 0x064C(0x0004)
	int                                                currentSession;                                           // 0x0650(0x0004)
	TArray<int>                                        statsData;                                                // 0x0654(0x000C) (NeedCtorLink)
	TArray<int>                                        playerStatsData;                                          // 0x0660(0x000C) (NeedCtorLink)
	TArray<int>                                        myStatsData;                                              // 0x066C(0x000C) (NeedCtorLink)
	int                                                numMyStatElements;                                        // 0x0678(0x0004)
	int                                                numReceivedMyStatElements;                                // 0x067C(0x0004)
	int                                                numPlayerStatElements;                                    // 0x0680(0x0004)
	int                                                numReceivedPlayerStatElements;                            // 0x0684(0x0004)
	int                                                numTotalStatElements;                                     // 0x0688(0x0004)
	int                                                numReceivedStatElements;                                  // 0x068C(0x0004)
	unsigned char                                      isTalking;                                                // 0x0690(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0691(0x0003) MISSED OFFSET
	unsigned long                                      wantsPushToTalk : 1;                                      // 0x0694(0x0004)
	unsigned long                                      bIsHUDSceneOwner : 1;                                     // 0x0694(0x0004)
	class UHUDWidgetScene*                             HUDScene;                                                 // 0x0698(0x0004)
	float                                              gameStatsWriteDelay;                                      // 0x069C(0x0004)
	float                                              gameStatsTimer;                                           // 0x06A0(0x0004)
	float                                              clientPlayerStatsWriteDelay;                              // 0x06A4(0x0004)
	float                                              clientPlayerStatsTimer;                                   // 0x06A8(0x0004)
	float                                              serverPlayerStatsWriteDelay;                              // 0x06AC(0x0004)
	float                                              serverPlayerStatsTimer;                                   // 0x06B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBasePlayerController");
		return ptr;
	}


	void ClientSetCurrentSession(int SessionId);
	void ClientReceiveStatBlock(int numInBlock, int bLock);
	void CancelStatWriteTimers();
	void UpdateStatWriteTimers(float DeltaTime);
	void TrySettingHostStats();
	void ClientSendingStats(int numElements);
	void ServerSendClientStats();
	void ServerSendStats();
	void ServerReceiveMyStatBlock(int numInBlock, int bLock);
	void ClientSendMyStats();
	void ServerSendingMyStats(int numElements, int myStatPlayerIndex);
	void SendMyStats(int myStatPlayerIndex);
	void ClientAddRemoteIDToIgnore(int remoteID);
	void ClientAddRemoteID(int remoteID, const struct FString& PlayerName, unsigned long trueRemote, unsigned long Host, int myStatPlayerIndex);
	void ServerMarkStatsComplete();
	void ClientReceivePlayerStatBlock(int numInBlock, int bLock);
	void ClientSendingPlayerStats(int numElements);
	void ServerSendClientPlayerStats();
	void ServerSendPlayerStats();
	void CheckMovie(unsigned long bForce);
	void SkippedMovie();
	void EndedMovie();
	void CacheMovie();
	void StopMoviePlaying();
	void StopMovie();
	void PlayMovie(const struct FString& MovieName, int AdditionalMovieID);
	void StartedPlayingMovie(const struct FString& MovieName, int AdditionalMovieID);
	void ServerStopMovie();
	void ServerPlayMovie(const struct FString& MovieName, int AdditionalMovieID);
	void ServerCheckMovie();
	unsigned long GetCameraParticleEnabled(const struct FName& particleName);
	unsigned long SetCameraParticleEnabled(const struct FName& particleName, unsigned long Enabled);
	void PostCameraUpdate(float DeltaTime, const struct FVector& cameraLocation, const struct FRotator& cameraRotation);
	void PlayerTick(float DeltaTime);
	void PlayerRealTimeTick(float RealDeltaTimeSeconds);
	void ReceivedPlayer();
	void ToggleCameraParticle(const struct FName& particleName);
	void DisableCameraParticle(const struct FName& particleName);
	void EnableCameraParticle(const struct FName& particleName);
	class ADunDefGameReplicationInfo* GetGRI();
	void CreateHUDScene(class ULocalPlayer* ForPlayer);
	void PostSpawn();
	void PostBeginPlay();
};


// Class UDKGame.DunDefPlayerController
// 0x0484 (0x0B38 - 0x06B4)
class ADunDefPlayerController : public ADunDefBasePlayerController
{
public:
	int                                                ManaPower;                                                // 0x06B4(0x0004) (Edit, Net)
	int                                                MaxManaPower;                                             // 0x06B8(0x0004) (Edit, Net)
	float                                              EquipmentPickupRange;                                     // 0x06BC(0x0004) (Edit)
	float                                              TavernEquipmentPickupRange;                               // 0x06C0(0x0004) (Edit)
	float                                              BuildPhaseEquipmentPickupRange;                           // 0x06C4(0x0004) (Edit)
	float                                              MinActivationInterval;                                    // 0x06C8(0x0004) (Edit)
	float                                              MaxSplitscreenHudOverlayDistanceSq;                       // 0x06CC(0x0004) (Edit)
	float                                              MaxNonSplitscreenHudOverlayDistanceSq;                    // 0x06D0(0x0004) (Edit)
	class UUI_HeroSelection*                           HeroSelectionUITemplate;                                  // 0x06D4(0x0004) (Edit)
	class UAudioComponent*                             InvestManaSoundComp;                                      // 0x06D8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UTexture2D*                                  RotatingCameraIconTexture;                                // 0x06DC(0x0004) (Edit)
	class UTexture2D*                                  HoldingToTalkIconTexture;                                 // 0x06E0(0x0004) (Edit)
	class UTexture2D*                                  ActivateSpectatorModeIconLeft;                            // 0x06E4(0x0004) (Edit)
	class UTexture2D*                                  ActivateSpectatorModeIconRight;                           // 0x06E8(0x0004) (Edit)
	class UDunDefUIScene*                              WaitingForSpawnUITemplate;                                // 0x06EC(0x0004) (Edit)
	class USoundCue*                                   DropManaSound;                                            // 0x06F0(0x0004) (Edit)
	class USoundCue*                                   CalloutSound;                                             // 0x06F4(0x0004) (Edit)
	class USoundCue*                                   BeepSound;                                                // 0x06F8(0x0004) (Edit)
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialTemplate;                           // 0x06FC(0x0004) (Edit)
	float                                              EnemyHealthBarHideDelay;                                  // 0x0700(0x0004) (Edit)
	float                                              AnalogMovementSensitivity;                                // 0x0704(0x0004) (Edit)
	float                                              MinimumAnalogMovementPercent;                             // 0x0708(0x0004) (Edit)
	float                                              ConsoleCursorTowerPlacementSensitivity;                   // 0x070C(0x0004) (Edit, Config)
	float                                              ShoulderCameraTurnScreenPercent;                          // 0x0710(0x0004) (Edit, Config)
	float                                              TopDownCameraTurnScreenPercent;                           // 0x0714(0x0004) (Edit, Config)
	class ADunDefPlayerCamera*                         CameraTemplate;                                           // 0x0718(0x0004) (Edit)
	float                                              HotKeyHoldBindTime;                                       // 0x071C(0x0004) (Edit)
	float                                              CursorShoulderModeTurnSpeedFactor;                        // 0x0720(0x0004) (Edit)
	float                                              CameraIconMinZoomScale;                                   // 0x0724(0x0004) (Edit)
	float                                              CameraIconMaxZoomScale;                                   // 0x0728(0x0004) (Edit)
	float                                              CameraIconSizeInterpSpeed;                                // 0x072C(0x0004) (Edit)
	float                                              SpectatorIconXOffset;                                     // 0x0730(0x0004) (Edit)
	float                                              CameraIconXOffset;                                        // 0x0734(0x0004) (Edit)
	float                                              PercentFromBottomForNoShoulderTurn;                       // 0x0738(0x0004) (Edit)
	float                                              DroppedEquipmentCheckRadius;                              // 0x073C(0x0004) (Edit)
	float                                              TavernDroppedEquipmentCheckRadius;                        // 0x0740(0x0004) (Edit)
	float                                              TopDownAutoPickTargetDotWeight;                           // 0x0744(0x0004) (Edit)
	float                                              MouseEdgeCameraSpinSpeed;                                 // 0x0748(0x0004) (Edit)
	float                                              MouseRotateCameraSpinSpeed;                               // 0x074C(0x0004) (Edit)
	unsigned long                                      bAutoSelectHero : 1;                                      // 0x0750(0x0004) (Edit, Config)
	unsigned long                                      bForceSpectatorMode : 1;                                  // 0x0750(0x0004) (Edit, Config)
	unsigned long                                      bSetShallowOptions : 1;                                   // 0x0750(0x0004) (Transient)
	unsigned long                                      bHasInitialRespawned : 1;                                 // 0x0750(0x0004) (Transient)
	unsigned long                                      bDidFirstSpawn : 1;                                       // 0x0750(0x0004) (Transient)
	unsigned long                                      bDisableStepTowardsTarget : 1;                            // 0x0750(0x0004) (Transient)
	unsigned long                                      bUseFPV : 1;                                              // 0x0750(0x0004) (Transient)
	unsigned long                                      bAllowsForceFeedback : 1;                                 // 0x0750(0x0004) (Transient)
	unsigned long                                      bEnteringLockedInputState : 1;                            // 0x0750(0x0004) (Transient)
	unsigned long                                      bInputLockedByAnimation : 1;                              // 0x0750(0x0004)
	unsigned long                                      bRightStickTurnsCameraScheme : 1;                         // 0x0750(0x0004)
	unsigned long                                      bInvertCameraPitch : 1;                                   // 0x0750(0x0004)
	unsigned long                                      bSwapTriggersAndButtons : 1;                              // 0x0750(0x0004)
	unsigned long                                      bForceDrawBlack : 1;                                      // 0x0750(0x0004)
	unsigned long                                      bDisableCameraShake : 1;                                  // 0x0750(0x0004)
	unsigned long                                      bTargetingCursorHidden : 1;                               // 0x0750(0x0004) (Transient)
	unsigned long                                      bCurrentlySwappingHero : 1;                               // 0x0750(0x0004) (Transient)
	unsigned long                                      bIgnoredFirstMove : 1;                                    // 0x0750(0x0004) (Transient)
	unsigned long                                      bOptionsMeleeHideTargetingReticle : 1;                    // 0x0750(0x0004) (Transient)
	unsigned long                                      bOptionsShowEnemySpawnNotifications : 1;                  // 0x0750(0x0004) (Transient)
	unsigned long                                      bSpectatorFreeLook : 1;                                   // 0x0750(0x0004) (Transient)
	unsigned long                                      bWaitingForHeroInitialization : 1;                        // 0x0750(0x0004) (Transient)
	unsigned long                                      bServerRunningRequestActivationCheck : 1;                 // 0x0750(0x0004) (Transient)
	unsigned long                                      UseGamePadControl : 1;                                    // 0x0750(0x0004)
	unsigned long                                      DoQuitToMainMenu : 1;                                     // 0x0750(0x0004)
	unsigned long                                      ShownHeroSelectionUI : 1;                                 // 0x0750(0x0004)
	unsigned long                                      bLockedMovementAllowRotation : 1;                         // 0x0750(0x0004)
	unsigned long                                      bHasUltimateDefender : 1;                                 // 0x0750(0x0004)
	unsigned long                                      bHasEternalDefender : 1;                                  // 0x0750(0x0004)
	unsigned long                                      bHasRuthlessDefender : 1;                                 // 0x0750(0x0004)
	unsigned long                                      bWasCameraInShoulderModeUponCombat : 1;                   // 0x0750(0x0004)
	unsigned long                                      bWasCameraInShoulderModeUponPreviousCombat : 1;           // 0x0750(0x0004)
	unsigned long                                      IgnoreDeathEffectOnce : 1;                                // 0x0754(0x0004) (Transient)
	unsigned long                                      bDontDrawOverlays : 1;                                    // 0x0754(0x0004) (Transient)
	unsigned long                                      IsInForgeUI : 1;                                          // 0x0754(0x0004)
	unsigned long                                      SentInitialHeroData : 1;                                  // 0x0754(0x0004)
	unsigned long                                      bInTransientJoinOnlineGame : 1;                           // 0x0754(0x0004) (Transient)
	unsigned long                                      bShowingDetailedToolTip : 1;                              // 0x0754(0x0004) (Transient)
	unsigned long                                      bDoInitialRespawn : 1;                                    // 0x0754(0x0004) (Transient)
	unsigned long                                      bFirePressed : 1;                                         // 0x0754(0x0004) (Transient)
	unsigned long                                      OldSplitscreenState : 1;                                  // 0x0754(0x0004)
	unsigned long                                      InitiatingMute : 1;                                       // 0x0754(0x0004)
	unsigned long                                      needToUpdatePrimaryPlayer : 1;                            // 0x0754(0x0004)
	unsigned long                                      tmpRightStickTurnsCameraScheme : 1;                       // 0x0754(0x0004) (Transient)
	float                                              SpectatorCameraSwitchInterval;                            // 0x0758(0x0004) (Edit)
	float                                              NoGRItimeOut;                                             // 0x075C(0x0004) (Edit)
	class ATradeManager*                               TradeManagerArchetype;                                    // 0x0760(0x0004) (Edit)
	float                                              AdditionalFOVScaler;                                      // 0x0764(0x0004) (Edit)
	float                                              LastSpectatorCameraSwitchTime;                            // 0x0768(0x0004) (Transient)
	float                                              ChaseMouseSensitivityPitch;                               // 0x076C(0x0004) (Edit)
	float                                              ChaseMouseSensitivityYaw;                                 // 0x0770(0x0004) (Edit)
	float                                              AutoTurnAutoAimRange;                                     // 0x0774(0x0004) (Edit)
	struct FString                                     MSG_StorageDeviceRemovedTitle;                            // 0x0778(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_StorageDeviceRemovedDescription;                      // 0x0784(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_WaitingForDLCMasksTitle;                              // 0x0790(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_WaitingForDLCMasksDescription;                        // 0x079C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_BootedFromGameTitle;                                  // 0x07A8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_BootedFromGameDescription;                            // 0x07B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningTitle;                                         // 0x07C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningDescription;                                   // 0x07CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedTitle;                                      // 0x07D8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedDescription1;                               // 0x07E4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedDescription2;                               // 0x07F0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedDescription3;                               // 0x07FC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedNotSameModeDescription;                     // 0x0808(0x000C) (Localized, NeedCtorLink)
	float                                              LastEnemyHealthBarTargetTime;                             // 0x0814(0x0004) (Transient)
	float                                              CameraIconScale;                                          // 0x0818(0x0004) (Transient)
	float                                              MouseCameraRotationSpeed;                                 // 0x081C(0x0004) (Transient)
	float                                              LastMatineeSkipTime;                                      // 0x0820(0x0004) (Transient)
	int                                                MyPlayerControllerStartWave;                              // 0x0824(0x0004) (Transient)
	int                                                ChaseCameraOffsetType;                                    // 0x0828(0x0004) (Transient)
	struct FHighDigitInt                               BankManaNotifyAmountAdded;                                // 0x082C(0x0010) (Transient)
	struct FHighDigitInt                               BankManaNotifyTotal;                                      // 0x083C(0x0010) (Transient)
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialInstance;                           // 0x084C(0x0004)
	class UDunDefUIScene*                              WaitingForSpawnUIInstance;                                // 0x0850(0x0004)
	float                                              InputAnimationLockTime;                                   // 0x0854(0x0004)
	float                                              EnteredLockedMovementStateTime;                           // 0x0858(0x0004) (Transient)
	float                                              LastCalloutSoundTime;                                     // 0x085C(0x0004) (Transient)
	float                                              LastActivationTime;                                       // 0x0860(0x0004) (Transient)
	float                                              LastTimeInStepTowards;                                    // 0x0864(0x0004) (Transient)
	struct FVector                                     TargetingCursorPosition;                                  // 0x0868(0x000C)
	struct FLinearColor                                TargetingCursorColor;                                     // 0x0874(0x0010)
	float                                              TargetingCursorScale;                                     // 0x0884(0x0004)
	class APawn*                                       OldPawn;                                                  // 0x0888(0x0004)
	struct FHeroNetInfo                                HeroCachedInfo;                                           // 0x088C(0x0098) (Transient, NeedCtorLink)
	TArray<struct FEquipmentNetInfo>                   EquipmentsCachedInfo;                                     // 0x0924(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     CurrentPawnLocation;                                      // 0x0930(0x000C)
	struct FRotator                                    CurrentPawnRotation;                                      // 0x093C(0x000C)
	int                                                Score;                                                    // 0x0948(0x0004)
	float                                              LastDiedTime;                                             // 0x094C(0x0004)
	float                                              LastLookRight;                                            // 0x0950(0x0004)
	float                                              LastLookUp;                                               // 0x0954(0x0004)
	class APawn*                                       LastDiedPawn;                                             // 0x0958(0x0004)
	class USeqAct_Interp*                              PreviousMatineeAction;                                    // 0x095C(0x0004) (Transient)
	float                                              PreviousMatineePlayrate;                                  // 0x0960(0x0004) (Transient)
	float                                              LastRespawnTimeMultiplier;                                // 0x0964(0x0004) (Transient)
	float                                              LastRealDeathTime;                                        // 0x0968(0x0004) (Transient)
	int                                                LocalPlayerNum;                                           // 0x096C(0x0004)
	class UDunDefHero*                                 myHero;                                                   // 0x0970(0x0004)
	TScriptInterface<class UDunDefToolTipInterface>    CurrentToolTipActor;                                      // 0x0974(0x0008)
	TArray<class ADunDefPlayerAbility*>                PlayerAbilities;                                          // 0x097C(0x000C) (NeedCtorLink)
	class ADunDefPlayerAbility*                        CurrentCastingAbility;                                    // 0x0988(0x0004)
	class ADunDefPlayerAbility*                        StartedCastingAbility;                                    // 0x098C(0x0004)
	class ADunDefPlayerAbility*                        CurrentControllingAbility;                                // 0x0990(0x0004)
	TScriptInterface<class UDunDefToolTipInterface>    PreviousToolTipActor;                                     // 0x0994(0x0008)
	struct FVector                                     CursorResetPosition;                                      // 0x099C(0x000C) (Transient)
	float                                              RotateCameraIconOpacity;                                  // 0x09A8(0x0004)
	float                                              LastEndedMovieTime;                                       // 0x09AC(0x0004)
	float                                              LastMovementAnalogPercentage;                             // 0x09B0(0x0004) (Transient)
	float                                              LastFiredTime;                                            // 0x09B4(0x0004) (Transient)
	class ADunDefPlayer*                               Spectatee;                                                // 0x09B8(0x0004) (Transient)
	class ADunDefPlayerReplicationInfo*                SpectateePRI;                                             // 0x09BC(0x0004) (Transient)
	float                                              CurrentEnemyHealthBarOpacity;                             // 0x09C0(0x0004)
	float                                              EnemyHealthBarInterpUpSpeed;                              // 0x09C4(0x0004) (Edit)
	float                                              EnemyHealthBarInterpDownSpeed;                            // 0x09C8(0x0004) (Edit)
	class ADunDefEnemy*                                CurrentEnemyForHealthbar;                                 // 0x09CC(0x0004)
	struct FVector                                     lastValidTargetLocation;                                  // 0x09D0(0x000C)
	float                                              TransientToolTipOffset;                                   // 0x09DC(0x0004) (Transient)
	struct FVector                                     LookDirToReplicate;                                       // 0x09E0(0x000C)
	struct FVector                                     LookTargetToReplicate;                                    // 0x09EC(0x000C)
	float                                              LastToolTipActorChangeTime;                               // 0x09F8(0x0004) (Transient)
	float                                              PlayerStatEarnedManaBuffer;                               // 0x09FC(0x0004) (Transient)
	float                                              LastPlayerStatManaWriteTime;                              // 0x0A00(0x0004) (Transient)
	float                                              LastToolTipActorShowDetailsTime;                          // 0x0A04(0x0004) (Transient)
	float                                              PulseTargetingIndicatorTime;                              // 0x0A08(0x0004) (Transient)
	TScriptInterface<class UDunDefTargetableInterface> LastTargetingIndicatorTarget;                             // 0x0A0C(0x0008) (Transient)
	struct FVector                                     PreviousMouseCoords;                                      // 0x0A14(0x000C) (Transient)
	class UClass*                                      leaderboardWrite;                                         // 0x0A20(0x0004)
	class UDunDefPlayerStats*                          myStats;                                                  // 0x0A24(0x0004)
	int                                                TargetingTeam;                                            // 0x0A28(0x0004) (Net, Transient)
	int                                                HotKeySet;                                                // 0x0A2C(0x0004) (Transient)
	struct FHighDigitInt                               LastReplicatedBankedMana;                                 // 0x0A30(0x0010) (Transient)
	float                                              LastReplicatedBankedManaTime;                             // 0x0A40(0x0004) (Transient)
	struct FString                                     heldLevelTag;                                             // 0x0A44(0x000C) (Transient, NeedCtorLink)
	TEnumAsByte<EGameDifficulty>                       heldGameDifficulty;                                       // 0x0A50(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0A51(0x0003) MISSED OFFSET
	float                                              ToolTipMouseOffsetX;                                      // 0x0A54(0x0004) (Edit)
	float                                              ToolTipMouseOffsetY;                                      // 0x0A58(0x0004) (Edit)
	struct FVector                                     DesiredLockedMovementAccel;                               // 0x0A5C(0x000C) (Transient)
	TArray<class UClass*>                              DisabledAbilities;                                        // 0x0A68(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             suffix4;                                                  // 0x0A74(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      suffixValue4;                                             // 0x0A80(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             suffix3;                                                  // 0x0A8C(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      suffixValue3;                                             // 0x0A98(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             suffix2;                                                  // 0x0AA4(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      suffixValue2;                                             // 0x0AB0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             suffix1;                                                  // 0x0ABC(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      suffixValue1;                                             // 0x0AC8(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        BossTimerValues;                                          // 0x0AD4(0x000C) (NeedCtorLink)
	TArray<class UDunDef_SeqAct_ConcatString*>         BossTimerConcats;                                         // 0x0AE0(0x000C) (NeedCtorLink)
	TArray<struct FmetPlayers>                         playersToAddToMetList;                                    // 0x0AEC(0x000C) (NeedCtorLink)
	class UAdvancedConsoleCommandsSettings*            MyAdvancedConsoleCommandsSettings;                        // 0x0AF8(0x0004)
	struct FPRIRelatedInfo                             priInfo;                                                  // 0x0AFC(0x0020) (NeedCtorLink)
	int                                                movieMask;                                                // 0x0B1C(0x0004)
	float                                              overLordCameraMovementSpeed;                              // 0x0B20(0x0004) (Edit)
	float                                              altOverlovedCameraMult;                                   // 0x0B24(0x0004) (Edit)
	float                                              overLordGamepadMovementSpeed;                             // 0x0B28(0x0004) (Edit)
	float                                              overlordGamepadZoomScale;                                 // 0x0B2C(0x0004) (Edit)
	float                                              LastRequestedRestartTime;                                 // 0x0B30(0x0004) (Transient)
	float                                              cursorAccel;                                              // 0x0B34(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerController");
		return ptr;
	}


	void PrintOwnerBuffs();
	void SetGlobalEnemyHealth(int Health, unsigned long HurtEnemies, unsigned long UpdateEnemyStats, int HurtAmount);
	void EnableBuffDebug(unsigned long bEnable);
	void SpawnRandomItem(float Quality, float Multiplier);
	void SkipToWave(int Wave);
	void ToggleQualityOutline();
	void ToggleHideGoodEquipmentOverlay();
	void ToggleHideMiniMapBillboards();
	void SetHideMiniMapBillboards(unsigned long Hide);
	void ToggleHideMiniMapTowers();
	void ToggleHideMiniMapTowers_prev();
	void toggleLootTable();
	void toggleItemBeams();
	void ServerKillMe();
	void KillMe();
	float GetDroppedEquipmentCheckRadius();
	float GetEquipmentPickupRange();
	void SetOwnerNoSee(unsigned long bOwnerNoSee, unsigned long bOwnerNoSeeWeapon);
	void CheckLobbyAchievements();
	void ShowOverlordBounds();
	void SetOverlordMinXY(float MinX, float MinY);
	void SetOverlordMaxXY(float MaxX, float MaxY);
	void SetOverlordHeight(float MaxHeight, float MinHeight);
	void RotateCameraRelease();
	void RotateCameraPress();
	void ReleaseActionWheel();
	unsigned long AllowBindingSet();
	unsigned long AbilityModifierHeld();
	unsigned long UseMouseIntersectionForPlacement();
	unsigned long UseTowerPlacementLocation();
	void SetTargetingTeam(int aTeam);
	void DoWeaponSwap();
	void ModifyJumpZ(float* playerJumpZ);
	unsigned long IsForceFeedbackAllowed();
	void ClientSetWeaponInstigator(class ADunDefWeapon* aWeapon, class APawn* anInstigator);
	void ServerRequestWeaponInstigator(class ADunDefWeapon* aWeapon);
	void ClientExecRPC(class AActor* twoWayRPCInterfaceActor, const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
	void ServerExecRPC(class AActor* twoWayRPCInterfaceActor, const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
	unsigned long InFPV();
	void InitPlayerReplicationInfo();
	void ServerActivateCrystal();
	void ResetBossTimers();
	unsigned long ValidateStringConcat(class UDunDef_SeqAct_ConcatString* Node);
	void BossTimerSkip();
	void KickAllSplits();
	void QuickAddSplits();
	void ControlEmulatorPlayer4();
	void ControlEmulatorPlayer3();
	void ControlEmulatorPlayer2();
	void ControlEmulatorPlayer1();
	void ToggleSplitScreen();
	void ToggleHysteresis();
	void ToggleStepTowardsTarget();
	void ToggleItemCensor();
	void RepairAllTowers();
	void UpgradeAllTowers(int numLevels);
	void DowngradeAllTowers(int numLevels);
	void ActivateCrystalForAllPlayers();
	void ActivateCrystal();
	void PrivatelyDropAllMana();
	void DropHalfMana();
	void DropAllMana();
	void AddCheats();
	void ToggleSpectator();
	void UnlockCostume(class UDunDefHero* ForHeroArchetype, int costumeIndex, class USoundCue* GivenCostumeSound, unsigned long bNotifyUser, unsigned long bIsHeroUnlock);
	void HackLoadingRankedHeroesFailed();
	void HackLoadingRankedHeroesComplete();
	unsigned long CanAllPlayersPlayOnline(unsigned long checkPermissions);
	void PlayBeepSound();
	void ServerFinalTradeConfirmation();
	void ClientRequestFinalTradeConfirmation();
	void ShowTradeUI(class ATradeManager* myTrade, unsigned char ForceSceneStackPriority, unsigned long autoTopSceneStack);
	void ServerCancelTrade();
	void ServerRequestInitiateTrade(class ADunDefPlayerReplicationInfo* withOtherPRI);
	void ClientAddTradeEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void ClientRemoveTradeEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void ClientUpdateTradeEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void ServerAddTradeEquipment(const struct FEquipmentNetInfo& netInfo);
	void ServerRemoveTradeEquipment(const struct FEquipmentNetInfo& netInfo);
	void ServerSetTradeConfirmation(unsigned long bConfirm);
	void ServerUpdateTradeMana(const struct FHighDigitInt& tradeMana);
	void ServerUpdateTradeEquipment(const struct FEquipmentNetInfo& netInfo);
	void STATIC_GetCurrentToolTipActors(TArray<TScriptInterface<class UDunDefToolTipInterface>>* CurrentToolTipActors);
	void SetForceSpecatorMode(unsigned long bEnable);
	unsigned long STATIC_AnyLocalPlayerWantsDamageNumbers(class AWorldInfo* aWorldInfo);
	unsigned long CanInvestMana(int requiredWavesAfterStart);
	void CleanupPawn();
	unsigned long HasRecentlyFired(float MinTimeSinceLastFiring);
	float GetRespawnTimeMultiplier();
	class ULocalPlayer* GetLocalPlayer();
	void AdjustSplitScreenName(const struct FString& NewName);
	void StartFire(unsigned char FireModeNum);
	void SetForceCamTarget(class ACameraActor* camTarget);
	void ClientWeaponFired(class ADunDefWeapon* aWeapon, unsigned char FireMode, unsigned long bPlayForceFeedback, class UForceFeedbackWaveform* FFWaveform);
	void ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);
	void StartedPlayingMovie(const struct FString& MovieName, int AdditionalMovieID);
	unsigned long IsMobile();
	void OnDLCRemoved();
	void ClearOnlineDelegates();
	void RegisterOnlineDelegates();
	void CheckDLCMasks();
	void ShowWaitingForDLCMasksMessage();
	void RequestDLCMasks(unsigned long showMessage);
	void ClientInitCompatibilityChecks();
	void GenericBootToMenu(const struct FString& Title, const struct FString& Description);
	void HandleBootedByDLC();
	void MobileSetCursorToAutoTarget(class UCanvas* C);
	void MobileFireReleased();
	void MobileFirePressed();
	void MobileAltFireReleased();
	void MobileAltFirePressed();
	void MobileTouchTapped();
	void MobileTouchUnHold();
	void MobileTouchHold();
	void MobileTouchPressed();
	void MobileTouchReleased();
	void ServerSetUsingGamepadControl(unsigned long bUseGamepad);
	void SetUsingGamepadControl(unsigned long bUseGamepad);
	class UDunDefHeroManager* GetHeroManager();
	void GiveEquipmentToItemBox(const struct FEquipmentNetInfo& theEquipmentInfo, unsigned long bNotifyUser, class USoundCue* GivenEquipmentSound, unsigned long bAutoLockEquipment, unsigned long bForceEquipmentIntoItemBox, unsigned long bOnlyGiveToUniqueProfile);
	void UpdateForOptions(struct FOptionsFixedStruct* newOptions);
	unsigned long IsPlayerOnMuteList(const struct FUniqueNetId& PlayerNetId);
	void ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerInitiateMute();
	void UnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void MutePlayer(const struct FUniqueNetId& PlayerNetId, unsigned long selfInitiated);
	void ClientMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerRefreshMutingForTravel();
	int GetTargetingTeam();
	void ClientWasKicked();
	void ClientSetRichPresence(int presenceId, int missionId);
	int STATIC_GetNumPlayersWhoPossessedPawns();
	unsigned long STATIC_HasAnyLocalPlayerPossessedPawn();
	void SetBankedMana(const struct FHighDigitInt& boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit);
	struct FHighDigitInt CalculateBankedMana(const struct FHighDigitInt& theInfo);
	void ReAdjustBankedMana();
	void RemoveBankedMana(const struct FHighDigitInt& boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit);
	void AddBankedMana(const struct FHighDigitInt& boxInfo, unsigned long bAddFromHeroMana, unsigned long bIgnoreBankLimit);
	void NotifyBankMana();
	struct FString GetBankedManaString();
	int GetBankedMana(unsigned char* atMaxBank);
	struct FHighDigitInt STATIC_GetMaxManaItemBox();
	struct FHighDigitInt GetBankedManaItemBox(unsigned char* atMaxBank);
	void NotifyJoiningGameFromInvite();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void NotifyInviteFailed();
	void NotifyNotSameModeOnInvite();
	void ClientNetOpenUIScene(class UDunDefUIScene* aUIScene, unsigned long bOpenForPlayer, unsigned long bCloseAllOtherScenes, int CustomInitIndex);
	unsigned long CanReload();
	int STATIC_GetNumPlayersWhoHaveSpawned();
	void STATIC_DistributeManaAmongPlayers(float ManaAmount, int numRecursions, unsigned long bAllowBanking, unsigned long bOnlyPutInBank);
	void ClientAddManaToBank(float ManaAmount, unsigned long bIgnoreBankLimit);
	void ClientAddManaToBankHDI(const struct FHighDigitInt& ManaAmount, unsigned long bIgnoreBankLimit);
	void OnExternalUIChanged(unsigned long bIsOpening);
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);
	unsigned long ModMapCheck(class UDunDefOnlineGameSettingsConsole* OnlineGameSettingsConsoleRef);
	void OnInviteJoinComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	unsigned long IsSameVersion(class UOnlineGameSettings* gameToCheck);
	unsigned long IsSameMode(class UOnlineGameSettings* gameToCheck);
	unsigned long SetPause(unsigned long bPause, const struct FScriptDelegate& CanUnpauseDelegate, unsigned long bForcePause);
	void OnControllerChanged(int ControllerId, unsigned long bIsConnected);
	void TryToAddToMetList();
	void ClientAddToRecentPlayersList(const struct FUniqueNetId& NetId, const struct FString& PlayerName);
	unsigned long IsHoldingToTalk();
	unsigned long IsPrimaryAuthorityProfile();
	unsigned long IsPrimaryProfile();
	void ClientDoUnlockAchievment(TEnumAsByte<EAchievement> Achievement);
	void FlushOnlineStatsComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	void ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass);
	void ClientWriteMidGameLeaderboardStats(class UClass* OnlineStatsWriteClass, int CombatTime);
	void CheckBestStats(int myStatPlayerIndex, int BestTime);
	void ClientBeginStatRecording(const struct FString& LevelTag, TEnumAsByte<EGameDifficulty> GameDifficulty);
	void CheckUserIDForStats();
	void ClientReportGameStat(int StatClassIndex, int Value, const struct FName& SplitName);
	void ClientCheckPushToTalk();
	void SetStatsReadString(const struct FString& LeaderboardName);
	void SetCurrentCampaignTag(const struct FString& campaignTag, unsigned long forceSave);
	void SetCurrentDifficulty(TEnumAsByte<EGameDifficulty> difficulty);
	void RetryLeaderboardWrite();
	void ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View);
	void ServerMoveEx(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, const struct FVector& RemoteLookDir);
	void ServerMoveExWithLook(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, const struct FVector& RemoteLookDir, const struct FVector& RemoteLookTarget);
	void DualServerMoveEx(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, const struct FVector& RemoteLookDir);
	void DualServerMoveExWithLook(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, const struct FVector& RemoteLookDir, const struct FVector& RemoteLookTarget);
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void ClientGotoState(const struct FName& NewState, const struct FName& NewLabel);
	void RegisterStatHero();
	unsigned long IsInputDisabled();
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void ServerWantToSkipBuildPhase(unsigned long WantToSkip);
	void TryAutoCombatCamera();
	void ClientEnteredCombatPhase();
	void ClientEnteredBuildPhase();
	void Server_EnteredCombatPhase();
	void Server_EnteredBuildPhase();
	void AnimNotify_CurrentAbility_Off();
	void AnimNotify_CurrentAbility_On();
	void ServerChangeToSmallestTeam();
	void ClientOpenUI(class UDunDefUIScene* UISceneTemplate);
	void NotifyLoadedWorld(const struct FName& WorldPackageName, unsigned long bFinalDest);
	void SetDesiredLockedMovementAccel(const struct FVector& newAccel);
	void GoingToLockedMovementState();
	float PushLockedMovementState(const struct FName& AnimationName, float AnimationBlendIn, unsigned long AnimationLooping, float AnimationSpeed, float AnimationBlendOut, float TimeFromEndToUnlockInput, float LockTimeOverride, unsigned long enablePrimaryFire, unsigned long enableAltFire, const struct FName& StateNameOverride, unsigned long bReplicateAnimation, unsigned long ForcePushState, unsigned long bAllowRotation);
	unsigned long IsInLockedMovementState(unsigned long AnyLockedInputState, unsigned long enablePrimaryFire, unsigned long enableAltFire, const struct FName& StateNameOverride, unsigned long testStateStack);
	unsigned long PopLockedMovementState(unsigned long AnyLockedInputState, unsigned long enablePrimaryFire, unsigned long enableAltFire, const struct FName& StateNameOverride);
	unsigned long IsLockedMovementState();
	void StartCastingAbility(class ADunDefPlayerAbility* ability);
	unsigned long IsCastingPlayerAbility();
	unsigned long IsInCastingState();
	void OnEndAbility(class ADunDefPlayerAbility* ability);
	unsigned long CanUseAbility(class ADunDefPlayerAbility* ability);
	void RemoveDisabledAbility(class UClass* removedAbility);
	void AddDisabledAbility(class UClass* disabledAbility);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	void ShowHeroLevelUp();
	int GetHeroMaxHealth(class APawn* forPawn);
	void ServerApplyHeroModifiers(class APawn* inPawn, unsigned long onPawnSpawn);
	void ServerApplyUpdatedHeroStats(const struct FHeroNetInfo& Info, unsigned long DidLevelUp);
	void NotifyLevelUp();
	void ServerUpdateEquipmentName(int equipmentIndex, const struct FString& EquipmentName, const struct FString& creatorName, unsigned long bIsVerified);
	void ServerUpdateHeroName(const struct FString& HeroName, unsigned long bIsVerified);
	void ServerItemBoxDrop(class AActor* forgeActor, const struct FEquipmentNetInfo& netInfo);
	void ServerAddBuff(const struct FsBuffNetInfo& Info);
	void ServerUpdateHeroEquipment(int equipmentIndex, const struct FEquipmentNetInfo& Info, unsigned long DoNotApplyStats);
	void ServerRemoveHeroEquipment(int equipmentIndex, unsigned long DoNotDrop);
	void ServerAddHeroEquipment(const struct FEquipmentNetInfo& Info, unsigned char Index, unsigned long bDontApplyUpdatedHeroStats);
	void ServerSetHeroNetInfo(const struct FHeroNetInfo& heroInfo);
	void ServerFinishedSendingHeroInitial();
	void ServerFinishedSendingHeroSwap();
	void ServerAddHeroEquipmentInitial(const struct FEquipmentNetInfo& Info, unsigned char Index);
	void NotifyRemovedHeroEquipment(class UHeroEquipment* Equipment, int equipmentIndex, unsigned long DoNotDrop);
	void NotifyAddedHeroEquipment(class UHeroEquipment* Equipment);
	void Server_InitializeForHero(class UDunDefHero* hero);
	void DestroyOldPawn();
	void ClientActivateNetworkEvent(const struct FName& EventName, int EventCustomID, class AActor* EventInstigator, class AActor* EventOriginator, class AActor* EventActor);
	class ADunDefPlayer* GetPlayerPawnArchetype();
	class ADunDefPlayerReplicationInfo* GetDunDefPRI();
	class USeqAct_Interp* GetControllingMatinee(unsigned long bForce);
	void SkippedMatinee();
	void SkipMatinee();
	unsigned long IsInCinematic();
	unsigned long ForceNoBlackBox();
	void NotifyHeal(int healAmount);
	void DoNotifyDirectorControl(unsigned long bNowControlling);
	void ClientNotifyDirectorControl(unsigned long bNowControlling);
	void NotifyDirectorControl(unsigned long bNowControlling);
	void ResetAllGasTraps();
	void Server_ResetAbilityCoolDowns();
	void Server_CancelAllAbilities(unsigned long bOnlyCancelNonStrategyActions);
	void SpawnPlayerCamera();
	void SetLookTargetToReplicate(const struct FVector& theLookTargetToReplicate);
	void SetRotationToReplicate(const struct FVector& NewLookDir);
	unsigned long ShouldTargetActor(class AActor* Actor);
	void SetTargetingIndicatorPosition(const struct FVector& Position);
	unsigned long IsOverGround(class AActor** targetRef);
	unsigned long AllowTargetUpdating();
	void DoPlayerMove(float DeltaTime, unsigned long bForceMovement, unsigned long bForceNoMouseWorldOrigin);
	unsigned long AllowAcceleration();
	float GetPlayerGroundSpeedModifier();
	void ServerUpdateBankedMana(const struct FHighDigitInt& bankedMana);
	void SetTargetingIndicatorHidden();
	void SetTargetingIndicatorNormal(float DeltaTime);
	void SetTargetingIndicatorOverEnemy(const TScriptInterface<class UDunDefTargetableInterface>& theTarget, float DeltaTime);
	void SendInitialHeroDataToServer(unsigned long swapHero);
	void TrySendingStats();
	void TryRemoteIDRegistration();
	void ReceivedPlayerReplicationInfo();
	void UpdateGamepadControl();
	void PostControllerIdChange();
	void PreControllerIdChange();
	void ReceivedPlayer();
	void ShowHeroSelectionUI(unsigned long bForce);
	void ServerRestartPlayer();
	void ClientPostLogin();
	void Server_PostLogin();
	int GetNumLocalPlayerControllers();
	void GetPreviousSpectatee();
	void GetNextSpectatee(unsigned long bDontSetCamera);
	void StartSpectatorCamera(unsigned long bHideHUD, unsigned long bOnlyStartIfInactive);
	void UpdateSpectatorMode(float DeltaTime, unsigned long bDontHideHud);
	void EndSpectatorMode();
	unsigned long IsInSpectatorMode();
	void HandleNoRespawn();
	void DoCheckRespawn(unsigned long justAttemptRespawn);
	void LocalAttemptSpawn();
	void CheckRespawn(unsigned long justAttemptRespawn);
	void PrivateSetHero(class UDunDefHero* hero);
	class UDunDefHero* GetHero(unsigned long CreateHeroIfNone);
	void Server_DestroyPlayerAbilities();
	void Server_CreatePlayerAbilities(class ADunDefPlayer* ForPlayer);
	class ADunDefPlayerAbility* GetAbilityByName(const struct FName& AbilityName);
	class ADunDefPlayerAbility* GetAbilityByClass(class UClass* AbilityClass);
	void ClientSetHUD(class UClass* newHUDType, class UClass* newScoringType);
	void CreateHUD();
	void CheckForPlayerWaiting();
	void PlayerTick(float DeltaTime);
	void DropAllEquipment();
	void DoRespawnEffect();
	void NotifyShieldChange();
	void NotifyHealthChange();
	void ClientNotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ClientActivation(class AActor* activatableActor, int activationType);
	void ServerRequestActivation(class AActor* activatableActor, int activationType);
	TScriptInterface<class UDunDefActivatableInterface> FindBestActivatableActor(unsigned long DontCheckViability, int activationType);
	unsigned long ShouldDrawGameplayCursor();
	void DrawHUD(class AHUD* H);
	unsigned long AllowCameraRotation();
	unsigned long IsWithinNonSplitScreenOverlayDist(const struct FVector& CamLoc, const struct FVector& actorLoc);
	void ServerRequestDestroy();
	void AddFloatingDamageEntryInvincible(class AActor* forActor, int DamageAmount, const struct FVector& Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset);
	void AddFloatingDamageEntry(class AActor* forActor, int DamageAmount, const struct FVector& Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset);
	void FinishQuitToMainMenu();
	void OnDestroyOnlineGameComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	void OnEndOnlineGameComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	struct FName GetSessionName();
	unsigned long CleanupOnlineSubsystemSession(unsigned long bQuitToMainMenu);
	void QuitToMainMenu(unsigned long forceImmediateReturn);
	void ClientAddToScore(int newScore, int Points, unsigned char ScoreTagReason, const struct FLinearColor& ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype);
	void AddToScore(int Points, unsigned char ScoreTagReason, const struct FLinearColor& ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype);
	void ClientTeleported(const struct FVector& newPawnLoc, const struct FRotator& newPawnRot);
	void OnTeleport(class USeqAct_Teleport* Action);
	void NotifyManaChanged(unsigned long bJustUpdate);
	void CheckManaPlayerStat(unsigned long forceFlush);
	float AddManaPower(float signedManaPower, unsigned long onlyAddTotal, unsigned long forceSubtractionOnLobby, unsigned long bIgnoreBankLimit);
	unsigned long CanAffordMana(float Amount);
	void ServerCollectManaToken(class ADunDefManaToken* Token);
	unsigned long CanDoInput();
	void CheckForStartWave();
	void NoGRICheck();
	void PostBeginPlay();
	void Cleanup();
	void ClientAboutToTravel();
	void GetSeamlessTravelActorList(unsigned long bToEntry, TArray<class AActor*>* ActorList);
	void SeamlessTravelFrom(class APlayerController* OldPC);
	void PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, unsigned long bIsSeamlessTravel);
	void ServerSwappedHeroes();
	void PawnDied(class APawn* inPawn);
	void ClientCheckToApplyLocalLevelUps();
	void ServerClearAutoAimTarget(const struct FVector& LookTarget);
	void ServerSetAutoAimTarget(class AActor* autoAimTarget);
	void ServerRequestManualReplication(class AActor* replicator);
	void ClientProcessReplicateEquipmentData(class AActor* replicator, const struct FEquipmentNetInfo& equipmentInfo, int AdditionalData1, int AdditionalData2, int AdditionalData3);
	void ServerRefreshSetupScreen();
	void UpdateProgressToServer();
	void ServerAddBeaten(const struct FString& Beaten, TEnumAsByte<EGameDifficulty> difficulty, unsigned long bIsHardcoreMode);
	void ServerAddProgress(const struct FString& Progress, TEnumAsByte<EGameDifficulty> difficulty);
	void ServerUnregisterRemoteID();
	void ClientSetUserNickname(const struct FString& NickName);
	void WaitForNickname();
	void ClientSetRemoteID(int remoteID);
	void ServerRegisterRemoteID(const struct FString& NickName);
	unsigned long ServerGetUniqueIDToRegister();
	void ClientRestart(class APawn* NewPawn);
	void AcknowledgePossession(class APawn* P);
	void Possess(class APawn* inPawn, unsigned long bVehicleTransition);
	void EnterStartState();
	void Server_CheckTowerAssociations(class ADunDefPawn* inPawn);
	void AdjustControlSchemeForOptions(struct FOptionsFixedStruct* theOptions);
	int GetPawnDistance();
	void NotifyLeaving();
	void DestroyOwnedTowers();
	void TransferTowersOwnership(class APawn* toPawn);
	void ServerExecuteCommand(const struct FName& Command, class AActor* ActorRef);
	void UpdateStateFromAdjustment(const struct FName& NewState);
	void ClientAddBuffToGame(class ADunDefPlayerReplicationInfo* remotePRI, const struct FsBuffNetInfo& BuffInfo);
	void ClientUpdateRemoteHeroEquipment(class ADunDefPlayerReplicationInfo* remotePRI, unsigned char Index, const struct FEquipmentNetInfo& netInfo);
	void ClientRemoveRemoteHeroEquipment(class ADunDefPlayerReplicationInfo* remotePRI, unsigned char Index);
	void ClientAddRemoteHeroEquipment(class ADunDefPlayerReplicationInfo* remotePRI, const struct FEquipmentNetInfo& netInfo, unsigned char Index);
	void ClientSetRemoteHeroInfo(class ADunDefPlayerReplicationInfo* remotePRI, const struct FHeroNetInfo& netInfo);
	void ActivateHotKey(int hkIndex);
	void HotKeyTen();
	void HotKeyNine();
	void HotKeyEight();
	void HotKeySeven();
	void HotKeySix();
	void HotKeyFive();
	void HotKeyFour();
	void HotKeyThree();
	void HotKeyTwo();
	void HotKeyOne();
	void HotKeyBind();
	void HotKeyOff();
	void CheckAlternateActivation();
	void CheckActivation();
	unsigned long IsActionWheelVisible();
	void ServerCallOutOff();
	void CallOutOff();
	void ServerCallOutOn(const struct FVector& overrideCalloutLoc, unsigned long bUseOverrideLoc);
	void CallOutOn();
	unsigned long UseCalloutOverrideLoc();
	struct FVector GetCalloutOverrideLoc();
	void ToggleActionWheelExec();
	void ZoomCameraOut();
	void ZoomCameraIn();
	void ServerSetPlacementTowerRangeScaler(float RangeScale);
	unsigned long CyclePlacementTowerRadius();
	void IncreasePlacementTowerRadius();
	void DecreasePlacementTowerRadius();
	void ShowMyHeroInfo(unsigned long bForce);
	void CycleZoom();
	void DoJump();
	unsigned long HasMaxMana();
	int RequestAddMana(int AmountToAdd);
	void RequestSpendMana(int AmountToSpend);
	void ServerRequestAddMana(int AmountToAdd);
	void ServerRequestSpendMana(int AmountToSpend);
	void SetInForgeUI(unsigned long inForgeUI);
	void ServerSetInForgeUI(unsigned long inForgeUI);
	void Logout();
	unsigned long Login(int ControllerId, const struct FString& UserName, const struct FString& Password);
	void EndedMovie();
	void Pause(unsigned long bForce);
	class ADunDefPlayer* GetNearestPlayerWithinRange(float Range);
	void ServerDropMana(int howMuch, unsigned long bNotFromPlayer, unsigned long bDontPlayAnimation, class AActor* fromOtherActor, unsigned long bIsPrivate);
	void DropMana(float howMuch);
	unsigned long AddBankMana(float mana, unsigned long bIgnoreBankLimit, unsigned long bAddFromHeroMana);
	void VerifyEquipmentName(int Index);
	void VerifyHeroName();
	void SaveForEveryone();
	void SaveHeroes();
	float TestWaveStatMultiplier(int CurrentTestWaveNumber);
	void StopHovering();
	void StartHovering();
	void JumpReleased();
	void JumpPressed();
	void KeyboardInputDone(unsigned long Success);
	unsigned long ForceTargetingCursor();
	struct FVector GetPlacingTowerCameraOffset();
	class UClass* GetClassFromString(const struct FString& ClassName);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefGameReplicationInfo
// 0x0468 (0x0724 - 0x02BC)
class ADunDefGameReplicationInfo : public ANativeDunDefGameReplicationInfo
{
public:
	unsigned long                                      bVerticalMover_TowerCacheDirty : 1;                       // 0x02BC(0x0004) (Transient)
	unsigned long                                      AllowFriendlyFire : 1;                                    // 0x02BC(0x0004)
	unsigned long                                      bDontHurtRespawningPlayers : 1;                           // 0x02BC(0x0004)
	unsigned long                                      IsInCombatPhase : 1;                                      // 0x02BC(0x0004) (Net)
	unsigned long                                      IsInfiniteWaveMode : 1;                                   // 0x02BC(0x0004) (Net)
	unsigned long                                      bUseBuildTimerOnInsane : 1;                               // 0x02BC(0x0004)
	unsigned long                                      bIsCompetitive : 1;                                       // 0x02BC(0x0004)
	unsigned long                                      bDisableMiniMapEnemyIcons : 1;                            // 0x02BC(0x0004) (Net)
	unsigned long                                      IsMixMode : 1;                                            // 0x02BC(0x0004) (Net)
	unsigned long                                      bOverridePlayerAbilityStatus : 1;                         // 0x02BC(0x0004)
	unsigned long                                      bRespawnInHardcoreMode : 1;                               // 0x02BC(0x0004)
	unsigned long                                      bPrintGlobalDeathMessages : 1;                            // 0x02BC(0x0004)
	unsigned long                                      bPreventDetonatingEnemyTraps : 1;                         // 0x02BC(0x0004)
	unsigned long                                      bNextLevelIsRestartLevel : 1;                             // 0x02BC(0x0004)
	unsigned long                                      bGiveAwardScores : 1;                                     // 0x02BC(0x0004)
	unsigned long                                      bDoLevelVictory : 1;                                      // 0x02BC(0x0004) (Net)
	unsigned long                                      UseBuildTimer : 1;                                        // 0x02BC(0x0004) (Net)
	unsigned long                                      bDisableEnemyInvincibility : 1;                           // 0x02BC(0x0004)
	unsigned long                                      bAllowRespawns : 1;                                       // 0x02BC(0x0004) (Net)
	unsigned long                                      bValidForRTSAward : 1;                                    // 0x02BC(0x0004)
	unsigned long                                      bDisablePhaseShift : 1;                                   // 0x02BC(0x0004) (Net)
	unsigned long                                      bIsTBR : 1;                                               // 0x02BC(0x0004)
	unsigned long                                      bCheckForTokensAtMaxMana : 1;                             // 0x02BC(0x0004) (Net)
	unsigned long                                      bAllowFreeLookSpectator : 1;                              // 0x02BC(0x0004)
	unsigned long                                      bSetTowerUnitCosts : 1;                                   // 0x02BC(0x0004)
	unsigned long                                      bAllowClientsToProceedToNextLevel : 1;                    // 0x02BC(0x0004)
	unsigned long                                      bLimitTowerProjectileDistances : 1;                       // 0x02BC(0x0004) (Net)
	unsigned long                                      bLimitProjectileDistancesUsePlayerRangeMultiplier : 1;    // 0x02BC(0x0004) (Net)
	unsigned long                                      bUseCompetitivePlayerMiniMapIcons : 1;                    // 0x02BC(0x0004)
	unsigned long                                      bHideForgeMiniMapInCombatPhase : 1;                       // 0x02BC(0x0004)
	unsigned long                                      bTriggerPRIEvents : 1;                                    // 0x02BC(0x0004)
	unsigned long                                      bForceSpeedyBuild : 1;                                    // 0x02BC(0x0004) (Net)
	unsigned long                                      bUseCompetitiveTargets : 1;                               // 0x02C0(0x0004) (Net)
	unsigned long                                      bDisableFamiliarAbilities : 1;                            // 0x02C0(0x0004) (Net)
	unsigned long                                      bIsAFKShopMode : 1;                                       // 0x02C0(0x0004) (Net)
	unsigned long                                      bNonAFKShopExpired : 1;                                   // 0x02C0(0x0004) (Net)
	unsigned long                                      bAllowPlayerSpawns : 1;                                   // 0x02C0(0x0004) (Net)
	unsigned long                                      bPreventTowersFromTargetingPlayers : 1;                   // 0x02C0(0x0004)
	unsigned long                                      bIsGameOver : 1;                                          // 0x02C0(0x0004) (Net)
	unsigned long                                      bDisableTowerPlacementAndRepair : 1;                      // 0x02C0(0x0004) (Net)
	unsigned long                                      bDisableWeaponry : 1;                                     // 0x02C0(0x0004) (Net)
	unsigned long                                      EnemyWaveEntriesSetupInProgress : 1;                      // 0x02C0(0x0004) (Transient)
	unsigned long                                      bNoElementalEnemies : 1;                                  // 0x02C0(0x0004)
	unsigned long                                      bDisableInvisibility : 1;                                 // 0x02C0(0x0004) (Net)
	unsigned long                                      bDisableInvincibilityAbilities : 1;                       // 0x02C0(0x0004)
	unsigned long                                      bDisableManaBombForAssault : 1;                           // 0x02C0(0x0004)
	unsigned long                                      bDisableWheelOfFortuna : 1;                               // 0x02C0(0x0004)
	unsigned long                                      bDisableProtonBlast : 1;                                  // 0x02C0(0x0004)
	unsigned long                                      bDisableOvercharge : 1;                                   // 0x02C0(0x0004)
	unsigned long                                      bDisableHeroBoost : 1;                                    // 0x02C0(0x0004)
	unsigned long                                      bDisableTowerBoost : 1;                                   // 0x02C0(0x0004)
	unsigned long                                      bDisableBloodRage : 1;                                    // 0x02C0(0x0004)
	unsigned long                                      bDisablePiercingShot : 1;                                 // 0x02C0(0x0004)
	unsigned long                                      bDisableCircularSlice : 1;                                // 0x02C0(0x0004)
	unsigned long                                      bDisableFairy : 1;                                        // 0x02C0(0x0004)
	unsigned long                                      bDisableRemoteBoost : 1;                                  // 0x02C0(0x0004)
	unsigned long                                      bDisableEnemyDrain : 1;                                   // 0x02C0(0x0004)
	unsigned long                                      bDisableInstantUpgrade : 1;                               // 0x02C0(0x0004)
	unsigned long                                      bDisableMoveTower : 1;                                    // 0x02C0(0x0004)
	unsigned long                                      bDisableSlamDash : 1;                                     // 0x02C0(0x0004)
	unsigned long                                      bDisableSiphonStance : 1;                                 // 0x02C0(0x0004)
	unsigned long                                      bDisableHawkStance : 1;                                   // 0x02C0(0x0004)
	unsigned long                                      bDisableLightningStance : 1;                              // 0x02C0(0x0004)
	unsigned long                                      bUseDamageMult : 1;                                       // 0x02C0(0x0004)
	unsigned long                                      bDisablePetHealing : 1;                                   // 0x02C4(0x0004)
	unsigned long                                      bLimitPetHealing : 1;                                     // 0x02C4(0x0004)
	unsigned long                                      bDisableArmorBuffs : 1;                                   // 0x02C4(0x0004)
	unsigned long                                      bLimitProjectilesDistance : 1;                            // 0x02C4(0x0004) (Net)
	unsigned long                                      bDisableEnemyInitialInvincibility : 1;                    // 0x02C4(0x0004)
	unsigned long                                      stoppedCollectingStats : 1;                               // 0x02C4(0x0004)
	unsigned long                                      PrevInCombatPhase : 1;                                    // 0x02C4(0x0004)
	unsigned long                                      bForceDrawEnemyTowerMiniMapIcons : 1;                     // 0x02C4(0x0004)
	unsigned long                                      bIsPureStrategy : 1;                                      // 0x02C4(0x0004) (Net)
	unsigned long                                      bisMayHem : 1;                                            // 0x02C4(0x0004) (Net)
	unsigned long                                      bUseMapInfoObjectiveText : 1;                             // 0x02C4(0x0004)
	unsigned long                                      bFinishedWaveScaling : 1;                                 // 0x02C4(0x0004)
	unsigned long                                      IsLobbyLevel : 1;                                         // 0x02C4(0x0004)
	unsigned long                                      IsGameplayLevel : 1;                                      // 0x02C4(0x0004)
	unsigned long                                      SendingStats : 1;                                         // 0x02C4(0x0004)
	unsigned long                                      bWantToSave : 1;                                          // 0x02C4(0x0004)
	unsigned long                                      bWasDestroyed : 1;                                        // 0x02C4(0x0004)
	unsigned long                                      bForceBuildTimer : 1;                                     // 0x02C4(0x0004) (Net)
	unsigned long                                      bForceOldDamageAllBehaviorOnRuthless : 1;                 // 0x02C4(0x0004) (Net)
	unsigned long                                      bDisableTowerAbilities : 1;                               // 0x02C4(0x0004) (Net)
	unsigned long                                      bAllowSpawnInCombatPhase : 1;                             // 0x02C4(0x0004) (Net)
	unsigned long                                      bLevelStartedWithBuildTimer : 1;                          // 0x02C4(0x0004) (Net)
	unsigned long                                      bForceAllowEnemyInvincibility : 1;                        // 0x02C4(0x0004) (Net)
	unsigned long                                      bIsGameActive : 1;                                        // 0x02C4(0x0004) (Net)
	unsigned long                                      bPreventRemoteActivateCrystal : 1;                        // 0x02C4(0x0004) (Net)
	unsigned long                                      bAllowNonOwnerItemPickups : 1;                            // 0x02C4(0x0004) (Net)
	unsigned long                                      bSimulateNightmareMode : 1;                               // 0x02C4(0x0004) (Net, Transient)
	unsigned long                                      bSimulateRuthlessMode : 1;                                // 0x02C4(0x0004) (Net, Transient)
	unsigned long                                      bIsHardcoreMode : 1;                                      // 0x02C4(0x0004) (Net, Transient)
	unsigned long                                      bIsRuthlessMode : 1;                                      // 0x02C4(0x0004) (Net, Transient)
	unsigned long                                      bSpawnAcceleration : 1;                                   // 0x02C4(0x0004) (Net, Transient)
	unsigned long                                      UseTBRTimer : 1;                                          // 0x02C4(0x0004)
	unsigned long                                      bIsSpecialMission : 1;                                    // 0x02C8(0x0004) (Net, Transient)
	unsigned long                                      bIsRestrictedDifficultyMission : 1;                       // 0x02C8(0x0004) (Net, Transient)
	unsigned long                                      bDropEquipmentUponPlayerDeath : 1;                        // 0x02C8(0x0004) (Net)
	unsigned long                                      LockTavernItemDrops : 1;                                  // 0x02C8(0x0004) (Net)
	unsigned long                                      LockTavernDefenses : 1;                                   // 0x02C8(0x0004) (Net)
	unsigned long                                      bForceHostSkip : 1;                                       // 0x02C8(0x0004)
	TArray<struct FString>                             ScoreAwardPreStrings;                                     // 0x02CC(0x000C) (Localized, NeedCtorLink)
	TArray<struct FString>                             ScoreAwardPostStrings;                                    // 0x02D8(0x000C) (Localized, NeedCtorLink)
	TArray<float>                                      ScoreAwardSpeed;                                          // 0x02E4(0x000C) (NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentRandomizerAdditions;                   // 0x02F0(0x000C) (NeedCtorLink)
	TArray<float>                                      MapAdditiveDroppedEquipmentQualityDifficultyMultipliers;  // 0x02FC(0x000C) (NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentRandomizerMultipliers;                 // 0x0308(0x000C) (NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentRandomizerNegativeWaveWeighting;       // 0x0314(0x000C) (NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentRandomizerAbsoluteMultiplier;          // 0x0320(0x000C) (NeedCtorLink)
	struct FWaveBonusChecks                            CurrentWaveBonusChecks;                                   // 0x032C(0x0028) (NeedCtorLink)
	TArray<struct FString>                             MajorNotificationLabels;                                  // 0x0354(0x000C) (Localized, NeedCtorLink)
	TArray<struct FString>                             GameOverDescriptionReasons;                               // 0x0360(0x000C) (Localized, NeedCtorLink)
	TArray<struct FLinearColor>                        GameOverDescriptionColors;                                // 0x036C(0x000C) (NeedCtorLink)
	struct FString                                     SpectatorWaitString;                                      // 0x0378(0x000C) (Localized, NeedCtorLink)
	class UUI_PauseMenu*                               PauseMenuUITemplate;                                      // 0x0384(0x0004)
	class UUI_PauseMenu*                               PauseMenuUITemplateLobby16Player;                         // 0x0388(0x0004)
	int                                                waveNumber;                                               // 0x038C(0x0004) (Net)
	int                                                FinalWaveNumber;                                          // 0x0390(0x0004) (Net)
	int                                                CurrentTowerUnits;                                        // 0x0394(0x0004) (Net)
	int                                                MaxTowerUnits;                                            // 0x0398(0x0004) (Net)
	int                                                CurrentAltTowerUnits;                                     // 0x039C(0x0004) (Net)
	TEnumAsByte<EGameDifficulty>                       CurrentGameDifficulty;                                    // 0x03A0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	class ADunDefMiniMap*                              CurrentMiniMap;                                           // 0x03A4(0x0004)
	float                                              ForceMaxBuildTime;                                        // 0x03A8(0x0004)
	float                                              LevelVictoryMusicDelay;                                   // 0x03AC(0x0004)
	float                                              CompetitiveFloatingNameDistanceMultiplier;                // 0x03B0(0x0004)
	float                                              WeaponProjectileSpeedBonusMultiplier;                     // 0x03B4(0x0004)
	float                                              GlobalTowerUnitLimitMultiplier;                           // 0x03B8(0x0004)
	float                                              NightmareModeCrystalCoreHealthMultiplier;                 // 0x03BC(0x0004)
	float                                              NightmareModePhysicalTowerHealthMultiplier;               // 0x03C0(0x0004)
	float                                              NightmareModePlayerHealthMultiplier;                      // 0x03C4(0x0004)
	float                                              NightmareModePhysicalTowerDamageMultiplier;               // 0x03C8(0x0004)
	float                                              NightmarePlayerDamageResistanceMultiplier;                // 0x03CC(0x0004)
	float                                              NightmareModePlayerReceiveDamageMultiplier;               // 0x03D0(0x0004)
	float                                              NightmareModeHeroDamageMultiplier;                        // 0x03D4(0x0004)
	float                                              NightmareModeEnemySpeedMultiplier;                        // 0x03D8(0x0004)
	float                                              NightmareModeEnemyDamageMultiplier;                       // 0x03DC(0x0004)
	float                                              NightmareModeEnemyHealthMultiplier;                       // 0x03E0(0x0004)
	float                                              NightmareModeStrengthDrainDamageLerp;                     // 0x03E4(0x0004)
	float                                              NightmareModeAuraRangeMultiplier;                         // 0x03E8(0x0004)
	float                                              NightmareModeTrapRangeMultiplier;                         // 0x03EC(0x0004)
	float                                              NightmareModePlayerHealCostMultiplier;                    // 0x03F0(0x0004)
	float                                              NightmareModeWeaponProjectileSpeedBonusMultiplier;        // 0x03F4(0x0004)
	int                                                NumberOfEmitterSpawnable;                                 // 0x03F8(0x0004) (Transient)
	int                                                WavesPlayed;                                              // 0x03FC(0x0004) (Transient)
	float                                              PlayerHealthMultiplier;                                   // 0x0400(0x0004)
	float                                              EnemyLifeSpanMultiplier;                                  // 0x0404(0x0004)
	float                                              PlayerHealCostMultiplier;                                 // 0x0408(0x0004)
	int                                                MaxNumberOfEmitterSpawnable;                              // 0x040C(0x0004)
	float                                              EnemyNetUpdateFrequencyMultiplier;                        // 0x0410(0x0004)
	float                                              NightmareMinimumEquipmentDropQualityMultiplier;           // 0x0414(0x0004)
	float                                              DeathSpectatorActivateInterval;                           // 0x0418(0x0004)
	float                                              PlayerKnockbackMomentumMultiplier;                        // 0x041C(0x0004)
	float                                              NightmareRespawnTimeMultiplier;                           // 0x0420(0x0004)
	float                                              RespawnTimeMultiplier;                                    // 0x0424(0x0004) (Net)
	float                                              GlobalTrapDetonationResetTimeMultiplier;                  // 0x0428(0x0004)
	float                                              PlayerElementalWeaponDamageMultiplier;                    // 0x042C(0x0004)
	float                                              PlayerSpawnImmunityTime;                                  // 0x0430(0x0004)
	float                                              GlobalAuraRangeMultiplier;                                // 0x0434(0x0004)
	float                                              GlobalTrapRangeMultiplier;                                // 0x0438(0x0004)
	float                                              HardcoreScoreBonusMultiplier;                             // 0x043C(0x0004)
	float                                              NonAFKShopExpireTime;                                     // 0x0440(0x0004)
	float                                              LobbyForceAFKShopTime;                                    // 0x0444(0x0004)
	struct FColor                                      DamageTextNormalShadowColor;                              // 0x0448(0x0004)
	struct FColor                                      DamageTextEnemyShadowColor;                               // 0x044C(0x0004)
	class USeqVar_Float*                               SurvivalEnemyNumbers;                                     // 0x0450(0x0004)
	class USeqVar_Float*                               SurvivalEnemyNumbersIncreasePerWaveVar;                   // 0x0454(0x0004)
	class USeqVar_Float*                               SurvivalEnemyGroupsIncreasePerWaveVar;                    // 0x0458(0x0004)
	class USeqVar_Float*                               SurvivalEnemyGroupsVar;                                   // 0x045C(0x0004)
	class USoundCue*                                   InvincibleHitSound;                                       // 0x0460(0x0004)
	float                                              LastWaveSetupTime;                                        // 0x0464(0x0004) (Transient)
	struct FString                                     CampaignEntryTag;                                         // 0x0468(0x000C) (Net, NeedCtorLink)
	int                                                CoreHealWaveInterval;                                     // 0x0474(0x0004)
	int                                                IntervalForInfiniteWaveShopRoll;                          // 0x0478(0x0004)
	float                                              PlayerRespawnTime;                                        // 0x047C(0x0004) (Net)
	float                                              LimitProjectilesDistanceAmount;                           // 0x0480(0x0004) (Net)
	float                                              MaxEnemySpeedMultiplier;                                  // 0x0484(0x0004)
	float                                              LimitPetHealingAmount;                                    // 0x0488(0x0004)
	TArray<float>                                      PlayerRespawnTimes;                                       // 0x048C(0x000C) (NeedCtorLink)
	float                                              BuildPhaseRespawnTime;                                    // 0x0498(0x0004) (Net)
	float                                              JumpZMultiplier;                                          // 0x049C(0x0004) (Net)
	float                                              PostVictorySellTowerDelay;                                // 0x04A0(0x0004)
	float                                              MaxFloatingDamageViewRange;                               // 0x04A4(0x0004)
	float                                              GlobalPhysicalTowerDamageMultiplier;                      // 0x04A8(0x0004)
	TArray<float>                                      MaxFloatingDamageViewRanges;                              // 0x04AC(0x000C) (NeedCtorLink)
	float                                              PlayerDamageResistanceMultiplier;                         // 0x04B8(0x0004) (Net)
	struct FString                                     PureStrategyModeString;                                   // 0x04BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     SurvivalModeString;                                       // 0x04C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MixModeString;                                            // 0x04D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     AFKShopPreDescription;                                    // 0x04E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MissionObjectiveText;                                     // 0x04EC(0x000C) (NeedCtorLink)
	struct FString                                     LobbyLevelNameDescription;                                // 0x04F8(0x000C) (Net, NeedCtorLink)
	struct FString                                     MissionObjectiveTextSeqVarPath;                           // 0x0504(0x000C) (Net, NeedCtorLink)
	struct FLinearColor                                MissionObjectiveColor;                                    // 0x0510(0x0010) (Net)
	struct FLinearColor                                SpecialMissionObjectiveColor;                             // 0x0520(0x0010)
	int                                                OriginalFinalWaveNumber;                                  // 0x0530(0x0004) (Transient)
	float                                              SurvivalEnemyNumbersOriginalValue;                        // 0x0534(0x0004) (Transient)
	float                                              SurvivalEnemyNumbersIncreasePerWaveOriginalValue;         // 0x0538(0x0004) (Transient)
	float                                              SurvivalEnemyGroupsOriginalValue;                         // 0x053C(0x0004) (Transient)
	float                                              SurvivalEnemyGroupsIncreasePerWaveOriginalValue;          // 0x0540(0x0004) (Transient)
	float                                              DifficultyWaveScoreMultipliers[0x5];                      // 0x0544(0x0004)
	float                                              DifficultyTimeBonusScoreMultipliers[0x5];                 // 0x0558(0x0004)
	struct FString                                     statsWaitTitle;                                           // 0x056C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     statsWaitText;                                            // 0x0578(0x000C) (Localized, NeedCtorLink)
	float                                              GamePlayerDamageMultiplier;                               // 0x0584(0x0004) (Net)
	class UUI_GameStats*                               GameStatsUITemplate;                                      // 0x0588(0x0004)
	class USoundCue*                                   LevelVictoryMusic;                                        // 0x058C(0x0004)
	float                                              GameStatsDelay;                                           // 0x0590(0x0004)
	float                                              statReceiveProgress;                                      // 0x0594(0x0004)
	int                                                TheStartWave;                                             // 0x0598(0x0004) (Net)
	int                                                PhaseCycleID;                                             // 0x059C(0x0004) (Net)
	int                                                GameplayInstanceID;                                       // 0x05A0(0x0004) (Net)
	int                                                missionSwitch;                                            // 0x05A4(0x0004) (Net)
	int                                                SurvivalMaximumWaveGroups;                                // 0x05A8(0x0004)
	int                                                GRIHostRandomID;                                          // 0x05AC(0x0004)
	float                                              LastCombatBeginTime;                                      // 0x05B0(0x0004) (Transient)
	float                                              totalCombatTime;                                          // 0x05B4(0x0004) (Transient)
	float                                              TotalBuildTime;                                           // 0x05B8(0x0004) (Transient)
	int                                                NumActivePlayersForLatestWave;                            // 0x05BC(0x0004) (Transient)
	float                                              LastItemDropQuality;                                      // 0x05C0(0x0004) (Net, Transient)
	float                                              LastItemDropExtraRarity;                                  // 0x05C4(0x0004) (Net, Transient)
	float                                              LastPlayerJoinedTime;                                     // 0x05C8(0x0004) (Transient)
	TArray<class ADunDefTower*>                        TowerUpdate;                                              // 0x05CC(0x000C) (Transient, NeedCtorLink)
	int                                                TowerIterator;                                            // 0x05D8(0x0004) (Transient)
	int                                                TowerUpdatesPerFrame;                                     // 0x05DC(0x0004) (Transient)
	int                                                PrevNumActivePlayers;                                     // 0x05E0(0x0004) (Transient)
	int                                                MaxRestrictedMissionDifficulty;                           // 0x05E4(0x0004) (Transient)
	int                                                MaxRestrictedMissionDifficultyHardcore;                   // 0x05E8(0x0004) (Transient)
	class UDunDefUIScene*                              GlobalHUDUITemplate;                                      // 0x05EC(0x0004)
	class UTexture2D*                                  HardcoreModeMissionNameIcon;                              // 0x05F0(0x0004)
	struct FExpensiveFunctionRegister                  ExpensiveFunctions[0x5];                                  // 0x05F4(0x0010) (Transient, NeedCtorLink)
	TArray<struct FHeroAwardStatInfo>                  heroStatAwards;                                           // 0x0644(0x000C) (NeedCtorLink)
	class UDunDefGameStats*                            statsSystem;                                              // 0x0650(0x0004)
	TArray<struct FplayerStatsEntry>                   playerStats;                                              // 0x0654(0x000C) (NeedCtorLink)
	TArray<struct FdamageTypeCount>                    gunSlingerCount;                                          // 0x0660(0x000C) (NeedCtorLink)
	TArray<struct FdamageTypeCount>                    strategistCount;                                          // 0x066C(0x000C) (NeedCtorLink)
	TArray<struct FStatSendingQueueEntry>              statSendQueue;                                            // 0x0678(0x000C) (NeedCtorLink)
	float                                              GlobalAuraHealthMultiplier;                               // 0x0684(0x0004)
	float                                              GlobalAuraDamageMultiplier;                               // 0x0688(0x0004)
	float                                              GlobalAuraStrengthDrainMultiplier;                        // 0x068C(0x0004)
	float                                              GlobalTrapHealthMultiplier;                               // 0x0690(0x0004)
	float                                              GlobalTrapDamageMultiplier;                               // 0x0694(0x0004)
	float                                              NightmareModeAuraHealthMultiplier;                        // 0x0698(0x0004)
	float                                              NightmareModeAuraDamageMultiplier;                        // 0x069C(0x0004)
	float                                              NightmareModeStrengthDrainMultiplier;                     // 0x06A0(0x0004)
	float                                              NightmareModeTrapHealthMultiplier;                        // 0x06A4(0x0004)
	float                                              NightmareModeTrapDamageMultiplier;                        // 0x06A8(0x0004)
	float                                              MaxOverlordHeight;                                        // 0x06AC(0x0004)
	float                                              MinOverlordHeight;                                        // 0x06B0(0x0004)
	struct FVector2D                                   MaxOverlordXYBounds;                                      // 0x06B4(0x0008)
	struct FVector2D                                   MinOverlodYXBounds;                                       // 0x06BC(0x0008)
	struct FHighDigitInt                               totalWaveItemRating;                                      // 0x06C4(0x0010)
	struct FHighDigitInt                               totalWaveArmourRating;                                    // 0x06D4(0x0010)
	int                                                totalWaveItems;                                           // 0x06E4(0x0004)
	int                                                totalWaveArmours;                                         // 0x06E8(0x0004)
	int                                                totalItemNumUps;                                          // 0x06EC(0x0004)
	int                                                totalArmourNumUps;                                        // 0x06F0(0x0004)
	TArray<int>                                        DroppedEquipmentQualityCount;                             // 0x06F4(0x000C) (Transient, NeedCtorLink)
	int                                                Myth;                                                     // 0x0700(0x0004)
	int                                                Trans;                                                    // 0x0704(0x0004)
	int                                                Sup;                                                      // 0x0708(0x0004)
	int                                                Ult;                                                      // 0x070C(0x0004)
	int                                                Ultninetythree;                                           // 0x0710(0x0004)
	int                                                Ultplus;                                                  // 0x0714(0x0004)
	int                                                Ultplusplus;                                              // 0x0718(0x0004)
	int                                                TotalNumber;                                              // 0x071C(0x0004)
	class ADunDefBuffManager*                          BuffManager;                                              // 0x0720(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameReplicationInfo");
		return ptr;
	}


	void RemoveBuffFromGame(class UDunDefBuff* Buff);
	void AddBuffToGame(class UDunDefBuff* Buff);
	int GetMaxPlayers();
	unsigned long IsAtLobbyLevel();
	int GetFinalWaveNumber();
	int GetWaveNumber();
	unsigned long IsInRuthlessMode();
	unsigned long IsInHardCoreMode();
	void AnalyticsReport(unsigned long waveVictory);
	void EnemyDied(class ADunDefEnemy* anEnemy, class AActor* lastDamageCauser);
	void GetOverLordXYBounds(struct FVector2D* MaxXYBounds, struct FVector2D* MinXYBounds);
	void GetMaxMinOverlordHeight(float* theMaxValue, float* theMinValue);
	void ForceAFKShop();
	void SetAFKShopMode(unsigned long bDoAFKShopMode);
	unsigned long AllowActivatingCrystal();
	unsigned long AllowPlayerSpawn(class ADunDefPlayerController* PC);
	void DrawExtraEnemyMinimapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap, class ADunDefEnemy* Enemy);
	float GetWeaponProjectileSpeedBonusMultiplier(class ADunDefWeapon* aWeapon);
	float GetTrapRangeMultiplier(class ADunDefTower_DetonationType* aTrap);
	float GetAuraRangeMultiplier(class ADunDefTower_Aura* anAura);
	float GetEnemyLifeSpanMultiplier(class ADunDefEnemy* anEnemy);
	float GetPlayerHealCostMultiplier(class ADunDefPlayer* aPlayer);
	float GetPlayerHealthMultiplier(class ADunDefPlayer* aPlayer);
	float GetMinimumEqulityDropQualityMultiplier();
	float GetTowerHealthMultiplier(class ADunDefTower* aTower);
	float GetTrapDamageMultiplier(class ADunDefTower_DetonationType* aTrap);
	float GetTrapHealthMultiplier(class ADunDefTower_DetonationType* aTrap);
	float GetStrengthDrainAuraMultiplier(class ADunDefTower_AuraStrengthDrain* anAura);
	float GetAuraDamageMultiplier(class ADunDefTower_Aura* anAura);
	float GetAuraHealthMultiplier(class ADunDefTower_Aura* anAura);
	float GetGlobalPhysicalTowerDamageMultiplier(class ADunDefTower* aTower);
	float GetPlayerDamageResistanceMultiplier();
	float GetEnemySpeedMultiplier(class ADunDefEnemy* anEnemy);
	float GetEnemyHealthMultiplier(class ADunDefEnemy* anEnemy);
	float GetEnemyDamageMultiplier(class ADunDefEnemy* anEnemy);
	float GetPlayerDamageMultiplier(class ADunDefPlayer* aPlayer);
	float GetJumpZMultiplier(class ADunDefPawn* aPawn);
	void ModifyCustomColors(class ADunDefPlayerController* aController, class ADunDefPlayer* aPlayer);
	void ExtraDrawHUDInterface(class ADunDefHUD* H, const TScriptInterface<class UDunDefHUDInterface>& hudint);
	void CustomUpdatePlayerScoreLabel(class ULocalPlayer* ForPlayer, class UUILabel_ScoreIndicator* ScoreLabel);
	float ModifyPlayerAirSpeed(class ADunDefPlayer* aPlayer, float theAirSpeed);
	float ModifyPlayerGroundSpeed(class ADunDefPlayer* aPlayer, float theGroundSpeed);
	struct FColor GetGameOverLabelColor();
	struct FColor GetVictoryLabelColor();
	struct FString GetGameOverLabelString(class APlayerReplicationInfo* myPlayer);
	struct FString GetVictoryLabelString(class APlayerReplicationInfo* myPlayer);
	unsigned long OverrideEndGameLabel();
	void DrawnMiniMap(class ADunDefMiniMap* aMiniMap, class UCanvas* Canvas);
	void GetTeamIcon(int TeamIndex, class USurface** theTeamIcon, struct FColor* theTeamColor);
	unsigned long IsTeamCompetitive();
	unsigned long AllowChatBetween(class APlayerReplicationInfo* myPlayer, class APlayerReplicationInfo* TheirPlayer);
	void DrawExtraPlayerFloatingHUD(class ADunDefPlayer* aPlayer, class ADunDefHUD* H);
	unsigned long AllowedToTeleport(class APawn* Teleportee);
	float GetExtraKnockbackMultiplier(class AActor* act);
	unsigned long DoDropEquipmentUponPlayerDeath();
	unsigned long DoUseScoreLabel();
	unsigned long STATIC_UseScoreLabel();
	float GetCastRateMultiplier(class ADunDefPlayerAbility* ability);
	TEnumAsByte<EPlayerAbilityStatus> GetPlayerAbilityStatusOverride(class ADunDefPlayerAbility* ability);
	unsigned long UsePlayerAbilityStatusOverride(class ADunDefPlayerAbility* ability);
	void AddGRIActionWheelEntries(class UActionWheel* aWheel, TArray<class UActionWheelEntry*>* TempWheelEntries);
	void Server_AddGRIHeroAbilities(class ADunDefPlayerController* PC);
	float GetProjectileLimitDistance(class AActor* anInstigator, float originalLimit);
	unsigned long STATIC_IsDisplayingLoadingScreen();
	class ADunDefPlayerReplicationInfo* GetWinningPRI();
	unsigned long AllowDeathSpectatorMode(class ADunDefPlayerController* PC);
	unsigned long STATIC_CanDropBankedMana();
	unsigned long AllowPlayerDamage(class ADunDefPlayer* aPlayer);
	unsigned long STATIC_StaticIsCompetitive();
	unsigned long IsCompetitive();
	unsigned long DestroyTowerOnOwnerLeft(class ADunDefTower* aTower);
	unsigned long AllowEquipmentDrops(class ADunDefPlayerController* PC);
	unsigned long STATIC_IsNonLobbyBuildPhase();
	unsigned long STATIC_IsGameplayFinished();
	unsigned long IsTheGameplayFinished();
	unsigned long AtCapacity();
	unsigned long AllowSplitscreenJoin();
	unsigned long IsInCinematic();
	struct FString GetLevelFriendlyName();
	struct FString GetLevelFriendlyNameWithoutFormatting();
	unsigned long CheckDLCCompatibility(const struct FCampaignLevelEntry& forLevel, TArray<class APlayerReplicationInfo*>* playersWithoutLevel);
	unsigned long AreDLCMasksUpToDate();
	void ResetForNewMap(unsigned long bForceDestroyGRI, unsigned long bIsLoadingLevel);
	unsigned long CanBankManaOnExit();
	unsigned long STATIC_IsInGameplayLevel();
	unsigned long STATIC_IsInLobbyLevel();
	void QueueStatsSending(class ADunDefPlayerController* PC, int statPlayerIndex);
	float STATIC_GetRuthlessScoreMultiplier();
	float STATIC_GetScoreMultiplier();
	struct FString GetGameOverString(int GameOverType, int gameOverNumberAppend);
	void SetStatReceiveProgress(float newPercent);
	struct FString GetScoreAwardMultiplierString(unsigned char scoreAwardType, float firstNumParam, float secondNumParam, class AActor* ActorArchetype, int Count);
	struct FString GetScoreAwardString(unsigned char scoreAwardType, float firstNumParam, float secondNumParam, class AActor* ActorArchetype);
	float GetScoreAwardSpeed(unsigned char scoreAwardType);
	void AwardWaveCompletion(int theWaveNumber);
	float GetTimeBonusSecondsInterval();
	void AddStrategistCount(int statPlayerIndex);
	void AddGunslingerCount(int statPlayerIndex);
	void UsedTowerToHurt(class ADunDefPlayerController* PC);
	void UsedWeaponToHurt(class ADunDefPlayerController* PC);
	void PlayerTookDamage(class ADunDefPlayerController* PC);
	void ResetWaveBonusChecks();
	void ViewportTick(float DeltaTime);
	void PlayerStoppedTalking(const struct FUniqueNetId& PlayerNetId);
	void PlayerStartedTalking(const struct FUniqueNetId& PlayerNetId);
	void VoiceDeviceAdded();
	unsigned long AllowLevelUps();
	unsigned long DontUseMana();
	struct FString GetHostsName();
	struct FString GetSpectatorWaitString();
	unsigned long STATIC_IsLevelVictory();
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
	void STATIC_ActivateCustomEvent(const struct FName& EventName, int CustomEventID, class AActor* EventOriginator, class AActor* EventInstigator, class AActor* EventActor, TArray<int>* ActivateIndices);
	void SetMissionObjective(class UDunDef_SeqVar_LocalizedString* missionObjectiveStringVar);
	float GetPlayerRespawnTime(class ADunDefPlayerController* PC);
	unsigned long DoUseFamiliarAbilities(class UHeroEquipment_Familiar* aFamiliar);
	unsigned long WeaponsEnabled();
	void SetDisableWeaponry(unsigned long val);
	void SetDisableTowerPlacementAndRepair(unsigned long val);
	unsigned long STATIC_DidAnyoneLocalPossessPawns();
	class UUI_GameStats* GetStatsScene();
	void ShowStatsScene();
	void DoGameOver();
	class ADunDefCustomNode* STATIC_FindCustomNodeWithinRange(int CustomData, const struct FVector& aLocation, float Range, unsigned long Randomize);
	class ADunDefCustomNode* STATIC_FindCustomNode(int CustomData, unsigned long Randomize);
	class ADunDefGameReplicationInfo* STATIC_GetGRI();
	void HealAllPlayers();
	void SellAllTowers();
	void RefreshLeaderboardSign();
	void UpdateTowerIter();
	unsigned long CanTowerUpdate(class ADunDefTower* InTower);
	void RemoveTowerForCanUpdate(class ADunDefTower* InTower);
	void AddTowerForCanUpdate(class ADunDefTower* InTower);
	void UpdateFunctionExpense(int FunctionType);
	unsigned long RequestExpensiveFunction(class UObject* InActor, int FunctionType);
	void SetLastItemDropValues(float theLastDropQuality, float theLastExtraRarity);
	void SetupLeaderBoardTimer();
	void SetupVictoryShopEquipments();
	void DoLevelVictory();
	void PlayLevelVictoryMusic();
	int GetNumAlivePlayers();
	unsigned long STATIC_StaticCanEnterSpectatorMode(class ADunDefPlayerController* thePlayerController);
	unsigned long CanEnterSpectatorMode(class ADunDefPlayerController* thePlayerController);
	unsigned long STATIC_StaticCanRespawnPlayer(class ADunDefPlayerController* thePlayerController);
	unsigned long STATIC_GetIsInCombatPhase();
	unsigned long CanRespawnPlayer(class ADunDefPlayerController* thePlayerController);
	unsigned long DoUseBuildTimer();
	void RefreshBuildSkips();
	int GetNumPlayersWantingToSkipBuildPhase(int* NumPlayersWantingToSkip, int* NumberOfPlayers);
	int GetGameDifficultyAsInt(unsigned long bClampToInsane);
	unsigned long ShouldDisableInput(class APlayerController* PC, unsigned long bCountAnyLockingUIOwner);
	void CheckBadCollisions(class AStaticMeshActorBase* A);
	void CheckStaticMeshesForBadCollision();
	void SendStats();
	void StopCollectingStats();
	void ReportAwards();
	unsigned long ShouldShowAwards();
	void CalculateAwards();
	void PruneFirstWaveAwards(TEnumAsByte<EHeroAwardEnum> theAward, int StartWave);
	int CountAwards(int heroIndex, TEnumAsByte<EHeroAwardEnum> award);
	void CheckAwards();
	void AddPlayerAwardStats(int statPlayerIndex);
	unsigned long ReadToShowStats();
	unsigned long ReadyToSendStats();
	void SendAllPlayerStats();
	void CreateLobbyEquipment();
	void PostBeginPlay();
	void ShopExpire();
	void Destroyed();
	void DoTravelVisuals(unsigned long GameplayLevel);
	unsigned long CanPlaceTowerUnitCost(int Cost, class ADunDefPlayerController* ForPlayer, class ADunDefTower* Tower);
	void RemovedTower(class ADunDefTower* Tower);
	int GetMaxTowerUnits(class ADunDefPlayerReplicationInfo* ddPRI);
	int GetAltCurrentTowerUnits(class ADunDefPlayerReplicationInfo* ddPRI);
	int GetCurrentTowerUnits(class ADunDefPlayerReplicationInfo* ddPRI);
	void AddedTower(class ADunDefTower* Tower);
	void LoadMission(class UCampaignLevelEntryObject* missionObject);
	void LoadLevel(const struct FString& LevelName, unsigned long GameplayLevel, unsigned long IsMissionLoad);
	void UpdateRichPresence(int presenceId, int missionId);
	void ClearTalkingDelegates();
	void ClientEndGame();
	class UDunDefViewportClient* GetViewportClient();
	void Pause(class ULocalPlayer* ownedByLocalPlayer, unsigned long bForce);
	void MulticastFunctionActorParam(class AActor* act, const struct FName& FunctionName, class AActor* actorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit);
	void MulticastFunctionNameParam(class AActor* act, const struct FName& FunctionName, const struct FName& nameParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit, unsigned long isUnreliable);
	void MulticastFunctionByteParam(class AActor* act, const struct FName& FunctionName, unsigned char byteParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit);
	void MulticastFunctionFloatParam(class AActor* act, const struct FName& FunctionName, float FloatParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, int OverrideQueueLimit);
	void MulticastFunctionVectorAndByteParams(class AActor* act, const struct FName& FunctionName, unsigned char byteParam, const struct FVector& vectorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit);
	void MulticastFunctionVectorParam(class AActor* act, const struct FName& FunctionName, const struct FVector& vectorParam, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit);
	void MulticastFunctionNoParams(class AActor* act, const struct FName& FunctionName, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, unsigned long isUnreliable, int OverrideQueueLimit);
	void MulticastFunction(class AActor* act, const struct FName& FunctionName, class ADunDefPlayerController* SendToSpecificController, unsigned long ForceBroadcastToOwners, unsigned long BroadCastToLocalControllers, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, unsigned long onlyFunction, unsigned long onlyFloatParam, unsigned long onlyVectorParam, unsigned long onlyNameParam, unsigned long onlyActorParam, unsigned long onlyVectorAndByte, unsigned char byteParam, unsigned long isUnreliable, unsigned long onlyByteParam, class UObject* objectParam1, int OverrideQueueLimit);
	unsigned long ShouldGameplayDrawCursor();
	void AddCustomFloatingText(const struct FString& theText, const struct FVector& Position, int InitialOffset, float tLifeSpan, float tDisplayScale, unsigned long bOverrideColor, const struct FLinearColor& dColor);
	void AddFloatingDamageEntryInvincible(class AActor* forActor, int DamageAmount, const struct FVector& Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset);
	void AddFloatingDamageEntry(class AActor* forActor, int DamageAmount, const struct FVector& Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset);
	void Server_AddFloatingDamageEntry(class AActor* forActor, int DamageAmount, const struct FVector& Position, class UClass* TheDamageType, unsigned long fromEnemy, int InitialOffset, unsigned long bIsInvincible, unsigned long bDontReplicate);
	void DrawTalkers(class UCanvas* C);
	void PostRender(class UCanvas* C);
	void UpdateGameOver();
	void Tick(float DeltaTime);
	struct FString GetSkipBuildPhaseString();
	void RefreshBillboards();
	void RefreshEnemyWaveEntries();
	void LogEquipmentStats();
	void ShutdownAllTrapFX();
	void BeganCombatPhase();
	void EndedCombatPhase();
	void SetInCombatPhase(unsigned long inCombatPhase);
	void NetworkedHUDMessage(const struct FString& theString, const struct FLinearColor& aColor, int FontSize, float TimeToDisplay, int ForTeam);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void SetWaveNumber(int theWaveNumber);
	void SetAllowNonOwnerItemPickups(unsigned long allowNonOwnerItemPickups);
	void ReplicatedEvent(const struct FName& VarName);
	class ADunDefPlayerController* FindPCByStatName(const struct FString& playerStatName);
	unsigned long FindRemoteUserID(int remoteID);
	void UnpackPlayerStats(TArray<int> packedUpStats);
	void SendStatsInfo(TArray<struct FplayerStatsEntry> infoToSend);
	TArray<int> PreparePlayerStats();
	void RemovePlayerStats(int remoteID);
	void ClientRegisterProjectileKillAtIndex(class ADunDefProjectile* InProjectile, unsigned char ReplicatedIndex);
	unsigned char ServerGetProjectileKillIndex();
	void ClientProjectileDeath(unsigned char KillArrayIndex);
	struct FString ClientGetPlayerStatName(int remoteUserID, unsigned long trueRemote);
	void ClientAddPlayerStats(int remoteUserID, const struct FString& PlayerName, unsigned long trueRemote, unsigned long ignore, unsigned long Host, int statPlayerIndex);
	void AddPlayerStats(class UDunDefPlayerStats* statsToAdd, const struct FString& PlayerName, int remoteUserID, int arraySize, TArray<int> newBestOfStats, int statPlayerIndex);
};


// Class UDKGame.DunDefHUD
// 0x00AC (0x09F8 - 0x094C)
class ADunDefHUD : public ANativeDunDefHUD
{
public:
	struct FColor                                      BlackColor;                                               // 0x094C(0x0004) (Const)
	struct FLinearColor                                BlackLinearColor;                                         // 0x0950(0x0010) (Const)
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplate;                                   // 0x0960(0x0004) (Edit)
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplateLobby;                              // 0x0964(0x0004) (Edit)
	class UUI_PlayerHUD*                               PlayerHUDSceneTemplateGamepad;                            // 0x0968(0x0004) (Edit)
	float                                              ActivationTextScale;                                      // 0x096C(0x0004) (Edit)
	float                                              ActivationIconScale;                                      // 0x0970(0x0004) (Edit)
	class UUI_PlayerHUD*                               PlayerHUDScene;                                           // 0x0974(0x0004)
	struct FVector                                     MouseProjectionDirection;                                 // 0x0978(0x000C)
	struct FVector                                     MouseProjectionOrigin;                                    // 0x0984(0x000C)
	struct FLinearColor                                DeathStringColor;                                         // 0x0990(0x0010) (Edit)
	struct FString                                     ReachedLevelCapMessageString;                             // 0x09A0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ReachedDemoLevelCapMessageString;                         // 0x09AC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ReachedLevelCapMessageColor;                              // 0x09B8(0x0004) (Edit)
	struct FColor                                      MsgPlayerTextColor;                                       // 0x09BC(0x0004) (Edit)
	TArray<struct FColor>                              MsgPlayerNameColors;                                      // 0x09C0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PrimaryActivationKeybind;                                 // 0x09CC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AlternateActivationKeybind;                               // 0x09D8(0x000C) (Edit, NeedCtorLink)
	struct FColor                                      PrimaryActivationColor;                                   // 0x09E4(0x0004) (Edit, Config)
	struct FColor                                      SecondaryActivationColor;                                 // 0x09E8(0x0004) (Edit, Config)
	unsigned long                                      bForceMobileAutoAimTarget : 1;                            // 0x09EC(0x0004) (Transient)
	class UDunDefHero*                                 LastActionWheelHero;                                      // 0x09F0(0x0004) (Transient)
	class UActionWheel*                                MyActionWheel;                                            // 0x09F4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHUD");
		return ptr;
	}


	void DrawChatMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY, float Scale, float Opacity);
	void Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime);
	float GetHUDCanvasScale();
	float DrawKeyBind(const struct FString& KeyBindName, unsigned long Center, float XPos, float YPos, float IconScale, float TextScale, float Opacity, unsigned long bDontActuallyDraw);
	void DrawActivationNotification(float PosX, float PosY, unsigned long doCenter, unsigned long DrawPrimaryActivation, const struct FString& ActivationString, const struct FColor& ActivationStringColor, unsigned long DrawAltActivation, const struct FString& AltActivationString, const struct FColor& AltActivationStringColor, float Opacity, unsigned long bDontDrawPrimaryIcon, unsigned long bDontDrawSecondaryIcon);
	class UFont* STATIC_GetFontSizeIndex(int FontSize);
	void SetMobileTouchCoordinates(const struct FVector& pos);
	void TurnOffSpectatorMode();
	void UpdateForSpectactorCamera(float DeltaTime, unsigned long bDontHideHud);
	void DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY, float Scale);
	void PostRender();
	struct FVector GetMouseCoordinatesVec();
	void SetAbsoluteMouseCoordinates(const struct FVector2D& coords);
	void SetMouseCoordinates(int X, int Y);
	struct FVector2D GetScreenCenter();
	struct FVector2D GetMouseCoordinates(unsigned long bIgnoreScreenSplit);
	void Destroyed();
	void ToggleHUD();
	void SetHUDHidden(unsigned long Hide, unsigned long onlyHideUIScene);
	void AddToScore(int TotalScore, int AmountToAdd, unsigned char ScoreTagReason, const struct FLinearColor& ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype);
	float GetHUDAspectRatio();
	unsigned long IsOnScreen(const struct FVector2D& ScreenPos, class AHUD* InHud);
	unsigned long IsOnTopOfCanvas(const struct FVector2D& ScreenPos, float percentFromEdge);
	unsigned long IsOnBottomOfCanvas(const struct FVector2D& ScreenPos, float percentFromEdge);
	unsigned long IsOnRightOfCanvas(const struct FVector2D& ScreenPos, float percentFromEdge);
	unsigned long IsOnLeftOfCanvas(const struct FVector2D& ScreenPos, float percentFromEdge);
	void NotifyLevelUp();
	void UpdateNotificationColor(const struct FLinearColor& NewColor, float sizeScalar, unsigned long bDontUseSizeScalar);
	void ShowMajorNotificationLabelCompleted();
	void ShowMajorNotificationLabel(const struct FString& LabelText, const struct FLinearColor& LabelColor, float LabelScale, float LabelTimer, unsigned long bForce);
	void ShowProgressBar(float Percent, const struct FLinearColor& ProgressBarColor, unsigned long bPlayCompletedAnimation);
	void NotifyExperienceChange();
	void NotifyShieldChange();
	void NotifyHealthChange();
	void NotifyUpdateManaPower();
	void ResetValues();
	void NotifyDied();
	void OpenActionWheelByEntryName(const struct FName& EntrytoOpen);
	void ActionWheelSetHotKey(int hkIndex);
	void ActionWheelUpdateInput(float DeltaTime);
	void ActionWheelProcessBack();
	void ActionWheelProcessSelection();
	unsigned long ActionWheelIsVisible();
	void ActionWheelToggle(unsigned long ForceOff);
	void DrawHUD();
	void InitActionWheel();
	void UpdateForOptions(struct FOptionsFixedStruct* newOptions);
	void PostBeginPlay();
};


// Class UDKGame.DunDefUIScene
// 0x0090 (0x063C - 0x05AC)
class UDunDefUIScene : public UDunDefNativeUIScene
{
public:
	TArray<struct FDunDefKeyBindings>                  gamepadKeyBindings;                                       // 0x05AC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               MoveAllowedKeyNames;                                      // 0x05B8(0x000C) (Edit, NeedCtorLink)
	class UUIScreenObject*                             AutoFocusControl;                                         // 0x05C4(0x0004) (Edit)
	TArray<struct FDunDefUIAnimation>                  DefaultAnimationSequences;                                // 0x05C8(0x000C) (Edit, NeedCtorLink)
	struct FName                                       UIAnimSequence_OpenScene;                                 // 0x05D4(0x0008) (Edit)
	struct FName                                       UIAnimSequence_OpenScene_Replicated;                      // 0x05DC(0x0008) (Edit)
	struct FName                                       UIAnimSequence_CloseScene;                                // 0x05E4(0x0008) (Edit)
	unsigned long                                      ReplicateUI : 1;                                          // 0x05EC(0x0004) (Edit)
	unsigned long                                      CloseOnPlayerTakeDamage : 1;                              // 0x05EC(0x0004) (Edit)
	unsigned long                                      bDrawCursorParticles : 1;                                 // 0x05EC(0x0004) (Edit)
	unsigned long                                      bExemptFromDunDefAutoClose : 1;                           // 0x05EC(0x0004) (Edit)
	unsigned long                                      bClosedByPauseMenu : 1;                                   // 0x05EC(0x0004) (Edit)
	unsigned long                                      bAutoFocusControl : 1;                                    // 0x05EC(0x0004) (Edit)
	unsigned long                                      bIsMultiplayerUI : 1;                                     // 0x05EC(0x0004) (Edit)
	unsigned long                                      bIgnoreDunDefUISceneKeyInterception : 1;                  // 0x05EC(0x0004) (Edit)
	unsigned long                                      bAllowVisibilityToggleInWaitingMode : 1;                  // 0x05EC(0x0004) (Edit)
	unsigned long                                      bAllowFastTransitions : 1;                                // 0x05EC(0x0004) (Edit)
	unsigned long                                      bIsTopLevelScene : 1;                                     // 0x05EC(0x0004)
	unsigned long                                      HasBeenHidden : 1;                                        // 0x05EC(0x0004)
	unsigned long                                      bFirstInputTick : 1;                                      // 0x05EC(0x0004)
	unsigned long                                      bSetKeyboardDelegate : 1;                                 // 0x05EC(0x0004)
	unsigned long                                      OldSceneNeverFocus : 1;                                   // 0x05EC(0x0004) (Transient)
	unsigned long                                      HasLoadedSequences : 1;                                   // 0x05EC(0x0004) (Transient)
	int                                                CustomValueForKismet;                                     // 0x05F0(0x0004) (Edit)
	float                                              SceneCloseAnimationForceLength;                           // 0x05F4(0x0004) (Edit)
	class UForceFeedbackWaveform*                      ConsolePointerFocusForceFeedbackWaveForm;                 // 0x05F8(0x0004) (Edit)
	class UUIEditBox*                                  keyboardEditBox;                                          // 0x05FC(0x0004)
	TEnumAsByte<ESplitScreenType>                      LastSplitType;                                            // 0x0600(0x0001)
	TEnumAsByte<EScreenInputMode>                      PreviousInputMode;                                        // 0x0601(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0602(0x0002) MISSED OFFSET
	class UUIObject*                                   LastFocusedControl;                                       // 0x0604(0x0004)
	float                                              MyUIScalePercent;                                         // 0x0608(0x0004) (Transient)
	class AActor*                                      MyAssociatedActor;                                        // 0x060C(0x0004)
	TArray<struct FToolTipInfo>                        ToolTipInfos;                                             // 0x0610(0x000C) (NeedCtorLink)
	int                                                topToolTipIndex;                                          // 0x061C(0x0004)
	float                                              SceneCloserTimer;                                         // 0x0620(0x0004) (Transient)
	float                                              SceneHiderTimer;                                          // 0x0624(0x0004) (Transient)
	class ADunDefUIReplicationInfo*                    MyReplicationInfo;                                        // 0x0628(0x0004) (Transient)
	class UDunDefSceneClient*                          mySceneClient;                                            // 0x062C(0x0004) (Transient)
	class UUIScriptWidget_Button*                      ActiveDraggeable;                                         // 0x0630(0x0004) (Transient)
	float                                              DragStartTime;                                            // 0x0634(0x0004) (Transient)
	int                                                ClickCount;                                               // 0x0638(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefUIScene");
		return ptr;
	}


	void CinematicCompleted();
	unsigned long UseFastMenuTransitions();
	unsigned long AllowOverlays();
	void CloseByPauseMenu();
	unsigned long AllowInputAlias(const struct FName& InputKeyName, const struct FName& InputAliasName);
	void SetCustomValueForKismet(int CustomValue);
	int FirstSignedInController(unsigned long requiresLive);
	unsigned long AnyoneSignedIn(unsigned long requiresLive, unsigned long requiresPrimary);
	unsigned long CheckLogin(int ControllerId, unsigned long prompt, unsigned long requiresLive);
	unsigned long HasAcceptedSignInPrompt(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void CustomInit(int CustomInitIndex);
	void OnWidgetClicked(class UUIObject* Widget);
	void SetGamepadBindingHandleInputEnabled(class UUIObject* boundObject, unsigned long bSetEnabled);
	void SetGamepadBindingsEnabled(unsigned long EnableOnlyThese, TArray<class UUIObject*>* BoundObjects);
	void ForceClickWidget(class UUIScreenObject* Widget, int PlayerIndex, int ControllerId, unsigned long bSetWidgetFocus, unsigned long bDontResetFocus);
	unsigned long OnInterceptedInputKey(struct FInputEventParameters* EventParms);
	void NotifyLevelVictory();
	void NotifyGameOver();
	class ADunDefPlayer* GetOwnerPawn();
	class UDunDefHero* GetOwnerHero();
	void OnLabelChange(class UUILabel* Sender, const struct FString& OldText, const struct FString& NewText);
	void SetupLabelDelegates();
	unsigned long IsInParty();
	void NotifyPhaseChange(unsigned long IsCombatPhase);
	void NotifyPlayerLeft(class APlayerReplicationInfo* PRI);
	void NotifyLocalPlayerRemoved(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyLocalPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyPlayerJoined(class APlayerReplicationInfo* PRI);
	unsigned long ShowUIKeyboard(class UUIEditBox* EditBoxToSet, const struct FString& TitleText, const struct FString& DescriptionText, const struct FString& DefaultText, unsigned long shouldValidate, int MaxLength, unsigned long allowSpaces);
	void KeyboardInputRejected(const struct FString& Result);
	void KeyboardInputDone(unsigned long Success);
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	void EvaluateKeyboardInput(struct FString* keyboardResult);
	void PostInitialSceneUpdate();
	void KillToolTip(const TScriptInterface<class UToolTipInterface>& Child);
	void NotifyActiveToolTip(const TScriptInterface<class UToolTipInterface>& Child);
	void InitializeToolTip(int toolTipIndex, const TScriptInterface<class UToolTipInterface>& Target, unsigned long bExisting);
	class UUILabel_ToolTip* FindLabelToolTip(class UUIObject* Search);
	void DrawToolTip(int toolTipIndex, float XPos, float YPos, class UUIScreenObject* whoFor);
	unsigned long SupportsDraggedOntoItem(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	void NotifyDraggedEvent(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	void NotifyEquipmentChanged();
	void NotifyManaChanged();
	void NotifyPlayerTakeHit();
	void ClearPlayerControllerInputs(class ULocalPlayer* LP, unsigned long bForceFlushInput);
	void HideScene(const struct FName& HideAnimation);
	void UnhideScene(const struct FName& AlternateOpeningAnimation);
	unsigned long IsPaused();
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedUIMessage(const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void InitReplicationInfo();
	void SceneDeactivated();
	void CloseWithoutAnimation();
	struct FName GetOpenAnimation();
	struct FName GetCloseAnimation();
	void CloseWithAnimation();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	float GetViewportYScaleTo768();
	float GetViewportXScaleTo1024();
	class UDunDefViewportClient* STATIC_GetViewportClient();
	float GetFinalOpacity(class UUIScreenObject* Object);
	void CheckUnusedFocus();
	void Update(float DeltaTime);
	struct FVector2D GetToolTipPositioning(class UUIObject* toolTipOwner, class UUIObject* toolTipObject, TEnumAsByte<EToolTipAlignment> Horizontal, TEnumAsByte<EToolTipAlignment> Vertical, float XOffset, float YOffset, const struct FVector& Scale);
	void DoHideScene();
	unsigned long IsGamepadOwned();
	unsigned long UseGamePadControl();
	unsigned long IsTopLevelScene();
	void GiveFocusToAnyChild();
	unsigned long FollowMouse();
	void RepositionToolTip(class UUIObject* ToolTip, float XPos, float YPos);
	float DunDefGetSequenceLength(const struct FName& DunDefUIAnimSeqName);
	void LoadSequences();
	void UpdateImagesMaterial(class UMaterialInstanceConstant* MIC, TArray<class UUIImage*>* UIImages);
	unsigned long AllowGlobalVisibilityToggling();
	void PostRender(class UCanvas* C);
	void RenderGamepadKey(class UCanvas* C, class UUIObject* Object, float X1, float Y1, float X2, float Y2);
	void UpdateGamePadBindings();
	void OnPostEditChange(const struct FName& PropertyChanged);
	void SetUIScalePercent(float scalePercent);
	void SceneActivated(unsigned long bInitialActivation);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long ReleaseInputKey(const struct FName& ofKey);
	class ADunDefGameReplicationInfo* GetGRI();
	class UDunDefHeroManager* STATIC_GetTheHeroManager();
	class UDunDefViewportClient* STATIC_GetVPClient();
};


// Class UDKGame.UI_PlayerHUD
// 0x0190 (0x07CC - 0x063C)
class UUI_PlayerHUD : public UDunDefUIScene
{
public:
	class UUIImage_HealthBar*                          HealthBar;                                                // 0x063C(0x0004) (Edit)
	class UUIImage_HealthBar*                          ManaBar;                                                  // 0x0640(0x0004) (Edit)
	class UUIImage_ProgressBar*                        ProgressBar;                                              // 0x0644(0x0004) (Edit)
	class UUIImage_HealthBar*                          ExperienceBar;                                            // 0x0648(0x0004) (Edit)
	class UUIImage_HealthBar*                          AmmoBar;                                                  // 0x064C(0x0004) (Edit)
	class UUIImage_HealthBar*                          ShieldBar;                                                // 0x0650(0x0004) (Edit)
	TArray<class UUILabel*>                            MajorNotificationLabels;                                  // 0x0654(0x000C) (Edit, NeedCtorLink)
	class UUILabel_ScoreIndicator*                     ScoreLabel;                                               // 0x0660(0x0004) (Edit)
	class UUILabel*                                    LevelLabel;                                               // 0x0664(0x0004) (Edit)
	struct FString                                     LevelString;                                              // 0x0668(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       LevelUpNotAvailableAnimation;                             // 0x0674(0x0008) (Edit)
	struct FName                                       LevelUpAvailableAnimation;                                // 0x067C(0x0008) (Edit)
	class USurface*                                    ActionWheelOpenTexture;                                   // 0x0684(0x0004) (Edit)
	class USurface*                                    ActionWheelCloseTexture;                                  // 0x0688(0x0004) (Edit)
	float                                              NotificationSizeScalarLerpSpeed;                          // 0x068C(0x0004) (Edit)
	struct FName                                       BuildPhaseActiveAnimation;                                // 0x0690(0x0008) (Edit)
	struct FName                                       CombatPhaseActiveAnimation;                               // 0x0698(0x0008) (Edit)
	struct FName                                       DiedAnimation;                                            // 0x06A0(0x0008) (Edit)
	struct FName                                       RespawnedAnimation;                                       // 0x06A8(0x0008) (Edit)
	class UUILabel*                                    BuildPhaseReadyLabel;                                     // 0x06B0(0x0004) (Edit)
	struct FLinearColor                                BuildPhaseReadyColor;                                     // 0x06B4(0x0010) (Edit)
	struct FLinearColor                                BuildPhaseNotReadyColor;                                  // 0x06C4(0x0010) (Edit)
	struct FLinearColor                                BankedManaColor;                                          // 0x06D4(0x0010) (Edit)
	struct FString                                     BuildPhaseReadyString;                                    // 0x06E4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     BuildPhaseNotReadyString;                                 // 0x06F0(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<class UObject*>                             AdditionalResources;                                      // 0x06FC(0x000C) (Edit, NeedCtorLink)
	class UUIScriptWidget_Button*                      DDMobile_ActionWheelButton;                               // 0x0708(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_MenuButton;                                      // 0x070C(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_CameraLeftButton;                                // 0x0710(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_CameraRightButton;                               // 0x0714(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_MiniMapButton;                                   // 0x0718(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_FireButton;                                      // 0x071C(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_AltFireButton;                                   // 0x0720(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_AltActivationButton;                             // 0x0724(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DDMobile_ShowInventoryButton;                             // 0x0728(0x0004) (Edit)
	class USoundCue*                                   SoundLevelUpAvailable;                                    // 0x072C(0x0004) (Edit)
	struct FString                                     LevelUpAvailableMessageString;                            // 0x0730(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      LevelUpAvailableMessageColor;                             // 0x073C(0x0004)
	class UUILabel*                                    RespawnTimerLabel;                                        // 0x0740(0x0004) (Edit)
	float                                              Mobile_MaxQuickReleaseTime;                               // 0x0744(0x0004) (Edit, Config)
	float                                              Mobile_MinHoldTime;                                       // 0x0748(0x0004) (Edit, Config)
	unsigned long                                      bAllowAllMobileKeys : 1;                                  // 0x074C(0x0004) (Edit, Config)
	unsigned long                                      bPlayedDeathAnimation : 1;                                // 0x074C(0x0004)
	unsigned long                                      ShowingBuildPhasePanel : 1;                               // 0x074C(0x0004)
	unsigned long                                      ShowingLevelUp : 1;                                       // 0x074C(0x0004)
	unsigned long                                      bTriggeredAltFirePress : 1;                               // 0x074C(0x0004)
	unsigned long                                      bTriggeredFirePress : 1;                                  // 0x074C(0x0004)
	unsigned long                                      ProgressBarShown : 1;                                     // 0x074C(0x0004)
	unsigned long                                      HasDisplayedMissionObjective : 1;                         // 0x074C(0x0004)
	unsigned long                                      HealthBlipFadingIn : 1;                                   // 0x074C(0x0004) (Transient)
	unsigned long                                      bIsStatusPanelHidden : 1;                                 // 0x074C(0x0004) (Transient)
	unsigned long                                      bTouchIsDown : 1;                                         // 0x074C(0x0004) (Transient)
	unsigned long                                      bActivatedMobileTouchHold : 1;                            // 0x074C(0x0004) (Transient)
	unsigned long                                      bSetBuildPhaseReadyLabel : 1;                             // 0x074C(0x0004) (Transient)
	struct FString                                     AddedBankManaString;                                      // 0x0750(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     BankedManaString;                                         // 0x075C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FLinearColor                                AddedBankManaColor;                                       // 0x0768(0x0010) (Edit)
	int                                                LastMajorNotificationLabelIndex;                          // 0x0778(0x0004)
	int                                                LastMajorNotificationLabelHiddenIndex;                    // 0x077C(0x0004)
	class ADunDefPlayerController*                     MyPC;                                                     // 0x0780(0x0004)
	struct FLinearColor                                LastOriginalNotificationColor;                            // 0x0784(0x0010) (Transient)
	struct FString                                     LastDisplayedLabelText;                                   // 0x0794(0x000C) (NeedCtorLink)
	float                                              CurrentOverlayHealthPercent;                              // 0x07A0(0x0004) (Transient)
	float                                              OverlayTargetHealthPercent;                               // 0x07A4(0x0004) (Transient)
	class UMaterialEffect*                             LowHealthOverlayEffect;                                   // 0x07A8(0x0004) (Transient)
	class UMaterialEffect*                             HealthBlipOverlayEffect;                                  // 0x07AC(0x0004) (Transient)
	float                                              CurrentHealthBlipAmount;                                  // 0x07B0(0x0004) (Transient)
	float                                              CurrentHealthBlipFadeOutSpeed;                            // 0x07B4(0x0004) (Transient)
	float                                              LastLabelTimer;                                           // 0x07B8(0x0004) (Transient)
	float                                              MissionObjectiveTimer;                                    // 0x07BC(0x0004)
	struct FVector2D                                   MobileTouchCoordinates;                                   // 0x07C0(0x0008) (Transient)
	float                                              LastTouchPressTime;                                       // 0x07C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_PlayerHUD");
		return ptr;
	}


	void NotifyLevelVictory();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SetMobileTouchCoordinates(const struct FVector& pos);
	void UpdateMobileTouchCoordinates();
	unsigned long IsMobile();
	void ShowStatusPanel();
	void HideStatusPanel();
	void Update(float DeltaTime);
	void UpdateMobileInput(float DeltaTime);
	void DisplayMissionObjective();
	void UpdateMissionObjectiveTimer(float DeltaTime);
	void TurnOffSpectatorMode();
	void UpdateForSpectactorCamera(float DeltaTime, unsigned long bDontHideHud);
	void NotifyAddedBankedMana(const struct FHighDigitInt& howMuch, const struct FHighDigitInt& total);
	void AddToScore(int TotalScore, int AmountToAdd, unsigned char ScoreTagReason, const struct FLinearColor& ScoreTagColor, float ScoreTagAdditionalNum, float ScoreTagSecondaryNum, class AActor* ActorArchetype);
	void NotifyExperienceChange(unsigned long DontPlayAnimation);
	void CheckHeroCanLevelUp(unsigned long DontPlayAnimation);
	void NotifyNameChange();
	void NotifyLevelUp(unsigned long DontPlayAnimation);
	class UDunDefHero* GetHero();
	void NotifyHealthChange(unsigned long DontPlayAnimation);
	void NotifyShieldChange(unsigned long DontPlayAnimation);
	void RefreshPostEffectBinding();
	void NotifyLocalPlayerRemoved(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyLocalPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyUpdateManaPower(unsigned long DontPlayAnimation);
	void SceneDeactivated();
	void UpdateLowHealthEffect(unsigned long DontPlayAnimation);
	void RefreshBuildPhaseValue();
	void ResetValues();
	void InitHUDUI(class ADunDefPlayerController* forPC);
	void ShowMajorNotificationLabelCompleted(unsigned long bResetColor);
	void UpdateNotificationColor(const struct FLinearColor& NewColor, float sizeScalar, unsigned long bDontUseSizeScalar);
	void ShowMajorNotificationLabel(const struct FString& LabelText, const struct FLinearColor& LabelColor, float LabelScale, float LabelTimer, unsigned long bForce);
	void ShowProgressBar(float Percent, const struct FLinearColor& ProgressBarColor, unsigned long bPlayCompletedAnimation);
};


// Class UDKGame.Main
// 0x019C (0x0548 - 0x03AC)
class AMain : public ANativeMain
{
public:
	TArray<struct FMapPrefixDefinition>                MapPrefixes;                                              // 0x03AC(0x000C) (NeedCtorLink)
	struct FString                                     DefaultGameplayLevel;                                     // 0x03B8(0x000C) (NeedCtorLink)
	struct FString                                     DefaultGameplayLevelRanked;                               // 0x03C4(0x000C) (NeedCtorLink)
	struct FString                                     DefaultMenuLevel;                                         // 0x03D0(0x000C) (NeedCtorLink)
	unsigned long                                      AllowFriendlyFire : 1;                                    // 0x03DC(0x0004)
	unsigned long                                      bUseMobileCompatibility : 1;                              // 0x03DC(0x0004)
	unsigned long                                      DisablePlayerInput : 1;                                   // 0x03DC(0x0004)
	unsigned long                                      bDoSpawnNotifications : 1;                                // 0x03DC(0x0004)
	unsigned long                                      BossMode : 1;                                             // 0x03DC(0x0004)
	unsigned long                                      bRandomSpawnPoints : 1;                                   // 0x03DC(0x0004)
	unsigned long                                      bRandomWithoutReplacementSpawnPoints : 1;                 // 0x03DC(0x0004)
	unsigned long                                      bRandomExcludeLastSpawnPoint : 1;                         // 0x03DC(0x0004)
	unsigned long                                      bAllTowersAffectTowerUnits : 1;                           // 0x03DC(0x0004)
	unsigned long                                      bDropManaUponDeath : 1;                                   // 0x03DC(0x0004)
	unsigned long                                      bDisableItemDrops : 1;                                    // 0x03DC(0x0004)
	unsigned long                                      bAllowMobilePlayers : 1;                                  // 0x03DC(0x0004)
	unsigned long                                      bEnablePostMissionCinematic : 1;                          // 0x03DC(0x0004)
	unsigned long                                      bIsLoggingIn : 1;                                         // 0x03DC(0x0004)
	unsigned long                                      bGiveEquipmentRewardsOnFirstWave : 1;                     // 0x03DC(0x0004)
	unsigned long                                      bForceEnemyTargetingTeams : 1;                            // 0x03DC(0x0004)
	unsigned long                                      bCrystalCoreInvincible : 1;                               // 0x03DC(0x0004)
	unsigned long                                      bTowersInvincible : 1;                                    // 0x03DC(0x0004)
	unsigned long                                      bDisableWaveScalingForNumPlayers : 1;                     // 0x03DC(0x0004)
	unsigned long                                      bDisableAddingXP : 1;                                     // 0x03DC(0x0004)
	unsigned long                                      DefaultCombatPhase : 1;                                   // 0x03DC(0x0004)
	unsigned long                                      UseAlternateStartTransformation : 1;                      // 0x03DC(0x0004) (Transient)
	unsigned long                                      SwappingPlayerControllers : 1;                            // 0x03DC(0x0004) (Transient)
	unsigned long                                      bPlayersAreInvincible : 1;                                // 0x03DC(0x0004)
	unsigned long                                      bIgnoreEnemyStuckChecks : 1;                              // 0x03DC(0x0004)
	unsigned long                                      bTutorialMode : 1;                                        // 0x03DC(0x0004)
	unsigned long                                      bScaleBossHealths : 1;                                    // 0x03DC(0x0004)
	unsigned long                                      bForcePause : 1;                                          // 0x03DC(0x0004)
	unsigned long                                      reCheckForExcessLoot : 1;                                 // 0x03DC(0x0004) (Transient)
	unsigned long                                      bSurvivalTimeLimitMap : 1;                                // 0x03DC(0x0004)
	float                                              JumpZMultiplier;                                          // 0x03E0(0x0004)
	float                                              GlobalEnemyHealthMultiplier;                              // 0x03E4(0x0004)
	float                                              GlobalEnemyDamageMultiplier;                              // 0x03E8(0x0004)
	float                                              GlobalTowerHealthMultiplier;                              // 0x03EC(0x0004)
	float                                              GlobalTowerDamageMultiplier;                              // 0x03F0(0x0004)
	float                                              GlobalEquipmentQualityMultiplier;                         // 0x03F4(0x0004)
	float                                              MaxNumberOfEnemiesMultiplier;                             // 0x03F8(0x0004)
	float                                              MaxNumberOfEnemiesMobileMultiplier;                       // 0x03FC(0x0004)
	float                                              GlobalPhysicalTowerHealthMultiplier;                      // 0x0400(0x0004)
	TArray<float>                                      DjinnMaxSurvivalMultipliers;                              // 0x0404(0x000C) (NeedCtorLink)
	TArray<float>                                      DjinnNumMultipliers;                                      // 0x0410(0x000C) (NeedCtorLink)
	TArray<float>                                      SharkenNumMultipliers;                                    // 0x041C(0x000C) (NeedCtorLink)
	TArray<float>                                      CopterNumMultipliers;                                     // 0x0428(0x000C) (NeedCtorLink)
	struct FString                                     PlayerControllerArchetypeName;                            // 0x0434(0x000C) (NeedCtorLink)
	int                                                StartWave;                                                // 0x0440(0x0004)
	float                                              EquipmentQualityOverlayMultiplier;                        // 0x0444(0x0004)
	float                                              CrystalCoreHealthMultiplier;                              // 0x0448(0x0004)
	class UUI_KillCount*                               CurrentKillCountUI;                                       // 0x044C(0x0004) (Transient)
	class APlayerStart*                                LastSpawnPoint;                                           // 0x0450(0x0004)
	class APlayerController*                           PlayerControllerArchetype;                                // 0x0454(0x0004)
	class UUI_GlobalHUD*                               GlobalHUDUITemplate;                                      // 0x0458(0x0004)
	class UUI_GlobalHUD*                               GlobalHUDUIInstance;                                      // 0x045C(0x0004)
	class UUI_LoadingScreen*                           LoadingScreenUITemplate;                                  // 0x0460(0x0004)
	class UPostProcessChain*                           DefaultPostProcessing;                                    // 0x0464(0x0004)
	class UPostProcessChain*                           DefaultMobilePreviewPostProcessing;                       // 0x0468(0x0004)
	class USoundCue*                                   GameOverMusic;                                            // 0x046C(0x0004) (Const)
	TArray<class APlayerStart*>                        UsedPlayerStarts;                                         // 0x0470(0x000C) (Transient, NeedCtorLink)
	int                                                NumberOfManaTokens;                                       // 0x047C(0x0004) (Transient)
	TArray<int>                                        MaxNumberOfManaTokens;                                    // 0x0480(0x000C) (NeedCtorLink)
	int                                                CurrentNumberOfEnemies;                                   // 0x048C(0x0004) (Transient)
	int                                                NumberOfLivingEnemies;                                    // 0x0490(0x0004) (Transient)
	TArray<int>                                        MaximumNumberOfEnemies;                                   // 0x0494(0x000C) (NeedCtorLink)
	int                                                NumberOfDroppedEquipment;                                 // 0x04A0(0x0004) (Transient)
	int                                                NumberOfDroppedMana;                                      // 0x04A4(0x0004) (Transient)
	int                                                MaxNumberOfDroppedMana;                                   // 0x04A8(0x0004)
	int                                                NightmareAdditionalMaxEnemies;                            // 0x04AC(0x0004)
	int                                                MaxNumberOfDroppedManaOnline;                             // 0x04B0(0x0004)
	int                                                DunDefMaxPlayers;                                         // 0x04B4(0x0004)
	int                                                TheGameOverDescriptionReason;                             // 0x04B8(0x0004) (Transient)
	float                                              GameOverTimer;                                            // 0x04BC(0x0004)
	float                                              EnemyLifeSpanMultiplier;                                  // 0x04C0(0x0004)
	float                                              PlayerNetUpdateFrequency;                                 // 0x04C4(0x0004)
	class UDunDefHeroOverrideList*                     HeroOverrideList;                                         // 0x04C8(0x0004)
	TArray<struct FEnemyWaveEntry>                     RegisteredEnemyWaveEntries;                               // 0x04CC(0x000C) (Transient, NeedCtorLink)
	TArray<class UDunDef_SeqAct_EnemyWaveSpawner*>     EnemyWaveSpawnersToTick;                                  // 0x04D8(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     AlternateStartLocation;                                   // 0x04E4(0x000C) (Transient)
	struct FRotator                                    AlternateStartRotation;                                   // 0x04F0(0x000C) (Transient)
	struct FString                                     PlayerString;                                             // 0x04FC(0x000C) (Localized, NeedCtorLink)
	float                                              GlobalEnemyDifficultyOffset;                              // 0x0508(0x0004) (Transient)
	class UClass*                                      PureStrategyGameInfo;                                     // 0x050C(0x0004)
	TArray<float>                                      DroppedEquipmentNumPlayersMultiplier;                     // 0x0510(0x000C) (NeedCtorLink)
	TArray<float>                                      NumberOfNightmareOgreMultipliers;                         // 0x051C(0x000C) (NeedCtorLink)
	int                                                ManaTokensDestroyedThisTick;                              // 0x0528(0x0004) (Transient)
	class UAntiCheat*                                  AC;                                                       // 0x052C(0x0004)
	unsigned char                                      TutorialFlags[0xA];                                       // 0x0530(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x053A(0x0002) MISSED OFFSET
	TArray<class UClass*>                              StatsWriteClasses;                                        // 0x053C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.Main");
		return ptr;
	}


	void EnemyDied(class ADunDefEnemy* anEnemy);
	void AddWaveSpawnerToTick(class UDunDef_SeqAct_EnemyWaveSpawner* aSpawner);
	class ADunDefEnemy* WaveSpawnerCreateEnemy(class UDunDef_SeqAct_EnemyWaveSpawner* aSpawner, class ADunDefEnemy* EnemyTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void CloseKillCountUI(class UUI_KillCount* aKillCountUI);
	void OpenedKillCountUI(class UUI_KillCount* aKillCountUI);
	float GetCrystalCoreHealthMultiplier(class ADunDefCrystalCore* aCore);
	float GetGlobalPhysicalTowerHealthMultiplier(class ADunDefTower* aTower);
	void AdjustPawnDamage(class ADunDefPawn* forPawn, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* Momentum);
	void AdjustDTDamage(class ADunDefDamageableTarget* forDT, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int* inDamage, struct FVector* Momentum);
	void PlayerReplicationInfoInitialized(class ADunDefPlayerController* PC);
	unsigned long AllowCheats(class APlayerController* P);
	class APlayerController* GetPlayerEnemyKillStat(class APlayerController* Killer);
	float GetTreasureManaDropMultiplier();
	class ADunDefEnemy* GetRandomEnemyTemplate(class UDunDef_SeqVar_EnemyWaveEntries* entriesVar);
	void ModifyEnemyWaveEntries(class UDunDef_SeqVar_EnemyWaveEntries* entriesVar);
	int GetEnemyTargetingTeam(class ADunDefEnemy* theEnemy);
	void PawnPossessedBy(class ADunDefPawn* P, class AController* C, unsigned long bVehicleTransition);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum);
	void SetStatsWriteClass();
	void Heartbeat();
	void Tick(float DeltaTime);
	float GetPlayerCorpseLifespan(class ADunDefPlayer* tPlayer);
	unsigned long STATIC_GetTutorialFlag(TEnumAsByte<ETUTORIALFLAG> flagType);
	void STATIC_ClearTutorialFlags();
	void STATIC_SetTutorialFlag(TEnumAsByte<ETUTORIALFLAG> flagType, unsigned long Value);
	unsigned long STATIC_IsTutorialMode();
	unsigned long ShouldSpawnAtStartSpot(class AController* Player);
	void ProceedToNextCampaignLevel();
	int GetRegisteredWaveEntriesKillCount();
	class AMain* STATIC_GetMain();
	unsigned long IsUnderEnemyCap(int NumEnemies, float CheckPercentageOfEnemyCapFree);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	int StartWithMana(class ADunDefPlayerController* PC);
	int AddManaAfterRespawn(class ADunDefPlayerController* PC);
	unsigned long IsCompetitiveGameType();
	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	struct FString STATIC_GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	void RemoveExcessItems(int excess);
	void CheckForExcessiveDroppedEquipment(unsigned long NotRateTimerCallback);
	void UpdateGlobalHeroModifiers(class ADunDefPlayerController* thePC);
	int STATIC_GetPlayerIndex(class ULocalPlayer* LP);
	void SendPlayerStats();
	void PostLogin(class APlayerController* NewPlayer);
	class ADunDefPlayerController* STATIC_GetPrimaryLocalPlayerController();
	void STATIC_PlayerConsoleCommand(const struct FString& Command);
	void PreLogin(const struct FString& Options, const struct FString& Address, struct FString* ErrorMessage);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void GenericPlayerInitialization(class AController* C);
	void StartHumans();
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void STATIC_GetPlayerControllers(TArray<class APlayerController*>* PlayerControllers);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	void HandleSeamlessTravelPlayer(class AController** C);
	void GetSeamlessTravelActorList(unsigned long bToEntry, TArray<class AActor*>* ActorList);
	void PostSeamlessTravel();
	void UpdateMapName();
	struct FString GetOnlineSessionName();
	void PrintToConsole(const struct FString& Text);
	class UEngine* GetEngine();
	class UDunDefViewportClient* GetViewportClient();
	int GetNumAlivePlayers();
	void SpawnedEnemy(class ADunDefEnemy* anEnemy);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void Logout(class AController* Exiting);
	void ResolveSplitScreenNames(class ADunDefPlayerController* inPC);
	void DoPlayerLeaving(class ADunDefPlayerController* PC, unsigned long bForceLocal);
	void SetFinalWaveNumber(int theFinalWaveNumber);
	void SetWaveNumber(int theWaveNumber);
	unsigned long IsGameplayLevel();
	unsigned long IsInCinematic();
	void UsedSpotForPlayer(class ANavigationPoint* StartSpot);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	unsigned char GetPlayerTeamForStart(class AController* Player, unsigned char InTeam);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	void DoWaveSkipping(unsigned long bAllowArbritraryWaveSkipping);
	unsigned long PlayerCanRestart(class APlayerController* aPlayer);
	void DisplaySaveNotification();
	void DelayedShowSaveNotification(float DelayTime);
	void HandleCheater();
	void RunAntiCheat();
	void PostBeginPlay();
	void PreBeginPlay();
	void ShowGameOver(int gameOverDescriptionReason);
	float GetCurrentEnemyKillSpeed();
	int GetCurrentKillCount();
	int GetNumLocalPlayers();
	int GetMaximumNumberOfEnemies();
	int GetMaximumNumberOfManaTokens();
	void NeedToSpawnManaTokens(int howMany);
};


// Class UDKGame.DunDefPlayerAbility
// 0x020C (0x042C - 0x0220)
class ADunDefPlayerAbility : public ADunDefPlayerAbilityNative
{
public:
	class ADunDefPlayerController*                     ReplicatedOwner;                                          // 0x0220(0x0004) (Net)
	class ADunDefPlayer*                               ReplicatedInstigator;                                     // 0x0224(0x0004) (Net)
	struct FColor                                      AbilityStatusColors[0x8];                                 // 0x0228(0x0004) (Edit)
	struct FColor                                      AbilityColorRecentActivationSuccessful;                   // 0x0248(0x0004) (Edit)
	struct FColor                                      AbilityColorRecentActivationFailed;                       // 0x024C(0x0004) (Edit)
	struct FName                                       UniqueAbilityName;                                        // 0x0250(0x0008) (Edit)
	struct FString                                     DescriptiveName;                                          // 0x0258(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       CastingStateNamePC;                                       // 0x0264(0x0008) (Edit)
	struct FName                                       CastingStateNameAbility;                                  // 0x026C(0x0008) (Edit)
	unsigned long                                      BaseOnInstigator : 1;                                     // 0x0274(0x0004) (Edit)
	unsigned long                                      bRequiresInvisibility : 1;                                // 0x0274(0x0004) (Edit)
	unsigned long                                      bForceInfiniteBuildPhaseEvenWithTimer : 1;                // 0x0274(0x0004) (Edit)
	unsigned long                                      BaseOnInstigatorMesh : 1;                                 // 0x0274(0x0004) (Edit)
	unsigned long                                      bDisableInPureStrategy : 1;                               // 0x0274(0x0004) (Edit)
	unsigned long                                      bDoesUnlockPreStringUseSpace : 1;                         // 0x0274(0x0004) (Edit)
	unsigned long                                      IsATowerBuildingAbility : 1;                              // 0x0274(0x0004) (Edit)
	unsigned long                                      bHideActionWheelUponActivation : 1;                       // 0x0274(0x0004) (Edit)
	unsigned long                                      bRequiresWalking : 1;                                     // 0x0274(0x0004) (Edit)
	unsigned long                                      bIgnorePureStratDisabling : 1;                            // 0x0274(0x0004) (Edit)
	unsigned long                                      bInitialCooldownOnCreation : 1;                           // 0x0274(0x0004) (Edit)
	unsigned long                                      bSimulateLocally : 1;                                     // 0x0274(0x0004) (Edit)
	unsigned long                                      bPlayFullBodyAnimation : 1;                               // 0x0274(0x0004) (Edit)
	unsigned long                                      bInvincibleAbility : 1;                                   // 0x0274(0x0004) (Edit)
	unsigned long                                      bInvincibleWhileCasting : 1;                              // 0x0274(0x0004) (Edit)
	unsigned long                                      bIgnoreMomentumWhileCasting : 1;                          // 0x0274(0x0004) (Edit)
	unsigned long                                      bSetAsOverlordCastingAbility : 1;                         // 0x0274(0x0004) (Edit)
	unsigned long                                      bForceDisableAbilitiesInOverlord : 1;                     // 0x0274(0x0004) (Edit)
	unsigned long                                      bIgnoreLevelVictoryCancel : 1;                            // 0x0274(0x0004) (Edit)
	unsigned long                                      bIgnoreAbilityCoolDownReset : 1;                          // 0x0274(0x0004) (Edit)
	unsigned long                                      bAllowNegativeStatusAffects : 1;                          // 0x0274(0x0004) (Edit)
	unsigned long                                      InitializedForOwner : 1;                                  // 0x0274(0x0004)
	unsigned long                                      bWaitingOnFullBodyAnimation : 1;                          // 0x0274(0x0004) (Transient)
	unsigned long                                      bWasUnderRequiredLevel : 1;                               // 0x0274(0x0004)
	unsigned long                                      bWasCoolingDown : 1;                                      // 0x0274(0x0004)
	unsigned long                                      bForceAllowInBuildPhase : 1;                              // 0x0274(0x0004) (Edit)
	unsigned long                                      bRemoveBuffsOnDeactivate : 1;                             // 0x0274(0x0004) (Edit)
	unsigned long                                      bRemoveBuffsOnCompletion : 1;                             // 0x0274(0x0004) (Edit)
	unsigned long                                      bPressAndHoldAbility : 1;                                 // 0x0274(0x0004) (Edit)
	unsigned long                                      bUseManaAttractionMultiplier : 1;                         // 0x0274(0x0004) (Edit)
	unsigned long                                      bOnlyExtendManaAttractionRadiusWhileCasting : 1;          // 0x0274(0x0004) (Edit)
	unsigned long                                      bDisableAbilityInCombatPhase : 1;                         // 0x0274(0x0004) (Edit)
	unsigned long                                      bDisableAbilityInBuildPhase : 1;                          // 0x0278(0x0004) (Edit)
	struct FName                                       BaseOnInstigatorMeshAttachName;                           // 0x027C(0x0008) (Edit)
	struct FVector                                     BaseLocOffset;                                            // 0x0284(0x000C) (Edit)
	struct FVector                                     PlacingTowerCameraOffset;                                 // 0x0290(0x000C) (Edit)
	struct FRotator                                    BaseRotOffset;                                            // 0x029C(0x000C) (Edit)
	struct FLinearColor                                NotificationColor;                                        // 0x02A8(0x0010) (Edit)
	class USoundCue*                                   SoundActivationConfirmation;                              // 0x02B8(0x0004) (Edit)
	class USoundCue*                                   SoundActivationFailure;                                   // 0x02BC(0x0004) (Edit)
	class USoundCue*                                   SoundCancel;                                              // 0x02C0(0x0004) (Edit)
	class USoundCue*                                   CoolDownFinished;                                         // 0x02C4(0x0004) (Edit)
	class USoundCue*                                   SoundCancelDueToMana;                                     // 0x02C8(0x0004) (Edit)
	float                                              ActivationInterval;                                       // 0x02CC(0x0004) (Edit, Net)
	float                                              MinimumReactivationInterval;                              // 0x02D0(0x0004) (Edit)
	float                                              LobbyActivationInterval;                                  // 0x02D4(0x0004) (Edit)
	int                                                RequiredHeroLevel;                                        // 0x02D8(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     AssociatedHeroStat;                                       // 0x02DC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02DD(0x0003) MISSED OFFSET
	struct FString                                     ActivationFailureString_HeroLevel;                        // 0x02E0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_Mana;                             // 0x02EC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_Physics;                          // 0x02F8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_Cooldown;                         // 0x0304(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationManaString;                                     // 0x0310(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationSecondsString;                                  // 0x031C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationSecondString;                                   // 0x0328(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureStringEnd;                               // 0x0334(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_NotApplicable;                    // 0x0340(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CancelledDueToManaString;                                 // 0x034C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AbilityUnlockedMessagePreString;                          // 0x0358(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AbilityUnlockedMessageString;                             // 0x0364(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      AbilityUnlockedMessageColor;                              // 0x0370(0x0004) (Edit)
	class USoundCue*                                   AbilityUnlockedSound;                                     // 0x0374(0x0004) (Edit)
	float                                              MinimumRefireTime;                                        // 0x0378(0x0004) (Edit)
	float                                              CastingCharacterAnimationBlendInTime;                     // 0x037C(0x0004) (Edit)
	float                                              CastingCharacterAnimationBlendOutTime;                    // 0x0380(0x0004) (Edit)
	float                                              CastRateHeroHeroStatExponent;                             // 0x0384(0x0004) (Edit)
	float                                              TimeFromEndToFinishFullBodyAnimation;                     // 0x0388(0x0004) (Edit)
	struct FLinearColor                                ProgressBarColor;                                         // 0x038C(0x0010) (Edit)
	float                                              CastingColorFlashIntensity;                               // 0x039C(0x0004) (Edit)
	float                                              CastingColorFlashSpeed;                                   // 0x03A0(0x0004) (Edit)
	float                                              ColorFlashingBasePercent;                                 // 0x03A4(0x0004) (Edit)
	float                                              CastingColorFlashPower;                                   // 0x03A8(0x0004) (Edit)
	float                                              SizeFlashingPower;                                        // 0x03AC(0x0004) (Edit)
	float                                              SizeFlashingSpeed;                                        // 0x03B0(0x0004) (Edit)
	float                                              SizeFlashingPercent;                                      // 0x03B4(0x0004) (Edit)
	struct FName                                       CancelOverrideAnimName;                                   // 0x03B8(0x0008) (Edit)
	struct FVector                                     PlacementLocation;                                        // 0x03C0(0x000C)
	class UActionWheelEntry*                           MyActionWheelEntry;                                       // 0x03CC(0x0004)
	float                                              LastActivationTime;                                       // 0x03D0(0x0004)
	float                                              LastSuccessfulActivationTime;                             // 0x03D4(0x0004)
	float                                              LastCompletionTime;                                       // 0x03D8(0x0004)
	float                                              LastFailedActivationTime;                                 // 0x03DC(0x0004)
	float                                              LastUnprocessedRequestActivationTime;                     // 0x03E0(0x0004) (Transient)
	float                                              FlashingCounter;                                          // 0x03E4(0x0004)
	TArray<class UDunDefBuff*>                         BuffToApplyToInstigatorOnActivate;                        // 0x03E8(0x000C) (Edit, NeedCtorLink)
	TArray<class UDunDefBuff*>                         BuffToApplyToInstigatorOnDeactivate;                      // 0x03F4(0x000C) (Edit, NeedCtorLink)
	class UStatObject*                                 AbilityStatModifierTemplate;                              // 0x0400(0x0004) (Edit)
	TArray<class UDunDefBuff*>                         ActiveBuffs;                                              // 0x0404(0x000C) (Transient, NeedCtorLink)
	TArray<TScriptInterface<class UIActorModifierInterface>> currentAbilityStatModifiers;                              // 0x0410(0x000C) (Transient, NeedCtorLink)
	class UStatObject*                                 AbilityStatModifier;                                      // 0x041C(0x0004) (Transient)
	TScriptInterface<class UIActorModifierInterface>   MyActorStatModifier;                                      // 0x0420(0x0008) (Transient)
	float                                              ManaAttractionRadiusMultiplier;                           // 0x0428(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility");
		return ptr;
	}


	void ChangedGamePhases(unsigned long IsCombatPhase);
	void AdjustCoolDown(float reductionAmt);
	void ClearAbilityCoolDown();
	unsigned long AllowNegativeStatusAffecting();
	void UpdateBuffValues();
	void RemoveAbilityStatModifier(const TScriptInterface<class UIActorModifierInterface>& oldModifier);
	void AddAbilityStatModifier(const TScriptInterface<class UIActorModifierInterface>& newModifier);
	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
	unsigned long IsAbilityActive();
	unsigned long AllowMoveWhileCasting();
	void CyclePlacementTowerRadius();
	void IncreasePlacementTowerRadius();
	void DecreasePlacementTowerRadius();
	struct FVector GetPlacingTowerCameraOffset();
	unsigned long ConsumesInputWhenActive();
	void OverridePlayerGroundSpeed(float* PlayerGroundSpeed);
	unsigned long IsInInfiniteBuildPhase(unsigned long ignoreLobby);
	unsigned long HidesActionWheelUponActivation();
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	unsigned long MeetsHeroLevelRequirement();
	void AnimNotify_CurrentAbility_Off();
	void AnimNotify_CurrentAbility_On();
	float GetPlayerDamageResistanceMultiplier();
	float GetPlayerAttackDamageMultiplier();
	float GetPlayerGroundSpeedMultiplier();
	float GetCastRateMultiplier();
	void PlayCancelNoManaSound();
	void HandleAltCancellation();
	void HandleAltConfirmation();
	void HandleConfirmation();
	void HandleCursorInput(const struct FVector& addDir);
	struct FString GetDescriptiveName();
	unsigned long IsCasting();
	void PlayCancelAnimation();
	void StopLoopingAnims();
	struct FName GetCastingCancelAnimationOverride();
	class ADunDefEmitterSpawnable* GetCastingWeaponEmitter();
	class ADunDefEmitterSpawnable* GetCastingCharacterEmitter();
	struct FName GetCastingCharacterAnimation();
	class ADunDefHUD* GetHUD();
	struct FName GetCastingStateNameAbility();
	struct FName GetCastingStateNamePC();
	void OnInstigatorTeleport(class USeqAct_Teleport* Action);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	unsigned long AllowCastingCancelOnDamage();
	void OnActivate();
	void ClientOnActivate();
	void ReduceCoolDown(float reduceBy);
	void CompletedAbility();
	void ClientCompletedAbility();
	unsigned long CanAffordAbility();
	void RemoveActiveBuffs();
	void CancelAbility();
	void ClientCancelAbility();
	unsigned long IsAuthority();
	unsigned long IsLocal();
	float GetManaTokenAttractionRangeMultiplier();
	struct FColor GetColorForStatus(TEnumAsByte<EPlayerAbilityStatus> Status, int* ForceDisplayAbilityName);
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	unsigned long AllowUsageDuringCastingStates();
	void LocalNotifyUnlock();
	void NotifyLocalLevelUp();
	void ModifyJumpZ(float* playerJumpZ);
	int GetDisplayCost();
	int GetCostToActivate(unsigned long returnTrueValue);
	class ADunDefPlayer* GetPlayer();
	class ADunDefPlayerController* GetPC();
	void ServerCancel();
	void ServerActivate();
	unsigned long RequestCancellation(unsigned long bForce);
	struct FString GetActivationFailureString(TEnumAsByte<EPlayerAbilityStatus> Status, unsigned long ShortString);
	void SpawnBuffs();
	unsigned long RequestActivation(unsigned long bHeld);
	unsigned long AbilityReleased();
	unsigned long AbilityPressed();
	float GetCooldownStartTime();
	float GetActivationIntervalRemaining();
	void InitializeForPlayer(class ADunDefPlayer* myPlayer);
	void InitializeForController(class ADunDefPlayerController* PC);
	unsigned long NotifyActivated();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void Destroyed();
	class ADunDefGameReplicationInfo* GetGRI();
	unsigned long AllowHeroGUID(int GUID1, int GUID2, int GUID3, int GUID4);
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	unsigned long DrawCastingHUD(class ADunDefHUD* H);
};


// Class UDKGame.DunDefPawn
// 0x029C (0x0808 - 0x056C)
class ADunDefPawn : public AUDKGamePawn
{
public:
	TArray<struct FName>                               CustomAnimNodeNames;                                      // 0x056C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       CustomAnimBlenderName;                                    // 0x0578(0x0008) (Edit)
	class UAnimNodeBlend*                              CustomAnimBlender;                                        // 0x0580(0x0004)
	int                                                LastCustomAnimNodePlayIndex;                              // 0x0584(0x0004)
	struct FName                                       AnimJump;                                                 // 0x0588(0x0008) (Edit)
	TArray<struct FName>                               HurtAnimations;                                           // 0x0590(0x000C) (Edit, NeedCtorLink)
	struct FName                                       DeathAnimation;                                           // 0x059C(0x0008) (Edit)
	struct FName                                       TurnDirectionBlenderName;                                 // 0x05A4(0x0008) (Edit)
	struct FName                                       DamageFlashingScalarParamName;                            // 0x05AC(0x0008) (Edit)
	struct FVector                                     TargetingLocationOffset;                                  // 0x05B4(0x000C) (Edit)
	int                                                LastHurtAnimation;                                        // 0x05C0(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x05C4(0x0004) (Edit, ExportObject, Component, EditInline)
	class ADunDefEmitterSpawnable*                     SmallHurtEffectTemplate;                                  // 0x05C8(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     LargeHurtEffectTemplate;                                  // 0x05CC(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CharacterLoopingEmitter;                                  // 0x05D0(0x0004) (Transient)
	TArray<class USoundCue*>                           HurtSounds;                                               // 0x05D4(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           DeathSounds;                                              // 0x05E0(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           FootSteps;                                                // 0x05EC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsTargetable : 1;                                        // 0x05F8(0x0004) (Edit, Net)
	unsigned long                                      bAllowMageHealing : 1;                                    // 0x05F8(0x0004) (Edit)
	unsigned long                                      bDisableMyDroppedManaAttraction : 1;                      // 0x05F8(0x0004) (Edit)
	unsigned long                                      bTearOffOnDeath : 1;                                      // 0x05F8(0x0004) (Edit)
	unsigned long                                      bAllowHarpoonPassThrough : 1;                             // 0x05F8(0x0004) (Edit)
	unsigned long                                      bReplicateDeathSound : 1;                                 // 0x05F8(0x0004) (Edit)
	unsigned long                                      bAllowPawnBoosting : 1;                                   // 0x05F8(0x0004) (Edit)
	unsigned long                                      bAllowNegativeStatusAffect : 1;                           // 0x05F8(0x0004) (Edit)
	unsigned long                                      GiveScoreDuringBossFight : 1;                             // 0x05F8(0x0004) (Edit)
	unsigned long                                      bDestroyAllManaTokensBeforeDrop : 1;                      // 0x05F8(0x0004) (Edit)
	unsigned long                                      bDroppingTokensOverLimit : 1;                             // 0x05F8(0x0004) (Edit)
	unsigned long                                      GiveScoreToAllPlayers : 1;                                // 0x05F8(0x0004) (Edit)
	unsigned long                                      bDoDamageFlashing : 1;                                    // 0x05F8(0x0004) (Edit)
	unsigned long                                      ZeroVelocityOnDeath : 1;                                  // 0x05F8(0x0004) (Edit)
	unsigned long                                      bWantFallingPhysicsOnDeath : 1;                           // 0x05F8(0x0004) (Edit)
	unsigned long                                      bZeroCollisionOnDeath : 1;                                // 0x05F8(0x0004) (Edit)
	unsigned long                                      bDropManaDisableMassiveTokenOnNormalDif : 1;              // 0x05F8(0x0004) (Edit)
	unsigned long                                      bScaleManaByPlayers : 1;                                  // 0x05F8(0x0004) (Edit)
	unsigned long                                      bAllowOtherAnimationsAfterDeath : 1;                      // 0x05F8(0x0004)
	unsigned long                                      bCantUseHeroAbilities : 1;                                // 0x05F8(0x0004)
	unsigned long                                      bEnraged : 1;                                             // 0x05F8(0x0004) (Transient)
	unsigned long                                      bDidSetPlayerTargetableStatus : 1;                        // 0x05F8(0x0004) (Transient)
	unsigned long                                      bCanBePlayerEnemy : 1;                                    // 0x05F8(0x0004) (Net, Transient)
	unsigned long                                      bIgnoreTargetingOnSpawnIn : 1;                            // 0x05F8(0x0004) (Edit)
	unsigned long                                      bAllowSuction : 1;                                        // 0x05F8(0x0004) (Edit)
	unsigned long                                      bChainIgnore : 1;                                         // 0x05F8(0x0004) (Transient)
	unsigned long                                      bIsWebbed : 1;                                            // 0x05F8(0x0004) (Transient)
	unsigned long                                      bForceLineOfSight : 1;                                    // 0x05F8(0x0004) (Edit)
	int                                                ScoreWorth;                                               // 0x05FC(0x0004) (Edit)
	float                                              PlayerTargetingDesirability;                              // 0x0600(0x0004) (Edit)
	float                                              TowerTargetingDesirability;                               // 0x0604(0x0004) (Edit)
	float                                              MaxFloatingDamage;                                        // 0x0608(0x0004) (Edit)
	float                                              HurtAnimBlendTimeIn;                                      // 0x060C(0x0004) (Edit)
	float                                              DamageFlashingDuration;                                   // 0x0610(0x0004) (Edit)
	float                                              DamageFlashingFadeExponent;                               // 0x0614(0x0004) (Edit)
	class ADunDefManaToken*                            SmallManaTokenTemplate;                                   // 0x0618(0x0004) (Edit)
	class ADunDefManaToken*                            MinorManaTokenTemplate;                                   // 0x061C(0x0004) (Edit)
	class ADunDefManaToken*                            LargeManaTokenTemplate;                                   // 0x0620(0x0004) (Edit)
	class ADunDefManaToken*                            SuperManaTokenTemplate;                                   // 0x0624(0x0004) (Edit)
	class ADunDefManaToken*                            DuperManaTokenTemplate;                                   // 0x0628(0x0004) (Edit)
	class ADunDefManaToken*                            MassiveManaTokenTemplate;                                 // 0x062C(0x0004) (Edit)
	int                                                NumSmallManaTokens;                                       // 0x0630(0x0004) (Edit)
	int                                                NumMinorManaTokens;                                       // 0x0634(0x0004) (Edit)
	int                                                NumLargeManaTokens;                                       // 0x0638(0x0004) (Edit)
	int                                                NumSuperManaTokens;                                       // 0x063C(0x0004) (Edit)
	int                                                NumDuperManaTokens;                                       // 0x0640(0x0004) (Edit)
	int                                                NumMassiveManaTokens;                                     // 0x0644(0x0004) (Edit)
	float                                              ManaTokenImpulseMagnitude;                                // 0x0648(0x0004) (Edit)
	float                                              ManaTokenTorqueMagnitude;                                 // 0x064C(0x0004) (Edit)
	float                                              HurtLocationBoundsMultiplier;                             // 0x0650(0x0004) (Edit)
	float                                              HurtLocationBoundsAddition;                               // 0x0654(0x0004) (Edit)
	struct FVector                                     ManaTokenImpulseUpOffset;                                 // 0x0658(0x000C) (Edit)
	struct FName                                       RootSocket;                                               // 0x0664(0x0008) (Edit)
	float                                              EnsnareMovementSpeedMultiplierExponent;                   // 0x066C(0x0004) (Edit)
	float                                              EnsnareAnimSpeedMultiplierExponent;                       // 0x0670(0x0004) (Edit)
	float                                              DamageFlashingIntensity;                                  // 0x0674(0x0004) (Edit)
	float                                              TargetingAttackRangeOffset;                               // 0x0678(0x0004) (Edit)
	float                                              EnemyTargetingDesirability;                               // 0x067C(0x0004) (Edit)
	TArray<float>                                      PlayerManaScales;                                         // 0x0680(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        DamageMatInstanceIndices;                                 // 0x068C(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           MyDamageMatInstances;                                     // 0x0698(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               FootBoneNames;                                            // 0x06A4(0x000C) (Edit, NeedCtorLink)
	float                                              PawnDamageResistanceModifier;                             // 0x06B0(0x0004) (Edit)
	float                                              PawnEnemyDrainEffectivenessMultiplier;                    // 0x06B4(0x0004) (Edit)
	float                                              PawnEnemyDrainResistanceEffectivenessMultiplier;          // 0x06B8(0x0004) (Edit)
	float                                              LastFlashingDamageTime;                                   // 0x06BC(0x0004) (Transient)
	class AActor*                                      LastPlayHurtDamageCauser;                                 // 0x06C0(0x0004) (Transient)
	float                                              LastPlayHurtTime;                                         // 0x06C4(0x0004) (Transient)
	float                                              LastDarknessTime;                                         // 0x06C8(0x0004)
	float                                              LastTakeDamageTime;                                       // 0x06CC(0x0004)
	float                                              LastFloatingTakeDamageTime;                               // 0x06D0(0x0004)
	int                                                NumVeryRecentDamages;                                     // 0x06D4(0x0004) (Transient)
	float                                              DamageMultiplierAdditional;                               // 0x06D8(0x0004) (Net)
	TArray<unsigned char>                              IsPlayingUninterruptableAnimation;                        // 0x06DC(0x000C) (NeedCtorLink)
	float                                              LastSpikyBlockadeDamageTime;                              // 0x06E8(0x0004) (Transient)
	float                                              LastHurtEffectTime;                                       // 0x06EC(0x0004) (Transient)
	float                                              LastTookDamageTime;                                       // 0x06F0(0x0004) (Transient)
	float                                              DiedTime;                                                 // 0x06F4(0x0004) (Transient)
	class USoundCue*                                   OverridePawnFootStepSound;                                // 0x06F8(0x0004) (Transient)
	class UParticleSystem*                             OverridePawnFootStepParticle;                             // 0x06FC(0x0004) (Transient)
	class UClass*                                      DiedFromDamageType;                                       // 0x0700(0x0004) (Transient)
	struct FAuraEffect                                 AuraEffects[0xA];                                         // 0x0704(0x0008)
	class UParticleSystemComponent*                    AuraPSC[0xA];                                             // 0x0754(0x0004) (ExportObject, Component, EditInline)
	TArray<class ADunDefTower_Aura*>                   MyAffectingAuras;                                         // 0x077C(0x000C) (NeedCtorLink)
	struct FName                                       AuraEffectSocket;                                         // 0x0788(0x0008) (Edit)
	float                                              AuraEffectScale;                                          // 0x0790(0x0004) (Edit)
	float                                              GlobalAuraEffectScale;                                    // 0x0794(0x0004) (Edit)
	float                                              AnimSpeedMultiplier;                                      // 0x0798(0x0004) (Edit, Net)
	float                                              DamageMultiplierStrengthDrain;                            // 0x079C(0x0004) (Net)
	unsigned char                                      KillerProjectileIndex;                                    // 0x07A0(0x0001)
	TEnumAsByte<EStatusEffect>                         CurrentStatusEffect;                                      // 0x07A1(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x07A2(0x0002) MISSED OFFSET
	struct FLinearColor                                HealDamageTextColor;                                      // 0x07A4(0x0010) (Edit)
	float                                              LightningTowerDamagePercent;                              // 0x07B4(0x0004) (Edit)
	float                                              PawnDrainDamageMultiplier;                                // 0x07B8(0x0004) (Net)
	float                                              PawnDrainDamageResistanceMultiplier;                      // 0x07BC(0x0004)
	TArray<TScriptInterface<class UPawnBoosterInterface>> PawnBoosters;                                             // 0x07C0(0x000C) (Transient, NeedCtorLink)
	TArray<TScriptInterface<class UPawnBoosterInterface>> PawnDeBoosters;                                           // 0x07CC(0x000C) (Transient, NeedCtorLink)
	TArray<class ADunDefTower_ChainLightning*>         ChainingTowers;                                           // 0x07D8(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     LastBumpLocation;                                         // 0x07E4(0x000C) (Transient)
	int                                                TicksStuckInAnotherActor;                                 // 0x07F0(0x0004) (Transient)
	int                                                MinTicksStuckBeforeUncolliding;                           // 0x07F4(0x0004) (Edit)
	struct FsLastDamageInfo                            LastDamageInfo;                                           // 0x07F8(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPawn");
		return ptr;
	}


	void GetBuffedStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bAdditivePass, float* buffVal);
	unsigned long HasStatusEffect(TEnumAsByte<EStatusEffect> StatusToCheck);
	void RemoveStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AddStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AdjustDealtDamage(class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum);
	void OnBuffRemoved(class UObject* BuffRemoved);
	void OnBuffAdded(class UObject* BuffAdded);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
	unsigned long ForceLineOfSight();
	float GetLightningTowerDamagePercent();
	void setIsWebbed(unsigned long isWebbed);
	unsigned long isWebbed();
	unsigned long GetChainIgnore();
	void SetChainIgnore(unsigned long ignore);
	unsigned long IsBeingChainedBy(class ADunDefTower_ChainLightning* Tower);
	void RemoveFromChainingTowers(class ADunDefTower_ChainLightning* Tower);
	void AddToChainingTowers(class ADunDefTower_ChainLightning* Tower);
	unsigned long AllowSuction();
	struct FVector GetLocation();
	void WeaponSet(class AWeapon* NewWeapon);
	struct FVector GetEffectSocketPosition();
	struct FName GetEffectsSocketName();
	unsigned long AllowsBoosting(const TScriptInterface<class UPawnBoosterInterface>& aBooster);
	unsigned long AllowNegativeStatusAffecting();
	float GetBoostAmount(TEnumAsByte<EPawnBoostType> boostType);
	TScriptInterface<class UPawnBoosterInterface> GetPawnDeBooster(TEnumAsByte<EPawnBoostType> boostType, float* boostValue);
	void RemovePawnDeBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster, int indexOverride);
	void AddPawnDeBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster);
	TScriptInterface<class UPawnBoosterInterface> GetPawnBooster(TEnumAsByte<EPawnBoostType> boostType, float* boostValue);
	void RemoveAllPawnBoosters();
	void RemovePawnBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster, int indexOverride);
	void AddPawnBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster);
	unsigned long ForceMoveActor(class AActor* Mover, const struct FVector& NewLoc);
	class UPrimitiveComponent* GetOverrideTargetComponent();
	void SetupDamageFlashing();
	void UpdateDamageFlashing();
	void LocalTookDamage(int DamageAmount, const struct FVector& atPosition, class UClass* fromDamageType);
	unsigned long AllowEnemyDrain();
	void SetExtraMovementMult(float newMult);
	void SetPawnDrainResistanceMult(float newMult);
	void SetPawnDrainDmgMult(float newMult);
	void SetWeaponSpeedMultiplier(float newMult);
	unsigned long AllowDarknessIgnorance();
	unsigned long AllowMageHealing();
	void PossessedBy(class AController* C, unsigned long bVehicleTransition);
	unsigned long AllowTrapSpringing(class ADunDefTower_DetonationType* trap);
	void JumpOffPawn();
	void BaseChange();
	void HealPctOfMaxHealth(float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	int GetHealth(unsigned long bGetMax);
	float GetMass();
	void DoCrushed(class AActor* Victim);
	void CrushedBy(class APawn* OtherPawn);
	void SetEnraged(unsigned long bActive);
	int GetScoreWorth();
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	float GetPawnDamageResistanceModifier();
	float GetPawnDamageModifier(unsigned long bDontIncludeAbilities);
	void StopAuraEffects();
	void PSCFinished(class UParticleSystemComponent* PSystem);
	class UParticleSystemComponent* SpawnAttachParticleEffect(class UParticleSystem* particleEffect);
	void RemoveAllAuraEffects();
	void HandleAuraEffects();
	unsigned long AllowEnrage();
	unsigned long AllowEnsnare();
	void RemoveAuraEffect(class ADunDefTower_Aura* AuraInstance);
	void AddAuraEffect(class ADunDefTower_Aura* AuraInstance);
	unsigned long IsFirstAuraOfType(class ADunDefTower_Aura* AuraInstance);
	int GetNumberOfAurasOfType(class ADunDefTower_Aura* AuraInstance);
	int GetNumberOfAurasOfClass(class UClass* AuraClass);
	void HandleDamageTypeEffects(class UClass* ForDamageType, const struct FVector& HitLocation);
	void AnimNotify_ResetWeaponSwingDamage();
	void AnimNotify_StopWeaponSwingDamage();
	void AnimNotify_StartWeaponSwingDamage();
	void EncroachedBy(class AActor* Other);
	void AddToScore(int Points, const struct FString& ScoreTagReason, const struct FLinearColor& ScoreTagColor);
	void PlayJumpAnimation();
	unsigned long AllowJump();
	unsigned long DoJump(unsigned long bUpdating);
	float GetJumpZ();
	float GetHealthPercent();
	class ADunDefGameReplicationInfo* GetGRI();
	void TakeFallingDamage();
	class AInventory* CreateInventoryFromTemplate(class AActor* InventoryActorTemplate, unsigned long bDoNotActivate);
	class AActor* NetSpawnLocalActor(class AActor* ActorTemplate, class AActor* theOwner, const struct FVector& Position, const struct FRotator& Orientation, float ScaleFactor, const struct FName& SpawnFromSocket, unsigned long AttachToSocket, unsigned long AttachToActor, unsigned long DontReplicate);
	void Destroyed();
	void SetPlayerTargetableStatus();
	unsigned long GetCanBePlayerEnemy();
	void PostBeginPlay();
	unsigned long StopCustomAnim(float blendTimeOut, const struct FName& CustomAnimationToStop, unsigned long bReplicate, unsigned long bForceReplication);
	float PlayCustomAnim(const struct FName& inAnim, float blendTimeIn, unsigned long Looping, float Speed, float BlendOutTime, unsigned long bOverride, unsigned long Replicate, unsigned long bUninterruptable, unsigned long bReplicateToOwners);
	float GetAnimSpeedMultiplier();
	void PauseAnimationAfterDeath();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	unsigned long IsDead();
	void PlayDeathHurtEffect(class UClass* DamageType, const struct FVector& HitLocation);
	struct FString GetDescriptiveName();
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	int GetScoreSwitch();
	void SpawnManaTokens(class ADunDefPawn* theInstigator, class AActor* fromActor, class ADunDefPlayer* InitialAttractor, unsigned long bIsPrivate);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void PlayHurtEffect(class UClass* DamageType, const struct FVector& HitLocation);
	void ClientTakeDamage(int DamageAmount, class APawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	unsigned long IsCurrentlyPlayingHurtAnimation();
	void PlayHurtSound(class UClass* DamageType, const struct FVector& HitLocation);
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	struct FVector GetHurtLocation(const struct FVector& HitLocation);
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void ShowHealingFloatingNumbers(int howMuch);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	unsigned long ShouldPlayHurtAnimation(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, int* Result);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void PlayShootAnimation(unsigned long isBigShoot, unsigned long Replicate, unsigned long bDontPlayAnim);
	struct FVector GetAimAtLocation(unsigned long LeadTarget, float LeadTargetProjectileSpeed, const struct FVector& LeadTargetProjectileSpawnLocation, class AActor* AimAtTargetOverride, unsigned long bDontCheckTargetingDesirability);
	void PlayFootStepSound(int FootDown);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void StopCharacterLoopingEmitter();
	void SpawnCharacterNonLoopingEmitter(class ADunDefEmitterSpawnable* Template, unsigned long bAttachToSocket, const struct FName& SocketName);
	void StartCharacterLoopingEmitter(class ADunDefEmitterSpawnable* Template);
	void OnDestroy_RemoveFromTargetableList();
	void OnPostBeginPlay_AddToTargetableList();
	void UnregisterAttacker(class ADunDefEnemyController* forController);
	void RegisterAttacker(class ADunDefEnemyController* forController);
	struct FVector GetInterpolatedTargetingLocation(class AActor* RequestedBy);
	struct FVector GetTargetingLocation(class AActor* RequestedBy);
	float GetAttackRangeOffset();
	unsigned long IgnoreFriendlyFireDamage(const TScriptInterface<class UDunDefTargetableInterface>& instigatorActor, class AController* OptionalController);
	int GetTargetingTeam();
	unsigned long ForceFriendlyFire(class AActor* Target);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefWeapon
// 0x01DE (0x04EA - 0x030C)
class ADunDefWeapon : public AWeapon
{
public:
	class ADunDefProjectile*                           ProjectileTemplate;                                       // 0x030C(0x0004) (Edit)
	TArray<class ADunDefProjectile*>                   ExtraProjectileTemplates;                                 // 0x0310(0x000C) (Edit, NeedCtorLink)
	struct FName                                       WeaponAttachmentSocketName;                               // 0x031C(0x0008) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0324(0x000C) (Edit)
	struct FName                                       WeaponMuzzleSocketName;                                   // 0x0330(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     RepairingTowerWeaponEmitterTemplate;                      // 0x0338(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     UpgradingTowerWeaponEmitterTemplate;                      // 0x033C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     HealingSelfWeaponEmitterTemplate;                         // 0x0340(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SummoningTowerWeaponEmitterTemplate;                      // 0x0344(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingPlaceTowerWeaponEmitterTemplate;                  // 0x0348(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingRepairTowerWeaponEmitterTemplate;                 // 0x034C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingSellTowerWeaponEmitterTemplate;                   // 0x0350(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     DetonatingTrapsEmitterTemplate;                           // 0x0354(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SellTowerEmitterTemplate;                                 // 0x0358(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ManaBombCastingEmitterTemplate;                           // 0x035C(0x0004) (Edit)
	int                                                BaseDamage;                                               // 0x0360(0x0004) (Edit)
	float                                              MaxStepTowardsRange;                                      // 0x0364(0x0004) (Edit)
	TArray<struct FName>                               ElementalEffectAttachmentSockets;                         // 0x0368(0x000C) (Edit, NeedCtorLink)
	TArray<class UParticleSystemComponent*>            ElementalEffectParticleComponents;                        // 0x0374(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	float                                              TheElementalEffectMinScale;                               // 0x0380(0x0004) (Edit)
	float                                              TheElementalEffectMaxScale;                               // 0x0384(0x0004) (Edit)
	float                                              TheElementalEffectMaxScaleDamageAmount;                   // 0x0388(0x0004) (Edit)
	float                                              TheElementalEffectScaleExponent;                          // 0x038C(0x0004) (Edit)
	float                                              LastFireTimeInterval;                                     // 0x0390(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     MuzzleFlashEmitterTemplate;                               // 0x0394(0x0004) (Edit)
	float                                              BaselineQualityComparisonTypeDamage;                      // 0x0398(0x0004) (Edit)
	float                                              ElementalEffectScale;                                     // 0x039C(0x0004) (Edit)
	TArray<class USoundCue*>                           AttackSounds;                                             // 0x03A0(0x000C) (Edit, NeedCtorLink)
	float                                              MaxShootOffsetYawArc;                                     // 0x03AC(0x0004) (Edit)
	float                                              ProjectileSpeedBonusMultiplier;                           // 0x03B0(0x0004) (Edit)
	float                                              ProjectileSpeedAddition;                                  // 0x03B4(0x0004) (Edit)
	float                                              WeaponDamageMultiplier;                                   // 0x03B8(0x0004) (Edit)
	unsigned long                                      bUseAdditionalProjectileDamage : 1;                       // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseInstigatorSocketForMuzzle : 1;                        // 0x03BC(0x0004) (Edit, Net)
	unsigned long                                      bSetLightToWeaponColor : 1;                               // 0x03BC(0x0004) (Edit)
	unsigned long                                      bDoForceFeedbackOnAttack : 1;                             // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseAltDamageForProjectileBaseDamage : 1;                 // 0x03BC(0x0004) (Edit)
	unsigned long                                      bSetLightToWeaponColorSecondary : 1;                      // 0x03BC(0x0004) (Edit)
	unsigned long                                      bPlayShootAnimation : 1;                                  // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseBigShootAnimation : 1;                                // 0x03BC(0x0004) (Edit)
	unsigned long                                      bSpawnMuzzleFlashOnShootAnim : 1;                         // 0x03BC(0x0004) (Edit)
	unsigned long                                      bDontSpawnMuzzleFlashInFPV : 1;                           // 0x03BC(0x0004) (Edit)
	unsigned long                                      bAutoActivate : 1;                                        // 0x03BC(0x0004) (Edit)
	unsigned long                                      bIsMeleeWeapon : 1;                                       // 0x03BC(0x0004) (Edit)
	unsigned long                                      bDontPlayAttackSoundOnShoot : 1;                          // 0x03BC(0x0004) (Edit)
	unsigned long                                      bForceToMinElementalScale : 1;                            // 0x03BC(0x0004) (Edit)
	unsigned long                                      bForceToMaxElementalScale : 1;                            // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseOffHandRot : 1;                                       // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseOffHandScale : 1;                                     // 0x03BC(0x0004) (Edit)
	unsigned long                                      bUseDamageReductionForAbilities : 1;                      // 0x03BC(0x0004) (Edit)
	unsigned long                                      bActivated : 1;                                           // 0x03BC(0x0004) (Net)
	unsigned long                                      bIsSecondary : 1;                                         // 0x03BC(0x0004) (Net, Transient)
	unsigned long                                      bElementalEffectsInited : 1;                              // 0x03BC(0x0004) (Transient)
	unsigned long                                      bOverrodeElementalEffects : 1;                            // 0x03BC(0x0004) (Net, Transient)
	unsigned long                                      bOverrideActivation : 1;                                  // 0x03BC(0x0004) (Net)
	unsigned long                                      bIgnoreProjectileOffset : 1;                              // 0x03BC(0x0004)
	unsigned long                                      bModifyParticleColourAttached : 1;                        // 0x03BC(0x0004) (Edit)
	unsigned long                                      bModifyParticleColourProjectile : 1;                      // 0x03BC(0x0004) (Edit)
	unsigned long                                      bModifyParticleColourEmitter : 1;                         // 0x03BC(0x0004) (Edit)
	unsigned long                                      bModifyParticleColourProjectileEmitter : 1;               // 0x03BC(0x0004) (Edit)
	unsigned long                                      usesColourSets : 1;                                       // 0x03BC(0x0004) (Transient)
	class UForceFeedbackWaveform*                      AttackForceFeedbackWaveForm;                              // 0x03C0(0x0004) (Edit, EditInline)
	struct FLinearColor                                MatEquipmentRatingColor;                                  // 0x03C4(0x0010) (Edit)
	float                                              MatEquipmentRatingOverlayPower;                           // 0x03D4(0x0004) (Edit)
	TArray<struct FVector>                             ProjectileSpawnOffsets;                                   // 0x03D8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FRotator>                            ProjectileRotOffsets;                                     // 0x03E4(0x000C) (Edit, NeedCtorLink)
	int                                                WeaponEquipmentQualityMaterialIndex;                      // 0x03F0(0x0004) (Edit)
	int                                                BaseTotalAmmo;                                            // 0x03F4(0x0004) (Edit)
	int                                                BaseAltDamage;                                            // 0x03F8(0x0004) (Edit)
	int                                                BaseBlockingDamageResistance;                             // 0x03FC(0x0004) (Edit)
	int                                                BaseShotsPerSecond;                                       // 0x0400(0x0004) (Edit)
	struct FString                                     ReloadString;                                             // 0x0404(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              MinimumProjectileSpeed;                                   // 0x0410(0x0004) (Edit)
	class USoundCue*                                   EquipSound;                                               // 0x0414(0x0004) (Edit)
	TArray<struct FGameDamageEntry>                    ElementalEffectEntries;                                   // 0x0418(0x000C) (Edit, Const, NeedCtorLink)
	struct FLinearColor                                ReloadNormalTextColor;                                    // 0x0424(0x0010) (Edit)
	struct FLinearColor                                ReloadNormalBarColor;                                     // 0x0434(0x0010) (Edit)
	struct FLinearColor                                ReloadReloadingTextColor;                                 // 0x0444(0x0010) (Edit)
	struct FLinearColor                                ReloadReloadingBarColor;                                  // 0x0454(0x0010) (Edit)
	float                                              NoEquipmentWeaponScaleMultiplier;                         // 0x0464(0x0004) (Edit)
	struct FRotator                                    OffhandRotOffset;                                         // 0x0468(0x000C) (Edit)
	struct FVector                                     OffHandScale;                                             // 0x0474(0x000C) (Edit)
	float                                              StoredChargePercent;                                      // 0x0480(0x0004) (Transient)
	class ADunDefEmitterSpawnable*                     CurrentSpellEmitter;                                      // 0x0484(0x0004) (Transient)
	class ADunDefEmitterSpawnable*                     SpawnEffect;                                              // 0x0488(0x0004) (Net)
	float                                              ReplicationMeshScale;                                     // 0x048C(0x0004) (Net)
	float                                              BaseMeshScale;                                            // 0x0490(0x0004)
	int                                                AdditionalDamageAmount;                                   // 0x0494(0x0004) (Net)
	class UClass*                                      AdditionalDamageType;                                     // 0x0498(0x0004) (Net)
	float                                              WeaponEquipmentQualityValue;                              // 0x049C(0x0004) (Net)
	class ADunDefEmitterSpawnable*                     PreviousSpawnEffect;                                      // 0x04A0(0x0004)
	struct FEquipmentColorSet                          WeaponColorSet;                                           // 0x04A4(0x0020) (Net)
	class UMaterialInstanceConstant*                   WeaponEquipmentQualityMIC;                                // 0x04C4(0x0004) (Transient)
	float                                              LastFireTime;                                             // 0x04C8(0x0004) (Transient)
	class UHeroEquipment*                              MyEquipmentRef;                                           // 0x04CC(0x0004) (Transient)
	float                                              EquipmentSwingSpeedMultiplier;                            // 0x04D0(0x0004) (Transient)
	float                                              WeaponSpeedMultiplier;                                    // 0x04D4(0x0004) (Net)
	TArray<unsigned char>                              bIsFireDown;                                              // 0x04D8(0x000C) (NeedCtorLink)
	struct FColor                                      primaryColour;                                            // 0x04E4(0x0004) (Transient)
	TEnumAsByte<EElementTrait>                         PrimaryElement;                                           // 0x04E8(0x0001) (Net, Transient)
	TEnumAsByte<EElementTrait>                         SecondaryElement;                                         // 0x04E9(0x0001) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWeapon");
		return ptr;
	}


	class UClass* GetWeaponDamageType(unsigned long bGetAltDamageType);
	void SetOwnerNoSee(unsigned long ownerNoSee);
	void ClearAttachedComponents();
	void HideWeapon();
	unsigned long CanUseAbility(class ADunDefPlayerAbility* ability);
	float GetWeaponSpeedMult();
	float GetFireInterval(unsigned char FireModeNum);
	void SetWeaponSpeedMultiplier(float newMult);
	unsigned long HasRecentlyFired(float timeSinceLastFire, class ADunDefPlayerController* forController);
	void DoAttackForceFeedback(class ADunDefPlayerController* theController, int FireMode);
	void UsedAbility(class ADunDefPlayerAbility* ability);
	struct FString GetReloadString();
	unsigned long GetReloadingColors(struct FLinearColor* BarColor, struct FLinearColor* TextColor);
	unsigned long IsReloading();
	float GetReloadPercent();
	unsigned long IsOccupied();
	int GetMaxAmmo();
	int GetAmmo();
	float GetAmmoPercent();
	unsigned long UsesAmmo();
	void DoKnockback();
	unsigned long IsLocallyOwned();
	unsigned long IsAuthority();
	unsigned long HasInstigatorController();
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	unsigned long ShouldPlayHurtAnimation(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, int* Result);
	float GetProjectileDamage();
	void DrawHUD(class ADunDefHUD* H);
	void BeginFire(unsigned char FireModeNum);
	void PawnTookDamage();
	void DoWeaponFiredEffect();
	void PlayedShootAnimation(unsigned long isBigShot);
	void STATIC_StaticSetWeaponEquipmentColorSet(class UMaterialInstanceConstant* matInstance, struct FEquipmentColorSet* weaponColors);
	void STATIC_StaticSetWeaponEquipmentQuality(class ADunDefWeapon* weaponTemplate, class UMaterialInstanceConstant* matInstance, float qualityValue);
	void SetWeaponEquipmentColorSet(const struct FEquipmentColorSet& weaponColors);
	void SetWeaponEquipmentQuality(float qualityValue);
	void AnimNotify_ResetWeaponSwingDamage();
	void AnimNotify_StopWeaponSwingDamage();
	void AnimNotify_StartWeaponSwingDamage();
	void ClientCheckBase();
	void ClientCheckInstigator();
	void DoAutoActivateChecks();
	void PostBeginPlay();
	void DetachOverriddenElementalEffects();
	void DoOverrideElementalEffects(class UParticleSystem* elementalEffect, const struct FName& attachSocket, float effectScale);
	void ActivateElementalEffects();
	void UninitElementalEffect();
	void InitializeElementalEffect();
	void SetScaleForHeroEquipment();
	void InitializeForHeroEquipment(class UHeroEquipment* weaponEquipment);
	int GetEquipmentBlockingBonus();
	int GetEquipmentShotsPerSecondBonus();
	int GetEquipmentReloadSpeedBonus();
	int GetEquipmentTotalAmmoBonus();
	int GetEquipmentAdditionalDamageAmount();
	class UClass* GetEquipmentAdditionalDamageType();
	int GetEquipmentChargeSpeedBonus();
	int GetEquipmentKnockbackBonus();
	int GetEquipmentProjectileSpeedBonus();
	int GetEquipmentNumProjectilesBonus();
	int GetEquipmentAltDamageBonus();
	int GetEquipmentDamageBonus();
	float GetProtonChargeBlastDamageMultiplier();
	int GetEquipmentDamageMultiplier();
	float GetHeroDamageModifier();
	float GetProjectileSpeed(class ADunDefProjectile* projectileArch);
	void ShootProjectiles(int theFireMode);
	void CustomFire(int theFireMode);
	void GetProjectileSpawnTransformation(int Index, class AActor* AimAtTarget, unsigned long bForceNoRotClamping, struct FVector* OutLocation, struct FRotator* OutRotation);
	int GetNumProjectiles();
	struct FRotator GetProjectileSpawnRotation(const struct FVector& ProjectileShotLocation, unsigned long ForceNoRotClamping, class AActor* AimAtTargetOverride);
	struct FVector GetMuzzleLoc();
	float GetTotalAdditionalDamage();
	float GetTotalDamageNormalized(float Normalizer);
	float GetTotalDamage();
	void GetMuzzleTransformation(struct FVector* muzzleLoc, struct FRotator* MuzzleRot);
	void UnHideAdditionalAttachments();
	void HideAdditionalAttachments();
	unsigned long HasAnyAmmo();
	unsigned long HasAmmo(unsigned char FireModeNum, int Amount);
	void DetachWeapon();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName, unsigned long bDontPlaySound);
	void PutDownWeapon();
	void Activate();
	void Destroyed();
	void StopSpellEmitter();
	void StartSpellEmitter(class ADunDefEmitterSpawnable* Template, unsigned long DontSetAsPrimaryEffect, unsigned long IsSpawnEffect, unsigned long bForceSpawnOnWeapon);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefWeapon_MeleeSword
// 0x010A (0x05F4 - 0x04EA)
class ADunDefWeapon_MeleeSword : public ADunDefWeapon
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	float                                              SpeedMultiplier;                                          // 0x04EC(0x0004) (Edit)
	float                                              ExtraSpeedMultiplier;                                     // 0x04F0(0x0004) (Edit)
	float                                              DamageMultiplier;                                         // 0x04F4(0x0004) (Edit)
	float                                              MomentumMultiplier;                                       // 0x04F8(0x0004) (Edit)
	float                                              DamageIncreaseForSwingSpeedFactor;                        // 0x04FC(0x0004) (Edit)
	struct FName                                       BlockingAnimationName;                                    // 0x0500(0x0008) (Edit)
	struct FName                                       BlockingFlinchAnimationName;                              // 0x0508(0x0008) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0510(0x0004) (Edit)
	float                                              SpeedMultiplierDamageExponent;                            // 0x0514(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x0518(0x000C) (Edit)
	TArray<struct FMeleeSwingInfo>                     MeleeSwingInfos;                                          // 0x0524(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      BaseMeleeDamageType;                                      // 0x0530(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     BlockingSparksEffect;                                     // 0x0534(0x0004) (Edit)
	class USoundCue*                                   EnableBlockingSound;                                      // 0x0538(0x0004) (Edit)
	class USoundCue*                                   DisableBlockingSound;                                     // 0x053C(0x0004) (Edit)
	float                                              MaximumBlockingAngle;                                     // 0x0540(0x0004) (Edit)
	float                                              BlockingMomentumExponent;                                 // 0x0544(0x0004) (Edit)
	float                                              KnockbackBonusLinearScale;                                // 0x0548(0x0004) (Edit)
	float                                              KnockbackBonusExpScale;                                   // 0x054C(0x0004) (Edit)
	float                                              MinimumReblockInterval;                                   // 0x0550(0x0004) (Edit)
	float                                              MinimumSwingDamageTime;                                   // 0x0554(0x0004) (Edit)
	float                                              MinimumSwingTime;                                         // 0x0558(0x0004) (Edit)
	float                                              AdditionalMomentumMultiplier;                             // 0x055C(0x0004) (Edit)
	float                                              MaxMomentumMultiplierByDamage;                            // 0x0560(0x0004) (Edit)
	float                                              MaxTotalMomentumMultiplier;                               // 0x0564(0x0004) (Edit)
	float                                              MaximumBlockingPercent;                                   // 0x0568(0x0004) (Edit)
	float                                              ProjectileDamageHeroStatExponentMultiplier;               // 0x056C(0x0004) (Edit)
	float                                              MinimumShootProjectileDotProduct;                         // 0x0570(0x0004) (Edit)
	unsigned long                                      bShootMeleeProjectile : 1;                                // 0x0574(0x0004) (Edit)
	unsigned long                                      bOnlyShootProjectileAtFullHealth : 1;                     // 0x0574(0x0004) (Edit)
	unsigned long                                      bSlowEnemyTarget : 1;                                     // 0x0574(0x0004) (Edit)
	unsigned long                                      bWeakenEnemyTarget : 1;                                   // 0x0574(0x0004) (Edit)
	unsigned long                                      bUseWeaponDamageForProjectileDamage : 1;                  // 0x0574(0x0004) (Edit)
	unsigned long                                      IsSwingingWeapon : 1;                                     // 0x0574(0x0004)
	unsigned long                                      StartedSwingDamage : 1;                                   // 0x0574(0x0004)
	unsigned long                                      StoppedSwingDamage : 1;                                   // 0x0574(0x0004)
	unsigned long                                      bIsBlocking : 1;                                          // 0x0574(0x0004)
	unsigned long                                      bReplicatedIsBlocking : 1;                                // 0x0574(0x0004) (Net)
	unsigned long                                      bDidShootMeleeProjectile : 1;                             // 0x0574(0x0004) (Transient)
	unsigned long                                      bIsInSpecialAnimation : 1;                                // 0x0574(0x0004) (Transient)
	float                                              SlowEnemyTargetPercentage;                                // 0x0578(0x0004) (Edit)
	float                                              WeakenEnemyTargetPercentage;                              // 0x057C(0x0004) (Edit)
	float                                              EnemyClearSlowTime;                                       // 0x0580(0x0004) (Edit)
	float                                              EnemyClearWeakenTime;                                     // 0x0584(0x0004) (Edit)
	float                                              WeaponProjectileDamageMultiplier;                         // 0x0588(0x0004) (Edit)
	float                                              LastSwingDamageTime;                                      // 0x058C(0x0004) (Transient)
	struct FMeleeSwingInfo                             CurrentMeleeSwingInfo;                                    // 0x0590(0x002C)
	int                                                CurrentMeleeSwingInfoIndex;                               // 0x05BC(0x0004)
	float                                              LastSwingTime;                                            // 0x05C0(0x0004)
	float                                              LastBlockingEndTime;                                      // 0x05C4(0x0004)
	float                                              TimeFromRecentHealingOnBlock;                             // 0x05C8(0x0004)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x05CC(0x000C) (NeedCtorLink)
	TArray<struct FName>                               MeleeSwingSockets;                                        // 0x05D8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             PreviousMeleeSwingLocations;                              // 0x05E4(0x000C) (NeedCtorLink)
	class AActor*                                      StartedSwingAimTarget;                                    // 0x05F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWeapon_MeleeSword");
		return ptr;
	}


	class UClass* GetWeaponDamageType(unsigned long bGetAltDamageType);
	float GetProjectileDamage();
	void ShootMeleeProjectile(class AActor* projTarget);
	void SendToFiringState(unsigned char FireModeNum);
	float GetMomentumMultiplier();
	void BlockedHit(class UClass* DamageType, const struct FVector& HitLocation);
	float GetBlockingDamageResistancePercent();
	float GetHealAmount(class UHeroEquipment* HealingShield);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	unsigned long ShouldPlayHurtAnimation(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, int* Result);
	unsigned long BlocksHit(class AController* InstigatedBy, const struct FVector& HitLocation);
	void DetachWeapon();
	void CustomFire(int theFireMode);
	void CheckDisableBlocking();
	void CheckEnableBlocking();
	void ServerStopBlock();
	void ServerStartBlock();
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	unsigned long CanUseAbility(class ADunDefPlayerAbility* ability);
	void DisableBlocking();
	void CheckUpdateBlocking();
	void EnableBlocking();
	void StopSwingingWeapon();
	void PawnTookDamage();
	float GetTotalDamage();
	void DoMeleeAttack();
	struct FVector GetMeleeSwingLocation(const struct FName& SocketName);
	void DoSwinging(unsigned long bForceSwing, unsigned long bOverrideExtent, const struct FVector& extentOverride, float damageOverride, float momentumOverride, unsigned long scaleMomentumByMass, float scaleMomentumByMassExponent);
	void AnimNotify_StopWeaponSwingDamage();
	void ResetSwing();
	void AnimNotify_ResetWeaponSwingDamage();
	void AnimNotify_StartWeaponSwingDamage();
	void Tick(float DeltaTime);
	void PostBeginPlay();
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefPlayer
// 0x0590 (0x0D98 - 0x0808)
class ADunDefPlayer : public ADunDefPawn
{
public:
	struct FLinearColor                                BlackColor;                                               // 0x0808(0x0010) (Const)
	struct FLinearColor                                HealthyColor;                                             // 0x0818(0x0010) (Edit)
	struct FLinearColor                                UnhealthyColor;                                           // 0x0828(0x0010) (Edit)
	TArray<struct FOverlayEffectEntry>                 OverlayEffectEntries;                                     // 0x0838(0x000C) (NeedCtorLink)
	float                                              CurrentOverlayEffectOpacity;                              // 0x0844(0x0004)
	struct FLinearColor                                CurrentOverlayEffectColor;                                // 0x0848(0x0010)
	float                                              OverlayEffectOpacityInterpSpeed;                          // 0x0858(0x0004) (Edit)
	float                                              RotationInterpSpeed;                                      // 0x085C(0x0004) (Edit)
	float                                              ChaseCamRotationInterpSpeed;                              // 0x0860(0x0004) (Edit)
	float                                              PlayerInvisTargetableMaximumRange;                        // 0x0864(0x0004) (Edit)
	struct FName                                       LookAtSkelControlName;                                    // 0x0868(0x0008) (Edit)
	float                                              MaxAutoAimRange;                                          // 0x0870(0x0004) (Edit)
	float                                              MinAutoAimDot;                                            // 0x0874(0x0004) (Edit)
	float                                              AutoAimDotWeight;                                         // 0x0878(0x0004) (Edit)
	float                                              ManaTokenAttractionRadius;                                // 0x087C(0x0004) (Edit)
	float                                              LobbyManaTokenAttractionRadius;                           // 0x0880(0x0004) (Edit)
	float                                              NightmareModePlayerHealthMultiplier;                      // 0x0884(0x0004) (Edit)
	float                                              WaveStartAnimBlendTime;                                   // 0x0888(0x0004) (Edit)
	float                                              ManaTokenCollectionRadius;                                // 0x088C(0x0004) (Edit)
	float                                              RemoteManaTokenCollectionRadius;                          // 0x0890(0x0004) (Edit)
	float                                              HoverInterval;                                            // 0x0894(0x0004) (Edit)
	float                                              InversePlayerSkelLookAtYawMultiplier;                     // 0x0898(0x0004) (Edit)
	float                                              InversePlayerSkelLookAtPitchMultiplier;                   // 0x089C(0x0004) (Edit)
	float                                              ManaTokenAttractionForce;                                 // 0x08A0(0x0004) (Edit)
	float                                              MaxCompetitiveFloatingNameDistance;                       // 0x08A4(0x0004) (Edit)
	float                                              AutoPickTargetDotWeight;                                  // 0x08A8(0x0004) (Edit)
	float                                              AbsoluteMaxAutoAimRange;                                  // 0x08AC(0x0004) (Edit)
	float                                              CostOfRepairMaxHealthMultiplier;                          // 0x08B0(0x0004) (Edit)
	float                                              CostOfRepairMaxManaMultiplier;                            // 0x08B4(0x0004) (Edit)
	float                                              HeroTalkingSize;                                          // 0x08B8(0x0004) (Edit)
	float                                              MyHeroTalkingOffset;                                      // 0x08BC(0x0004) (Edit)
	float                                              GameLimitProjectilesRangeMultiplier;                      // 0x08C0(0x0004) (Edit)
	float                                              DamageResistanceMomentumReductionExponent;                // 0x08C4(0x0004) (Edit)
	float                                              InfiniteBuildPhaseSpeedMultiplier;                        // 0x08C8(0x0004) (Edit)
	struct FVector                                     FloatingNameOffset;                                       // 0x08CC(0x000C) (Edit)
	float                                              CostOfTotalRepair;                                        // 0x08D8(0x0004) (Edit)
	float                                              SelfHealRepairTimeExponent;                               // 0x08DC(0x0004) (Edit)
	float                                              TimeOfTotalRepair;                                        // 0x08E0(0x0004) (Edit)
	struct FName                                       ShootAnimation;                                           // 0x08E4(0x0008) (Edit)
	struct FName                                       BigShootAnimation;                                        // 0x08EC(0x0008) (Edit)
	struct FName                                       RespawnAnimation;                                         // 0x08F4(0x0008) (Edit)
	struct FName                                       DetonateTrapsAnimation;                                   // 0x08FC(0x0008) (Edit)
	struct FName                                       SellTowerAnimation;                                       // 0x0904(0x0008) (Edit)
	struct FName                                       PickupItemAnimation;                                      // 0x090C(0x0008) (Edit)
	struct FName                                       ReloadAnimation;                                          // 0x0914(0x0008) (Edit)
	struct FName                                       CallOutAnimation;                                         // 0x091C(0x0008) (Edit)
	struct FName                                       TowerPlacingAnimation;                                    // 0x0924(0x0008) (Edit)
	struct FName                                       LevelUpAnimation;                                         // 0x092C(0x0008) (Edit)
	struct FName                                       FlagAttachmentSocket;                                     // 0x0934(0x0008) (Edit)
	struct FName                                       InversePlayerSkelLookAtControllerName;                    // 0x093C(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     RespawnEffect;                                            // 0x0944(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     DestroyedEffect;                                          // 0x0948(0x0004) (Edit)
	class USoundCue*                                   LandedSound;                                              // 0x094C(0x0004) (Edit)
	class USoundCue*                                   PlayerSpawnYell;                                          // 0x0950(0x0004) (Edit)
	float                                              MaxZVelocityForLandedSound;                               // 0x0954(0x0004) (Edit)
	unsigned long                                      UseCorrectSkelControlAxes : 1;                            // 0x0958(0x0004) (Edit)
	unsigned long                                      UseNegativeRollAndPositiveLookAxes : 1;                   // 0x0958(0x0004) (Edit)
	unsigned long                                      UseAltIncorrectSkelControlAxes : 1;                       // 0x0958(0x0004) (Edit)
	unsigned long                                      bAllowHover : 1;                                          // 0x0958(0x0004) (Edit)
	unsigned long                                      bDoesShootAnimOverride : 1;                               // 0x0958(0x0004) (Edit)
	unsigned long                                      bIsHostPlayer : 1;                                        // 0x0958(0x0004) (Net, Transient)
	unsigned long                                      bIsPureStrategy : 1;                                      // 0x0958(0x0004) (Net, Transient)
	unsigned long                                      bDisableJumpAnimation : 1;                                // 0x0958(0x0004) (Net, Transient)
	unsigned long                                      bDisableSkelControl : 1;                                  // 0x0958(0x0004) (Net, Transient)
	unsigned long                                      bDisableMeleeAttacking : 1;                               // 0x0958(0x0004) (Net, Transient)
	unsigned long                                      bBlockedLastHit : 1;                                      // 0x0958(0x0004) (Transient)
	unsigned long                                      bCleaningUpPlayer : 1;                                    // 0x0958(0x0004) (Transient)
	unsigned long                                      bPlayedDestroyedEffect : 1;                               // 0x0958(0x0004) (Transient)
	unsigned long                                      bWantsHovering : 1;                                       // 0x0958(0x0004) (Transient)
	unsigned long                                      bCanHover : 1;                                            // 0x0958(0x0004) (Transient)
	unsigned long                                      bIsHovering : 1;                                          // 0x0958(0x0004) (Transient)
	unsigned long                                      bAllowCollectingOwnTokens : 1;                            // 0x0958(0x0004) (Transient)
	unsigned long                                      bSupportsWeaponSwap : 1;                                  // 0x0958(0x0004)
	unsigned long                                      DoRespawn : 1;                                            // 0x0958(0x0004) (Net)
	unsigned long                                      bDisableJump : 1;                                         // 0x0958(0x0004) (Edit, Net)
	unsigned long                                      bPlayedRespawnEffect : 1;                                 // 0x0958(0x0004) (Transient)
	unsigned long                                      bCallingOut : 1;                                          // 0x0958(0x0004) (Net)
	unsigned long                                      bForceWeaponSpellEffectSocket : 1;                        // 0x0958(0x0004) (Edit)
	unsigned long                                      bWantsHitInfo : 1;                                        // 0x0958(0x0004) (Edit)
	unsigned long                                      bShowWeapons : 1;                                         // 0x0958(0x0004) (Edit)
	unsigned long                                      bUseOverrideCalloutLoc : 1;                               // 0x0958(0x0004) (Transient)
	unsigned long                                      bAllowOverlordPickup : 1;                                 // 0x0958(0x0004) (Edit)
	float                                              PlayerGroundSpeed;                                        // 0x095C(0x0004) (Edit, Net)
	class UFont*                                       FloatingPlayerNameFont;                                   // 0x0960(0x0004) (Edit)
	float                                              FloatingPlayerNameScale;                                  // 0x0964(0x0004) (Edit)
	float                                              SelectHeroMeshScale;                                      // 0x0968(0x0004) (Edit)
	struct FVector                                     SelectHeroTranslationOffset;                              // 0x096C(0x000C) (Edit)
	class ADunDefHUD*                                  HudTemplate;                                              // 0x0978(0x0004) (Edit)
	TArray<struct FString>                             HUDDeathStrings;                                          // 0x097C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      DiedMessageColor;                                         // 0x0988(0x0004) (Edit)
	float                                              StatMultInitial_HeroCastingRate;                          // 0x098C(0x0004) (Edit)
	float                                              StatExpInitial_HeroCastingRate;                           // 0x0990(0x0004) (Edit)
	float                                              StatMultFull_HeroCastingRate;                             // 0x0994(0x0004) (Edit)
	float                                              StatExpFull_HeroCastingRate;                              // 0x0998(0x0004) (Edit)
	float                                              StatMultInitial_HeroCastingRate_Competitive;              // 0x099C(0x0004) (Edit)
	float                                              StatExpInitial_HeroCastingRate_Competitive;               // 0x09A0(0x0004) (Edit)
	float                                              StatMultFull_HeroCastingRate_Competitive;                 // 0x09A4(0x0004) (Edit)
	float                                              StatExpFull_HeroCastingRate_Competitive;                  // 0x09A8(0x0004) (Edit)
	struct FString                                     ActivationString;                                         // 0x09AC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ActivationStringColor;                                    // 0x09B8(0x0004) (Edit)
	struct FColor                                      AltActivationStringColor;                                 // 0x09BC(0x0004) (Edit)
	struct FColor                                      CallOutArrowColor;                                        // 0x09C0(0x0004) (Edit)
	class UForceFeedbackWaveform*                      MidLowHealthHurtForceFeedbackWaveForm;                    // 0x09C4(0x0004) (Edit, EditInline)
	class UForceFeedbackWaveform*                      LowLowHealthHurtForceFeedbackWaveForm;                    // 0x09C8(0x0004) (Edit, EditInline)
	float                                              MidLowHealthFFThresholdPercent;                           // 0x09CC(0x0004) (Edit)
	float                                              LowLowHealthFFThresholdPercent;                           // 0x09D0(0x0004) (Edit)
	float                                              MidLowHealthFFInterval;                                   // 0x09D4(0x0004) (Edit)
	float                                              LowLowHealthFFInterval;                                   // 0x09D8(0x0004) (Edit)
	float                                              LastLowHealthFFTime;                                      // 0x09DC(0x0004) (Transient)
	class AActor*                                      autoAimTarget;                                            // 0x09E0(0x0004) (Net)
	class USkelControlSingleBone*                      PlayerSkelControlLookAt;                                  // 0x09E4(0x0004)
	class USkelControlSingleBone*                      InversePlayerSkelControlLookAt;                           // 0x09E8(0x0004)
	struct FName                                       TowerSummonInProgressAnimation;                           // 0x09EC(0x0008) (Edit)
	struct FName                                       SpellCompleteAnimation;                                   // 0x09F4(0x0008) (Edit)
	struct FName                                       RepairingTowerAnimation;                                  // 0x09FC(0x0008) (Edit)
	struct FName                                       UpgradingTowerAnimation;                                  // 0x0A04(0x0008) (Edit)
	struct FName                                       HealSelfAnimation;                                        // 0x0A0C(0x0008) (Edit)
	struct FName                                       MagicStaffUpgradeAnimation;                               // 0x0A14(0x0008) (Edit)
	struct FName                                       WaveStartAnimation;                                       // 0x0A1C(0x0008) (Edit)
	struct FName                                       WaveVictoryAnimation;                                     // 0x0A24(0x0008) (Edit)
	struct FName                                       GameOverAnimation;                                        // 0x0A2C(0x0008) (Edit)
	struct FName                                       LowHealthBlenderName;                                     // 0x0A34(0x0008) (Edit)
	float                                              LowHealthBlenderPercentThreshold;                         // 0x0A3C(0x0004) (Edit)
	struct FName                                       StaffKnockBackAnimation;                                  // 0x0A40(0x0008) (Edit)
	struct FName                                       MinStaffKnockbackChargeAnimation;                         // 0x0A48(0x0008) (Edit)
	struct FName                                       MaxStaffKnockbackChargeAnimation;                         // 0x0A50(0x0008) (Edit)
	struct FName                                       MinStaffChargeAnimation;                                  // 0x0A58(0x0008) (Edit)
	struct FName                                       MaxStaffChargeAnimation;                                  // 0x0A60(0x0008) (Edit)
	int                                                MaxMeshPitchMag;                                          // 0x0A68(0x0004) (Edit)
	int                                                MaxMeshYawMag;                                            // 0x0A6C(0x0004) (Edit)
	struct FString                                     InitiateTradeString;                                      // 0x0A70(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ViewTradeString;                                          // 0x0A7C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CantTradeString;                                          // 0x0A88(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              BigShootAnimBlendInTime;                                  // 0x0A94(0x0004) (Edit)
	float                                              ShootAnimBlendInTime;                                     // 0x0A98(0x0004) (Edit)
	float                                              ShootAnimBlendOutTime;                                    // 0x0A9C(0x0004) (Edit)
	float                                              ShootAnimSpeed;                                           // 0x0AA0(0x0004) (Edit)
	float                                              ExtraPlayerDamageMultiplier;                              // 0x0AA4(0x0004) (Edit)
	float                                              PlayerWeaponDamageMultiplier;                             // 0x0AA8(0x0004)
	TArray<unsigned char>                              IsPlayingUninterruptableUpperBodyAnimation;               // 0x0AAC(0x000C) (NeedCtorLink)
	TArray<struct FName>                               UpperBodyCustomAnimNodeNames;                             // 0x0AB8(0x000C) (Edit, NeedCtorLink)
	struct FName                                       UpperBodyCustomAnimBlenderName;                           // 0x0AC4(0x0008) (Edit)
	class UAnimNodeBlend*                              UpperBodyCustomAnimBlender;                               // 0x0ACC(0x0004)
	class UAnimNodeBlend*                              LowHealthBlender;                                         // 0x0AD0(0x0004)
	int                                                LastUpperBodyCustomAnimNodePlayIndex;                     // 0x0AD4(0x0004)
	class ADunDefEmitterSpawnable*                     LevelUpCompleteEmitterTemplate;                           // 0x0AD8(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     HealSelfEmitterTemplate;                                  // 0x0ADC(0x0004) (Edit)
	class UParticleSystemComponent*                    CallOutParticle;                                          // 0x0AE0(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FLinearColor                                TargetingParticleNormalColor;                             // 0x0AE4(0x0010) (Edit)
	struct FLinearColor                                TargetingParticleEnemyColor;                              // 0x0AF4(0x0010) (Edit)
	struct FLinearColor                                TargetingParticleNewEnemyColor;                           // 0x0B04(0x0010) (Edit)
	struct FLinearColor                                MiniMapIconDeadColor;                                     // 0x0B14(0x0010) (Edit)
	struct FLinearColor                                MiniMapIconLiveColor;                                     // 0x0B24(0x0010) (Edit)
	class UMaterialInstanceConstant*                   TargetingCursorMaterial;                                  // 0x0B34(0x0004) (Edit)
	float                                              BaseTargetingCursorScaleMin;                              // 0x0B38(0x0004) (Edit)
	float                                              BaseTargetingCursorScaleMax;                              // 0x0B3C(0x0004) (Edit)
	float                                              BaseTargetingCursorScaleDistance;                         // 0x0B40(0x0004) (Edit)
	float                                              TargetingCursorScaleDistanceExponent;                     // 0x0B44(0x0004) (Edit)
	float                                              BaseTargetingCursorSize;                                  // 0x0B48(0x0004) (Edit)
	float                                              TargetingIndicatorEnemyScale;                             // 0x0B4C(0x0004) (Edit)
	float                                              TargetingIndicatorNormalScale;                            // 0x0B50(0x0004) (Edit)
	float                                              TargetingIndicatorScaleSpeed;                             // 0x0B54(0x0004) (Edit)
	TArray<class UMaterialInterface*>                  LocalPlayerMaterialOverrides;                             // 0x0B58(0x000C) (Edit, NeedCtorLink)
	float                                              StepTowardsTargetGroundSpeed;                             // 0x0B64(0x0004) (Edit)
	float                                              StepTowardsTargetAccelRate;                               // 0x0B68(0x0004) (Edit)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0B6C(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x0B70(0x0004) (Edit)
	float                                              CharacterMiniMapIconSize;                                 // 0x0B74(0x0004) (Edit)
	class UTexture2D*                                  MiniMapSelectedIconTexture;                               // 0x0B78(0x0004) (Edit)
	struct FColor                                      MiniMapIconMyPlayerColor;                                 // 0x0B7C(0x0004) (Edit)
	struct FColor                                      MiniMapIconFriendlyPlayerColor;                           // 0x0B80(0x0004) (Edit)
	struct FColor                                      MiniMapIconEnemyPlayerColor;                              // 0x0B84(0x0004) (Edit)
	float                                              MiniMapIconSelectionFlashSpeed;                           // 0x0B88(0x0004) (Edit)
	struct FString                                     HealthString;                                             // 0x0B8C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     manaString;                                               // 0x0B98(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ToolTipHealthColor;                                       // 0x0BA4(0x0004) (Edit)
	struct FColor                                      ToolTipManaColor;                                         // 0x0BA8(0x0004) (Edit)
	float                                              CallOutExpirationTime;                                    // 0x0BAC(0x0004) (Edit)
	struct FVector                                     CallOutLocationOffset;                                    // 0x0BB0(0x000C) (Edit)
	struct FVector                                     FPVCameraOffset;                                          // 0x0BBC(0x000C) (Edit)
	struct FVector                                     PlayerSpawnLocationOffset;                                // 0x0BC8(0x000C) (Edit)
	class UTexture2D*                                  CallOutArrow;                                             // 0x0BD4(0x0004) (Edit)
	class UTexture2D*                                  CallOutOffScreenFrame;                                    // 0x0BD8(0x0004) (Edit)
	class UTexture2D*                                  CallOutOnScreenFrame;                                     // 0x0BDC(0x0004) (Edit)
	struct FLinearColor                                CallOutFlashColor;                                        // 0x0BE0(0x0010) (Edit)
	float                                              CallOutArrowScale;                                        // 0x0BF0(0x0004) (Edit)
	float                                              CalloutArrowOffset;                                       // 0x0BF4(0x0004) (Edit)
	float                                              CallOutOffScreenFrameScale;                               // 0x0BF8(0x0004) (Edit)
	float                                              CallOutOnScreenFrameScale;                                // 0x0BFC(0x0004) (Edit)
	float                                              CallOutMiniMapScale;                                      // 0x0C00(0x0004) (Edit)
	int                                                InverseSkelLookAtPitchClampMax;                           // 0x0C04(0x0004) (Edit)
	int                                                InverseSkelLookAtPitchClampMin;                           // 0x0C08(0x0004) (Edit)
	float                                              RepairIncrementFloat;                                     // 0x0C0C(0x0004) (Transient)
	float                                              CachedRespawnAnimationTime;                               // 0x0C10(0x0004) (Transient)
	float                                              StartHoveringFlyingTime;                                  // 0x0C14(0x0004) (Transient)
	float                                              StartHoveringLocationZ;                                   // 0x0C18(0x0004) (Transient)
	int                                                StartRepairHealth;                                        // 0x0C1C(0x0004) (Transient)
	int                                                ForcedMaxHealth;                                          // 0x0C20(0x0004) (Transient)
	int                                                TargetingTeam;                                            // 0x0C24(0x0004) (Net, Transient)
	struct FRotator                                    OldRotation;                                              // 0x0C28(0x000C) (Transient)
	struct FVector                                     RemoteLookDir;                                            // 0x0C34(0x000C) (Transient)
	class UMaterialInstanceConstant*                   TargetingCursorMaterialInstance;                          // 0x0C40(0x0004) (Transient)
	struct FVector                                     MyTargetLocation;                                         // 0x0C44(0x000C)
	struct FVector                                     ReplicatedTargetLocation;                                 // 0x0C50(0x000C) (Net)
	int                                                RepHealthMax;                                             // 0x0C5C(0x0004) (Net)
	float                                              ReplicatedJumpZ;                                          // 0x0C60(0x0004) (Net)
	int                                                TotalAbsorbShield;                                        // 0x0C64(0x0004) (Net)
	struct FVector                                     MyTargetOffset;                                           // 0x0C68(0x000C)
	float                                              LastTargetLocationUpdate;                                 // 0x0C74(0x0004)
	struct FCustomColorContainer                       customColors;                                             // 0x0C78(0x0038) (Net)
	class AActor*                                      LastSentAutoAimTarget;                                    // 0x0CB0(0x0004)
	class AActor*                                      StepTowardsTarget;                                        // 0x0CB4(0x0004)
	float                                              LastStepTowardsTargetTime;                                // 0x0CB8(0x0004)
	int                                                ManaPower;                                                // 0x0CBC(0x0004) (Net)
	int                                                MaxManaPower;                                             // 0x0CC0(0x0004) (Net)
	struct FHighDigitInt                               bankedMana;                                               // 0x0CC4(0x0010) (Net)
	float                                              MinFallingTimeForAirJump;                                 // 0x0CD4(0x0004) (Edit)
	struct FVector                                     LastLocation;                                             // 0x0CD8(0x000C)
	float                                              DistanceTravelled;                                        // 0x0CE4(0x0004)
	int                                                HeroBoostHealAmount;                                      // 0x0CE8(0x0004)
	float                                              HeroBoostSpeedMultiplier;                                 // 0x0CEC(0x0004)
	float                                              HeroDodgeChance;                                          // 0x0CF0(0x0004)
	float                                              HeroBonusPetDamageMultiplier;                             // 0x0CF4(0x0004)
	float                                              AdditionalSpeedMultiplier;                                // 0x0CF8(0x0004)
	float                                              LastServerTargetLocationUpdate;                           // 0x0CFC(0x0004)
	class AController*                                 MyCachedController;                                       // 0x0D00(0x0004) (Transient)
	struct FRotator                                    LastTargetRotation;                                       // 0x0D04(0x000C) (Transient)
	struct FVector                                     CallOutHoldPosition;                                      // 0x0D10(0x000C)
	float                                              CallOutExpirationTimer;                                   // 0x0D1C(0x0004)
	float                                              LastCallOutActivationTime;                                // 0x0D20(0x0004)
	float                                              CallOutOpacity;                                           // 0x0D24(0x0004)
	float                                              CallOutOnScreenSize;                                      // 0x0D28(0x0004)
	float                                              CallOutOffScreenSize;                                     // 0x0D2C(0x0004)
	float                                              CallOutOffScreenTotalScale;                               // 0x0D30(0x0004)
	float                                              LastTimeInWalkingState;                                   // 0x0D34(0x0004)
	class UDunDefHero*                                 MyPlayerHero;                                             // 0x0D38(0x0004) (Transient)
	class UFont*                                       MiniMapNameFont;                                          // 0x0D3C(0x0004) (Edit)
	class USoundCue*                                   ToggleAbilityTurnOnSoundOverride;                         // 0x0D40(0x0004) (Edit)
	int                                                PersonalMaxTowerUnits;                                    // 0x0D44(0x0004) (Edit)
	struct FName                                       ForceWeaponSpellEffectSocketName;                         // 0x0D48(0x0008) (Edit)
	TArray<struct FMeleeSwingInfo>                     MeleeSwingInfoMultipliers;                                // 0x0D50(0x000C) (Edit, NeedCtorLink)
	struct FName                                       CastingCancelAnimName;                                    // 0x0D5C(0x0008) (Edit)
	TArray<class ADunDefPlayerAbility*>                PlayerAbilities;                                          // 0x0D64(0x000C) (NeedCtorLink)
	TArray<class ADunDefPlayerAbility*>                LocallySimulatedPlayerAbilities;                          // 0x0D70(0x000C) (NeedCtorLink)
	struct FVector                                     CalloutOverrideLoc;                                       // 0x0D7C(0x000C) (Transient)
	float                                              LastHoverUpdateTime;                                      // 0x0D88(0x0004) (Transient)
	TArray<class UDunDefBuff*>                         DefaultBuffsToSpawn;                                      // 0x0D8C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayer");
		return ptr;
	}


	class ADunDefPlayerReplicationInfo* GetPRI();
	float GetStatModifier(class UObject* forActor, TEnumAsByte<ELevelUpValueType> levelUpValue);
	void OnBuffRemoved(class UObject* BuffRemoved);
	void OnBuffAdded(class UObject* BuffAdded);
	struct FName STATIC_StaticGetOverrideSocketName(class UDunDefHero* aHero);
	unsigned long AllowDropPickups();
	struct FName GetCastingCancelAnimation();
	class ADunDefEmitterSpawnable* GetSellTowerEmitter();
	class ADunDefEmitterSpawnable* GetTrapDetonationEmitter();
	class ADunDefEmitterSpawnable* GetUpgradingWeaponEmitter();
	class ADunDefEmitterSpawnable* GetWeaponRepairEmitter();
	class ADunDefEmitterSpawnable* GetHealingWeaponEmitter();
	class ADunDefEmitterSpawnable* GetSummoningTowerEmitter();
	void StopSpellEmitter();
	void StartSpellEmitter(class ADunDefEmitterSpawnable* Template, unsigned long DontSetAsPrimaryEffect, unsigned long IsSpawnEffect, unsigned long bForceSpawnOnWeapon);
	struct FString GetReloadString();
	float GetReloadPercent();
	int GetMaxAmmo();
	int GetAmmo();
	float GetAmmoPercent();
	unsigned long GetAmmoBarColors(struct FLinearColor* BarColor, struct FLinearColor* TextColor);
	unsigned long UsesAmmoBar();
	float GetPetHealingAmount();
	unsigned long LimitPetHealing(class UHeroEquipment_Familiar* askingFamiliar);
	unsigned long AllowPetHealing(class UHeroEquipment_Familiar* askingFamiliar);
	unsigned long AllowFairy(class UHeroEquipment_Familiar* askingFamiliar);
	unsigned long AllowFamiliarAbilities(class UHeroEquipment_Familiar* askingFamiliar);
	unsigned long AllowEquipmentAttachment();
	void Teleported();
	void SetOwnerNoSee(unsigned long ownerNoSee, unsigned long ownerNoSeeWeapon);
	void UsedAbility(class ADunDefPlayerAbility* ability);
	unsigned long AllowNegativeStatusAffecting();
	unsigned long ShouldOverrideWeaponElementalEffects(class ADunDefWeapon* weaponCheck);
	unsigned long AutoActivateSecondaryWeapon();
	unsigned long ForceUseInstigatorForMuzzle();
	unsigned long ShouldDisplayWeapons();
	float GetJumpZ();
	void DoWeaponSwap(unsigned long bForceSwap);
	struct FName STATIC_GetOffHandSocketName();
	void GivePlayerHitInfo(class AActor* HitActor, int dealtDamage, unsigned long bAllowMomentumOverride, struct FVector* appliedMomentum);
	unsigned long ForceWeaponActivationOverride();
	struct FName GetOverrideSocketName(class ADunDefWeapon* theWeapon);
	class ADunDefWeapon* SwapOffHandWeaponFor(class ADunDefWeapon* weaponTemplate, class UHeroEquipment* equipmentRef);
	unsigned long GetMeleeSwingInfoOverride(class ADunDefWeapon_MeleeSword* overrideForWeap, int* currentMeleeSwingIndex, struct FMeleeSwingInfo* OverrideInfo);
	unsigned long OverrideMeleeSwingInfo(class ADunDefWeapon_MeleeSword* askingWeapon);
	unsigned long STATIC_AllowDualWeapon();
	void Pause();
	struct FString GetAltActivationString(class ADunDefPlayerReplicationInfo* requestingPRI, unsigned char* bDontDrawActivationIcon);
	void DoPlayerYell();
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void PlayerChangedTeam();
	unsigned long GetCanBePlayerEnemy();
	unsigned long ShouldBlockPlayerAim(class APlayerController* PC);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	class ADunDefPlayerAbility* GetAbilityByClass(class UClass* PlayerAbilityClass);
	void Notify_WeaponDidDamage(const TScriptInterface<class UDunDefTargetableInterface>& aTarget, int Damage, const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType);
	void AnimNotify_EquipmentAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void WeaponAttacked(class ADunDefWeapon* theWeapon, int FireMode);
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	void DrawCallOutIcon(class ADunDefHUD* H, class ADunDefMiniMap* useMiniMap, class UCanvas* miniMapCanvas);
	void CallOutOff();
	void CallOutOn();
	void CallOutOnLoc(const struct FVector& overrideCalloutLoc, unsigned long bUseOverrideLoc);
	void ServerCallOutOff();
	void ServerCallOutOn(const struct FVector& overrideCalloutLoc, unsigned long bUseOverrideLoc);
	void ServerSetTapToJumpLocation(const struct FVector& JumpLoc);
	unsigned long CanReload();
	void DoKnockback();
	struct FName GetReloadAnimation(class ADunDefWeapon* tWeapon);
	void NotifyTeamChanged();
	class AController* GetTrueController();
	void CleaningUpPlayer();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	class UDunDefHero* GetHero();
	unsigned long AllowJump();
	unsigned long DoJump(unsigned long bUpdating);
	void SetMaxHealth(int newMaxHealth, unsigned long bSetHealthToMaxHealth);
	void ClientSetupColors();
	void SetMyCustomColors(class ADunDefPlayerController* aController, class UDunDefHero* usingHero);
	void RemoveOverlayEffect(class AActor* fromActor);
	void AddOverlayEffect(class AActor* fromActor, const struct FLinearColor& EffectColor);
	void UpdateOverlayEffect(float DeltaTime);
	void STATIC_SetCustomColors(class USkeletalMeshComponent* onMesh, const struct FLinearColor& C1, const struct FLinearColor& c2, const struct FLinearColor& C3);
	void STATIC_SetupColorizedMICs(class USkeletalMeshComponent* onMesh, TArray<class UMaterialInterface*> Materials);
	void CrushedBy(class APawn* OtherPawn);
	int GetScoreWorth();
	void PossessedBy(class AController* C, unsigned long bVehicleTransition);
	void UnPossessed();
	void AnimNotify_CurrentAbility_Off();
	void AnimNotify_CurrentAbility_On();
	float GetPawnDamageResistanceModifier();
	float GetPawnDamageModifier(unsigned long bDontIncludeAbilities);
	float AbilitiesOverrideGroundSpeed(float GroundSpeedToModify);
	float GetPlayerGroundSpeedModifier();
	float GetAirSpeed();
	float GetGroundSpeed(unsigned long bJustBaseCalculation, unsigned long bJustDefaultBaseCalculation, float LerpFromDefaultBaseCalculation);
	void ServerChoseStepTowardsTarget(class AActor* Target);
	void ClientDoStepTowardsTarget();
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void PlayGameOverAnimation();
	float QueueWaveVictoryAnimation(float Delay);
	void PlayWaveVictoryAnimation();
	void PlayWaveStartAnimation();
	void PlayPickupItemAnimation();
	void AddAbsorbShield(int Amount);
	int GetTotalShield();
	unsigned long AddHealth(int howMuch, unsigned long bDontDisplayFloatingNumber);
	float IncrementRepair(float CurrentMana, float DeltaTime);
	float GetCurrentRepairPercentage();
	void StartRepair();
	float GetTimeToRepair();
	float GetCostOfTotalRepair();
	float GetCostToRepair();
	unsigned long NeedsRepair();
	void PlayJumpAnimation();
	void SetRespawnOff();
	float PlayRespawnEffect();
	void PlayDestroyedEffect();
	void TryTokenCollection(class ADunDefManaToken* Token);
	float GetManaTokenCollectionRadiusSq();
	void CheckForTokens();
	float GetManaTokenAttractionRadius();
	unsigned long HasMaxManaPower();
	void Tick(float DeltaTime);
	void UpdateHovering();
	void StopHovering();
	void StartHovering();
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void SetLookTarget(const struct FVector& TargetLoc, class AActor* theLookAtTarget, unsigned long DontSetAutoAimTarget);
	struct FVector GetAimAtLocation(unsigned long bLeadTarget, float LeadTargetProjectileSpeed, const struct FVector& LeadTargetProjectileSpawnLocation, class AActor* AimAtTargetOverride, unsigned long bDontCheckTargetingDesirability);
	class AActor* GetAutoAimTarget(float maximumRange, float minDotOveride);
	void PlayShootAnimation_Float(float FloatValue, unsigned long Replicate);
	struct FName GetShootAnim();
	void PlayShootAnimation(unsigned long isBigShoot, unsigned long Replicate, unsigned long bDontPlayAnim);
	void UpdateRotation(float DeltaTime, const struct FVector& Direction, unsigned long invalidTargetLocation, unsigned long bIsInChaseCam);
	class ADunDefWeapon* SwapWeaponFor(class ADunDefWeapon* weaponTemplate, class UHeroEquipment* equipmentRef);
	void ThrowWeaponOnDeath();
	void EnableLocalAccelerationBlender();
	void PostBeginPlay();
	void Destroyed();
	unsigned long StopCustomAnim(float blendTimeOut, const struct FName& CustomAnimationToStop, unsigned long bReplicate, unsigned long bForceReplication);
	void StopLoopingAnimations();
	void StartLoopingAnimation(const struct FName& AnimName);
	float PlayCustomAnimUpperBody(const struct FName& inAnim, float blendTimeIn, unsigned long Looping, float Speed, float BlendOutTime, unsigned long bOverride, unsigned long Replicate, unsigned long bUninterruptable, unsigned long bDoWeaponFiredEffect, float OverrideNotificationWeight);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void DrawFloatingTalker(class AHUD* H, const struct FVector& WorldLoc, float theScale, float theOpacity);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long HasLightningStance();
	struct FLinearColor GetHealthColor();
	struct FString GetDescriwptiveName();
	unsigned long OnlyDrawHUDForOwner();
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	int GetTargetingTeam();
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.IActorModifierInterface
// 0x0000 (0x003C - 0x003C)
class UIActorModifierInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IActorModifierInterface");
		return ptr;
	}


	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
};


// Class UDKGame.DunDefGameMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefGameMessage : public UGameMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameMessage");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void STATIC_PrintGlobalLocalHUDMessage(const struct FString& MessageString, unsigned long OverrideColor, const struct FColor& TheColor, unsigned long OverrideFontSize, int TheFontSize, int Switch, unsigned long OverrideLifeTime, float TheLifeTime, unsigned long OverridePosition, float ThePosition, unsigned long OverrideMessageClass, class UClass* InMessageClass, class UObject* OptionalObject, class USurface* Icon);
	void STATIC_PrintHUDMessage(class APlayerController* P, const struct FString& MessageString, unsigned long OverrideColor, const struct FColor& TheColor, unsigned long OverrideFontSize, int TheFontSize, int Switch, unsigned long OverrideLifeTime, float TheLifeTime, unsigned long OverridePosition, float ThePosition, unsigned long OverrideMessageClass, class UClass* InMessageClass, class UObject* OptionalObject, class USurface* Icon);
};


// Class UDKGame.DunDefAbilityMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefAbilityMessage : public UDunDefGameMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefAbilityMessage");
		return ptr;
	}

};


// Class UDKGame.DunDefEmitterSpawnable
// 0x00A8 (0x02D4 - 0x022C)
class ADunDefEmitterSpawnable : public AEmitterSpawnable
{
public:
	class UPointLightComponent*                        MyPointLightComponent;                                    // 0x022C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LightLifeSpan;                                            // 0x0230(0x0004) (Edit, Net)
	float                                              LightFadeUpTime;                                          // 0x0234(0x0004) (Edit)
	float                                              LightFadeOutTime;                                         // 0x0238(0x0004) (Edit)
	TArray<class USoundCue*>                           RandomSoundToPlay;                                        // 0x023C(0x000C) (Edit, NeedCtorLink)
	class UAudioComponent*                             MyAudioComponent;                                         // 0x0248(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      AllowSoundToFinishBeforeDestroying : 1;                   // 0x024C(0x0004) (Edit)
	unsigned long                                      DoLightOscillation : 1;                                   // 0x024C(0x0004) (Edit)
	unsigned long                                      bDoCameraShake : 1;                                       // 0x024C(0x0004) (Edit)
	unsigned long                                      bDoCameraShakeControllerVibration : 1;                    // 0x024C(0x0004) (Edit)
	unsigned long                                      bForceDestroyOnFadeOut : 1;                               // 0x024C(0x0004) (Edit)
	unsigned long                                      bForceHideParticlesOnFadeOut : 1;                         // 0x024C(0x0004) (Edit)
	unsigned long                                      bInstanceDecalMaterial : 1;                               // 0x024C(0x0004) (Edit)
	unsigned long                                      bAllowSpawnOutsideOfView : 1;                             // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bUseParticleFadeOutParam : 1;                             // 0x024C(0x0004) (Edit)
	unsigned long                                      bUseParticleSystemFadeInParam : 1;                        // 0x024C(0x0004) (Edit)
	unsigned long                                      bAutoActivate : 1;                                        // 0x024C(0x0004) (Edit)
	unsigned long                                      bIgnoreEmitterLimit : 1;                                  // 0x024C(0x0004) (Edit)
	unsigned long                                      DoLightFadeDown : 1;                                      // 0x024C(0x0004) (Transient)
	unsigned long                                      DoLightFadeUp : 1;                                        // 0x024C(0x0004) (Transient)
	unsigned long                                      bFadedParticleIn : 1;                                     // 0x024C(0x0004) (Transient)
	unsigned long                                      bIncrementedEmitterCount : 1;                             // 0x024C(0x0004) (Transient)
	TArray<class UParticleSystem*>                     AlternatePSTemplates;                                     // 0x0250(0x000C) (Edit, NeedCtorLink)
	float                                              LightOscillationPercent;                                  // 0x025C(0x0004) (Edit)
	float                                              LightOscillationFrequency;                                // 0x0260(0x0004) (Edit)
	float                                              DefaultFadeOutLifeSpan;                                   // 0x0264(0x0004) (Edit)
	float                                              CameraShakeDelay;                                         // 0x0268(0x0004) (Edit)
	float                                              FadeOutOfViewLifespan;                                    // 0x026C(0x0004) (Edit)
	float                                              CameraShakeRadius;                                        // 0x0270(0x0004) (Edit)
	float                                              FailsafeLifespan;                                         // 0x0274(0x0004) (Edit)
	float                                              DecalComponentFarPlane;                                   // 0x0278(0x0004) (Edit)
	class UCameraShake*                                ShakeParams;                                              // 0x027C(0x0004) (Edit, EditInline)
	class UDynamicLightEnvironmentComponent*           ParticleLightEnvironment;                                 // 0x0280(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           ActorLightEnvironment;                                    // 0x0284(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDecalComponent*                             DecalComponent;                                           // 0x0288(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              SpawnOutsideOfViewSphereCheckRadius;                      // 0x028C(0x0004) (Edit, Const)
	struct FName                                       ParticleSystemFadeParamName;                              // 0x0290(0x0008) (Edit)
	struct FName                                       ParticleSystemFadeParamNameAlt;                           // 0x0298(0x0008) (Edit)
	float                                              ParticleFadeOutTime;                                      // 0x02A0(0x0004) (Edit)
	float                                              ParticleFadeInTime;                                       // 0x02A4(0x0004) (Edit)
	float                                              NotInViewLifeSpan;                                        // 0x02A8(0x0004) (Edit)
	float                                              AdditionalLifeSpanFadeoutTime;                            // 0x02AC(0x0004) (Edit)
	float                                              DecalBackFaceAngle;                                       // 0x02B0(0x0004) (Edit)
	float                                              AutoFadeOutLifeSpan;                                      // 0x02B4(0x0004) (Edit)
	float                                              ParticleFadeOutParamStartTime;                            // 0x02B8(0x0004) (Transient)
	float                                              ParticleSystemFadeParamOriginalValue;                     // 0x02BC(0x0004) (Transient)
	float                                              ParticleSystemFadeParamAltOriginalValue;                  // 0x02C0(0x0004) (Transient)
	float                                              OriginalBrightness;                                       // 0x02C4(0x0004) (Transient)
	float                                              FadeOutStartTime;                                         // 0x02C8(0x0004) (Transient)
	float                                              LightPercentage;                                          // 0x02CC(0x0004) (Transient)
	int                                                MyTargetingTeam;                                          // 0x02D0(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEmitterSpawnable");
		return ptr;
	}


	float STATIC_GetSpawnFrustumCheckRadius(class ADunDefEmitterSpawnable* theArchetype);
	unsigned long STATIC_AllowSpawn(class AActor* theArchetype, const struct FVector& theLoc, const struct FRotator& theRot);
	void Tick(float DeltaTime);
	void SetDecalSize(float Size);
	void SetGameFloatParameter(const struct FName& ParamName, float Value);
	void SetSize(float Size);
	void DoCameraShake();
	void RefreshAutoFadeOut();
	void PostBeginPlay();
	void FadeOut(float theLightFadeOutTime);
	void ReplicatedFadeOut(float theLightFadeOutTime);
	void Destroyed();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefPlayerAbility_CharacterToggle
// 0x0050 (0x047C - 0x042C)
class ADunDefPlayerAbility_CharacterToggle : public ADunDefPlayerAbility
{
public:
	int                                                ManaCostPerSecond;                                        // 0x042C(0x0004) (Edit)
	int                                                InitialManaCostToActivate;                                // 0x0430(0x0004) (Edit)
	class USoundCue*                                   TurnOnSound;                                              // 0x0434(0x0004) (Edit)
	class USoundCue*                                   TurnOffSound;                                             // 0x0438(0x0004) (Edit)
	class UAudioComponent*                             LoopingActiveSoundComponent;                              // 0x043C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FString                                     ToggleActivationString;                                   // 0x0440(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ToggleDeactivationString;                                 // 0x044C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ToggleActivationColor;                                    // 0x0458(0x0004) (Edit)
	struct FColor                                      ToggleDeactivationColor;                                  // 0x045C(0x0004) (Edit)
	float                                              HeroStatManaCostExponentScale;                            // 0x0460(0x0004) (Edit)
	float                                              ManaCostIncreaseTimeInterval;                             // 0x0464(0x0004) (Edit)
	float                                              ManaCostIncreaseLinearFactor;                             // 0x0468(0x0004) (Edit)
	float                                              ManaCostIncreaseExponentialFactor;                        // 0x046C(0x0004) (Edit)
	float                                              LoopingSoundFadeOutTime;                                  // 0x0470(0x0004) (Edit)
	float                                              LoopingSoundFadeInTime;                                   // 0x0474(0x0004) (Edit)
	unsigned long                                      bConsumeManaOverTime : 1;                                 // 0x0478(0x0004) (Edit)
	unsigned long                                      bRequiresInitialManaCost : 1;                             // 0x0478(0x0004) (Edit)
	unsigned long                                      bToggleEnabled : 1;                                       // 0x0478(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_CharacterToggle");
		return ptr;
	}


	float GetTimeSinceActivation();
	unsigned long AllowUsageDuringCastingStates();
	struct FString GetToggleDeactivationString();
	struct FString GetToggleActivationString();
	void CancelAbility();
	void OnActivate();
	void ReplicatedEvent(const struct FName& VarName);
	unsigned long IsActive();
	int GetCostToActivate(unsigned long returnTrueValue);
};


// Class UDKGame.DunDefPlayerAbility_Apprentice_Overcharge
// 0x003C (0x04B8 - 0x047C)
class ADunDefPlayerAbility_Apprentice_Overcharge : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                                   // 0x047C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActivationAnimation;                                      // 0x0480(0x0008) (Edit)
	float                                              CastRateMultiplier;                                       // 0x0488(0x0004) (Edit)
	float                                              OverchargeHeroStatExponent;                               // 0x048C(0x0004) (Edit)
	float                                              NightmareAttackDamageExponent;                            // 0x0490(0x0004) (Edit)
	float                                              HeroStatAttackDamageExponentNightmare;                    // 0x0494(0x0004) (Edit)
	float                                              HeroStatAttackDamageExponent;                             // 0x0498(0x0004) (Edit)
	float                                              OverChargeSpeedMultiplier;                                // 0x049C(0x0004) (Edit)
	float                                              HeroStatGroundSpeedExponent;                              // 0x04A0(0x0004) (Edit)
	struct FLinearColor                                OverlayEffectColor;                                       // 0x04A4(0x0010) (Edit)
	float                                              PetDamageMultiplier;                                      // 0x04B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Apprentice_Overcharge");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	float GetPlayerAttackDamageMultiplier();
	float GetCastingMultiplier();
	void SetPlayerBonusPetMultiplier(float multi);
};


// Class UDKGame.StatObject
// 0x0128 (0x016C - 0x0044)
class UStatObject : public UBaseStatObject
{
public:
	TArray<struct FsActorStatTemplateModifier>         StatTemplateModifiers;                                    // 0x0044(0x000C) (Edit, NeedCtorLink)
	TArray<struct FsActorStatModifier>                 StatModifiers;                                            // 0x0050(0x000C) (Edit, NeedCtorLink)
	struct FsBuffInfo                                  StatObjectInfo;                                           // 0x005C(0x0064) (Edit, NeedCtorLink)
	TArray<class UDunDefBuff*>                         BuffsToAddToHero;                                         // 0x00C0(0x000C) (Edit, NeedCtorLink)
	TArray<class UDunDefBuff*>                         BuffsToAddToTowers;                                       // 0x00CC(0x000C) (Edit, NeedCtorLink)
	int                                                TierOverride;                                             // 0x00D8(0x0004) (Edit)
	unsigned long                                      bGetTowerStats : 1;                                       // 0x00DC(0x0004) (Edit)
	unsigned long                                      bIsActive : 1;                                            // 0x00DC(0x0004) (Transient)
	struct FString                                     TempValueLabels[0x3];                                     // 0x00E0(0x000C) (NeedCtorLink)
	TArray<class UDunDefHero*>                         HeroTemplates;                                            // 0x0104(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefPlayerAbility*>                AbilityTemplates;                                         // 0x0110(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefTower*>                        TowerTemplates;                                           // 0x011C(0x000C) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EEquipmentType>>                EquipmentTypeArray;                                       // 0x0128(0x000C) (Edit, NeedCtorLink)
	TArray<class UDunDefBuff*>                         CurrentBuffs;                                             // 0x0134(0x000C) (Transient, NeedCtorLink)
	class UHeroEquipment*                              CachedEquipment;                                          // 0x0140(0x0004) (Transient)
	class UDunDefHero*                                 CachedHero;                                               // 0x0144(0x0004) (Transient)
	class ADunDefPlayer*                               CachedPlayer;                                             // 0x0148(0x0004) (Transient)
	int                                                CachedTier;                                               // 0x014C(0x0004) (Transient)
	class AActor*                                      CachedDropActor;                                          // 0x0150(0x0004) (Transient)
	struct FString                                     CachedDescription;                                        // 0x0154(0x000C) (Transient, NeedCtorLink)
	class UObject*                                     StatOwner;                                                // 0x0160(0x0004) (Transient)
	TScriptInterface<class UIActorModifierInterface>   MyStatModifier;                                           // 0x0164(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.StatObject");
		return ptr;
	}


	struct FString GetToolTipValueByTag(const struct FString& StatTag, int SlotIdx);
	void UpdateBuffValues();
	unsigned long CanAddBuffs(class ADunDefTower* TowerTemplate);
	unsigned long DoesModifyStat(TEnumAsByte<ELevelUpValueType> Stat);
	float GetBuffStatValue(class UDunDefHero* aHero, TEnumAsByte<ELevelUpValueType> Stat, unsigned long bDoAdditivePass);
	float GetStatValue(class UDunDefHero* aHero, TEnumAsByte<ELevelUpValueType> Stat, unsigned long bGetStatModifier);
	float GetStatValueByTag(float InitialValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	float GetStatModifierByTag(float InitialValue, const struct FString& StatTag, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	float GetStatModifierValue(class UObject* statActor, const struct FsActorStatModifier& BuffModifier, float InitialValue, unsigned long bBaseValueOnly);
	float GetModifierValue(float BaseValue, float levelScalar);
	void Initalize(class UHeroEquipment* Equipment, class UDunDefHero* hero, class ADunDefPlayer* Player, class UObject* aStatOwner, int Tier, unsigned long bisDropped, class AActor* DroppedActor);
	void AddedToHero();
	void DeactivateBuffs();
	void ShutDown();
	unsigned long STATIC_StaticIsValidForHero(class UStatObject_Equipment* StatObjectTemplate, class UDunDefHero* HeroTemplate);
	struct FString GetName();
	struct FString GetDescription();
	struct FString STATIC_StaticGetDescription(class UStatObject* aStatObject);
	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
};


// Class UDKGame.DunDefHeroModifierInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefHeroModifierInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHeroModifierInterface");
		return ptr;
	}


	unsigned long AllowHeroGUID(int GUID1, int GUID2, int GUID3, int GUID4);
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
};


// Class UDKGame.DunDefGamePhaseSubscriberInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefGamePhaseSubscriberInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGamePhaseSubscriberInterface");
		return ptr;
	}


	void ChangedGamePhases(unsigned long IsCombatPhase);
};


// Class UDKGame.DunDefPlayerAbility_TowerPlacement
// 0x0114 (0x0540 - 0x042C)
class ADunDefPlayerAbility_TowerPlacement : public ADunDefPlayerAbility
{
public:
	unsigned long                                      IsValidPlacement : 1;                                     // 0x042C(0x0004)
	unsigned long                                      bWantTowerTooltip : 1;                                    // 0x042C(0x0004) (Edit)
	unsigned long                                      bReturnRepairTargetWithLowestHealth : 1;                  // 0x042C(0x0004) (Edit)
	unsigned long                                      bAttachAdditionalParticleComponent : 1;                   // 0x042C(0x0004) (Edit)
	unsigned long                                      bReturnUpgradeTargetWithLowestLevel : 1;                  // 0x042C(0x0004) (Edit)
	unsigned long                                      bActivateRemoteLightAndParticleSystem : 1;                // 0x042C(0x0004) (Edit)
	unsigned long                                      bForceBeyondMaxUpgradeLevel : 1;                          // 0x042C(0x0004) (Edit)
	unsigned long                                      bUseSelectionOffsetting : 1;                              // 0x042C(0x0004) (Edit)
	unsigned long                                      bOverrideCursorAlpha : 1;                                 // 0x042C(0x0004) (Transient)
	unsigned long                                      bClearStateNameInTick : 1;                                // 0x042C(0x0004)
	struct FLinearColor                                ValidPlacementColor;                                      // 0x0430(0x0010) (Edit)
	struct FLinearColor                                InvalidPlacementColor;                                    // 0x0440(0x0010) (Edit)
	struct FLinearColor                                ReadyPlacementColor;                                      // 0x0450(0x0010) (Edit)
	float                                              PlacementRange;                                           // 0x0460(0x0004) (Edit)
	float                                              DecalSize;                                                // 0x0464(0x0004) (Edit)
	float                                              MinimumDistanceForNonPhysicalSelectionPassThru;           // 0x0468(0x0004) (Edit)
	class UPointLightComponent*                        MyPointLightComponent;                                    // 0x046C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    MyParticleSystemComponent;                                // 0x0470(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     PointLightOffset;                                         // 0x0474(0x000C) (Edit)
	struct FVector                                     ParticleSystemOffset;                                     // 0x0480(0x000C) (Edit)
	struct FColor                                      ValidPlacementLightColor;                                 // 0x048C(0x0004) (Edit)
	struct FColor                                      InvalidPlacementLightColor;                               // 0x0490(0x0004) (Edit)
	struct FColor                                      ReadyPlacementLightColor;                                 // 0x0494(0x0004) (Edit)
	struct FVector                                     DecalOffset;                                              // 0x0498(0x000C) (Edit)
	class UAudioComponent*                             MyAudioComponent;                                         // 0x04A4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDecalComponent*                             Decal;                                                    // 0x04A8(0x0004) (Edit, ExportObject, Component, EditInline)
	class USoundCue*                                   SoundTowerBuildConfirm;                                   // 0x04AC(0x0004) (Edit)
	class USoundCue*                                   SoundDenied;                                              // 0x04B0(0x0004) (Edit)
	struct FVector                                     PlacementTraceStartOffset;                                // 0x04B4(0x000C) (Edit)
	struct FVector                                     PlacementTraceEndOffset;                                  // 0x04C0(0x000C) (Edit)
	struct FVector                                     SecondPlacementTraceStartOffset;                          // 0x04CC(0x000C) (Edit)
	class UParticleSystemComponent*                    AuraIconEffect;                                           // 0x04D8(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              TowerMiniMapIconScale;                                    // 0x04DC(0x0004) (Edit)
	float                                              CursorIconScale;                                          // 0x04E0(0x0004) (Edit)
	float                                              CursorPlacementOffsetScale;                               // 0x04E4(0x0004) (Edit)
	int                                                NumSelectionTraces;                                       // 0x04E8(0x0004) (Edit)
	TArray<struct FVector>                             CursorPlacementOffsets;                                   // 0x04EC(0x000C) (Edit, NeedCtorLink)
	class ADunDefEmitterSpawnable*                     MySummoningEmitter;                                       // 0x04F8(0x0004) (Transient)
	struct FVector                                     CursorPlacementPosition;                                  // 0x04FC(0x000C)
	float                                              CurrentPlacementOpacity;                                  // 0x0508(0x0004) (Transient)
	struct FColor                                      LastLightColor;                                           // 0x050C(0x0004) (Transient)
	struct FLinearColor                                LastMaterialColor;                                        // 0x0510(0x0010) (Transient)
	class UMaterialInstanceConstant*                   CurrentDecalMaterial;                                     // 0x0520(0x0004) (Transient)
	float                                              OriginalParticleSystemScale;                              // 0x0524(0x0004) (Transient)
	struct FVector                                     currentProjectionDirection;                               // 0x0528(0x000C) (Transient)
	int                                                CurrentSelectionIndexOffset;                              // 0x0534(0x0004) (Transient)
	struct FName                                       StateName;                                                // 0x0538(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_TowerPlacement");
		return ptr;
	}


	void StopSummonTowerFXCompleted();
	void StopSummonTowerFX();
	void UpdateSummonTowerFX(float Percent);
	void BeginSummonTowerFX(class ADunDefEmitterSpawnable* spellEffect, const struct FVector& thePlacementLocation, const struct FRotator& thePlacementRotation, float scaleMult, unsigned long bUsesDecal);
	void CyclePlacementTowerRadius();
	void IncreasePlacementTowerRadius();
	void DecreasePlacementTowerRadius();
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	void StopTowerPlacingAnimation();
	void StartTowerPlacingAnimation();
	struct FVector GetCenterLocation();
	void AuthorityInitReplicatedPlacementState();
	void SortTracedActors(TArray<struct FActorHitInfo>* TracedActors);
	void GetTracedActors(const struct FVector& startTracePos, const struct FVector& endTracePos, TArray<struct FActorHitInfo>* TracedHitActors, struct FVector* TraceHitLoc);
	void PostPlacementUpdate(float DeltaTime);
	void SetInitialPlacementCursor();
	unsigned long PlacementTraceCheckActors(class AActor* A);
	unsigned long PlacementTraceForceTowerSelection();
	void FinishedFadingOut();
	void AbilityTick(float DeltaTime);
	void PostBeginPlay();
	void PreCursorDrawHUD(class ADunDefHUD* H, const struct FVector& CursorPos);
	void PostCursorDrawHUD(class ADunDefHUD* H, const struct FVector& CursorPos);
	unsigned long DrawCastingHUD(class ADunDefHUD* H);
	void ServerSetPlacementTowerRangeScaler(float theScale);
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect();
	class UTexture2D* GetCursorPlacementTexture();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefPlayerAbility_BuildTower
// 0x01D8 (0x0718 - 0x0540)
class ADunDefPlayerAbility_BuildTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialBuild;                                       // 0x0540(0x0004) (Edit)
	class UTexture2D*                                  CursorBuildTexture;                                       // 0x0544(0x0004) (Edit)
	class UTexture2D*                                  CursorRotateTexture;                                      // 0x0548(0x0004) (Edit)
	float                                              MinimumNormalZForPlacement;                               // 0x054C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingBuildWeaponEmitter;                               // 0x0550(0x0004) (Edit)
	struct FName                                       SummoningStateNamePC;                                     // 0x0554(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     SummonTowerEmitterTemplate;                               // 0x055C(0x0004) (Edit)
	class USkeletalMeshComponent*                      TowerMeshComponent;                                       // 0x0560(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     TowerMeshScaleVec;                                        // 0x0564(0x000C) (Edit)
	struct FVector                                     TowerMeshPlacementOffset;                                 // 0x0570(0x000C) (Edit)
	struct FVector                                     TowerActorPlacementOffset;                                // 0x057C(0x000C) (Edit)
	struct FVector                                     TraceExtent;                                              // 0x0588(0x000C) (Edit)
	class ADunDefTower*                                TowerArchetype;                                           // 0x0594(0x0004) (Edit)
	float                                              SummonTime;                                               // 0x0598(0x0004) (Edit)
	float                                              RotationCursorScale;                                      // 0x059C(0x0004) (Edit)
	float                                              SummonTimeCompetitive;                                    // 0x05A0(0x0004) (Edit)
	unsigned long                                      IgnoreRotation : 1;                                       // 0x05A4(0x0004) (Edit)
	unsigned long                                      OnlyCheckCollisionAgainstWorldGeometry : 1;               // 0x05A4(0x0004) (Edit)
	unsigned long                                      UseAngleIndicator : 1;                                    // 0x05A4(0x0004) (Edit)
	unsigned long                                      ScaleAngleIndicatorWithTowerRange : 1;                    // 0x05A4(0x0004) (Edit)
	unsigned long                                      bAutoScaleTowerPlacementMesh : 1;                         // 0x05A4(0x0004) (Edit)
	unsigned long                                      DisablePlacementWithinSameTraps : 1;                      // 0x05A4(0x0004) (Edit)
	unsigned long                                      DisablePlacementWithinSameAuras : 1;                      // 0x05A4(0x0004) (Edit)
	unsigned long                                      bUseSpellCompleteOverrideAnim : 1;                        // 0x05A4(0x0004) (Edit)
	unsigned long                                      bUseCastingOverrideAnim : 1;                              // 0x05A4(0x0004) (Edit)
	unsigned long                                      ReplicatedIsValidPlacement : 1;                           // 0x05A4(0x0004) (Net)
	unsigned long                                      bClientGotoRotationState : 1;                             // 0x05A4(0x0004) (Transient)
	unsigned long                                      ClientForceNoInterpolation : 1;                           // 0x05A4(0x0004) (Transient)
	struct FVector                                     ExtentCheckBaseOffset;                                    // 0x05A8(0x000C) (Edit)
	struct FVector                                     PlacementRotationCursorOffset;                            // 0x05B4(0x000C) (Edit)
	struct FVector                                     RotationGamepadCursorOffset;                              // 0x05C0(0x000C) (Edit)
	float                                              PlacementLightIntensityMultiplier;                        // 0x05CC(0x0004) (Edit)
	TArray<struct FVector>                             TraceDirections;                                          // 0x05D0(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           PlacementMaterials;                                       // 0x05DC(0x000C) (Edit, NeedCtorLink)
	float                                              AngleIndicatorDecalSize;                                  // 0x05E8(0x0004) (Edit)
	struct FVector                                     AngleIndicatorDecalOffset;                                // 0x05EC(0x000C) (Edit)
	class UMaterialInstanceConstant*                   AngelIndicatorDecalMaterial;                              // 0x05F8(0x0004) (Edit)
	class UMaterialInstanceConstant*                   RangeIndicatorDecalMaterial;                              // 0x05FC(0x0004) (Edit)
	class UMaterialInstanceConstant*                   AngleIndicatorDecalMaterialInstance;                      // 0x0600(0x0004) (Transient)
	class UMaterialInstanceConstant*                   RangeIndicatorDecalMaterialInstance;                      // 0x0604(0x0004) (Transient)
	class UDecalComponent*                             AngleIndicatorDecal;                                      // 0x0608(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDecalComponent*                             RangeIndicatorDecal;                                      // 0x060C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FLinearColor                                SummoningNotificationColor;                               // 0x0610(0x0010) (Edit)
	struct FString                                     ActivationFailureString_NeedTowerUnits;                   // 0x0620(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationTowerUnitsString;                               // 0x062C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationSummonString;                                   // 0x0638(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TowerUnitDescriptionString;                               // 0x0644(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              AngleIndicatorDecalTowerRangeScale;                       // 0x0650(0x0004) (Edit)
	float                                              DefaultTowerPlacementCollisionRadius;                     // 0x0654(0x0004) (Edit)
	float                                              AutoTowerPlacementMeshScaleBase;                          // 0x0658(0x0004) (Edit)
	float                                              OtherAbilityPreventionRadiusBuffer;                       // 0x065C(0x0004) (Edit)
	float                                              OtherAbilityPreventionRadiusMultiplier;                   // 0x0660(0x0004) (Edit)
	float                                              GlobalSummonRateMultiplier;                               // 0x0664(0x0004) (Edit)
	float                                              InfiniteBuildPhaseSpeedMultiplier;                        // 0x0668(0x0004) (Edit)
	float                                              MinimumRotationInputDistance;                             // 0x066C(0x0004) (Edit)
	float                                              PlacementTraceScale;                                      // 0x0670(0x0004) (Edit)
	struct FString                                     ChooseWhereToSummonString;                                // 0x0674(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SummoningString;                                          // 0x0680(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SetRotationString;                                        // 0x068C(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<struct FString>                             PlacementDeniedStrings;                                   // 0x0698(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       SpellCompleteAnimOverride;                                // 0x06A4(0x0008) (Edit)
	struct FName                                       CastingAnimOverride;                                      // 0x06AC(0x0008) (Edit)
	struct FName                                       CancelAbilityAnim;                                        // 0x06B4(0x0008) (Edit)
	TArray<class UMaterialInstanceConstant*>           TowerPlacementMatInstances;                               // 0x06BC(0x000C) (NeedCtorLink)
	struct FRotator                                    PlacementRotation;                                        // 0x06C8(0x000C)
	struct FVector                                     GamepadLookDirection;                                     // 0x06D4(0x000C)
	struct FVector                                     LookAtLocation;                                           // 0x06E0(0x000C)
	float                                              CurrentSummonTime;                                        // 0x06EC(0x0004)
	float                                              CurrentAngleDecalOpacity;                                 // 0x06F0(0x0004)
	float                                              TowerMeshScale;                                           // 0x06F4(0x0004)
	float                                              LastTowerMeshScale;                                       // 0x06F8(0x0004) (Transient)
	float                                              TowerRangeScaler;                                         // 0x06FC(0x0004) (Net, Transient)
	struct FVector                                     ReplicatedPlacementLocation;                              // 0x0700(0x000C) (Net)
	struct FRotator                                    ReplicatedPlacementRotation;                              // 0x070C(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_BuildTower");
		return ptr;
	}


	void ServerSetPlacementTowerRangeScaler(float theScale);
	struct FString GetTowerUnitDescription();
	void CancelAbility();
	void StartSummoningState();
	void ClientStartSummoningState();
	void ServerRequestBuildTower(const struct FVector& towerPlacementLocation, const struct FRotator& towerPlacementRotation);
	struct FString GetActivationFailureString(TEnumAsByte<EPlayerAbilityStatus> Status, unsigned long ShortString);
	void ServerGotoRotationState();
	void PostPlacementUpdate(float DeltaTime);
	void UpdateDecalPlacement(float DeltaTime);
	unsigned long AllowTowerPlacementPosition(const struct FVector& placementPos, unsigned long bOnlyCheckVolumes, int* PlacementDeniedReason);
	unsigned long IsTowerPhysical();
	unsigned long IsInPlacingTowerState();
	float GetOtherAbilityPlacementPreventionRadius(class ADunDefTower* forOtherTowerArchetype);
	void FinishedFadingOut();
	void AbilityTick(float DeltaTime);
	void PostBeginPlay();
	void UpdateClientInterpolations(float DeltaTime);
	void AuthorityInitReplicatedPlacementState();
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect();
	class UTexture2D* GetCursorPlacementTexture();
	void ServerReceivePlacementState(unsigned long bIsValidPlacement, const struct FVector& tPlacementLocation, const struct FRotator& tPlacementRotation);
	struct FString GetDescriptiveName();
	int GetDisplayCost();
	unsigned long CanPlaceTowerUnitCost();
	int GetCostToActivate(unsigned long returnTrueValue);
	unsigned long PlacementTraceCheckActors(class AActor* A);
	unsigned long PlacementTraceForceTowerSelection();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.ActorFactoryFlightPathNode
// 0x0000 (0x005C - 0x005C)
class UActorFactoryFlightPathNode : public UActorFactoryPathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFactoryFlightPathNode");
		return ptr;
	}

};


// Class UDKGame.FlightPathNode
// 0x0008 (0x0318 - 0x0310)
class AFlightPathNode : public AVolumePathNode
{
public:
	int                                                CustomData;                                               // 0x0310(0x0004) (Edit)
	class AActor*                                      LinkedActor;                                              // 0x0314(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.FlightPathNode");
		return ptr;
	}

};


// Class UDKGame.ActorFilter
// 0x0000 (0x003C - 0x003C)
class UActorFilter : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter");
		return ptr;
	}


	unsigned long STATIC_IsActorAllowed(class UObject* theObject, unsigned long is_OR_filters, TArray<class UActorFilter*>* filters);
	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_Buff
// 0x000C (0x0048 - 0x003C)
class UActorFilter_Buff : public UActorFilter
{
public:
	TArray<class UDunDefBuff*>                         RequiredBuffs;                                            // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Buff");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_Class
// 0x001C (0x0058 - 0x003C)
class UActorFilter_Class : public UActorFilter
{
public:
	TArray<class UClass*>                              Allow;                                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              Disallow;                                                 // 0x0048(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bFilterOwnerClass : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bFilterActorStatOwnerClass : 1;                           // 0x0054(0x0004) (Edit)
	unsigned long                                      bDontCheckChildClass : 1;                                 // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Class");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_Collision
// 0x0001 (0x003D - 0x003C)
class UActorFilter_Collision : public UActorFilter
{
public:
	TEnumAsByte<EActorFilterRequirement>               WorldGeometry;                                            // 0x003C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Collision");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_DamageTypeComparison
// 0x001C (0x0058 - 0x003C)
class UActorFilter_DamageTypeComparison : public UObject
{
public:
	TArray<class UClass*>                              Allow;                                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              Disallow;                                                 // 0x0048(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bDontCheckChildClass : 1;                                 // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_DamageTypeComparison");
		return ptr;
	}


	unsigned long STATIC_IsActorAllowed(class UClass* theObject, unsigned long is_OR_filters, TArray<class UActorFilter_DamageTypeComparison*>* filters);
	unsigned long IsAllowed(class UClass* theObject);
};


// Class UDKGame.ActorFilter_Dead
// 0x0000 (0x003C - 0x003C)
class UActorFilter_Dead : public UActorFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Dead");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_Health
// 0x000C (0x0048 - 0x003C)
class UActorFilter_Health : public UActorFilter
{
public:
	unsigned long                                      bCompareHealthPercentage : 1;                             // 0x003C(0x0004) (Edit)
	TEnumAsByte<EeComparisonType>                      CompareType;                                              // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              CompareValue;                                             // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Health");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.DunDefTargetableInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTargetableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTargetableInterface");
		return ptr;
	}


	unsigned long ForceLineOfSight();
	void setIsWebbed(unsigned long isWebbed);
	unsigned long isWebbed();
	unsigned long AllowSuction();
	void HealPctOfMaxHealth(float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	unsigned long GetChainIgnore();
	void SetChainIgnore(unsigned long ignore);
	unsigned long IsBeingChainedBy(class ADunDefTower_ChainLightning* Tower);
	void RemoveFromChainingTowers(class ADunDefTower_ChainLightning* Tower);
	void AddToChainingTowers(class ADunDefTower_ChainLightning* Tower);
	float GetLightningTowerDamagePercent();
	float GetHealthPercent();
	int GetHealth(unsigned long bGetMax);
	unsigned long ForceMoveActor(class AActor* Mover, const struct FVector& NewLoc);
	class UPrimitiveComponent* GetOverrideTargetComponent();
	void LocalTookDamage(int DamageAmount, const struct FVector& atPosition, class UClass* fromDamageType);
	float GetMass();
	unsigned long AllowDarknessIgnorance();
	unsigned long ForceFriendlyFire(class AActor* Target);
	struct FVector GetInterpolatedTargetingLocation(class AActor* RequestedBy);
	struct FVector GetTargetingLocation(class AActor* RequestedBy);
	void OnDestroy_RemoveFromTargetableList();
	void OnPostBeginPlay_AddToTargetableList();
	void UnregisterAttacker(class ADunDefEnemyController* forController);
	void RegisterAttacker(class ADunDefEnemyController* forController);
	float GetAttackRangeOffset();
	unsigned long IgnoreFriendlyFireDamage(const TScriptInterface<class UDunDefTargetableInterface>& instigatorActor, class AController* OptionalController);
	int GetTargetingTeam();
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
};


// Class UDKGame.ActorFilter_Physics
// 0x000F (0x004B - 0x003C)
class UActorFilter_Physics : public UActorFilter
{
public:
	TEnumAsByte<EActorFilterRequirement>               Physics[0xF];                                             // 0x003C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Physics");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.ActorFilter_Template
// 0x0018 (0x0054 - 0x003C)
class UActorFilter_Template : public UActorFilter
{
public:
	TArray<class UObject*>                             AllowTemplates;                                           // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<class UObject*>                             DisAllowTemplates;                                        // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ActorFilter_Template");
		return ptr;
	}


	unsigned long IsAllowed(class UObject* theObject);
};


// Class UDKGame.AdvancedConsoleCommandsSettings
// 0x0068 (0x00A4 - 0x003C)
class UAdvancedConsoleCommandsSettings : public UObject
{
public:
	struct FItemTestInfo                               testInfo;                                                 // 0x003C(0x0044) (Config, NeedCtorLink)
	TArray<struct FString>                             HeroEquipmentReferences;                                  // 0x0080(0x000C) (Config, NeedCtorLink)
	struct FString                                     OutputText;                                               // 0x008C(0x000C) (Config, NeedCtorLink)
	struct FString                                     WaveStatTestString;                                       // 0x0098(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AdvancedConsoleCommandsSettings");
		return ptr;
	}

};


// Class UDKGame.AnalyticsXML
// 0x0031 (0x028D - 0x025C)
class AAnalyticsXML : public ATcpLink
{
public:
	struct FString                                     Events[0x4];                                              // 0x025C(0x000C) (NeedCtorLink)
	TEnumAsByte<EGameEvent>                            GameEvent;                                                // 0x028C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AnalyticsXML");
		return ptr;
	}


	void ReceivedText(const struct FString& Text);
	struct FString MessageToSend();
	void Opened();
	void Resolved(const struct FIpAddr& Addr);
	void SendFormattedData(unsigned char Type);
};


// Class UDKGame.AnimNotify_DisableParticleEffects
// 0x000C (0x0048 - 0x003C)
class UAnimNotify_DisableParticleEffects : public UAnimNotify_Scripted
{
public:
	TArray<struct FName>                               DisableParticleEffectTags;                                // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AnimNotify_DisableParticleEffects");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class UDKGame.AnimNotify_ScriptedEquipmentAttachment
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_ScriptedEquipmentAttachment : public UAnimNotify_Scripted
{
public:
	int                                                NotifyID;                                                 // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AnimNotify_ScriptedEquipmentAttachment");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class UDKGame.AnimNotify_ToggleLights
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_ToggleLights : public UAnimNotify_Scripted
{
public:
	struct FName                                       LightTagToEnable;                                         // 0x003C(0x0008) (Edit)
	struct FName                                       LightTagToDisable;                                        // 0x0044(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AnimNotify_ToggleLights");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class UDKGame.AntiCheat
// 0x0008 (0x0044 - 0x003C)
class UAntiCheat : public UObject
{
public:
	int                                                SpeedHackDetections;                                      // 0x003C(0x0004)
	float                                              LastSystemtime;                                           // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.AntiCheat");
		return ptr;
	}


	unsigned long CheckGameInfo();
	unsigned long CheckSpeedHack();
	unsigned long CheckTowers();
	unsigned long CheckHeroStats();
	unsigned long DoAntiCheatChecks();
	void HandleCheater();
	void KickEveryone();
	float STATIC_GetAntiCheatInterval();
};


// Class UDKGame.DunDefViewportClient
// 0x0CCC (0x0E08 - 0x013C)
class UDunDefViewportClient : public UDunDefNativeViewportClient
{
public:
	class UFont*                                       GlobalSmallFontReference;                                 // 0x013C(0x0004)
	struct FCursorParticle                             CursorParticles[0x48];                                    // 0x0140(0x0028)
	class UMaterial*                                   CursorParticleMat;                                        // 0x0C80(0x0004)
	int                                                LastCanvasWidth;                                          // 0x0C84(0x0004)
	int                                                LastCanvasHeight;                                         // 0x0C88(0x0004)
	unsigned long                                      WantSplitScreen : 1;                                      // 0x0C8C(0x0004)
	unsigned long                                      SelectedCharacters : 1;                                   // 0x0C8C(0x0004)
	unsigned long                                      EnablePostProcessing : 1;                                 // 0x0C8C(0x0004) (Config)
	unsigned long                                      PlayerOneUseGamepad : 1;                                  // 0x0C8C(0x0004) (Config)
	unsigned long                                      DrawBlackOverlay : 1;                                     // 0x0C8C(0x0004)
	unsigned long                                      bUseConsole : 1;                                          // 0x0C8C(0x0004) (Config)
	unsigned long                                      AnyParticlesRemaining : 1;                                // 0x0C8C(0x0004)
	unsigned long                                      HasFirstTicked : 1;                                       // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bViewportInitialized : 1;                                 // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bRegularCursor : 1;                                       // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bShownDLCSplash : 1;                                      // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bDidDrawCursor : 1;                                       // 0x0C8C(0x0004)
	unsigned long                                      bGlobalUISceneWantsParticles : 1;                         // 0x0C8C(0x0004)
	unsigned long                                      bHideCursor : 1;                                          // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bWasCursorLocked : 1;                                     // 0x0C8C(0x0004) (Transient)
	unsigned long                                      bIsResettingForNewMap : 1;                                // 0x0C8C(0x0004) (Transient)
	unsigned long                                      oldFullscreenViewport : 1;                                // 0x0C8C(0x0004) (Transient)
	unsigned long                                      showConnectionErrorAfterTravel : 1;                       // 0x0C8C(0x0004)
	unsigned long                                      customErrorTitle : 1;                                     // 0x0C8C(0x0004)
	unsigned long                                      bDisplayVersionString : 1;                                // 0x0C8C(0x0004) (Config)
	unsigned long                                      SetupUpHurtEffectsOpened : 1;                             // 0x0C8C(0x0004)
	float                                              LastResetCursorParticleTime;                              // 0x0C90(0x0004)
	struct FVector                                     LastMouseCoords;                                          // 0x0C94(0x000C) (Transient)
	float                                              Gamma;                                                    // 0x0CA0(0x0004) (Config)
	float                                              VolumeSFX;                                                // 0x0CA4(0x0004) (Config)
	float                                              VolumeMusic;                                              // 0x0CA8(0x0004) (Config)
	struct FString                                     MobileHeroManager;                                        // 0x0CAC(0x000C) (Config, NeedCtorLink)
	struct FString                                     CaliberateMoveString;                                     // 0x0CB8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConnectEyeString;                                         // 0x0CC4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConnectNavString;                                         // 0x0CD0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DownloadingSubscribed;                                    // 0x0CDC(0x000C) (Localized, NeedCtorLink)
	float                                              LastMouseMovementTime;                                    // 0x0CE8(0x0004) (Transient)
	class UUI_LoadingScreen*                           TheLoadingScreen;                                         // 0x0CEC(0x0004) (Transient)
	float                                              LastRealDeltaTime;                                        // 0x0CF0(0x0004) (Transient)
	float                                              ScriptAbsoluteSeconds;                                    // 0x0CF4(0x0004) (Transient)
	class UDunDefHeroManager*                          HeroManagerTemplate;                                      // 0x0CF8(0x0004)
	class UDunDefHeroManager*                          TheHeroManager;                                           // 0x0CFC(0x0004) (Transient)
	class UDunDefViewportInput*                        MyInput;                                                  // 0x0D00(0x0004) (Transient)
	class UCampaignLevelEntryObject*                   nextLevelEntryObject;                                     // 0x0D04(0x0004) (Transient)
	struct FVector2D                                   CursorLock;                                               // 0x0D08(0x0008) (Transient)
	class UDunDefUIScene*                              GlobalHUDUITemplate;                                      // 0x0D10(0x0004)
	struct FName                                       AltOpeningAnim;                                           // 0x0D14(0x0008)
	class UMaterialInterface*                          SaveIconMaterial;                                         // 0x0D1C(0x0004)
	float                                              SaveIconSize;                                             // 0x0D20(0x0004)
	float                                              SaveIconPaddingX;                                         // 0x0D24(0x0004)
	float                                              SaveIconPaddingY;                                         // 0x0D28(0x0004)
	float                                              LastSavingTime;                                           // 0x0D2C(0x0004)
	struct FString                                     MSG_DuplicateLoginTitle;                                  // 0x0D30(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedTitle;                                      // 0x0D3C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_JoinFailedDescription;                                // 0x0D48(0x000C) (Localized, NeedCtorLink)
	float                                              TheUIScalePercent;                                        // 0x0D54(0x0004)
	struct FVector2D                                   OldViewportsize;                                          // 0x0D58(0x0008) (Transient)
	int                                                MouseEntropy1;                                            // 0x0D60(0x0004) (Transient)
	int                                                MouseEntropy2;                                            // 0x0D64(0x0004) (Transient)
	struct FAxisInfo                                   playerAxes[0x4];                                          // 0x0D68(0x0010)
	TEnumAsByte<EOnlineServerConnectionStatus>         LastConnectionStatus;                                     // 0x0DA8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0DA9(0x0003) MISSED OFFSET
	struct FString                                     cachedConnectionErrorTitle;                               // 0x0DAC(0x000C) (NeedCtorLink)
	struct FString                                     cachedConnectionErrorMessage;                             // 0x0DB8(0x000C) (NeedCtorLink)
	class UDunDefUIScene*                              delayedScene;                                             // 0x0DC4(0x0004)
	float                                              sceneDelayTime;                                           // 0x0DC8(0x0004)
	struct FString                                     versionString;                                            // 0x0DCC(0x000C) (Config, NeedCtorLink)
	struct FString                                     HeroManagerTemplateString;                                // 0x0DD8(0x000C) (Config, NeedCtorLink)
	struct FString                                     DemoString;                                               // 0x0DE4(0x000C) (Localized, NeedCtorLink)
	int                                                LastMainMenuButton;                                       // 0x0DF0(0x0004)
	float                                              SetupUpHurtEffectsTimerStarted;                           // 0x0DF4(0x0004)
	class UCDTSettingsManager*                         mySettings;                                               // 0x0DF8(0x0004)
	TArray<int>                                        emulatorIds;                                              // 0x0DFC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefViewportClient");
		return ptr;
	}


	void SetSimpleDamageNumbers(unsigned long SimpleDamageNumbersEnabled);
	void SetDamageNumberScale(float val);
	void SetStepTowardsTarget(unsigned long StepTowardsTargetEnabled);
	void SetCensorItems(unsigned long CensorItemsEnabled);
	void ToggleStepTowardsTarget();
	void ToggleItemCensor();
	void SetQualityOutlineFilter(int val);
	unsigned long ToggleQualityOutline();
	void SetQualityOutline(unsigned long outlineEnabled);
	unsigned long ToggleHideMiniMapBillboards();
	unsigned long GetHardcore();
	void SetHardcore(unsigned long hardcore);
	void SetHideMiniMapBillboards(unsigned long Hide);
	unsigned long ToggleHideGoodEquipmentOverlay();
	void SetHideGoodEquipmentOverlay(unsigned long Hide);
	unsigned long ToggleHideMiniMapTowers();
	void SetHideMiniMapTowers(unsigned long Hide);
	int IncreaseSF();
	int IncreaseDisplayedTowerUpgradeLevel();
	int CycleItemQualityFx();
	int CycleShowEquipmentQualityCount();
	void SetCosmeticSetVisible(unsigned long val);
	void SetCDPortalVisible(unsigned long val);
	void SetShowEquipmentQualityCount(int val);
	void SetDroppedItemQualityFx(int val);
	void SetOtherPlayerCanSellTower(unsigned long val);
	void SetCanMoveWhileBuilding(unsigned long val);
	void SetTowersUseDynamicLighting(unsigned long val);
	void SetOutline(unsigned long Enabled);
	void SetFrameRateLimit(float FrameRateLimit);
	void SetGraphicsQuality(TEnumAsByte<EGraphicsQuality> Graphics);
	void RemoveSplitscreenPlayers();
	void WorldPreBeginPlay(class AWorldInfo* theWorldInfo);
	unsigned long IsGamepadOwned();
	unsigned long IsAnyPlayerUsingGamepad();
	struct FString GetResolutionString();
	void CinematicCompleted();
	unsigned long HasFullSceenInputLockingUI();
	void PlayMusic(class USoundCue* musicCue, float FadeInTime, float FadeInVolumeLevel, float FadeOutTime, float FadeOutVolumeLevel);
	void SetVisibleInWaitingMode(class ADunDefPlayerController* PC, unsigned long visible);
	int GetLastMainMenuButton();
	void SetLastMainMenuButton(int whichButton);
	unsigned long IsAnyConsolePointerAvailable();
	void EditBoxSubmitted(class UUIEditBox* Sender);
	void EditBoxFocused(class UUIEditBox* focusedEditBox, int PlayerIndex);
	void FlushPlayerInputs();
	void RemoveNonSignedInControllers();
	void ShowMessageForLastConnectionErrors();
	void ClearCachedMessage();
	void SetCachedMessage(const struct FString& Title, const struct FString& Message);
	unsigned long CachedMessageIsDisplaying(const struct FString& Title, const struct FString& Message);
	void NotifyLocalPlayerLeaving(class ULocalPlayer* LPlayer, unsigned long Logout);
	void ChangedKeyboardPlayer(unsigned long bAdded);
	unsigned long OnInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, unsigned long bGamepad);
	void GameSessionEnded();
	unsigned long IsPrimaryProfilePlayer(class ULocalPlayer* thePlayer);
	int GetFreeEmulatorSlot();
	void EmulatorUnpause();
	void QuickAddSplits();
	void KickAllSplits();
	void HandlePotentialEmulatorLeave(int theirId);
	void SetEmulatorPlayer(int PlayerIndex);
	void SetKeyboardPlayer(int toindex);
	void RefreshGamepadAssignments();
	class UDunDefViewportClient* STATIC_GetViewportClient();
	void UpdateAutoSplitType();
	void ResetForNewMap(unsigned long bForceDestroyGRI, unsigned long bIsLoadingLevel);
	unsigned long Init(struct FString* OutError);
	void HideGlobalScene(class UDunDefUIScene* theScene);
	class UDunDefUIScene* ShowGlobalScene(class UDunDefUIScene* theScene, unsigned long OpenForPlayer, class ULocalPlayer* PlayerOwner, class UUIScene* sceneToLoseFocus, const struct FName& AlternateOpeningAnimation, unsigned char ForceSceneStackPriority, int CustomInitIndex);
	void DelayedShowGlobalScene(class UDunDefUIScene* theScene, float Timer);
	void DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message);
	void AdjustSplitScreenPerformance();
	void CloseLoadingScreen();
	void CloseAllUIScenesOfClass(class UClass* UISceneClass);
	void CloseAllGlobalUIScenesOfClass(class UClass* UISceneClass, unsigned long CloseWithAnimation);
	void CloseExtraPauseMenuScenes(class ULocalPlayer* LP);
	unsigned long CloseAllGlobalUIScenesForPlayer(class ULocalPlayer* PlayerOwner, unsigned long CloseWithAnimation, unsigned long OnlyCloseGameplayScenes);
	void CloseAllInputProcessingScenes(class UUIScene* sceneToIgnore);
	void CloseAllGlobalUIScenes(unsigned long bDontCloseLoadingScreen);
	class UUI_LoadingScreen* ShowLoadingScreen(unsigned long isGameplayMapTransition);
	void SetAllGlobalUIScenesVisible(unsigned long visible);
	class AMain* GetGameInfo();
	void SetResolution(const struct FString& newResolution, unsigned long newFullScreen);
	void SetPostProcessingEnabled(unsigned long Enable);
	void SetUIScalePercent(float UIScalePercent);
	void SetSaturation(float saturation);
	void SetGamma(float Value);
	class UEngine* STATIC_GetEngine();
	void NotifyConnectionError(const struct FString& Message, const struct FString& Title);
	unsigned long ReportJoinFailure(class UUI_MessageBox* Sender, const struct FString& ButtonClicked, int PlayerIndex);
	void NotifyDownloadProgress(const struct FString& Message, const struct FString& Title);
	unsigned long OnCancelDownloadProgress(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	unsigned long OnAcceptConnectionError(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void TestAudioSettings(float tempSFXVolume, float tempMusicVolume);
	void UpdateAudioSettings(float SFXscale, float MusicScale, unsigned long UpdateSFXAndMusic, unsigned long UpdateMovie, unsigned long bForceUpdate);
	void SetMusicVolume(float TheVolume);
	void SetSFXVolume(float TheVolume);
	void FirstTick();
	void PlayerFourInvited(struct FOnlineGameSearchResult* InviteResult);
	void PlayerThreeInvited(struct FOnlineGameSearchResult* InviteResult);
	void PlayerTwoInvited(struct FOnlineGameSearchResult* InviteResult);
	void PlayerOneInvited(struct FOnlineGameSearchResult* InviteResult);
	void CreatePlayerForInvte(int ControllerId, struct FOnlineGameSearchResult* InviteResult);
	void NotifyEquipmentChanged(class ULocalPlayer* pl);
	void NotifyLevelVictory();
	void NotifyGameOver();
	void NotifyPlayerTakeHit(class ULocalPlayer* pl);
	void NotifyPhaseChange(unsigned long IsCombatPhase);
	void NotifyPlayerLeft(class APlayerReplicationInfo* PRI);
	void NotifyLocalPlayerRemoved(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyLocalPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyPlayerJoined(class APlayerReplicationInfo* PRI);
	unsigned long IsTopLevelSceneForEveryone(class UDunDefUIScene* aScene);
	unsigned long IsTopLevelSceneOrNone(class UDunDefUIScene* aScene, class ULocalPlayer* ForPlayer);
	class UUIScene* GetActiveScene(class ULocalPlayer* ForPlayer, unsigned long IgnoreUnfocusedScenes);
	unsigned long IsTopLevelScene(class UDunDefUIScene* aScene, class ULocalPlayer* ForPlayer);
	TArray<class UDunDefUIScene*> GetActiveUIScenesFromClass(class UClass* fromClass);
	class UDunDefUIScene* GetActiveUISceneFromClass(class UClass* fromClass, class ULocalPlayer* ForPlayer);
	class UUIScene* GetActiveUISceneFromBaseClass(class UClass* fromClass, class ULocalPlayer* ForPlayer);
	class UDunDefUIScene* GetActiveUIScene(class UDunDefUIScene* fromTemplate, class ULocalPlayer* ForPlayer);
	unsigned long IsSceneInstanceOpened(class UDunDefUIScene* UISceneInstance);
	class UDunDefUIScene* GetSceneShowingKeyboard();
	void HideCursor();
	void Tick(float DeltaTime);
	void ResolutionChanged();
	void PerformStatsSending(float DeltaTime);
	class ULocalPlayer* GetFirstGamePlayer();
	class ULocalPlayer* GetLocalPlayerWithController(int ControllerId);
	class ULocalPlayer* GetLocalPlayerFromIndex(int Index);
	class UDunDefLocalPlayer* GetLocalKeyboardPlayer();
	int GetNumLocalPlayers();
	TArray<int> GetLocalPlayerControllerIds();
	TArray<class ULocalPlayer*> GetLocalPlayers();
	void DunDefSetSplitScreen(unsigned long Splitscreen);
	unsigned long AllowSplitscreenJoin();
	void UpdateActiveSplitscreenType();
	int GetIndexOfLocalPlayer(class ULocalPlayer* LP);
	class ULocalPlayer* CreatePlayer(int ControllerId, unsigned long bSpawnActor, struct FString* OutError);
	void ResetKeyboardController();
	unsigned long RemovePlayer(class ULocalPlayer* ExPlayer, unsigned long justRemove, unsigned long forceQuitToMainMenu, unsigned long bIgnoreGuests);
	void DebugRemovePlayer(int ControllerId);
	class ULocalPlayer* DebugCreateLocalPlayer(int ControllerId);
	void GetCurrentCanvasSize(int* Width, int* Height);
	void SetMousePositionFromWorldVector(class UCanvas* C, const struct FVector& WorldPos, class ULocalPlayer* InPlayer);
	void SetMousePos(const struct FVector& ScreenPos);
	void SetMousePosition(float screenWidthPercent, float screenHeightPercent);
	void ResetCursorParticle(struct FCursorParticle* Particle);
	void UpdateCursorParticles(float DeltaTime);
	void DrawCursorParticles(class UCanvas* Canvas);
	unsigned long ShouldDrawGameplayCursor();
	void ChaseCenterCursor(class ADunDefPlayerController* thePC);
	unsigned long ShouldLockCursorPosition();
	unsigned long AreAnyPlayersUsingCursorChaseCamera();
	void DrawCursor(class UCanvas* Canvas);
	unsigned long ShouldShowCursorParticles();
	class APlayerController* GetPlayerController();
	unsigned long HasAnyPawn();
	void PostRender(class UCanvas* Canvas);
};


// Class UDKGame.ItemFolderStub
// 0x0010 (0x004C - 0x003C)
class UItemFolderStub : public UObject
{
public:
	int                                                FolderID;                                                 // 0x003C(0x0004) (Transient)
	struct FString                                     FolderName;                                               // 0x0040(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ItemFolderStub");
		return ptr;
	}


	unsigned long IsRootEntry();
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	int GetFolderID();
	struct FString GetDataString(int dataSetType);
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
};


// Class UDKGame.CampaignLevelEntryObject
// 0x014C (0x0188 - 0x003C)
class UCampaignLevelEntryObject : public UObject
{
public:
	struct FCampaignLevelEntry                         MyLevelEntry;                                             // 0x003C(0x0118) (NeedCtorLink)
	struct FString                                     EntryIdentifierTag;                                       // 0x0154(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LevelFileName;                                            // 0x0160(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LevelFriendlyName;                                        // 0x016C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      AlwaysUnlocked : 1;                                       // 0x0178(0x0004) (Edit)
	unsigned long                                      ProceedsToNextLevel : 1;                                  // 0x0178(0x0004) (Edit)
	struct FString                                     NewString;                                                // 0x017C(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.CampaignLevelEntryObject");
		return ptr;
	}


	void InitFrom(const struct FCampaignLevelEntry& levelEntry);
	unsigned long IsRootEntry();
	int GetFolderID();
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetEntryFriendlyName();
	struct FString GetDataString(int dataSetType);
};


// Class UDKGame.DunDefPlayerStats
// 0x0000 (0x009C - 0x009C)
class UDunDefPlayerStats : public UStatSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerStats");
		return ptr;
	}


	void FillStats();
	void Initialize();
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
};


// Class UDKGame.DunDefAchievementManager
// 0x00BC (0x00F8 - 0x003C)
class UDunDefAchievementManager : public UObject
{
public:
	TArray<struct FAchievementEntry>                   AchievementEntries;                                       // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     UnlockedMessageString;                                    // 0x0048(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UnlockedCoreMessageString;                                // 0x0054(0x000C) (Edit, Localized, NeedCtorLink)
	class USoundCue*                                   UnlockedAchievementSound_PC;                              // 0x0060(0x0004) (Edit)
	class USoundCue*                                   UnlockedCoreSound;                                        // 0x0064(0x0004) (Edit)
	TArray<struct FString>                             Area1_Tags;                                               // 0x0068(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             Area2_Tags;                                               // 0x0074(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             Area3_Tags;                                               // 0x0080(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             AllArea_Tags;                                             // 0x008C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             Challenge_Tags;                                           // 0x0098(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             FamiliarTypes;                                            // 0x00A4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFamiliarTypeAlias>                  FamiliarAliases;                                          // 0x00B0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             AllFamiliarTypes;                                         // 0x00BC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFamiliarTypeAlias>                  AllFamiliarAliases;                                       // 0x00C8(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              HeroClassUniqueIDs;                                       // 0x00D4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             TranscendentSurvivalistAreaTags;                          // 0x00E0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             MasterRTSAreaTags;                                        // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefAchievementManager");
		return ptr;
	}


	class UDunDefAchievementManager* STATIC_GetAchievementManager();
	unsigned long DoesAnyLocalPlayerHaveAchievementUnlocked(TEnumAsByte<EAchievement> Achievement, unsigned long bOnlyCheckPrimaryPlayer);
	unsigned long IsAchievementUnlocked(class ULocalPlayer* Player, TEnumAsByte<EAchievement> Achievement);
	unsigned long AreAllOtherAchievementsUnlocked(class ULocalPlayer* Player, unsigned long bIsUltimate);
	void CheckToUnlockAchivement(class ADunDefPlayerController* ForPlayer, TEnumAsByte<EAchievementCheckSet> AchievementCheckSet, class UDunDefHero* hero, class UHeroEquipment* Equipment, class UCampaignLevelEntryObject* beatLevelEntryObject, int intParam1, int intParam2);
	void CheckAllFamiliars(class ADunDefPlayerController* ForPlayer, class UHeroEquipment* equipToCheck);
	void CheckFamiliars(class ADunDefPlayerController* ForPlayer, class UHeroEquipment* equipToCheck);
	void CheckSurvivalWaveAchievements(int GameDifficulty, int theWaveNumber);
	void CheckAwardAchievements(class ADunDefPlayerController* ForPlayer, int GameDifficulty);
	unsigned long CheckAward(class UDunDefPlayerStats* theStats, int StatClassIndex, const struct FString& BufferName, int StartDifficulty, int minimumValue);
	void CheckLevelCompletionAchievements(class ADunDefPlayerController* ForPlayer, class UCampaignLevelEntryObject* levelEntry, int GameDifficulty);
	unsigned long CanIGetAHug(class ADunDefPlayerController* ForPlayer, unsigned char HeroUniqueTemplateHeroID);
	int GetAchievemntEntryIndex(TEnumAsByte<EAchievement> Achievement);
	struct FString GetCoreUnlockString(int Index, int PlayerIndex);
	void UnlockCores(class ADunDefPlayerController* ForPlayer, TEnumAsByte<EAchievement> Achievement);
	void DoUnlockAchivement(class ADunDefPlayerController* ForPlayer, TEnumAsByte<EAchievement> Achievement, unsigned long UnlockForEveryone, unsigned long bRequirePawnPossession, unsigned long bPCDontRecurse, unsigned long onlyUnlockLocal);
};


// Class UDKGame.DunDefSceneClient
// 0x0044 (0x01EC - 0x01A8)
class UDunDefSceneClient : public UGameUISceneClient
{
public:
	TArray<struct FName>                               CustomPostProcessEffects;                                 // 0x01A8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MSG_NetworkConnectionLostTitle;                           // 0x01B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_NetworkConnectionLostDescription;                     // 0x01C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_SigninChangeTitle;                                    // 0x01CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_SigninChangeDescription;                              // 0x01D8(0x000C) (Localized, NeedCtorLink)
	class UUI_MessageBox*                              MessageBoxTemplate;                                       // 0x01E4(0x0004) (Transient)
	unsigned long                                      bAllowImpactDecals : 1;                                   // 0x01E8(0x0004)
	unsigned long                                      isInMultiplayerUI : 1;                                    // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefSceneClient");
		return ptr;
	}


	void EmulateOnlineServiceConnect();
	void EmulateOnlineServiceDisconnect();
	void EmulateLinkStatusChange(unsigned long connected);
	void NotifyActiveSplitScreenChanged();
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void NotifyLinkStatusChanged(unsigned long bConnected);
	void PauseGame(unsigned long bDesiredPauseState, int PlayerIndex);
	class UDunDefSceneClient* STATIC_GetDunDefSceneClient();
	void NotifyGameSessionEnded();
	void NotifyClientTravel(class APlayerController* TravellingPlayer, const struct FString& TravelURL, TEnumAsByte<ETravelType> TravelType, unsigned long bIsSeamlessTravel);
	unsigned long MidGameLoadConfirmation(class UUI_MessageBox* theMessageBox, const struct FString& ButtonPressed, int whichPlayer);
	void LoadToMainMenu(class ULocalPlayer* thePlayer);
	unsigned long STATIC_HasActiveDunDefMessageBox(const struct FName& SceneTag);
	void STATIC_CloseDunDefMessageBox(const struct FName& SceneTag, class ULocalPlayer* PlayerOwner);
	void STATIC_ShowDunDefMessageBox(const struct FName& SceneTag, const struct FString& Title, const struct FString& Message, TEnumAsByte<EMessageBoxType> Type, class ULocalPlayer* PlayerOwner, const struct FScriptDelegate& clickedDel, const struct FScriptDelegate& closeDel);
	void SetLowParticles(int NumPlayers);
	void RefreshUsedHeroes();
	void RefreshHeroLists();
	void SetSHLights(class AActor* useActor, unsigned long Enabled);
	void UpdateVisibleStaticMeshes(class AActor* useActor, int NumPlayers);
	void ManageSMCVisibility(class AActor* useActor, class UStaticMeshComponent* Component, int NumPlayers, unsigned long bIs3D);
	void UpdateVisibleActors(class AActor* useActor, int NumPlayers);
	void DisablePostProcessing();
	void EnablePostProcessing();
	void ToggleCustomEffects(unsigned long bShow);
	void SetupPlayerPostProcess(class ULocalPlayer* ForPlayer, class UPostProcessChain* templateChain, unsigned long keepEffects);
	class UPostProcessChain* GetTemplateChain(int NumPlayers);
	void AdjustPerformanceForAddedPlayer(int NumPlayers, class ULocalPlayer* AddedPlayer, unsigned long adjustPostProcess);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
};


// Class UDKGame.DunDefCrystalCore
// 0x0168 (0x0670 - 0x0508)
class ADunDefCrystalCore : public ADunDefDamageableTarget
{
public:
	class UStaticMeshComponent*                        CollisionMesh;                                            // 0x0508(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    CoreParticleEffect;                                       // 0x050C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    VictoryParticleEffect;                                    // 0x0510(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BuildParticleEffect;                                      // 0x0514(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMaterialInterface*                          InDangerHUDWaypointMatHealthBar;                          // 0x0518(0x0004) (Edit, Net)
	class UMaterialInterface*                          InDangerHUDWaypointMat;                                   // 0x051C(0x0004) (Edit, Net)
	struct FColor                                      ToolTipDrawColor;                                         // 0x0520(0x0004) (Edit)
	struct FColor                                      ToolTipOutOfRangeColor;                                   // 0x0524(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x0528(0x0004) (Edit)
	float                                              TowerPreventionRadius;                                    // 0x052C(0x0004) (Edit)
	float                                              InDangerHUDFadeOutTime;                                   // 0x0530(0x0004) (Edit)
	float                                              InDangerHUDFadeInTime;                                    // 0x0534(0x0004) (Edit)
	float                                              CoreIndicateDamageTime;                                   // 0x0538(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ActivatedEmitter;                                         // 0x053C(0x0004) (Edit)
	struct FString                                     ActivationBuildPhaseString;                               // 0x0540(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationVictoryString;                                  // 0x054C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationVictoryViewStatsString;                         // 0x0558(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CoreUnderAttackMessageString;                             // 0x0564(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      CoreUnderAttackMessageColor;                              // 0x0570(0x0004) (Edit)
	class UPointLightComponent*                        CoreLight;                                                // 0x0574(0x0004) (Edit, ExportObject, Component, EditInline)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0578(0x0004) (Edit, Net)
	float                                              MiniMapIconSize;                                          // 0x057C(0x0004) (Edit)
	float                                              ExplosionColorIntensityMultiplier;                        // 0x0580(0x0004) (Edit)
	float                                              ActivationColorIntensityMultiplier;                       // 0x0584(0x0004) (Edit)
	float                                              HurtColorIntensityMultiplier;                             // 0x0588(0x0004) (Edit)
	class UAudioComponent*                             MyAmbientSound;                                           // 0x058C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UUI_GameSetup*                               GameSetupUITemplate;                                      // 0x0590(0x0004) (Edit)
	class UUI_PlayerStats*                             PlayerStatsUITemplate;                                    // 0x0594(0x0004) (Edit)
	float                                              ReportAttackedStatNoDamageInterval;                       // 0x0598(0x0004) (Edit)
	float                                              DamageForceFeedbackNoDamageInterval;                      // 0x059C(0x0004) (Edit)
	float                                              PostCreationActivationAllowanceInterval;                  // 0x05A0(0x0004) (Edit)
	TArray<class UMaterialInstanceConstant*>           AdditionalColorableMaterials;                             // 0x05A4(0x000C) (Edit, NeedCtorLink)
	struct FName                                       ColorMaterialColorParamNames[0x3];                        // 0x05B0(0x0008) (Edit)
	class USoundCue*                                   CoreFirstHitSound;                                        // 0x05C8(0x0004) (Edit)
	float                                              WarningIconCenterYOffset;                                 // 0x05CC(0x0004) (Edit)
	float                                              WarningIconCenterScale;                                   // 0x05D0(0x0004) (Edit)
	unsigned long                                      bStaticCrystalCoreVisuals : 1;                            // 0x05D4(0x0004) (Edit)
	unsigned long                                      bDisableActivation : 1;                                   // 0x05D4(0x0004) (Edit)
	unsigned long                                      bVictoryEffectActive : 1;                                 // 0x05D4(0x0004) (Net)
	unsigned long                                      bBuildEffectActive : 1;                                   // 0x05D4(0x0004) (Net)
	unsigned long                                      bStartedDangerFadeIn : 1;                                 // 0x05D4(0x0004) (Transient)
	struct FString                                     LobbyOpenGameSetupString;                                 // 0x05D8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LobbyViewHostsStatsString;                                // 0x05E4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LobbyViewYourStatsString;                                 // 0x05F0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      LobbyActivationStringColor;                               // 0x05FC(0x0004) (Edit)
	struct FColor                                      LobbyWaitingForStatsColor;                                // 0x0600(0x0004) (Edit)
	class UForceFeedbackWaveform*                      HurtForceFeedbackWaveForm;                                // 0x0604(0x0004) (Edit, EditInline)
	class UForceFeedbackWaveform*                      SmallHurtForceFeedbackWaveForm;                           // 0x0608(0x0004) (Edit, EditInline)
	struct FLinearColor                                StaticCrystalCoreVisualHitcolor;                          // 0x060C(0x0010) (Edit)
	struct FLinearColor                                SoulColorAddValue;                                        // 0x061C(0x0010) (Edit)
	class UParticleLightEnvironmentComponent*          ParticleLightEnvComp;                                     // 0x062C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   InDangerHUDWaypointMatHealthBarInst;                      // 0x0630(0x0004) (Transient)
	float                                              LastActivationTime;                                       // 0x0634(0x0004) (Transient)
	struct FCrystalCoreOptions                         CrystalCoreInfo;                                          // 0x0638(0x0034) (Net)
	float                                              LastStartedDangerFadeInTime;                              // 0x066C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefCrystalCore");
		return ptr;
	}


	void PlayHitEffect(class UClass* DamageType, const struct FVector& HitLocation);
	unsigned long AllowDarknessIgnorance();
	void EncroachedBy(class AActor* Other);
	float DTGetEnemyTargetingDesirability(class ADunDefEnemyController* forController);
	void SetBuildEffect(unsigned long activateEffect);
	void SetVictoryEffect(unsigned long activateEffect);
	void ChangedGamePhases(unsigned long IsCombatPhase);
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void SubtractHealth(int DamageAmount);
	void UpdateCrystalCore(unsigned long locked);
	void PostBeginPlay();
	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long CheckAllowance();
	class UDunDefHeroManager* GetHeroManager();
	void Destroyed();
	void Died(class AController* EventInstigator, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser);
	void NotifyTookDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class AActor* DamageCauser);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	void NotifyHealthChange();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	void Activate();
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	struct FString GetLobbyActivationString(class ADunDefPlayerController* PC, int activationType);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
};


// Class UDKGame.DunDefPlayerCamera
// 0x0118 (0x0690 - 0x0578)
class ADunDefPlayerCamera : public ADunDefPlayerCameraNative
{
public:
	float                                              ShoulderCamRotationCompensation;                          // 0x0578(0x0004) (Edit)
	float                                              MobileCameraDistanceMultiplier;                           // 0x057C(0x0004) (Edit, Config)
	class USoundCue*                                   GamepadZoomSoundBlip;                                     // 0x0580(0x0004) (Edit)
	struct FRotator                                    PreviousShoulderCamTargetRotation;                        // 0x0584(0x000C) (Transient)
	float                                              AdditionalFOVMin;                                         // 0x0590(0x0004) (Edit)
	float                                              AdditionalFOVMax;                                         // 0x0594(0x0004) (Edit)
	float                                              PlacingTowerFOV;                                          // 0x0598(0x0004) (Edit)
	struct FVector                                     PlacingTowerLocationOffset;                               // 0x059C(0x000C) (Edit)
	struct FRotator                                    PlacingTowerRotationOffset;                               // 0x05A8(0x000C) (Edit)
	float                                              ChaseCameraPitchStickOffsetDown;                          // 0x05B4(0x0004) (Edit)
	float                                              ChaseCameraPitchStickOffsetUp;                            // 0x05B8(0x0004) (Edit)
	float                                              SpectatorCameraFOV;                                       // 0x05BC(0x0004) (Edit)
	float                                              SpectatorSmoothZoomSpeed;                                 // 0x05C0(0x0004) (Edit)
	float                                              CameraMinSpinPerFrame;                                    // 0x05C4(0x0004) (Edit)
	float                                              CameraMaxSpinPerFrame;                                    // 0x05C8(0x0004) (Edit)
	float                                              FPVCameraPitchMax;                                        // 0x05CC(0x0004) (Edit)
	float                                              FPVCameraPitchSensitivity;                                // 0x05D0(0x0004) (Edit)
	float                                              TPVCameraPitchSensitivity;                                // 0x05D4(0x0004) (Edit)
	int                                                PlacingTowerSpinOffset;                                   // 0x05D8(0x0004) (Transient)
	class AActor*                                      LastViewTarget;                                           // 0x05DC(0x0004) (Transient)
	unsigned long                                      UsedInvalidFOV : 1;                                       // 0x05E0(0x0004) (Transient)
	unsigned long                                      bLastVTWasPawn : 1;                                       // 0x05E0(0x0004) (Transient)
	unsigned long                                      bHideWeapon : 1;                                          // 0x05E0(0x0004) (Transient)
	float                                              MaxZoomOut;                                               // 0x05E4(0x0004) (Transient)
	float                                              MaxSpectatorZoom;                                         // 0x05E8(0x0004) (Transient)
	float                                              MinSpectatorZoom;                                         // 0x05EC(0x0004) (Transient)
	float                                              MinZoomIn;                                                // 0x05F0(0x0004) (Transient)
	float                                              FreeLookDistanceMultiplier;                               // 0x05F4(0x0004) (Transient)
	float                                              CameraDistanceInterpSpeed;                                // 0x05F8(0x0004) (Edit)
	float                                              TargetCameraDistanceMultiplier;                           // 0x05FC(0x0004)
	float                                              PreShoulderCamZoomDistance;                               // 0x0600(0x0004)
	float                                              PrePlacingTowerCameraDistance;                            // 0x0604(0x0004)
	class UCameraShake*                                HurtShake;                                                // 0x0608(0x0004)
	class UCameraShake*                                DeathShake;                                               // 0x060C(0x0004)
	float                                              SpectatorYaw;                                             // 0x0610(0x0004)
	float                                              TargetSpectatorYaw;                                       // 0x0614(0x0004)
	float                                              SpectatorPitch;                                           // 0x0618(0x0004)
	float                                              TargetSpectatorPitch;                                     // 0x061C(0x0004)
	float                                              SpectatorOffset;                                          // 0x0620(0x0004)
	float                                              LastServerCameraUpdate;                                   // 0x0624(0x0004)
	struct FVector                                     LastServerSentCameraLocation;                             // 0x0628(0x000C)
	struct FRotator                                    LastServerSentCameraRotation;                             // 0x0634(0x000C)
	struct FRotator                                    CurrentTargetTargetRotation;                              // 0x0640(0x000C)
	float                                              LastCameraZoomTime;                                       // 0x064C(0x0004) (Transient)
	float                                              SpectatorSmoothZoom;                                      // 0x0650(0x0004) (Transient)
	float                                              SpectatorSmoothMinZoom;                                   // 0x0654(0x0004) (Transient)
	float                                              SpectatorSmoothMaxZoom;                                   // 0x0658(0x0004) (Transient)
	float                                              PreSpectatorTargetCameraDistanceMultiplier;               // 0x065C(0x0004) (Transient)
	class ACameraActor*                                ForceCameraTarget;                                        // 0x0660(0x0004) (Transient)
	float                                              currentDesiredXSpeed;                                     // 0x0664(0x0004) (Transient)
	float                                              currentDesiredYSpeed;                                     // 0x0668(0x0004) (Transient)
	float                                              MinAllowedHeight;                                         // 0x066C(0x0004) (Transient)
	float                                              MaxAllowedHeight;                                         // 0x0670(0x0004) (Transient)
	struct FVector2D                                   MaxXYBounds;                                              // 0x0674(0x0008) (Transient)
	struct FVector2D                                   MinXYBounds;                                              // 0x067C(0x0008) (Transient)
	struct FVector                                     DesiredInitialOverlordCameraLocation;                     // 0x0684(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerCamera");
		return ptr;
	}


	void ForceSetCameraLocation(const struct FVector& NewLoc, unsigned long bDoInterp);
	void ZoomOutValue(float ZoomChange);
	void ZoomInValue(float ZoomChange);
	void MoveCamera(float xDir, float yDir);
	unsigned long UseFreeLook();
	unsigned long IsInShoulderMode();
	void PlayCameraShake(class UCameraShake* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void InitializeFor(class APlayerController* PC);
	void InitializeForPlayer(class ADunDefPlayer* Target);
	void NotifyPlayerDied();
	void NotifyPlayerTakeHit(float Damage);
	void UpdateOptions();
	void CycleZoom();
	float GetCameraZoomPercent();
	void ZoomOut();
	void ZoomIn();
	float AdjustDesiredFOV(float FOV, unsigned long bIgnoreUserFov);
	float GetScreenAspectRatio();
	unsigned long AllowTargetPoint(const struct FVector& theTargetPoint);
	void ResetInterpolations(class AActor* Target, unsigned long bUseTransformOverride, const struct FVector& newTargetLoc, const struct FRotator& newTargetRot);
	void Teleported(class AActor* Target, const struct FVector& newPawnLoc, const struct FRotator& newPawnRot);
	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void PostCameraTransform(float DeltaTime, struct FTViewTarget* theViewTarget);
	void Tick(float DeltaTime);
	unsigned long AllowOverTheShoulderCamera();
	void UpdateFreeLook(float DeltaTime, struct FTViewTarget* OutVT);
	void DisableShoulderCam();
	void EnableShoulderCam();
	unsigned long IsShoulderCamera();
	void SetCameraTransitionPoint();
	void StopPlacingTower();
	void StartPlacingTower();
	void CalculateSpinOffset();
	void TiltCamera(float Amount);
	void SpinCamera(float Amount, unsigned long forceSpin);
	void PostBeginPlay();
	void TurnSpectatorCameraOff();
	void UpdateSpectatorCamera();
	void UpdateSpectatorSmoothZoom(float Amount);
	void UpdateSpectatorPitch(float Amount);
	void UpdateSpectatorYaw(float Amount);
	void InitSpectatorCamera();
};


// Class UDKGame.UI_GameSetup
// 0x025C (0x0898 - 0x063C)
class UUI_GameSetup : public UDunDefUIScene
{
public:
	TEnumAsByte<E_MAPLISTTYPE>                         CurrentMapListType;                                       // 0x063C(0x0001) (Transient)
	TEnumAsByte<EGameDifficulty>                       CurrentDifficulty;                                        // 0x063D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x063E(0x0002) MISSED OFFSET
	class UUIPanel_DataList*                           MapDataList;                                              // 0x0640(0x0004) (Edit)
	class UUIButton*                                   LaunchButton;                                             // 0x0644(0x0004) (Edit)
	class UUIButton*                                   CloseButton;                                              // 0x0648(0x0004) (Edit)
	class UUICheckbox*                                 InfiniteWaveCheckbox;                                     // 0x064C(0x0004) (Edit)
	class UUICheckbox*                                 PureStrategyCheckbox;                                     // 0x0650(0x0004) (Edit)
	class UUICheckbox*                                 SurvivalCheckBox;                                         // 0x0654(0x0004) (Edit)
	class UUICheckbox*                                 MixModeCheckbox;                                          // 0x0658(0x0004) (Edit)
	class UUICheckbox*                                 HardcoreCheckbox;                                         // 0x065C(0x0004) (Edit)
	class UUICheckbox*                                 MayhemCheckbox;                                           // 0x0660(0x0004) (Edit)
	class UUILabel*                                    StartAtWaveLabel;                                         // 0x0664(0x0004) (Edit)
	class UUIButton*                                   StartAtWaveIncreaseButton;                                // 0x0668(0x0004) (Edit)
	class UUIButton*                                   StartAtWaveDecreaseButton;                                // 0x066C(0x0004) (Edit)
	float                                              waveChangeTimer;                                          // 0x0670(0x0004) (Transient)
	class UDunDefUIScene*                              DLCSplashUITemplate;                                      // 0x0674(0x0004) (Edit)
	class UUIScreenObject*                             MinimumLevelPanel;                                        // 0x0678(0x0004) (Edit)
	class UUILabel*                                    MinimumLevelLabel;                                        // 0x067C(0x0004) (Transient)
	class UUIButton*                                   MinimumLevelIncreaseButton;                               // 0x0680(0x0004) (Transient)
	class UUIButton*                                   MinimumLevelDecreaseButton;                               // 0x0684(0x0004) (Transient)
	float                                              levelChangeTimer;                                         // 0x0688(0x0004) (Transient)
	int                                                CurrentMinimumLevel;                                      // 0x068C(0x0004) (Transient)
	class UUIButton*                                   ResetButton;                                              // 0x0690(0x0004) (Edit)
	class UUICheckbox*                                 UseBuildTimerCheckbox;                                    // 0x0694(0x0004) (Edit)
	class UUICheckbox*                                 LockTavernItemPickups;                                    // 0x0698(0x0004) (Edit)
	class UUIButton*                                   CampaignMissions;                                         // 0x069C(0x0004) (Edit)
	class UUIButton*                                   DLCCampaignMissions;                                      // 0x06A0(0x0004) (Edit)
	class UUIButton*                                   ModMissions;                                              // 0x06A4(0x0004) (Edit)
	class UUIButton*                                   GetModMissionsButton;                                     // 0x06A8(0x0004) (Edit)
	class UUIButton*                                   LostQuestsButton;                                         // 0x06AC(0x0004) (Edit)
	class UUIButton*                                   SpecialMissions;                                          // 0x06B0(0x0004) (Edit)
	class UUILabel*                                    InfiniteBuildLabel;                                       // 0x06B4(0x0004) (Edit)
	class UUILabel*                                    RecommendedHeroLevelLabel;                                // 0x06B8(0x0004) (Edit)
	class UUILabel*                                    NightmareLabel;                                           // 0x06BC(0x0004) (Edit)
	class UUILabel*                                    RuthlessLabel;                                            // 0x06C0(0x0004) (Edit)
	class UUIScreenObject*                             StartAtWaveDescriptionLabel;                              // 0x06C4(0x0004) (Edit)
	class UUIScreenObject*                             MainPanel;                                                // 0x06C8(0x0004) (Edit)
	class UUIScreenObject*                             SecondaryPanel;                                           // 0x06CC(0x0004) (Edit)
	class UUIScreenObject*                             ToggleSurvivalButtonIcon;                                 // 0x06D0(0x0004) (Edit)
	class UUIImage*                                    MissionPreviewImageControl;                               // 0x06D4(0x0004) (Edit)
	class UUILabel*                                    MissionNameLabel;                                         // 0x06D8(0x0004) (Edit)
	class UUILabel*                                    MissionDescriptionLabel;                                  // 0x06DC(0x0004) (Edit)
	class UUIScreenObject*                             NewMissionIndicator;                                      // 0x06E0(0x0004) (Edit)
	class UUIScreenObject*                             NewMissionIndicatorSpecial;                               // 0x06E4(0x0004) (Edit)
	class UUIScreenObject*                             NewMissionIndicatorExpansion;                             // 0x06E8(0x0004) (Edit)
	TArray<struct FMissionPreviewImageInfo>            MissionPreviewInfos;                                      // 0x06EC(0x000C) (Edit, NeedCtorLink)
	struct FMissionPreviewImageInfo                    UnknownMissionPreviewInfo;                                // 0x06F8(0x0010) (Edit, NeedCtorLink)
	class UUIScreenObject*                             InfiniteBuildTimePanel;                                   // 0x0708(0x0004) (Edit)
	class UUIScreenObject*                             SurvivalModePanel;                                        // 0x070C(0x0004) (Edit)
	TArray<class UUIScriptWidget_ToggleButton*>        DifficultyButtons;                                        // 0x0710(0x000C) (Edit, NeedCtorLink)
	TArray<class UUILabel*>                            DifficultyLabels;                                         // 0x071C(0x000C) (Edit, NeedCtorLink)
	class UFont*                                       GameSettingsOverlayFont;                                  // 0x0728(0x0004) (Edit)
	struct FColor                                      GameSettingsOverlayColor;                                 // 0x072C(0x0004) (Edit)
	struct FColor                                      LockedMissionGetColor;                                    // 0x0730(0x0004) (Edit)
	struct FLinearColor                                GameSettingsOverlayGradientColor;                         // 0x0734(0x0010) (Edit)
	class UUIButton*                                   DifficultyHarder;                                         // 0x0744(0x0004) (Edit)
	class UUIButton*                                   DifficultyEasier;                                         // 0x0748(0x0004) (Edit)
	class USoundCue*                                   StartGameSound;                                           // 0x074C(0x0004) (Edit)
	class USoundCue*                                   ToggleSurvivalModeSound;                                  // 0x0750(0x0004) (Edit)
	class UUIObject*                                   OptionalPanelTitle;                                       // 0x0754(0x0004) (Edit)
	struct FString                                     ChallengeString;                                          // 0x0758(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LevelString;                                              // 0x0764(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DifficultyString;                                         // 0x0770(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     InfiniteBuildTimeString;                                  // 0x077C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SurvivalModeString;                                       // 0x0788(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StartingWaveString;                                       // 0x0794(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TavernItemPickupString;                                   // 0x07A0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     PureStrategyModeString;                                   // 0x07AC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_DLCWarningDescription1;                               // 0x07B8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_DLCWarningDescription2;                               // 0x07C4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_DLCWarningDescription3;                               // 0x07D0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_DLCWarningTitle;                                      // 0x07DC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StringYes;                                                // 0x07E8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StringNo;                                                 // 0x07F4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AllowMobilePlayersString;                                 // 0x0800(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     NightmareLockedTitle;                                     // 0x080C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     NightmareLockedDescription;                               // 0x0818(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     NightmareLockedDescriptionGameSpyMac;                     // 0x0824(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<struct FString>                             OnStrings;                                                // 0x0830(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<class UUIImage*>                            DifficultyImages;                                         // 0x083C(0x000C) (Edit, NeedCtorLink)
	TArray<class UUIImage*>                            HardcoreImages;                                           // 0x0848(0x000C) (Edit, NeedCtorLink)
	class UUILabel*                                    BestOfOneLabel;                                           // 0x0854(0x0004) (Edit)
	class UUILabel*                                    BestOfTwoLabel;                                           // 0x0858(0x0004) (Edit)
	class UUILabel*                                    BestOfOneValue;                                           // 0x085C(0x0004) (Edit)
	class UUILabel*                                    BestOfTwoValue;                                           // 0x0860(0x0004) (Edit)
	class UUILabel*                                    MixModeLabel;                                             // 0x0864(0x0004) (Edit)
	struct FString                                     LockIconPath;                                             // 0x0868(0x000C) (Edit, NeedCtorLink)
	struct FString                                     GetMissionString;                                         // 0x0874(0x000C) (Edit, NeedCtorLink)
	float                                              HeartbeatInterval;                                        // 0x0880(0x0004) (Edit)
	float                                              InitialHeartbeatInterval;                                 // 0x0884(0x0004) (Edit)
	float                                              MultiplayerModeIconSize;                                  // 0x0888(0x0004) (Edit)
	unsigned long                                      DLCSplashMacOnly : 1;                                     // 0x088C(0x0004) (Edit)
	unsigned long                                      RecentlyUnhidden : 1;                                     // 0x088C(0x0004)
	unsigned long                                      showingSpecialMissions : 1;                               // 0x088C(0x0004)
	unsigned long                                      showingModMissions : 1;                                   // 0x088C(0x0004)
	unsigned long                                      showingDLCCampaign : 1;                                   // 0x088C(0x0004)
	unsigned long                                      showingLostMissions : 1;                                  // 0x088C(0x0004)
	unsigned long                                      oldDisplayCursor : 1;                                     // 0x088C(0x0004)
	unsigned long                                      hasAutoSelected : 1;                                      // 0x088C(0x0004)
	unsigned long                                      bClientHasEntryObject : 1;                                // 0x088C(0x0004)
	unsigned long                                      bHideSetupOverlay : 1;                                    // 0x088C(0x0004) (Transient)
	unsigned long                                      bWasShowingMiniMap : 1;                                   // 0x088C(0x0004) (Transient)
	float                                              LaunchMapTimer;                                           // 0x0890(0x0004)
	float                                              HeartbeatTimer;                                           // 0x0894(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_GameSetup");
		return ptr;
	}


	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void CloseByPauseMenu();
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void UpdateDifficultyVisibility();
	void Update(float DeltaTime);
	void UpdateWaveNumButtons(float DeltaTime);
	void UpdateLevelMinimumButtons(float DeltaTime);
	void NotifyPlayerLeft(class APlayerReplicationInfo* PRI);
	void NotifyPlayerJoined(class APlayerReplicationInfo* PRI);
	void RefreshedList();
	void RefreshMapData(unsigned long ShowSpecialMissions, unsigned long bShowDLCCampaign, unsigned long bShowModMissions, unsigned long bShowLostMissions);
	void AfterDataListUpdate(class UUIPanel_DataList* aDataList);
	void BeforeDataListUpdate(class UUIPanel_DataList* aDataList);
	class UDunDefHeroManager* GetHeroManager();
	void EntrySelected(class UUIButton_DataListEntry* Button);
	void SetupDifficultyIcons(const struct FString& campaignTag);
	void SetupBestOfInfo();
	unsigned long OnDLCCompatibilityPromptClick(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void ShowIncompatibleDLCMessage(TArray<class APlayerReplicationInfo*> playersWithoutLevel);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void RefreshMapDataForMapType(TEnumAsByte<E_MAPLISTTYPE> mapListType);
	void SetCurrentMapListType();
	int GetBestStartingWave();
	void ResetMapSettings();
	struct FCampaignLevelEntry GetSelectedLevelEntry();
	unsigned long GetSelectedLevelDisableHardcore();
	unsigned long GetSelectedLevelIsRestrictedDifficultyMission();
	unsigned long GetSelectedLevelIsSpecialMission();
	struct FString GetSelectedLevelTagName();
	struct FString GetSelectedLevelFriendlyName();
	struct FString GetSelectedLevelFileName();
	void UIPostRender(class UCanvas* C);
	void UpdateMinimumLevelLevel(int Direction);
	void SetStartAtWave(int StartAtWave);
	void SetHardcore(unsigned long bIsHardcore);
	void SetMayHem(unsigned long bisMayHem);
	void SetUseBuildTimer(unsigned long buildTimer);
	void SetPureStrategy(unsigned long pureStrategy);
	void SetInfiniteWaves(unsigned long infiniteWaves, unsigned long bRecursive);
	void SetDifficulty(TEnumAsByte<EGameDifficulty> difficulty, unsigned long notifyKismet);
	unsigned long OnNightmarePopupClicked(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void SetMixMode(unsigned long bEnable);
	void PostInitialSceneUpdate();
	void DoHideScene();
	int STATIC_ComputeMinimumLevelRequirement(int HostHeroLevel);
	void SceneActivated(unsigned long bInitialActivation);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedUIMessage(const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void UnhideScene(const struct FName& AlternateOpeningAnimation);
	struct FMissionPreviewImageInfo GetImageInfoForTag(const struct FString& MissionTag);
	unsigned long AutoSelectCampaignLevel();
};


// Class UDKGame.DunDefGameSettings
// 0x0044 (0x0080 - 0x003C)
class UDunDefGameSettings : public UObject
{
public:
	unsigned long                                      InfiniteWaveMode : 1;                                     // 0x003C(0x0004)
	unsigned long                                      PureStrategyMode : 1;                                     // 0x003C(0x0004)
	unsigned long                                      MixMode : 1;                                              // 0x003C(0x0004)
	unsigned long                                      MayhemMode : 1;                                           // 0x003C(0x0004)
	unsigned long                                      MinimumLevelManuallySet : 1;                              // 0x003C(0x0004)
	unsigned long                                      UseBuildTimer : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      AllowMobilePlayers : 1;                                   // 0x003C(0x0004) (Edit)
	unsigned long                                      IsAFKShopMode : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      bIsHardcoreMode : 1;                                      // 0x003C(0x0004) (Edit)
	unsigned long                                      bIsRuthlessMode : 1;                                      // 0x003C(0x0004) (Edit)
	unsigned long                                      bSpawnAccleration : 1;                                    // 0x003C(0x0004) (Edit)
	int                                                StartAtWave;                                              // 0x0040(0x0004)
	int                                                MinimumLevel;                                             // 0x0044(0x0004)
	TEnumAsByte<EGameDifficulty>                       GameDifficulty;                                           // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	class UCampaignLevelEntryObject*                   LastSelectedCampaignLevel;                                // 0x004C(0x0004)
	struct FString                                     CurrentCampaignEntryTag;                                  // 0x0050(0x000C) (NeedCtorLink)
	TArray<float>                                      DifficultyScoreMultipliers;                               // 0x005C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentWeightingModifiers;                    // 0x0068(0x000C) (Edit, NeedCtorLink)
	struct FString                                     UI_LastConnectedIP;                                       // 0x0074(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameSettings");
		return ptr;
	}


	void ResetForOnlineHost();
	float GetDifficultyEquipmentWeightMultiplier();
	float GetDifficultyScoreMultiplier();
};


// Class UDKGame.DunDefDataStore_DLC
// 0x0000 (0x00C4 - 0x00C4)
class UDunDefDataStore_DLC : public UUIDataStore_GameResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataStore_DLC");
		return ptr;
	}


	int GetDLCIdForLevel(const struct FCampaignLevelEntry& levelEntry);
	int GetDLCMask();
	void PostInit();
	TArray<class UDunDefDLCSummary*> GetInstalledDLC();
	class UDunDefDataStore_DLC* STATIC_GetDLCDataStore();
};


// Class UDKGame.DunDefGameStorage
// 0x22F8 (0x2334 - 0x003C)
class UDunDefGameStorage : public UObject
{
public:
	int                                                CurrentGameVersion;                                       // 0x003C(0x0004) (Const)
	int                                                PreviusValidSaveVersions;                                 // 0x0040(0x0004) (Const)
	int                                                UseBinaryFormat;                                          // 0x0044(0x0004) (Const)
	struct FString                                     SaveName;                                                 // 0x0048(0x000C) (Const, NeedCtorLink)
	struct FGameStorage_35                             StorageData_35;                                           // 0x0054(0x01D8) (NeedCtorLink)
	struct FGameStorage_36                             StorageData_36;                                           // 0x022C(0x01E4) (NeedCtorLink)
	struct FGameStorage_37                             StorageData_37;                                           // 0x0410(0x01E0) (NeedCtorLink)
	struct FGameStorage_38                             StorageData_38;                                           // 0x05F0(0x01E0) (NeedCtorLink)
	struct FGameStorage_39                             StorageData_39;                                           // 0x07D0(0x020C) (NeedCtorLink)
	struct FGameStorage_40                             StorageData_40;                                           // 0x09DC(0x020C) (NeedCtorLink)
	struct FGameStorage_41                             StorageData_41;                                           // 0x0BE8(0x0220) (NeedCtorLink)
	struct FGameStorage_41                             StorageData_42;                                           // 0x0E08(0x0220) (NeedCtorLink)
	struct FGameStorage_43                             StorageData_43;                                           // 0x1028(0x0224) (NeedCtorLink)
	struct FGameStorage_44                             StorageData_44;                                           // 0x124C(0x0240) (NeedCtorLink)
	struct FGameStorage_45                             StorageData_45;                                           // 0x148C(0x024C) (NeedCtorLink)
	struct FGameStorage_46                             StorageData_46;                                           // 0x16D8(0x0254) (NeedCtorLink)
	struct FGameStorage_47                             StorageData_47;                                           // 0x192C(0x0254) (NeedCtorLink)
	struct FGameStorage_48                             StorageData_48;                                           // 0x1B80(0x03D4) (NeedCtorLink)
	struct FGameStorage                                StorageData;                                              // 0x1F54(0x03DC) (NeedCtorLink)
	int                                                GameSaveVersion;                                          // 0x2330(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameStorage");
		return ptr;
	}


	void DumpStorage();
	void HelperClear();
};


// Class UDKGame.DunDefDroppedItem
// 0x0008 (0x0224 - 0x021C)
class ADunDefDroppedItem : public AActor
{
public:
	class UParticleSystemComponent*                    MyParticleComponent;                                      // 0x021C(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      DroppedByPlayer : 1;                                      // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDroppedItem");
		return ptr;
	}


	void ServerPickedupBy(class ADunDefPlayerController* PC);
};


// Class UDKGame.DunDefDroppedEquipment
// 0x0270 (0x0494 - 0x0224)
class ADunDefDroppedEquipment : public ADunDefDroppedItem
{
public:
	class UHeroEquipment*                              EquipmentTemplate;                                        // 0x0224(0x0004) (Edit)
	struct FColor                                      OverlayDefaultColor;                                      // 0x0228(0x0004) (Edit)
	TArray<struct FColor>                              OverlayCanPickupColors;                                   // 0x022C(0x000C) (Edit, NeedCtorLink)
	struct FColor                                      OverlayCantPickupClassColor;                              // 0x0238(0x0004) (Edit)
	struct FColor                                      OverlayCantPickupClassOutOfRangeColor;                    // 0x023C(0x0004) (Edit)
	TArray<struct FColor>                              OverlayCantPickupRangeColors;                             // 0x0240(0x000C) (Edit, NeedCtorLink)
	class UMaterialInterface*                          PickupRecommendOverlayMaterial;                           // 0x024C(0x0004) (Edit)
	float                                              GoodEquipmentOverlaySize;                                 // 0x0250(0x0004) (Edit)
	class UTexture2D*                                  PickupSelectionOverlayTexture;                            // 0x0254(0x0004) (Edit)
	float                                              PickupSelectionOverlaySize;                               // 0x0258(0x0004) (Edit)
	float                                              PickupSelectionOverlayOffsetY;                            // 0x025C(0x0004) (Edit)
	float                                              DisableCollisionTimer;                                    // 0x0260(0x0004) (Edit)
	float                                              PickupSelectionOpacityMultiplier;                         // 0x0264(0x0004) (Edit)
	class UFont*                                       ToolTipEquipmentMainNameFont;                             // 0x0268(0x0004) (Edit)
	float                                              ToolTipEquipmentMainNameSize;                             // 0x026C(0x0004) (Edit)
	class USoundCue*                                   DropSound;                                                // 0x0270(0x0004) (Edit)
	class USoundCue*                                   PickedupSound;                                            // 0x0274(0x0004) (Edit)
	class USoundCue*                                   TransferToItemBoxSound;                                   // 0x0278(0x0004) (Edit)
	class UTexture2D*                                  MiniMapGoodEquipmentIcon;                                 // 0x027C(0x0004) (Edit)
	struct FColor                                      MiniMapGoodEquipmentIconColor;                            // 0x0280(0x0004) (Edit)
	struct FColor                                      MiniMapNotGoodEquipmentIconColor;                         // 0x0284(0x0004) (Edit)
	float                                              MiniMapGoodEquipmentIconSize;                             // 0x0288(0x0004) (Edit)
	float                                              ForceRandomizationQuality;                                // 0x028C(0x0004) (Edit)
	float                                              ActivationWeighting;                                      // 0x0290(0x0004) (Edit)
	float                                              NonPickupActivationWeighting;                             // 0x0294(0x0004) (Edit)
	float                                              ActivationOffset;                                         // 0x0298(0x0004) (Edit)
	struct FString                                     ActivationString;                                         // 0x029C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ActivationStringColor;                                    // 0x02A8(0x0004) (Edit)
	struct FString                                     AltActivationString;                                      // 0x02AC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      AltActivationStringColor;                                 // 0x02B8(0x0004) (Edit)
	struct FColor                                      MythicalIconColor;                                        // 0x02BC(0x0004) (Edit)
	struct FColor                                      TranscendentIconColor;                                    // 0x02C0(0x0004) (Edit)
	struct FColor                                      SupremeIconColor;                                         // 0x02C4(0x0004) (Edit)
	struct FColor                                      UltimateIconColor;                                        // 0x02C8(0x0004) (Edit)
	struct FName                                       EquipmentMaterialName;                                    // 0x02CC(0x0008) (Edit)
	class UMaterialInterface*                          EquipmentInstanceMeshMaterial;                            // 0x02D4(0x0004) (Edit)
	float                                              ExtraMeshScaleMultiplier;                                 // 0x02D8(0x0004) (Edit)
	float                                              AdditionalMeshScale;                                      // 0x02DC(0x0004) (Edit)
	float                                              EquipmentBottomOverlayOffsetPercent;                      // 0x02E0(0x0004) (Edit)
	float                                              EquipmentTopOverlayOffsetPercent;                         // 0x02E4(0x0004) (Edit)
	float                                              EquipmentOverlayHeightBoundsCheck;                        // 0x02E8(0x0004) (Edit)
	class UUIPrefab*                                   ToolTipOverlayPrefab;                                     // 0x02EC(0x0004) (Edit)
	float                                              ToolTipDelay;                                             // 0x02F0(0x0004) (Edit)
	float                                              ToolTipDelayForCurrentEquipment;                          // 0x02F4(0x0004) (Edit)
	float                                              GoodEquipmentOverlayBounceAmount;                         // 0x02F8(0x0004) (Edit)
	float                                              GoodEquipmentOverlayBounceSpeed;                          // 0x02FC(0x0004) (Edit)
	class USkeletalMeshComponent*                      DroppedEquipmentSkelMeshComp;                             // 0x0300(0x0004) (Edit, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  DroppedEquipmentLightEnvironmentComp;                     // 0x0304(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bUseDroppedEquipmentSkelMeshComp : 1;                     // 0x0308(0x0004) (Edit)
	unsigned long                                      bUseMaterialEquipmentRating : 1;                          // 0x0308(0x0004) (Edit)
	unsigned long                                      bUseParticleScale : 1;                                    // 0x0308(0x0004) (Edit)
	unsigned long                                      DoFadeOut : 1;                                            // 0x0308(0x0004)
	unsigned long                                      bTransferredToItemBox : 1;                                // 0x0308(0x0004) (Net)
	unsigned long                                      bAutoDestroyed : 1;                                       // 0x0308(0x0004) (Net)
	unsigned long                                      bDontPlaySpawnSound : 1;                                  // 0x0308(0x0004) (Net)
	unsigned long                                      CountedInFloorStats : 1;                                  // 0x0308(0x0004) (Transient)
	unsigned long                                      drawOverlay : 1;                                          // 0x0308(0x0004) (Transient)
	int                                                SkelMeshCompColorMICIndex;                                // 0x030C(0x0004) (Edit)
	float                                              SkelMeshRotationRate;                                     // 0x0310(0x0004) (Edit)
	float                                              MinimumFireIntervalForOverlay;                            // 0x0314(0x0004) (Edit)
	class UHeroEquipment*                              MyEquipmentObject;                                        // 0x0318(0x0004)
	struct FEquipmentNetInfo                           ReplicatedEquipmentInfo;                                  // 0x031C(0x0120) (Net, NeedCtorLink)
	struct FFontRenderInfo                             FontInfo;                                                 // 0x043C(0x0028)
	float                                              LastOverlayDrawTime;                                      // 0x0464(0x0004)
	float                                              CurrentOverlayDrawOpacity;                                // 0x0468(0x0004)
	float                                              LastToolTipDrawTime;                                      // 0x046C(0x0004)
	float                                              CurrentToolTipDrawOpacity;                                // 0x0470(0x0004)
	int                                                DroppedByPlayerID;                                        // 0x0474(0x0004) (Net)
	int                                                GRIHostRandomID;                                          // 0x0478(0x0004) (Net)
	class UMaterialInstanceConstant*                   MyMeshMaterialInstance;                                   // 0x047C(0x0004)
	class UParticleSystemComponent*                    MyQualityFxComponent;                                     // 0x0480(0x0004) (Edit, ExportObject, Component, EditInline)
	TArray<struct FColor>                              QualityFxComponentColours;                                // 0x0484(0x000C) (Edit, NeedCtorLink)
	class UParticleSystemComponent*                    MyCircleComponent;                                        // 0x0490(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDroppedEquipment");
		return ptr;
	}


	unsigned long AllowDroppedDestruction();
	unsigned long IsLocallyDropped();
	int STATIC_GetNumberOfDroppedEquipment();
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	int STATIC_DestroyAllDroppedEquipment(unsigned long bDistributeMana);
	void FadeOut();
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	int AllowPickupByHero(class UDunDefHero* hero, float MaxPickupRange, int activationType, unsigned long ignoreClassRequirement, int* reasonForDenial);
	void SetFXComponentVisibility(int NewState);
	void ToggleBeamFX(unsigned long Enabled);
	void ToggleCircleFX(unsigned long Enabled);
	void RefreshQualityColor();
	void InitMyEquipmentObject(unsigned long AddRandomValues, float RandomEquipmentQuality, class UHeroEquipment* CopyRandomizerValuesFromTemplate);
	void FellOutOfWorld(class UClass* dmgType);
	void InitializeDD();
	void Destroyed();
	void ReportEquipmentToStats();
	void AddToFloorStats();
	int ReorderQualityIndex(int Quality);
	class ADunDefGameReplicationInfo* GetGRI();
	void PlayDroppedSound();
	void DisableCollision();
	void PostBeginPlay();
	void RotateSkelMesh();
	void ReplicatedEvent(const struct FName& VarName);
	void DrawEquipmentOverlay(class ADunDefHUD* H, class UDunDefHero* hero, float MaxPickupRange);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	void ReplicatedMoveItem(const struct FVector& Loc);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	int GetItemQualityFilterFromEquipment();
};


// Class UDKGame.CosmeticSetBonus
// 0x002C (0x0248 - 0x021C)
class ACosmeticSetBonus : public AActor
{
public:
	int                                                numItemsToCompleteSet;                                    // 0x021C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     EffectToSpawn;                                            // 0x0220(0x0004) (Edit)
	struct FName                                       SocketToSpawnEffectOn;                                    // 0x0224(0x0008) (Edit)
	unsigned long                                      bBaseOnPawnOwner : 1;                                     // 0x022C(0x0004) (Edit)
	unsigned long                                      bDontHideInFirstPersonPOV : 1;                            // 0x022C(0x0004) (Edit)
	unsigned long                                      bUsePawnSkelMeshForAttachment : 1;                        // 0x022C(0x0004) (Edit)
	TArray<struct FCosmeticSetAttachmentInfo>          CosmeticSetComponentInfos;                                // 0x0230(0x000C) (Edit, Component, NeedCtorLink)
	class ADunDefPawn*                                 myPawn;                                                   // 0x023C(0x0004) (Transient)
	class UDunDefHero*                                 myHero;                                                   // 0x0240(0x0004) (Transient)
	class ADunDefEmitterSpawnable*                     activeCosmeticSetEffect;                                  // 0x0244(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.CosmeticSetBonus");
		return ptr;
	}


	void DeAttachAdditionalComponents();
	void AttachAdditionalComponents();
	void SpawnCosmeticSetEffect();
	void PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime);
	void CosmeticSetAnimEvent(const struct FName& EventName);
	void SetOwnerNoSee(unsigned long ownerNoSee);
	void FadeOut();
	void initCosmeticSetBonus();
	void ExecCosmeticSetEvent(const struct FName& EventName, const struct FName& nameParam1, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1);
};


// Class UDKGame.UI_HeroInfo
// 0x000C (0x0648 - 0x063C)
class UUI_HeroInfo : public UDunDefUIScene
{
public:
	class UDunDefHero*                                 myHero;                                                   // 0x063C(0x0004)
	class ADunDefPlayer*                               myPlayer;                                                 // 0x0640(0x0004)
	unsigned long                                      bIsRemoteHero : 1;                                        // 0x0644(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_HeroInfo");
		return ptr;
	}


	void NotifyPhaseChange(unsigned long IsCombatPhase);
	void InitializeForHero(class UDunDefHero* hero, unsigned long IsRemoteHero);
	class ADunDefPlayer* GetOwnerPawn();
	class UDunDefHero* GetOwnerHero();
	class UDunDefHero* GetHero();
	class UDunDefHeroManager* GetHeroManager();
	void SceneDeactivated();
};


// Class UDKGame.DunDefPlayerReplicationInfo
// 0x0098 (0x0370 - 0x02D8)
class ADunDefPlayerReplicationInfo : public ANativeDunDefPlayerReplicationInfo
{
public:
	unsigned long                                      WantToSkipBuildPhase : 1;                                 // 0x02D8(0x0004) (Net)
	unsigned long                                      InitializeAck : 1;                                        // 0x02D8(0x0004) (Net)
	unsigned long                                      BroadcastLeftGameMessage : 1;                             // 0x02D8(0x0004)
	unsigned long                                      bClientInitialized : 1;                                   // 0x02D8(0x0004)
	unsigned long                                      bPossessedAnyPawn : 1;                                    // 0x02D8(0x0004) (Net)
	unsigned long                                      bHadPlayerJoined : 1;                                     // 0x02D8(0x0004)
	unsigned long                                      bPlayerReplicationInfoIsOld : 1;                          // 0x02D8(0x0004) (Net)
	unsigned long                                      bPlayerReplicationInfoTransitioned : 1;                   // 0x02D8(0x0004) (Net)
	struct FString                                     LevelUpMessageString;                                     // 0x02DC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      LevelUpMessageColor;                                      // 0x02E8(0x0004) (Edit)
	struct FString                                     ChangedNamesMessageString;                                // 0x02EC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     EnteredGameMessageString;                                 // 0x02F8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      EnteredGameMessageColor;                                  // 0x0304(0x0004) (Edit)
	struct FString                                     LeftGameMessageString;                                    // 0x0308(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      LeftGameMessageColor;                                     // 0x0314(0x0004) (Edit)
	struct FString                                     NewHeroMessageString;                                     // 0x0318(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     NewHeroMessageStringEnd;                                  // 0x0324(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      NewHeroMessageColor;                                      // 0x0330(0x0004) (Edit)
	struct FColor                                      DefaultHealthColor;                                       // 0x0334(0x0004) (Edit)
	class USoundCue*                                   PlayerJoinSound;                                          // 0x0338(0x0004) (Edit)
	class USoundCue*                                   PlayerLeaveSound;                                         // 0x033C(0x0004) (Edit)
	struct FString                                     muteString;                                               // 0x0340(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                TargetingTeam;                                            // 0x034C(0x0004) (Net)
	float                                              LastTalkingTime;                                          // 0x0350(0x0004)
	float                                              talkerOpacity;                                            // 0x0354(0x0004)
	class UDunDefHero*                                 myHero;                                                   // 0x0358(0x0004) (Transient)
	class ADunDefPlayer*                               MyLastPlayer;                                             // 0x035C(0x0004) (Transient)
	TArray<struct FsHeroBuffData>                      CustomBuffData;                                           // 0x0360(0x000C) (Transient, NeedCtorLink)
	int                                                DLCMask;                                                  // 0x036C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerReplicationInfo");
		return ptr;
	}


	void RemoveCustomBuffData(const struct FsHeroGUID& HeroID, int BuffTemplateID);
	void AddCustomBuffData(const struct FsHeroGUID& HeroID, const struct FsBuffStorageData& Data);
	unsigned long GetCustomBuffData(const struct FsHeroGUID& HeroID, int BuffTemplateID, struct FsBuffStorageData* Data);
	int GetTradeStatus(class ADunDefPlayerReplicationInfo* requestingPRI);
	class ATradeManager* GetActiveTradeManager();
	void ServerSetTegraCompatibility(unsigned long isCompatible);
	void ServerSetDLCMask(int Mask);
	void DrawTalker(class UCanvas* C, int Count, float Scale);
	void ReceivedPlayerActor(class ADunDefPlayer* Player);
	void ClientInitialize(class AController* C);
	struct FString GetOnlineName();
	struct FString GetHumanReadableNameTwoLines();
	struct FString GetHumanReadableName();
	struct FString GetHeroIconPath();
	struct FString GetHeroicName();
	void UpdatePlayerLocation();
	void Timer();
	void ClientTriggerEvent(const struct FName& EventType, class AActor* TriggerInstigator, class AActor* TriggerEnemy, const struct FString& Params);
	void TriggerEvent(const struct FName& EventType, class AActor* TriggerInstigator, class AActor* TriggerEnemy, const struct FString& Params);
	struct FColor GetHealthColor();
	class ADunDefPlayer* GetPlayer();
	unsigned long IsInvalidName();
	void CleanMeUp();
	void Destroyed();
	unsigned long ShouldBroadCastWelcomeMessage(unsigned long bExiting);
	void SetWantToSkipBuildPhase(unsigned long WantToSkip);
	void ClientAddBuffToGame(const struct FsBuffNetInfo& BuffInfo);
	void Client_UpdateRemoteHeroEquipment(unsigned char equipmentIndex, const struct FEquipmentNetInfo& netInfo);
	void Client_RemoveRemoteHeroEquipment(unsigned char equipmentIndex);
	void Client_AddRemoteHeroEquipment(const struct FEquipmentNetInfo& netInfo, unsigned char atIndex);
	void Client_SetRemoteHero(const struct FHeroNetInfo& netInfo);
	unsigned long AllowSendRemoteHeroInfo(class ADunDefPlayerController* PC);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void Server_AddBuff(const struct FsBuffNetInfo& Info);
	void Server_UpdatedHeroEquipment(unsigned char Index, const struct FEquipmentNetInfo& Info);
	void Server_RemovedHeroEquipment(unsigned char Index);
	void Server_AddedHeroEquipment(const struct FEquipmentNetInfo& Info, unsigned char Index);
	void SetHero(class UDunDefHero* hero);
	void PostBeginPlay();
	void PrintHeroLevelUpMessage();
	void SetPlayerReplicationInfoIsOld();
	void PrintNewHeroMessage();
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void NotifyNewPlayer();
	unsigned long IsLoadingScreenVisible();
	void ReplicatedEvent(const struct FName& VarName);
	unsigned long PossessedAnyPawn();
	class UDunDefHero* GetHero();
	unsigned long IsRootEntry();
	int GetFolderID();
	struct FString GetDataString(int dataSetType);
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
};


// Class UDKGame.DunDefDamageType_Elemental
// 0x0004 (0x00D8 - 0x00D4)
class UDunDefDamageType_Elemental : public UDunDefDamageType
{
public:
	unsigned long                                      UseForRandomElementalDamage : 1;                          // 0x00D4(0x0004)
	unsigned long                                      UseForNotPoisonElementalDamage : 1;                       // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Elemental");
		return ptr;
	}

};


// Class UDKGame.DunDefEnemy
// 0x0504 (0x0D0C - 0x0808)
class ADunDefEnemy : public ADunDefPawn
{
public:
	unsigned long                                      bDisableRuthlessModifiers : 1;                            // 0x0808(0x0004) (Edit)
	unsigned long                                      bIgnoreGlobalEnemyDropQualityMultiplier : 1;              // 0x0808(0x0004) (Edit)
	unsigned long                                      bInvincibleWhileSpawningIn : 1;                           // 0x0808(0x0004) (Edit)
	unsigned long                                      bUnclampDifficultyHealthMultiplier : 1;                   // 0x0808(0x0004) (Edit)
	unsigned long                                      bUnclampDifficultySpeedMultiplier : 1;                    // 0x0808(0x0004) (Edit)
	unsigned long                                      bTopLayerMiniMapIcon : 1;                                 // 0x0808(0x0004) (Edit)
	unsigned long                                      DropEquipmentDuringBossFight : 1;                         // 0x0808(0x0004) (Edit)
	unsigned long                                      bScaleDroppedEquipmentWithLevel : 1;                      // 0x0808(0x0004) (Edit)
	unsigned long                                      bAffectWaveBonusDamageCauser : 1;                         // 0x0808(0x0004) (Edit)
	unsigned long                                      bAllowDarkness : 1;                                       // 0x0808(0x0004) (Edit)
	unsigned long                                      bZeroVelocityOnAttack : 1;                                // 0x0808(0x0004) (Edit)
	unsigned long                                      bUseItemValuesForShop : 1;                                // 0x0808(0x0004) (Edit)
	unsigned long                                      bAttackForceClientZeroVelocity : 1;                       // 0x0808(0x0004) (Edit)
	unsigned long                                      bIgnoreAllTowerDamage : 1;                                // 0x0808(0x0004) (Edit)
	unsigned long                                      bDontUseInvincibleRadius : 1;                             // 0x0808(0x0004) (Edit)
	unsigned long                                      bAllowTargetingWhileInvincible : 1;                       // 0x0808(0x0004) (Edit)
	unsigned long                                      bClampDifficultyToInsane : 1;                             // 0x0808(0x0004) (Edit)
	unsigned long                                      bIgnoreTargetingCore : 1;                                 // 0x0808(0x0004) (Edit)
	unsigned long                                      bForceKillCountSubtraction : 1;                           // 0x0808(0x0004) (Edit)
	unsigned long                                      bStumbleBackUponDeath : 1;                                // 0x0808(0x0004) (Edit)
	unsigned long                                      bForceDropEquipment : 1;                                  // 0x0808(0x0004) (Edit)
	unsigned long                                      bInitiallyInvincible : 1;                                 // 0x0808(0x0004) (Edit)
	unsigned long                                      bAllowBasingOnTowers : 1;                                 // 0x0808(0x0004) (Edit)
	unsigned long                                      bNoRandomElementalEffect : 1;                             // 0x0808(0x0004) (Edit)
	unsigned long                                      UseDjinnSpawnClamping : 1;                                // 0x0808(0x0004) (Edit)
	unsigned long                                      UseSharkenSpawnClamping : 1;                              // 0x0808(0x0004) (Edit)
	unsigned long                                      UseCopterSpawnClamping : 1;                               // 0x0808(0x0004) (Edit)
	unsigned long                                      UseRuthlessOgreSpawnClamping : 1;                         // 0x0808(0x0004) (Edit)
	unsigned long                                      bEvenlySpaceWaveSpawns : 1;                               // 0x0808(0x0004) (Edit)
	unsigned long                                      bDontEvenSpaceInMixMode : 1;                              // 0x0808(0x0004) (Edit)
	unsigned long                                      bDontUseStatsInSurvival : 1;                              // 0x0808(0x0004) (Edit)
	unsigned long                                      bUseSurvivalExtraDifficulty : 1;                          // 0x0808(0x0004) (Edit)
	unsigned long                                      bSetRelativeTransformOnDeath : 1;                         // 0x080C(0x0004) (Transient)
	unsigned long                                      bWroteSpawnedStat : 1;                                    // 0x080C(0x0004) (Transient)
	unsigned long                                      bAllowInvincibility : 1;                                  // 0x080C(0x0004) (Edit)
	unsigned long                                      bAllowCoughing : 1;                                       // 0x080C(0x0004) (Edit)
	unsigned long                                      bAllowShocking : 1;                                       // 0x080C(0x0004) (Edit)
	unsigned long                                      bAllowEnsnare : 1;                                        // 0x080C(0x0004) (Edit)
	unsigned long                                      bAllowEnrage : 1;                                         // 0x080C(0x0004) (Edit)
	unsigned long                                      bAddToEnemyCap : 1;                                       // 0x080C(0x0004) (Edit)
	unsigned long                                      bDropMana : 1;                                            // 0x080C(0x0004) (Edit)
	unsigned long                                      bDropEquipment : 1;                                       // 0x080C(0x0004) (Edit)
	unsigned long                                      bAllowEnemyDrain : 1;                                     // 0x080C(0x0004) (Edit)
	unsigned long                                      bDontScaleUpOnSpawnIn : 1;                                // 0x080C(0x0004) (Edit)
	unsigned long                                      bDoSpawnNotification : 1;                                 // 0x080C(0x0004) (Edit)
	unsigned long                                      bIgnoreStats : 1;                                         // 0x080C(0x0004) (Edit)
	unsigned long                                      bKillOnBuildPhase : 1;                                    // 0x080C(0x0004) (Edit)
	unsigned long                                      ScaleDownForDestruction : 1;                              // 0x080C(0x0004) (Transient)
	unsigned long                                      NotifiedSpawnerOfDeath : 1;                               // 0x080C(0x0004) (Transient)
	unsigned long                                      NotifiedStatsOfDeath : 1;                                 // 0x080C(0x0004) (Transient)
	unsigned long                                      bPlayerCausedLastDamage : 1;                              // 0x080C(0x0004) (Transient)
	unsigned long                                      bFullySpawned : 1;                                        // 0x080C(0x0004) (Net, Transient)
	unsigned long                                      bWasEverInvincible : 1;                                   // 0x080C(0x0004) (Transient)
	unsigned long                                      bInvincible : 1;                                          // 0x080C(0x0004) (Net)
	unsigned long                                      bIsPureStrategy : 1;                                      // 0x080C(0x0004) (Net)
	unsigned long                                      bWasInvincible : 1;                                       // 0x080C(0x0004)
	unsigned long                                      DrawHealthBar : 1;                                        // 0x080C(0x0004) (Edit)
	unsigned long                                      IsPlayerAlly : 1;                                         // 0x080C(0x0004) (Edit)
	unsigned long                                      bForceFriendlyFire : 1;                                   // 0x080C(0x0004) (Edit)
	unsigned long                                      bForceInvincible : 1;                                     // 0x080C(0x0004) (Edit)
	unsigned long                                      bNetworkReliableAttackAnimations : 1;                     // 0x080C(0x0004) (Edit)
	unsigned long                                      bProcessedFromRPC : 1;                                    // 0x080C(0x0004) (Transient)
	unsigned long                                      bIgnoreDifficultyScaling : 1;                             // 0x080C(0x0004) (Edit)
	unsigned long                                      bUseEnemyGlobalMultipliers : 1;                           // 0x080C(0x0004) (Edit)
	unsigned long                                      bDoMaterialModificationOnDeath : 1;                       // 0x0810(0x0004) (Edit)
	unsigned long                                      bClearAttachmentsOnDeath : 1;                             // 0x0810(0x0004) (Edit)
	unsigned long                                      bNoDrawMiniMapIcon : 1;                                   // 0x0810(0x0004) (Edit)
	unsigned long                                      bGolded : 1;                                              // 0x0810(0x0004) (Transient)
	unsigned long                                      bUseGoldIcon : 1;                                         // 0x0810(0x0004) (Transient)
	unsigned long                                      CountedAsAlive : 1;                                       // 0x0810(0x0004) (Transient)
	unsigned long                                      CountedAsDead : 1;                                        // 0x0810(0x0004) (Transient)
	unsigned long                                      bAllowSlowByHero : 1;                                     // 0x0810(0x0004) (Edit)
	unsigned long                                      bAllowWeakenByHero : 1;                                   // 0x0810(0x0004) (Edit)
	unsigned long                                      IsStunned : 1;                                            // 0x0810(0x0004) (Net, Transient)
	struct FEnemyRuthlessModifiers                     RuthlessEnemyModifiers;                                   // 0x0814(0x0018) (Edit)
	float                                              GlobalEnemyDropQualityMultiplier;                         // 0x082C(0x0004) (Const)
	TArray<struct FEnemyElementalEntry>                ElementalEntries;                                         // 0x0830(0x000C) (Edit, NeedCtorLink)
	TArray<struct FElementalDamageModifier>            ElementalDamageModifiers;                                 // 0x083C(0x000C) (Edit, NeedCtorLink)
	int                                                UseElementalEntry;                                        // 0x0848(0x0004) (Edit, Net)
	TArray<struct FName>                               AttackAnimations;                                         // 0x084C(0x000C) (Edit, NeedCtorLink)
	class ADunDefEnemyController*                      AIControllerTemplate;                                     // 0x0858(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     DestructionEffectTemplate;                                // 0x085C(0x0004) (Edit)
	TArray<class USoundCue*>                           AttackSounds;                                             // 0x0860(0x000C) (Edit, NeedCtorLink)
	float                                              EnemyLifeSpan;                                            // 0x086C(0x0004) (Edit)
	float                                              ClientMaxStepHeight;                                      // 0x0870(0x0004) (Edit)
	float                                              EnemyNetUpdateFrequency;                                  // 0x0874(0x0004) (Edit)
	float                                              EnemyNetPriority;                                         // 0x0878(0x0004) (Edit)
	float                                              ElementalChanceMultiplier;                                // 0x087C(0x0004) (Edit)
	float                                              MinCoughInterval;                                         // 0x0880(0x0004) (Edit)
	float                                              EnemyPlayerFavoringMultiplier;                            // 0x0884(0x0004) (Edit)
	float                                              AttackAnimSpeedMultiplier;                                // 0x0888(0x0004) (Edit)
	TEnumAsByte<EGameDifficulty>                       MinimumDifficultyForRandomElementalEffect;                // 0x088C(0x0001) (Edit)
	TEnumAsByte<EnemyClassification>                   MyClassification;                                         // 0x088D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x088E(0x0002) MISSED OFFSET
	struct FString                                     DescriptiveName;                                          // 0x0890(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       AnimCough;                                                // 0x089C(0x0008) (Edit)
	struct FName                                       AnimShock;                                                // 0x08A4(0x0008) (Edit)
	class UAudioComponent*                             MyAudioComponent;                                         // 0x08AC(0x0004) (Edit, ExportObject, Component, EditInline)
	TArray<struct FEquipmentDropEntry>                 CustomEquipmentDrops;                                     // 0x08B0(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyOffsetMultipliers;                              // 0x08BC(0x000C) (Edit, NeedCtorLink)
	float                                              CustomEquipmentDropChanceThreshold;                       // 0x08C8(0x0004) (Edit)
	float                                              CustomEquipmentDropValueMin;                              // 0x08CC(0x0004) (Edit)
	float                                              CustomEquipmentDropValueMax;                              // 0x08D0(0x0004) (Edit)
	float                                              MaxInvincibilityDrawDistance;                             // 0x08D4(0x0004) (Edit)
	float                                              CustomEquipmentDropQuality;                               // 0x08D8(0x0004) (Edit)
	int                                                NumCustomEquipmentDropChances;                            // 0x08DC(0x0004) (Edit)
	float                                              GlobalEquipmentDropChanceThreshold;                       // 0x08E0(0x0004) (Edit)
	float                                              GlobalEquipmentDropValueMin;                              // 0x08E4(0x0004) (Edit)
	float                                              ExtraNightmareHealthMultiplier;                           // 0x08E8(0x0004) (Edit)
	float                                              GlobalEquipmentDropValueMax;                              // 0x08EC(0x0004) (Edit)
	float                                              InvincibilityExpirationTime;                              // 0x08F0(0x0004) (Edit)
	float                                              MaxDifficultySpeedMultiplier;                             // 0x08F4(0x0004) (Edit)
	float                                              GlobalEquipmentDropQuality;                               // 0x08F8(0x0004) (Edit)
	float                                              MaxElementalEffectDistance;                               // 0x08FC(0x0004) (Edit)
	float                                              InitialInvincibilityTimeOut;                              // 0x0900(0x0004) (Edit)
	float                                              NightmareDamageMultiplier;                                // 0x0904(0x0004) (Edit)
	int                                                NumGlobalEquipmentDropChances;                            // 0x0908(0x0004) (Edit)
	int                                                KillCountMultiplier;                                      // 0x090C(0x0004) (Edit)
	int                                                NumGlobalEquipmentDropChancesRuthless;                    // 0x0910(0x0004) (Edit)
	float                                              MaxWaveEquipmentQualityMultiplier;                        // 0x0914(0x0004) (Edit)
	int                                                EquipmentQualityMultiplierMaxWave;                        // 0x0918(0x0004) (Edit)
	int                                                CustomEnemyTag;                                           // 0x091C(0x0004) (Edit)
	int                                                SurvivalPartOneWaveTreshold;                              // 0x0920(0x0004) (Edit)
	int                                                SurvivalPartTwoWaveTreshold;                              // 0x0924(0x0004) (Edit)
	float                                              AbsoluteMaxEquipmentDropQuality;                          // 0x0928(0x0004) (Edit)
	float                                              AttackForceClientZeroVelocityInterpSpeed;                 // 0x092C(0x0004) (Edit)
	float                                              SurvivalPartOneDifficultyMultiplier;                      // 0x0930(0x0004) (Edit)
	float                                              SurvivalPartTwoDifficultyMultiplier;                      // 0x0934(0x0004) (Edit)
	float                                              MaxGroundSpeed;                                           // 0x0938(0x0004) (Edit)
	struct FVector                                     StumbleBackDeathVelocity;                                 // 0x093C(0x000C) (Edit)
	TArray<float>                                      DifficultyEquipmentRarityWeightings;                      // 0x0948(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyEquipmentQualityMultipliers;                    // 0x0954(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultySpeedMultipliers;                               // 0x0960(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyHealthMultipliers;                              // 0x096C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyDamageMultipliers;                              // 0x0978(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      ExtraDifficultyHealthMultipliers;                         // 0x0984(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      ExtraDifficultyDamageMultipliers;                         // 0x0990(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyManaMultipliers;                                // 0x099C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyScoreMultipliers;                               // 0x09A8(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultySetWaveOffsetThresholds;                        // 0x09B4(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      NumPlayerHealthMultipliers;                               // 0x09C0(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      GoldenEnemyDifficultyOffset;                              // 0x09CC(0x000C) (Edit, NeedCtorLink)
	int                                                MaxDifficultySets;                                        // 0x09D8(0x0004) (Edit)
	int                                                SpawnClumpAbsoluteAmount;                                 // 0x09DC(0x0004) (Edit)
	int                                                SpawnClumpMaximumAmount;                                  // 0x09E0(0x0004) (Edit)
	TArray<int>                                        MaxSimultaneousAllowedForPlayers;                         // 0x09E4(0x000C) (Edit, NeedCtorLink)
	int                                                DifficultySetOffset;                                      // 0x09F0(0x0004) (Edit)
	int                                                MinimumStartWaveDifferenceForEquipment;                   // 0x09F4(0x0004) (Edit)
	float                                              MoveAroundMeMaximumSpeed;                                 // 0x09F8(0x0004) (Edit)
	float                                              SpawnClumpRelativePercent;                                // 0x09FC(0x0004) (Edit)
	float                                              GlobalDropChanceThresholdMultiplier;                      // 0x0A00(0x0004) (Edit)
	float                                              DifficultySetWaveOffset;                                  // 0x0A04(0x0004) (Edit)
	float                                              FadeOutOriginalMeshDrawScale;                             // 0x0A08(0x0004) (Transient)
	float                                              FadeOutDrawScalePercent;                                  // 0x0A0C(0x0004) (Transient)
	float                                              LastCoughTime;                                            // 0x0A10(0x0004) (Transient)
	float                                              AnotherExtraStrengthMultiplier;                           // 0x0A14(0x0004) (Transient)
	class UParticleSystem*                             InvincibilityEffectTemplate;                              // 0x0A18(0x0004) (Edit)
	float                                              InvincibilityEffectScale;                                 // 0x0A1C(0x0004) (Edit)
	struct FName                                       InvincibilityEffectSocket;                                // 0x0A20(0x0008) (Edit)
	struct FName                                       ElementalEffectSocket;                                    // 0x0A28(0x0008) (Edit)
	float                                              LifeSpanAfterDeath;                                       // 0x0A30(0x0004) (Edit)
	float                                              KnockbackAllowanceInterval;                               // 0x0A34(0x0004) (Edit)
	float                                              MaxNightmareMomentumMagnitude;                            // 0x0A38(0x0004) (Edit)
	float                                              FadeOutAfterDeathDelay;                                   // 0x0A3C(0x0004) (Edit)
	float                                              UpgradeLevelIconSize;                                     // 0x0A40(0x0004) (Edit)
	float                                              HealthBarEnemyIconSize;                                   // 0x0A44(0x0004) (Edit)
	TArray<class UMaterialInterface*>                  DifficultyMaterials;                                      // 0x0A48(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        MeshDifficultyMaterialIndices;                            // 0x0A54(0x000C) (Edit, NeedCtorLink)
	class UFont*                                       HealthBarNumbersFont;                                     // 0x0A60(0x0004) (Edit)
	TArray<class UTexture2D*>                          difficultyIcons;                                          // 0x0A64(0x000C) (Edit, NeedCtorLink)
	class ADunDefEnemy*                                RelatedArchetype;                                         // 0x0A70(0x0004) (Edit)
	class UParticleSystemComponent*                    InvincibilityEffect;                                      // 0x0A74(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ElementalParticleEffect;                                  // 0x0A78(0x0004) (ExportObject, Component, EditInline)
	float                                              HealthBarWidth;                                           // 0x0A7C(0x0004) (Edit)
	float                                              HealthBarHeight;                                          // 0x0A80(0x0004) (Edit)
	class UTexture2D*                                  StatIcon;                                                 // 0x0A84(0x0004) (Edit)
	float                                              Variance_MovementSpeedPercent;                            // 0x0A88(0x0004) (Edit)
	float                                              Variance_FatnessPercent;                                  // 0x0A8C(0x0004) (Edit)
	float                                              Variance_HeightPercent;                                   // 0x0A90(0x0004) (Edit)
	float                                              Variance_ColorPercent;                                    // 0x0A94(0x0004) (Edit)
	float                                              Variance_NumColors;                                       // 0x0A98(0x0004) (Edit)
	TArray<float>                                      VarianceGlobalIntensities;                                // 0x0A9C(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     HealthBarScreenPosOffset;                                 // 0x0AA8(0x000C) (Edit)
	float                                              SpawnInScaleTime;                                         // 0x0AB4(0x0004) (Edit)
	TArray<class ADunDefEmitterSpawnable*>             SmallHurtEffectTemplate_DifficultyOverrides;              // 0x0AB8(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefEmitterSpawnable*>             DeathEffectTemplate_DifficultyOverrides;                  // 0x0AC4(0x000C) (Edit, NeedCtorLink)
	class ADunDefEmitterSpawnable*                     DeathEffectTemplate;                                      // 0x0AD0(0x0004) (Edit)
	struct FLinearColor                                SpawnNotificationColor;                                   // 0x0AD4(0x0010) (Edit)
	class USoundCue*                                   SpawnNotificationSound;                                   // 0x0AE4(0x0004) (Edit)
	struct FString                                     SpawnNotificationString;                                  // 0x0AE8(0x000C) (Edit, NeedCtorLink)
	float                                              SpawnNotiifcationHideTime;                                // 0x0AF4(0x0004) (Edit)
	int                                                VariedColorMIC;                                           // 0x0AF8(0x0004) (Net, Transient)
	TArray<class UMaterialInstanceConstant*>           VarianceColorMICS;                                        // 0x0AFC(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     ReplicatedDrawScale;                                      // 0x0B08(0x000C) (Net, Transient)
	struct FVector                                     OriginalMeshTranslation;                                  // 0x0B14(0x000C) (Transient)
	int                                                LastAttackAnimation;                                      // 0x0B20(0x0004) (Transient)
	float                                              LastKnockedBackTime;                                      // 0x0B24(0x0004) (Transient)
	struct FName                                       EnemyPathName;                                            // 0x0B28(0x0008) (Transient)
	class AActor*                                      DiedDamageCauser;                                         // 0x0B30(0x0004) (Transient)
	class UDunDef_SeqAct_EnemyWaveSpawner*             WaveSpawner;                                              // 0x0B34(0x0004)
	int                                                InvincibleEffectCounter;                                  // 0x0B38(0x0004)
	int                                                TeamIndex;                                                // 0x0B3C(0x0004)
	int                                                difficultyIndex;                                          // 0x0B40(0x0004) (Net)
	class ADunDefEnemyController*                      MyCreator;                                                // 0x0B44(0x0004)
	float                                              HealthBarScale;                                           // 0x0B48(0x0004) (Edit)
	struct FVector                                     HealthBarPositionOffset;                                  // 0x0B4C(0x000C) (Edit)
	struct FVector                                     HealthyColor;                                             // 0x0B58(0x000C) (Edit)
	struct FVector                                     UnhealthyColor;                                           // 0x0B64(0x000C) (Edit)
	float                                              HealthBarPositionHeightScale;                             // 0x0B70(0x0004) (Edit)
	TArray<class UTexture2D*>                          MiniMapIconTextures;                                      // 0x0B74(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  MiniMapGoldIconTexture;                                   // 0x0B80(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x0B84(0x0004) (Edit)
	float                                              ElementalIconSize;                                        // 0x0B88(0x0004) (Edit)
	float                                              GoldMiniMapIconSizeMultiplier;                            // 0x0B8C(0x0004) (Edit)
	struct FColor                                      MiniMapIconColor;                                         // 0x0B90(0x0004) (Edit)
	struct FColor                                      MiniMapIconColorDead;                                     // 0x0B94(0x0004) (Edit)
	struct FColor                                      MiniMapIconHurtColor;                                     // 0x0B98(0x0004) (Edit)
	float                                              AdditionalDifficultyOffsetDamageMultiplier;               // 0x0B9C(0x0004) (Edit)
	float                                              AdditionalDifficultyOffsetHealthMultiplier;               // 0x0BA0(0x0004) (Edit)
	float                                              AdditionalDifficultyOffsetSpeedMultiplier;                // 0x0BA4(0x0004) (Edit)
	class AActor*                                      lastDamageCauser;                                         // 0x0BA8(0x0004)
	float                                              MiniMapIconOpacity;                                       // 0x0BAC(0x0004)
	float                                              DifficultyDamageMultiplier;                               // 0x0BB0(0x0004)
	float                                              DifficultySpeedMultiplier;                                // 0x0BB4(0x0004)
	float                                              DifficultyHealthMultiplier;                               // 0x0BB8(0x0004)
	float                                              RuthlessDamageMultiplier;                                 // 0x0BBC(0x0004)
	float                                              RuthlessSpeedMultiplier;                                  // 0x0BC0(0x0004)
	float                                              RuthlessHealthMultiplier;                                 // 0x0BC4(0x0004)
	float                                              RuthessPawnDamageResistanceMultiplier;                    // 0x0BC8(0x0004)
	float                                              RuthlessTowerDamageResistanceMultiplier;                  // 0x0BCC(0x0004)
	int                                                TargetingTeam;                                            // 0x0BD0(0x0004) (Net, Transient)
	struct FVector                                     ReplicatedStumbleBackDeathVelocity;                       // 0x0BD4(0x000C) (Net, Transient)
	struct FVector                                     SpawnLocation;                                            // 0x0BE0(0x000C) (Transient)
	class AActor*                                      TrueDamageCauser;                                         // 0x0BEC(0x0004) (Transient)
	class AController*                                 TrueKiller;                                               // 0x0BF0(0x0004) (Transient)
	struct FName                                       OnDeathMateralParamName;                                  // 0x0BF4(0x0008) (Edit)
	float                                              OnDeathMatInterpTime;                                     // 0x0BFC(0x0004) (Edit)
	float                                              WheelOfFortuneDamageMultiplier;                           // 0x0C00(0x0004) (Edit)
	float                                              WheelOfFortuneDamageMultiplierDynamic;                    // 0x0C04(0x0004) (Net)
	TArray<class UMaterialInstanceConstant*>           DeathMaterialMICs;                                        // 0x0C08(0x000C) (Transient, NeedCtorLink)
	int                                                HighestProxDamage;                                        // 0x0C14(0x0004) (Transient)
	class AController*                                 HighProxDamageController;                                 // 0x0C18(0x0004) (Transient)
	class AActor*                                      HighProxDamageCauser;                                     // 0x0C1C(0x0004) (Transient)
	struct FActorLevelUpStatModifier                   enemyStats[0x7];                                          // 0x0C20(0x0020) (Edit)
	TArray<struct FActorLevelUpStatModifier>           CurrentActorLevelUpStatModifiers;                         // 0x0D00(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEnemy");
		return ptr;
	}


	void OnBuffRemoved(class UObject* BuffRemoved);
	void OnBuffAdded(class UObject* BuffAdded);
	float GetStatModifier(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long onlyReturnBaseValue);
	unsigned long GetActorLevelUpStatModifier(TEnumAsByte<ELevelUpValueType> Type, struct FActorLevelUpStatModifier* Modifier);
	void SetActorLevelUpStatModifier(TEnumAsByte<ELevelUpValueType> Type, const struct FActorLevelUpStatModifier& Modifier);
	float CalculateStatValue(float BaseValue, struct FActorLevelUpStatModifier* Modifier);
	void GetBuffedStatValue(TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bAdditivePass, float* buffVal);
	void RemoveStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AddStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void ClientTakeDamage(int DamageAmount, class APawn* InstigatorPawn, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void SetGolded();
	void TimedEffectStun(class UDunDefBuff* Effect);
	void ChangedGamePhases(unsigned long IsCombatPhase);
	unsigned long STATIC_UseMaxSimultaneousAllowedForPlayers(class ADunDefEnemy* anEnemyTemplate);
	void ClearAnotherExtraStrengthMultiplier();
	void ClearAnotherExtraMovementSpeedMultiplier();
	unsigned long AllowEnemyDrain();
	TEnumAsByte<EnemyClassification> GetEnemyClassification();
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	unsigned long AllowObstructionJump();
	unsigned long ShouldBlockPlayerAim(class APlayerController* PC);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void BumpedATarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	int GetScoreWorth();
	int STATIC_GetEnemyDifficulty(class ADunDefEnemy* EnemyTemplate, float difficultyOffset);
	class UTexture2D* STATIC_GetEnemyIconTexture(class ADunDefEnemy* EnemyTemplate, int difficultyOverride);
	void BaseChange();
	unsigned long AllowWeaken();
	unsigned long AllowSlowByHero();
	unsigned long AllowEnrage();
	unsigned long AllowEnsnare();
	void GameOver();
	void EnableDarkness();
	float GetElementalDamageModifier();
	void ClearElementalEffect();
	unsigned long IsElementalEnemy();
	class UTexture2D* GetMiniMapIconTexture();
	struct FColor GetMiniMapIconColor();
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void PossessedBy(class AController* C, unsigned long bVehicleTransition);
	void DelayedTurnOffSkelUpdating();
	void ForceSkelUpdatingDelayTurnOff(unsigned long Force, float delayTurnOff);
	void ForceSkelUpdating(unsigned long Force, unsigned long bOnlyForceTickAnimNodes);
	struct FVector GetMeleeSwingLocation();
	void PlayDestructionEffects();
	void SpawnDroppedEquipment();
	void Cough();
	void StopCoughingAnimation(const struct FName& AnimName);
	void StartCoughingAnimation(const struct FName& AnimName);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void SetTrueDamageCauser(class AActor* dmgCauser, class AController* Killer);
	void SetDiedDamageCauser(class AActor* DamageCauser);
	struct FString GetDescriptiveName();
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void SpawnDefaultController();
	unsigned long IsCurrentlyPlayingAttackAnimation();
	float PlayAttackAnimationWithLocation(const struct FVector& TheLocation);
	float PlayAttackAnimation();
	float GetAttackAnimSpeedMultiplier();
	void ClientCheckAttackAnimationForZero(unsigned long bForceStop);
	void EnemyExpired();
	void Destroyed();
	void StartedAttack();
	void EndedAttack();
	float GetPawnDamageResistanceModifier();
	float GetPawnDamageModifier(unsigned long bDontIncludeAbilities);
	int UpdateDifficultyMaterial();
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	class UClass* GetElementalDamageType();
	void InitializeElementalEffects(unsigned long ForceNoRandomization);
	void SetElementalEffect(class UClass* ElementalDamageType);
	void SpawnManaTokens(class ADunDefPawn* theInstigator, class AActor* fromActor, class ADunDefPlayer* InitialAttractor, unsigned long bIsPrivate);
	void SetWheelOfFortuneDamageMultiplierDynamic(float newMulti);
	float GetWheelOfFortuneDamageMultiplierDynamic();
	void UpdateSpeed();
	void UpdateMaxHealth(unsigned long bSetHealthToMax);
	unsigned long UseRuthlessClassOverride(int* Index);
	void SetRuthlessModifiers();
	void UpdateDifficultyValues(unsigned long UpdateMaterial, unsigned long onlyDynamicMultipliers);
	void InitializeDD();
	int GetDifficultyWaveOffset(float waveOffset, float* leftOverOffset);
	void UpdateVariedColorMIC(int Value, int theDifficultyIndex);
	class ADunDefEnemy* GetArchetype();
	void RemoveEnemySpawnCollision();
	void CheckAlive();
	void PostBeginPlay();
	void CheckForCombatStatBuffer();
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void OnPostBeginPlay_AddToTargetableList();
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	unsigned long IgnoreFriendlyFireDamage(const TScriptInterface<class UDunDefTargetableInterface>& instigatorActor, class AController* OptionalController);
	int GetTargetingTeam();
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	unsigned long ForceFriendlyFire(class AActor* Target);
	void SetEnraged(unsigned long bActive);
	void DealHighestProxDamage();
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	unsigned long IsInitiallyInvincible();
	void InvincibilityEffectFinished(class UParticleSystemComponent* PSystem);
	void SetInvincible(unsigned long invinc, unsigned long ChangeForceInvincible, unsigned long ForceInvincible, unsigned long ForceNotInvincible);
	void DisableInvincibility();
	void SetCreator(class ADunDefEnemyController* C);
	void DrawUpgradeIcons(class ADunDefHUD* H, float IconDistanceScale, const struct FVector& ScreenPos, float YOffset, float Opacity);
	void DoDrawHealthBar(class ADunDefHUD* H, float Opacity);
	int GetScoreSwitch();
	class UMaterialInstanceConstant* GetHealthBarMIC(class ADunDefPlayerController* PC);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefTreasureChest
// 0x0110 (0x032C - 0x021C)
class ADunDefTreasureChest : public AActor
{
public:
	TArray<struct FEquipmentDropEntry>                 CustomEquipmentDrops;                                     // 0x021C(0x000C) (Edit, NeedCtorLink)
	float                                              CustomEquipmentDropChanceThreshold;                       // 0x0228(0x0004) (Edit)
	float                                              CustomEquipmentDropValueMin;                              // 0x022C(0x0004) (Edit)
	float                                              CustomEquipmentDropValueMax;                              // 0x0230(0x0004) (Edit)
	float                                              CustomEquipmentDropQuality;                               // 0x0234(0x0004) (Edit)
	int                                                NumCustomEquipmentDropChances;                            // 0x0238(0x0004) (Edit)
	float                                              GlobalEquipmentDropChanceThreshold;                       // 0x023C(0x0004) (Edit)
	float                                              GlobalEquipmentDropValueMin;                              // 0x0240(0x0004) (Edit)
	float                                              GlobalEquipmentDropValueMax;                              // 0x0244(0x0004) (Edit)
	float                                              GlobalEquipmentDropQuality;                               // 0x0248(0x0004) (Edit)
	float                                              FadeAwaySpeedScale;                                       // 0x024C(0x0004) (Edit)
	float                                              FadeAwayDelayTime;                                        // 0x0250(0x0004) (Edit)
	float                                              ForceSpawnTreasureDelay;                                  // 0x0254(0x0004) (Edit)
	int                                                NumGlobalEquipmentDropChances;                            // 0x0258(0x0004) (Edit)
	int                                                SurvivalSkippingManaTokenAmount;                          // 0x025C(0x0004) (Edit)
	float                                              MaxWaveEquipmentQualityMultiplier;                        // 0x0260(0x0004) (Edit)
	int                                                EquipmentQualityMultiplierMaxWave;                        // 0x0264(0x0004) (Edit)
	float                                              AbsoluteMaxEquipmentDropQuality;                          // 0x0268(0x0004) (Edit)
	float                                              MaxDropEquipmentAngle;                                    // 0x026C(0x0004) (Edit)
	float                                              MaxDropManaAngle;                                         // 0x0270(0x0004) (Edit)
	float                                              AdditionalEquipmentRarityWeighting;                       // 0x0274(0x0004) (Edit)
	float                                              WaveSkippingManaIncreaseFactor;                           // 0x0278(0x0004) (Edit)
	unsigned long                                      bIgnoreGlobalTreasureChestDropQualityMultiplier : 1;      // 0x027C(0x0004) (Edit)
	unsigned long                                      bUseItemValuesForShop : 1;                                // 0x027C(0x0004) (Edit)
	unsigned long                                      bForceDropEquipment : 1;                                  // 0x027C(0x0004) (Edit)
	unsigned long                                      bUseNightmareValues : 1;                                  // 0x027C(0x0004) (Edit)
	unsigned long                                      NoSpawnInEffect : 1;                                      // 0x027C(0x0004) (Edit, Net)
	unsigned long                                      bOpened : 1;                                              // 0x027C(0x0004)
	unsigned long                                      bDoSpawnTreasure : 1;                                     // 0x027C(0x0004)
	unsigned long                                      bPlayedFadeAwayEffect : 1;                                // 0x027C(0x0004)
	int                                                TreasureChestID;                                          // 0x0280(0x0004) (Edit)
	float                                              NightmareAbsoluteMaxEquipmentDropQuality;                 // 0x0284(0x0004) (Edit)
	float                                              NightmareGlobalEquipmentDropQuality;                      // 0x0288(0x0004) (Edit)
	float                                              GlobalTreasureChestDropQualityMultiplier;                 // 0x028C(0x0004) (Const)
	class ADunDefManaToken*                            SmallManaTokenTemplate;                                   // 0x0290(0x0004) (Edit)
	class ADunDefManaToken*                            MinorManaTokenTemplate;                                   // 0x0294(0x0004) (Edit)
	class ADunDefManaToken*                            LargeManaTokenTemplate;                                   // 0x0298(0x0004) (Edit)
	class ADunDefManaToken*                            SuperManaTokenTemplate;                                   // 0x029C(0x0004) (Edit)
	class ADunDefManaToken*                            DuperManaTokenTemplate;                                   // 0x02A0(0x0004) (Edit)
	float                                              ManaTokenImpulseMagnitude;                                // 0x02A4(0x0004) (Edit)
	float                                              ManaTokenTorqueMagnitude;                                 // 0x02A8(0x0004) (Edit)
	struct FVector                                     ManaTokenImpulseUpOffset;                                 // 0x02AC(0x000C) (Edit)
	struct FVector                                     ManaTokenPositionUpOffset;                                // 0x02B8(0x000C) (Edit)
	TArray<float>                                      DifficultyEquipmentQualityMultipliers;                    // 0x02C4(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyManaMultipliers;                                // 0x02D0(0x000C) (Edit, NeedCtorLink)
	class ADunDefEmitterSpawnable*                     SpawnInEffectTemplate;                                    // 0x02DC(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     FadeWayEffectTemplate;                                    // 0x02E0(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SpawnTreasureEffectTemplate;                              // 0x02E4(0x0004) (Edit)
	int                                                MinMana;                                                  // 0x02E8(0x0004) (Edit)
	int                                                MaxMana;                                                  // 0x02EC(0x0004) (Edit)
	struct FName                                       CustomAnimNodeName;                                       // 0x02F0(0x0008) (Edit)
	class USkeletalMeshComponent*                      TreasureChestMeshComp;                                    // 0x02F8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x02FC(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       OpenTreasureAnimName;                                     // 0x0300(0x0008) (Edit)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0308(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x030C(0x0004) (Edit)
	struct FColor                                      MiniMapIconColor;                                         // 0x0310(0x0004) (Edit)
	float                                              FadingAwayStartTime;                                      // 0x0314(0x0004)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x0318(0x0004)
	class ADunDefPlayer*                               OpenedByPlayer;                                           // 0x031C(0x0004)
	struct FRotator                                    ReplicatedRotation;                                       // 0x0320(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTreasureChest");
		return ptr;
	}


	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void SpawnDroppedEquipment();
	void SpawnManaTokens();
	void SpawnTreasure();
	void TornOff();
	void FadeAway();
	void PauseAnimation();
	void Destroyed();
	void PostBeginPlay();
	void PlayOpening();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	class ADunDefGameReplicationInfo* GetGRI();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.UI_ItemBox
// 0x01D0 (0x080C - 0x063C)
class UUI_ItemBox : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           EquipmentDataList;                                        // 0x063C(0x0004) (Edit)
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                               // 0x0640(0x0004) (Edit)
	class UUIButton*                                   RemoveEquipmentButton;                                    // 0x0644(0x0004) (Edit)
	class UUIButton*                                   TransferToHeroButton;                                     // 0x0648(0x0004) (Edit)
	class UUIButton*                                   SellEquipmentButton;                                      // 0x064C(0x0004) (Edit)
	class UUIButton*                                   EquipmentInfoButton;                                      // 0x0650(0x0004) (Edit)
	class UUIButton*                                   BackButton;                                               // 0x0654(0x0004) (Edit)
	class UUIButton*                                   LockItemButton;                                           // 0x0658(0x0004) (Edit)
	class UUIButton*                                   LockAllButton;                                            // 0x065C(0x0004) (Edit)
	class UUIButton*                                   UnlockAllButton;                                          // 0x0660(0x0004) (Edit)
	class UUIButton*                                   SellAllButton;                                            // 0x0664(0x0004) (Edit)
	class UUIButton*                                   ViewTradeButton;                                          // 0x0668(0x0004) (Edit)
	class UUIButton*                                   AddToPlayerShop;                                          // 0x066C(0x0004) (Edit)
	class UUIButton*                                   AddToDefenderStore;                                       // 0x0670(0x0004) (Edit)
	class UUIButton*                                   TradeHelper;                                              // 0x0674(0x0004) (Edit)
	class UUIButton*                                   GamepadMoveToFolderButton;                                // 0x0678(0x0004) (Edit)
	class UUIButton*                                   SetActiveFolderbutton;                                    // 0x067C(0x0004) (Edit)
	class UUIResolutionContainer*                      ResolutionContainerToResize;                              // 0x0680(0x0004) (Edit)
	float                                              TradeModeScalarValue;                                     // 0x0684(0x0004) (Edit)
	class UUIObject*                                   MainExtentsWidget;                                        // 0x0688(0x0004) (Edit)
	unsigned long                                      bInTradeMode : 1;                                         // 0x068C(0x0004) (Transient)
	unsigned long                                      bPlayedShowItemBoxUI : 1;                                 // 0x068C(0x0004)
	unsigned long                                      bIsPlayerShop : 1;                                        // 0x068C(0x0004) (Edit)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x068C(0x0004)
	unsigned long                                      bDontCancelDeletion : 1;                                  // 0x068C(0x0004)
	unsigned long                                      bIsInLobby : 1;                                           // 0x068C(0x0004)
	unsigned long                                      bIsFolderRenaming : 1;                                    // 0x068C(0x0004) (Transient)
	unsigned long                                      bIsFolderCreating : 1;                                    // 0x068C(0x0004) (Transient)
	unsigned long                                      bCtrlDown : 1;                                            // 0x068C(0x0004) (Transient)
	class UUIButton*                                   CreateFolder;                                             // 0x0690(0x0004) (Edit)
	class UUIButton*                                   UpFolder;                                                 // 0x0694(0x0004) (Edit)
	class UUIButton*                                   RenameFolder;                                             // 0x0698(0x0004) (Edit)
	class UUIButton*                                   DeleteFolder;                                             // 0x069C(0x0004) (Edit)
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                                  // 0x06A0(0x0004) (Edit)
	class USoundCue*                                   MoveEquipmentSound;                                       // 0x06A4(0x0004) (Edit)
	class USoundCue*                                   SellSound;                                                // 0x06A8(0x0004) (Edit)
	class USoundCue*                                   SellAllSound;                                             // 0x06AC(0x0004) (Edit)
	class USoundCue*                                   LockSound;                                                // 0x06B0(0x0004) (Edit)
	class USoundCue*                                   UnlockSound;                                              // 0x06B4(0x0004) (Edit)
	class USoundCue*                                   AddItemToTradeSound;                                      // 0x06B8(0x0004) (Edit)
	class USoundCue*                                   RemoveItemFromTradeSound;                                 // 0x06BC(0x0004) (Edit)
	class USoundCue*                                   NavigateToFolderSound;                                    // 0x06C0(0x0004) (Edit)
	class USoundCue*                                   ItemDraggedSoundCue;                                      // 0x06C4(0x0004) (Edit)
	class USoundCue*                                   FolderDraggedSoundCue;                                    // 0x06C8(0x0004) (Edit)
	class USoundCue*                                   DeleteFolderSoundCue;                                     // 0x06CC(0x0004) (Edit)
	class UUILabel*                                    BankedManaLabel;                                          // 0x06D0(0x0004) (Edit)
	class UUILabel*                                    ItemCountLabel;                                           // 0x06D4(0x0004) (Edit)
	struct FColor                                      LockItemColor;                                            // 0x06D8(0x0004) (Edit)
	struct FColor                                      UnlockItemColor;                                          // 0x06DC(0x0004) (Edit)
	struct FName                                       ShowItemBoxUI;                                            // 0x06E0(0x0008) (Edit)
	struct FName                                       HideItemBoxUI;                                            // 0x06E8(0x0008) (Edit)
	struct FString                                     LockItemString;                                           // 0x06F0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UnlockItemString;                                         // 0x06FC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ViewTradeString;                                          // 0x0708(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MoveItemUpString;                                         // 0x0714(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MoveItemIntoFolderString;                                 // 0x0720(0x000C) (Edit, Localized, NeedCtorLink)
	class UUI_EditboxPopup*                            NewFolderEditBoxPopupTemplate;                            // 0x072C(0x0004) (Edit)
	class UUI_EditboxPopup*                            RenameFolderEditBoxPopupTemplate;                         // 0x0730(0x0004) (Edit)
	struct FLinearColor                                ItemCountColorFull;                                       // 0x0734(0x0010) (Edit)
	struct FLinearColor                                ItemCountColorRegular;                                    // 0x0744(0x0010) (Edit)
	class UUILabel*                                    ItemPath;                                                 // 0x0754(0x0004) (Edit)
	class UHeroEquipment*                              NextRefreshSelectedEntry;                                 // 0x0758(0x0004)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x075C(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x0760(0x0004) (Edit)
	class UUIButton*                                   UseInTradeButton;                                         // 0x0764(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x0768(0x0004) (Edit)
	class UUILabel*                                    DeletionEquipmentNameLabel;                               // 0x076C(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x0770(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x077C(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x0784(0x0008) (Edit)
	struct FString                                     AllItemsString;                                           // 0x078C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SellAllInLobbyString;                                     // 0x0798(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SellInLobbyString;                                        // 0x07A4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AddToTradeString;                                         // 0x07B0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     RemoveFromTradeString;                                    // 0x07BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     SetActiveFolderString;                                    // 0x07C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ClearActiveFolderString;                                  // 0x07D4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      AddToTradeColor;                                          // 0x07E0(0x0004) (Edit)
	struct FColor                                      RemoveFromTradeColor;                                     // 0x07E4(0x0004) (Edit)
	class UUIScriptWidget_Combobox*                    CB_SortingFilter;                                         // 0x07E8(0x0004) (Edit)
	int                                                FocusCounter;                                             // 0x07EC(0x0004)
	int                                                DeletionReason;                                           // 0x07F0(0x0004)
	int                                                UserID;                                                   // 0x07F4(0x0004)
	class UUI_EditboxPopup*                            FolderNaming;                                             // 0x07F8(0x0004) (Transient)
	int                                                FolderIDToRename;                                         // 0x07FC(0x0004) (Transient)
	float                                              SyncItemsTimer;                                           // 0x0800(0x0004) (Transient)
	float                                              SaveUpdateTimer;                                          // 0x0804(0x0004) (Transient)
	int                                                ActiveTransferFolderID;                                   // 0x0808(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_ItemBox");
		return ptr;
	}


	void NotifySelectionChanged(int selectedElementIdx);
	unsigned long OnInterceptedInputKey(struct FInputEventParameters* EventParms);
	void MovePageToFolder(int FolderID, unsigned long isPlayerShop);
	void AddPageToTrade();
	void Update(float DeltaTime);
	void NotifyEquipmentChanged();
	void UpdateItemPath();
	void RefreshedList();
	void RefreshEquipmentList(int forUserID);
	unsigned long EntryEnabledCheck(const TScriptInterface<class UDataListEntryInterface>& dataEntry);
	void EquipmentEntrySelected(class UUIButton_DataListEntry* Button);
	class UDunDefHero* GetHero();
	void GetNextRefreshButton();
	void SellSelectedItem();
	void SellAll();
	void UnlockedAll();
	void LockedAll();
	void CancelDeletion();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void NotifyDraggedEvent(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	unsigned long SupportsDraggedOntoItem(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	void CreateNewFolder();
	void DeleteFolderByID(int FolderID);
	void RenameFolderByID(int FolderID);
	void MoveUpAFolder();
	void ItemUpdateOccured(class UHeroEquipment* InEquipment);
	void FolderUpdateOccured(int FolderID, int ParentID, const struct FString& FolderName);
	void FolderDeletionOccured(int FolderID);
	void ToggleInTrade();
	void AddToTrade();
	unsigned long AllowOverlays();
	void PostInitialSceneUpdate();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.PlayerShopManager
// 0x003C (0x0258 - 0x021C)
class APlayerShopManager : public AActor
{
public:
	TArray<class UHeroEquipment*>                      RemotePlayerShopEntries;                                  // 0x021C(0x000C) (NeedCtorLink)
	TArray<struct FItemFolder>                         RemoteShopFolders;                                        // 0x0228(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      InitializeAck : 1;                                        // 0x0234(0x0004) (Net)
	unsigned long                                      bAtMaxItemLimit : 1;                                      // 0x0234(0x0004) (Net, Transient)
	class USoundCue*                                   BoughtEquipmentSound;                                     // 0x0238(0x0004) (Edit)
	class UUI_PlayerShop*                              PlayerShopUITemplate;                                     // 0x023C(0x0004) (Edit)
	float                                              RemotePlayerShopUIPopupDelay;                             // 0x0240(0x0004) (Edit)
	class ADunDefPlayerReplicationInfo*                ShopOwnerPlayerReplicationInfo;                           // 0x0244(0x0004) (Net)
	struct FHighDigitInt                               ShopMana;                                                 // 0x0248(0x0010) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.PlayerShopManager");
		return ptr;
	}


	int GetNumberOfPlayerShopItems();
	void ClearPendingPurchases();
	void ClientAttemptPurchase(int EquipmentID1, int EquipmentID2);
	void ClientPurchaseAuthorized(int EquipmentID1, int EquipmentID2);
	void ServerRequestedPurchase(class ADunDefPlayerController* fromPC, int EquipmentID1, int EquipmentID2);
	void ServerCompletedPurchase(class ADunDefPlayerController* fromPC, int EquipmentID1, int EquipmentID2);
	void ServerExecCommand(class ADunDefPlayerController* fromPC, const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
	void ClientExecCommand(const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
	void LocalSetFolderSellAmount(class UItemFolderStub* folder, const struct FHighDigitInt& Amount);
	void LocalSetItemSellAmount(class UHeroEquipment* anEquipment, const struct FHighDigitInt& SellAmount);
	void RefreshPlayershops();
	void ClientRemoveEquipmentData(struct FEquipmentNetInfo* equipmentInfo);
	void ClientAddOrUpdateEquipmentData(int SellAmountLow, int SellAmountHigh, struct FEquipmentNetInfo* equipmentInfo);
	void ClientProcessEquipmentManualReplication(int AdditionalData1, int AdditionalData2, int AdditionalData3, struct FEquipmentNetInfo* equipmentInfo);
	void ServerFolderDeleted(int FolderID);
	void ServerFolderUpdated(int FolderID, int ParentFolderID, const struct FString& FolderName);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ShowPlayerShopUI();
	void ClientDeleteFolder(int FolderID);
	void ClientSetupFolder(int FolderID, int ParentFolderID, const struct FString& FolderName);
	void RefreshItems();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void LocalRemoveItem(class UHeroEquipment* anEquipment);
	void LocalAddItem(class UHeroEquipment* anEquipment, unsigned long bDontAdd);
	class APlayerShopManager* STATIC_GetPlayerShopManager();
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.UI_ForgeMenu
// 0x0068 (0x06A4 - 0x063C)
class UUI_ForgeMenu : public UDunDefUIScene
{
public:
	class UUIButton*                                   HeroInfoButton;                                           // 0x063C(0x0004) (Edit)
	class UUIButton*                                   ItemBoxButton;                                            // 0x0640(0x0004) (Edit)
	class UUIButton*                                   SwapHeroButton;                                           // 0x0644(0x0004) (Edit)
	class UUIButton*                                   CloseButton;                                              // 0x0648(0x0004) (Edit)
	class UUI_ItemBox*                                 ItemBoxUISceneTemplate;                                   // 0x064C(0x0004) (Edit)
	class UUI_SwapHero*                                SwapHeroUISceneTemplate;                                  // 0x0650(0x0004) (Edit)
	struct FName                                       HideForgeAnimation;                                       // 0x0654(0x0008) (Edit)
	struct FName                                       ShowForgeAnimation;                                       // 0x065C(0x0008) (Edit)
	class UUIScreenObject*                             LevelUpAvailablePanel;                                    // 0x0664(0x0004) (Edit)
	struct FName                                       LevelUpAvailableAnimation;                                // 0x0668(0x0008) (Edit)
	struct FName                                       StopLevelUpAvailableAnimation;                            // 0x0670(0x0008) (Edit)
	class UUILabel*                                    BankManaLabel;                                            // 0x0678(0x0004) (Edit)
	class UUILabel*                                    PlayerManaLabel;                                          // 0x067C(0x0004) (Edit)
	class UUIButton*                                   IncreaseBankButton;                                       // 0x0680(0x0004) (Edit)
	float                                              ManaChangeRate;                                           // 0x0684(0x0004) (Edit)
	float                                              ManaInvestmentInterval;                                   // 0x0688(0x0004) (Edit)
	unsigned long                                      bPlayedShowForgeUI : 1;                                   // 0x068C(0x0004)
	unsigned long                                      bPlayedLevelUpAvailableAnimation : 1;                     // 0x068C(0x0004)
	unsigned long                                      Incrementing : 1;                                         // 0x068C(0x0004)
	unsigned long                                      bFadingIn : 1;                                            // 0x068C(0x0004)
	int                                                bankedMana;                                               // 0x0690(0x0004)
	class UUIObject*                                   lastFocusedButton;                                        // 0x0694(0x0004)
	float                                              Timer;                                                    // 0x0698(0x0004)
	float                                              ManaInvestmentTimer;                                      // 0x069C(0x0004)
	int                                                LastBankedMana;                                           // 0x06A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_ForgeMenu");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void STATIC_CloseForgeUI(class ULocalPlayer* ForPlayer);
	class UDunDefHero* GetHero();
	int GetPlayerMana();
	void UpdateManaToBank(float DeltaTime);
	void UpdateBanking(float DeltaTime);
	void Update(float DeltaTime);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void SceneDeactivated();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.UI_Shop
// 0x018C (0x0830 - 0x06A4)
class UUI_Shop : public UUI_ForgeMenu
{
public:
	class UUIButton*                                   RespecButton;                                             // 0x06A4(0x0004) (Edit)
	class UUIButton*                                   ExpBonusButton;                                           // 0x06A8(0x0004) (Edit)
	class UUIButton*                                   RenameHeroButton;                                         // 0x06AC(0x0004) (Edit)
	class UUIButton*                                   ItemShopButton;                                           // 0x06B0(0x0004) (Edit)
	class UUIButton*                                   ServicesButton;                                           // 0x06B4(0x0004) (Edit)
	class UUIButton*                                   BuyManaButton;                                            // 0x06B8(0x0004) (Edit)
	class UUIButton*                                   CreateTokenButton;                                        // 0x06BC(0x0004) (Edit)
	class UUIScriptWidget_Button*                      LockButton;                                               // 0x06C0(0x0004) (Edit)
	class UUIButton_Scripted*                          medBagButton;                                             // 0x06C4(0x0004) (Edit)
	class UUIButton_Scripted*                          largeBagButton;                                           // 0x06C8(0x0004) (Edit)
	class UUIButton_Scripted*                          superBagButton;                                           // 0x06CC(0x0004) (Edit)
	class UUILabel*                                    RespecFailureLabel;                                       // 0x06D0(0x0004) (Edit)
	class UUILabel*                                    ExpBonusFailureLabel;                                     // 0x06D4(0x0004) (Edit)
	class UUILabel*                                    RenameHeroFailureLabel;                                   // 0x06D8(0x0004) (Edit)
	class UUIObject*                                   ServicesPanel;                                            // 0x06DC(0x0004) (Edit)
	class UUIObject*                                   ItemShopPanel;                                            // 0x06E0(0x0004) (Edit)
	struct FLinearColor                                PurchaseEnabledColor;                                     // 0x06E4(0x0010) (Edit)
	struct FLinearColor                                PurchaseDisabledColor;                                    // 0x06F4(0x0010) (Edit)
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                                     // 0x0704(0x0004) (Edit)
	class UUI_EditboxPopup*                            CreateTokenEditBoxPopupTemplate;                          // 0x0708(0x0004) (Edit)
	TArray<class UUIScriptWidget_Button*>              EquipmentItemButtons;                                     // 0x070C(0x000C) (Edit, NeedCtorLink)
	TArray<class UHeroEquipment*>                      EquipmentTest_Familiars;                                  // 0x0718(0x000C) (Edit, NeedCtorLink)
	TArray<class UHeroEquipment*>                      EquipmentTest_Weapons;                                    // 0x0724(0x000C) (Edit, NeedCtorLink)
	TArray<class UHeroEquipment*>                      EquipmentTest_Armors;                                     // 0x0730(0x000C) (Edit, NeedCtorLink)
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                               // 0x073C(0x0004) (Edit)
	class UUIPanel_DataList*                           EquipmentDataList;                                        // 0x0740(0x0004) (Edit)
	class UUIScriptWidget_Button*                      ItemInfoButton;                                           // 0x0744(0x0004) (Edit)
	class UUIScriptWidget_Button*                      BuyItemButton;                                            // 0x0748(0x0004) (Edit)
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                                  // 0x074C(0x0004) (Edit)
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplateWide;                              // 0x0750(0x0004) (Edit)
	class USoundCue*                                   BuyItemSound;                                             // 0x0754(0x0004) (Edit)
	class USoundCue*                                   BuyManaSound;                                             // 0x0758(0x0004) (Edit)
	class USoundCue*                                   TabPageSound;                                             // 0x075C(0x0004) (Edit)
	class USoundCue*                                   LockSound;                                                // 0x0760(0x0004) (Edit)
	class USoundCue*                                   UnlockSound;                                              // 0x0764(0x0004) (Edit)
	class UUILabel*                                    BankDescriptionLabel;                                     // 0x0768(0x0004) (Edit)
	class UUILabel*                                    LargeBankManaLabel;                                       // 0x076C(0x0004) (Edit)
	class UUILabel*                                    LargeBankManaDescriptionLabel;                            // 0x0770(0x0004) (Edit)
	class UUIObject*                                   TavernPanel;                                              // 0x0774(0x0004) (Edit)
	class UUIObject*                                   ItemShopImageBG;                                          // 0x0778(0x0004) (Edit)
	class UUIObject*                                   ServicesImageBG;                                          // 0x077C(0x0004) (Edit)
	class UUI_PlayerShop*                              PlayerShopUISceneTemplate;                                // 0x0780(0x0004) (Edit)
	class UUIScriptWidget_Button*                      PlayerShopButton;                                         // 0x0784(0x0004) (Edit)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x0788(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x078C(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x0790(0x0004) (Edit)
	class UUILabel*                                    DeletionLabel;                                            // 0x0794(0x0004) (Edit)
	class UUILabel*                                    DeletionHeroNameLabel;                                    // 0x0798(0x0004) (Edit)
	class UUILabel*                                    ConfirmItemCostLabel;                                     // 0x079C(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x07A0(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x07AC(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x07B4(0x0008) (Edit)
	struct FString                                     DeletionConfirmationString;                               // 0x07BC(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x07C8(0x0004)
	unsigned long                                      medManaSetup : 1;                                         // 0x07C8(0x0004)
	unsigned long                                      largeManaSetup : 1;                                       // 0x07C8(0x0004)
	unsigned long                                      superManaSetup : 1;                                       // 0x07C8(0x0004)
	int                                                FocusCounter;                                             // 0x07CC(0x0004)
	TScriptInterface<class UDataListEntryInterface>    LastSelectedEntry;                                        // 0x07D0(0x0008) (Transient)
	class UDunDefUIScene*                              myEquipmentInfoScene;                                     // 0x07D8(0x0004) (Transient)
	struct FString                                     medManaBagString;                                         // 0x07DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     largeManaBagString;                                       // 0x07E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     superManaBagString;                                       // 0x07F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     medManaTitleString;                                       // 0x0800(0x000C) (Localized, NeedCtorLink)
	struct FString                                     largeManaTitleString;                                     // 0x080C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     superManaTitleString;                                     // 0x0818(0x000C) (Localized, NeedCtorLink)
	class UUI_EditboxPopup*                            myEditBoxPopup;                                           // 0x0824(0x0004) (Transient)
	class UHeroEquipment*                              ConfirmBuyEquipmentItem;                                  // 0x0828(0x0004) (Transient)
	int                                                EditBoxType;                                              // 0x082C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_Shop");
		return ptr;
	}


	void ShowDeletionConfirmation(class UHeroEquipment* anEquipment);
	void GiveFocusToAnyChild();
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	void CloseWithAnimation();
	void RefreshEquipmentList();
	int GetSelectedEquipmentItemType();
	void SelectEquipmentItemType(int Index);
	void PostInitialSceneUpdate();
	void SceneDeactivated();
	void SceneActivated(unsigned long bInitialActivation);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	unsigned long AllowBuyingBankedMana();
	unsigned long CanAffordEquipmentHV(class UHeroEquipment* anEquipment, const struct FHighDigitInt& theBankedMana);
	unsigned long CanAffordEquipment(class UHeroEquipment* anEquipment, int theBankedMana);
	void BoughtMana();
	unsigned long BuyItem(class UHeroEquipment* anEquipment);
	void UpdateItemShopPanel(class UDunDefHero* theHero);
	void UpdateServicesPanel(class UDunDefHero* theHero);
	void Update(float DeltaTime);
	void updateManaBags(unsigned long shouldBeVisible, unsigned long shouldBeEnabled);
};


// Class UDKGame.UI_ChooseMultiplayerMode
// 0x00A5 (0x06E1 - 0x063C)
class UUI_ChooseMultiplayerMode : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          UnrankedButton;                                           // 0x063C(0x0004) (Edit)
	class UUIButton_Scripted*                          RankedButton;                                             // 0x0640(0x0004) (Edit)
	class UUILabel*                                    ChooseMultiplayerLabel;                                   // 0x0644(0x0004) (Edit)
	class UUILabel*                                    RankedModeLabel;                                          // 0x0648(0x0004) (Edit)
	class UUILabel*                                    UnrankedModeLabel;                                        // 0x064C(0x0004) (Edit)
	class UUILabel*                                    RequiredForAchievementsLabel;                             // 0x0650(0x0004) (Edit)
	struct FString                                     ChooseMultiplayerString;                                  // 0x0654(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedModeString;                                         // 0x0660(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedModeToolTipString;                                  // 0x066C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UnrankedModeString;                                       // 0x0678(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UnrankedModeToolTipString2;                               // 0x0684(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UnrankedModeToolTipString3;                               // 0x0690(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedModeDeniedToolTipString;                            // 0x069C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedModeDeniedDemoToolTip;                              // 0x06A8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedRecommendedString;                                  // 0x06B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RankedRecommendedStringWithSteam;                         // 0x06C0(0x000C) (Localized, NeedCtorLink)
	class UDunDefUIScene*                              CharacterSelectUIScene;                                   // 0x06CC(0x0004) (Edit)
	class UDunDefUIScene*                              RankedModeWelcomeUIScene;                                 // 0x06D0(0x0004) (Edit)
	class UDunDefUIScene*                              MainMenuScene;                                            // 0x06D4(0x0004) (Edit)
	class USoundCue*                                   DeniedSound;                                              // 0x06D8(0x0004) (Edit)
	class UUIImage*                                    DeniedImage;                                              // 0x06DC(0x0004) (Edit)
	TEnumAsByte<EMultiplayerModes>                     OriginalMultiplayerMode;                                  // 0x06E0(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_ChooseMultiplayerMode");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long OnReceivedInputAxis(struct FInputEventParameters* EventParms);
	void SceneActivated(unsigned long bInitialActivation);
	void SwitchMultiplayerModeComplete();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
};


// Class UDKGame.DunDefPostProcessManager
// 0x0004 (0x0040 - 0x003C)
class UDunDefPostProcessManager : public UObject
{
public:
	class UMaterialInstanceConstant*                   OutlineMaterial;                                          // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPostProcessManager");
		return ptr;
	}

};


// Class UDKGame.HeroManagerResources
// 0x0008 (0x0044 - 0x003C)
class UHeroManagerResources : public UObject
{
public:
	class UStatObjectDataContainer*                    StatObjectDataList;                                       // 0x003C(0x0004) (Edit)
	class UEquipmentDataContainer*                     EquipmentDataList;                                        // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroManagerResources");
		return ptr;
	}


	class UHeroManagerResources* STATIC_GetHeroManagerResources();
	int GetRandomStatObjectID();
	class UStatObject_Equipment* GetRandomStatObject();
	class UStatObject_Equipment* GetEquipmentStatObjectFromID(int Id);
	void Initalize();
};


// Class UDKGame.DataListProviderInterface
// 0x0000 (0x003C - 0x003C)
class UDataListProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DataListProviderInterface");
		return ptr;
	}


	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
};


// Class UDKGame.DunDefAchievementMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefAchievementMessage : public UDunDefGameMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefAchievementMessage");
		return ptr;
	}

};


// Class UDKGame.CDTSettingsManager
// 0x0050 (0x008C - 0x003C)
class UCDTSettingsManager : public UObject
{
public:
	unsigned long                                      bTowersUseDynamicLighting : 1;                            // 0x003C(0x0004) (Config)
	unsigned long                                      bAllowMoveWhileBuilding : 1;                              // 0x003C(0x0004) (Config)
	unsigned long                                      bOtherPlayerCanSellTower : 1;                             // 0x003C(0x0004) (Config)
	unsigned long                                      bDisplayCDPortal : 1;                                     // 0x003C(0x0004) (Config)
	unsigned long                                      bDisplayCosmeticSet : 1;                                  // 0x003C(0x0004) (Config)
	unsigned long                                      bHideMiniMapTowers : 1;                                   // 0x003C(0x0004) (Config)
	unsigned long                                      bHideMiniMapBillboards : 1;                               // 0x003C(0x0004) (Config)
	unsigned long                                      bHideGoodEquipmentOverlay : 1;                            // 0x003C(0x0004) (Config)
	unsigned long                                      bOverrideWaterDetail : 1;                                 // 0x003C(0x0004) (Config)
	unsigned long                                      bHardcore : 1;                                            // 0x003C(0x0004) (Config)
	unsigned long                                      bHardcoreOpen : 1;                                        // 0x003C(0x0004) (Config)
	unsigned long                                      bQualityOutlineEnabled : 1;                               // 0x003C(0x0004) (Config)
	unsigned long                                      bCensorItems : 1;                                         // 0x003C(0x0004) (Config)
	unsigned long                                      bStepTowardsTarget : 1;                                   // 0x003C(0x0004) (Config)
	unsigned long                                      bUseSimpleDamageNumbers : 1;                              // 0x003C(0x0004) (Config)
	unsigned long                                      bDisableHysteresis : 1;                                   // 0x003C(0x0004) (Config)
	unsigned long                                      bUseOldUpgradingPriority : 1;                             // 0x003C(0x0004) (Config)
	unsigned long                                      bShowExtendedWeaponInfo : 1;                              // 0x003C(0x0004) (Config)
	unsigned long                                      bShowAllDescriptionQualityNames : 1;                      // 0x003C(0x0004) (Config)
	unsigned long                                      bDisableAllDescriptionQualityNames : 1;                   // 0x003C(0x0004) (Config)
	unsigned long                                      bUseCustomColorArray : 1;                                 // 0x003C(0x0004) (Config)
	int                                                ShowDroppedItemQualityFx;                                 // 0x0040(0x0004) (Config)
	int                                                numSigFigsHVFormat;                                       // 0x0044(0x0004) (Config)
	float                                              AlphaAtHighHealth;                                        // 0x0048(0x0004) (Config)
	float                                              HighHealthThreshold;                                      // 0x004C(0x0004) (Config)
	float                                              LowHealthThreshold;                                       // 0x0050(0x0004) (Config)
	int                                                maxUpgradeDisplayLevel;                                   // 0x0054(0x0004) (Config)
	int                                                WaterDetailLevel;                                         // 0x0058(0x0004) (Config)
	int                                                ShowEquipmentQualityCount;                                // 0x005C(0x0004) (Config)
	int                                                QualityOutlineFilter;                                     // 0x0060(0x0004) (Config)
	float                                              DamageNumberScaleMulitplier;                              // 0x0064(0x0004) (Config)
	int                                                HysteresisWeight;                                         // 0x0068(0x0004) (Config)
	int                                                PublicLobbyLevelRequirement;                              // 0x006C(0x0004) (Config)
	TArray<struct FString>                             UpgradeTowerPriority;                                     // 0x0070(0x000C) (Config, NeedCtorLink)
	int                                                FullyUpgradeTowerFromLevel;                               // 0x007C(0x0004) (Config)
	TArray<struct FColor>                              CustomColorArray;                                         // 0x0080(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.CDTSettingsManager");
		return ptr;
	}

};


// Class UDKGame.DunDefGameStats
// 0x0014 (0x00B0 - 0x009C)
class UDunDefGameStats : public UStatSystem
{
public:
	TArray<struct FNewBestStats>                       newBestOfStats;                                           // 0x009C(0x000C) (NeedCtorLink)
	float                                              CombatStartTime;                                          // 0x00A8(0x0004)
	unsigned long                                      FullDefenses : 1;                                         // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameStats");
		return ptr;
	}


	void ReportGameStat(int StatClassIndex, int Value, class APlayerController* PC, const struct FName& SplitName, float Time, unsigned long sharedStat);
	unsigned long IsNewBest(int PlayerIndex, int StatClassIndex);
	void MarkNewBestStat(int PlayerIndex, int StatClassIndex, unsigned long checkLocal, const struct FUniqueNetId& PlayerID);
	void GetLevelTime(int* BuildTime, int* CombatTime);
	void DumpBufferStat(const struct FStatBuffer& forBuffer, int I);
	void DumpBuffer(const struct FStatBuffer& forBuffer);
	void DumpPlayer(const struct FStatPlayer& Player);
	void Dump();
	int GetPlayerIndex(class ADunDefPlayerController* DPC);
	int GetPRIPlayerIndex(class ADunDefPlayerReplicationInfo* ddPRI);
	unsigned long IsCloseEnough(float A, float B, float Epsilon);
	struct FString GetStatPlayerName(class APlayerController* PC);
	struct FStatHeroInfo GetStatPlayerHeroData(int Index);
	void MarkPlayerLeft(int Index);
	void RegisterStatPlayerHero(int Index, class ADunDefPlayerController* DPC);
	struct FString GetStatPlayerNameWithHero(const struct FString& prefix, class UDunDefHero* theHero);
	void SetupStatName(int Index, class ADunDefPlayerController* DPC, class UDunDefHero* theHero, const struct FString& PRIName);
	void SetupHeroMetaData(int Index, class UDunDefHero* hero);
	void RegisterPlayerController(class ADunDefPlayerController* DPC);
	void StatPlayerAdded(class APlayerController* PC, int Index);
	void ReportStopCombat(class ADunDefGameReplicationInfo* Info);
	void ReportStartCombat(class ADunDefGameReplicationInfo* Info);
};


// Class UDKGame.DunDefLocalPlayer
// 0x000C (0x03DC - 0x03D0)
class UDunDefLocalPlayer : public ULocalPlayer
{
public:
	unsigned long                                      IsKeyboardPlayer : 1;                                     // 0x03D0(0x0004) (Transient)
	unsigned long                                      HasConfirmedAHero : 1;                                    // 0x03D0(0x0004) (Transient)
	unsigned long                                      bIsWhiteFade : 1;                                         // 0x03D0(0x0004) (Transient)
	unsigned long                                      bRespawning : 1;                                          // 0x03D0(0x0004) (Transient)
	unsigned long                                      bRespawningUp : 1;                                        // 0x03D0(0x0004) (Transient)
	float                                              BlackBoxOpacity;                                          // 0x03D4(0x0004) (Transient)
	float                                              LastBlackOverlayUpdateTime;                               // 0x03D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefLocalPlayer");
		return ptr;
	}


	unsigned long UseCursor();
	unsigned long IsConsolePlayer();
	void MovieCompleted();
	void CinematicCompleted();
	void ReceivedPlayerController(class ADunDefPlayerController* MyController);
	void ResetForNewMap();
	void RespawningDown();
	void RespawningUp();
	void DrawBlackOverlay(class UCanvas* Canvas);
	void PostCanvasRender(class UCanvas* Canvas);
	void PostHUDRender(class UCanvas* Canvas);
	struct FString GetDunDefNickname();
	void Reset();
	int GetPlayerIndex();
	class UDunDefViewportClient* GetVC();
};


// Class UDKGame.ToolTipInterface
// 0x0000 (0x003C - 0x003C)
class UToolTipInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ToolTipInterface");
		return ptr;
	}


	void ActiveStateChanged(class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState);
	class UUIScreenObject* GetAbsoluteParentOverride();
	void SearchedForResContainer();
	unsigned long HasSearchedForResContainer();
	void SetResolutionContainer(class UUIResolutionContainer* resContainer);
	class UUIResolutionContainer* GetResolutionContainer();
	TEnumAsByte<EToolTipAlignment> GetVerticalAlignment();
	TEnumAsByte<EToolTipAlignment> GetHorizontalAlignment();
	struct FVector GetToolTipScale();
	unsigned long GetToolTipShouldUse();
	unsigned long GetToolTipMouseFollow();
	float GetToolTipFadeOutTime();
	float GetToolTipFadeInTime();
	struct FString GetToolTipString();
	class UUIPrefab* GetToolTipPrefabTemplate();
	float GetToolTipYOffset();
	float GetToolTipXOffset();
	float GetToolTipDelay();
};


// Class UDKGame.DunDefUIReplicationInfo
// 0x0014 (0x0230 - 0x021C)
class ADunDefUIReplicationInfo : public AActor
{
public:
	class UDunDefUIScene*                              UISceneTemplate;                                          // 0x021C(0x0004) (Net)
	class UDunDefUIScene*                              UISceneInstance;                                          // 0x0220(0x0004)
	unsigned long                                      InitializeAck : 1;                                        // 0x0224(0x0004) (Net)
	struct FName                                       ReplicatedOpeningAnimation;                               // 0x0228(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefUIReplicationInfo");
		return ptr;
	}


	void PostBeginPlay();
	class UDunDefViewportClient* GetViewportClient();
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void MulticastUIMessage(class ADunDefPlayerController* PC, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void Destroyed();
	void CheckForGRI();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefInput
// 0x002C (0x019C - 0x0170)
class UDunDefInput : public UDunDefInputNative
{
public:
	TArray<struct FString>                             AllowedCommands;                                          // 0x0170(0x000C) (NeedCtorLink)
	struct FMobileInput                                MyMobileInput;                                            // 0x017C(0x0004)
	TArray<struct FKeyDescription>                     KeyDescriptions;                                          // 0x0180(0x000C) (Config, NeedCtorLink)
	TArray<struct FBindingDescription>                 BindingDescriptions;                                      // 0x018C(0x000C) (Config, NeedCtorLink)
	unsigned char                                      bRotateCamera;                                            // 0x0198(0x0001) (Input)
	unsigned char                                      bDisplayMiniMap;                                          // 0x0199(0x0001) (Input)
	unsigned char                                      bTalking;                                                 // 0x019A(0x0001) (Input)
	unsigned char                                      bFreeLook;                                                // 0x019B(0x0001) (Input)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefInput");
		return ptr;
	}


	void SetInvertMouse(unsigned long doInvertMouse);
	void AdjustControlSchemeForOptions(struct FOptionsFixedStruct* theOptions);
	void ProcessMobileCameraRotation(float DeltaTime);
	class UTexture2D* GetIcon(const struct FName& KeyName, const struct FString& Command);
	struct FString GetDescription(const struct FName& KeyName, const struct FString& Command);
	struct FString GetBindingDescription(const struct FName& KeyName, const struct FString& Command);
	unsigned long IsKeyBoundToCommand(const struct FName& Key, const struct FString& Command);
	void SetBindingDescription(const struct FString& DestBinding, const struct FString& SrcBinding);
	void SetBinding(const struct FName& KeyName, const struct FString& Command);
	void CleanUpBindings();
	struct FString GetBinding(const struct FName& KeyName);
	struct FName GetKey(const struct FString& Command);
	unsigned long WantsMiniMap();
	unsigned long IsRotatingCamera();
	void Jump();
};


// Class UDKGame.UI_PauseMenu
// 0x0178 (0x07B4 - 0x063C)
class UUI_PauseMenu : public UDunDefUIScene
{
public:
	class USoundCue*                                   PauseGameSound;                                           // 0x063C(0x0004) (Edit)
	class USoundCue*                                   ResumeGameSound;                                          // 0x0640(0x0004) (Edit)
	class UUIButton*                                   ResumeGameButton;                                         // 0x0644(0x0004) (Edit)
	class UUIButton_Scripted*                          RestartLevelButton;                                       // 0x0648(0x0004) (Edit)
	class UUIButton_Scripted*                          AchievementsButton;                                       // 0x064C(0x0004) (Edit)
	class UUIButton_Scripted*                          TradeButton;                                              // 0x0650(0x0004) (Edit)
	class UUIButton_Scripted*                          CenteredTradeButton;                                      // 0x0654(0x0004) (Edit)
	class UUIButton_Scripted*                          ReturnToLobbyButton;                                      // 0x0658(0x0004) (Edit)
	class UUIButton_Scripted*                          ReturnToMainMenu;                                         // 0x065C(0x0004) (Edit)
	class UUIButton_Scripted*                          GameSetupButton;                                          // 0x0660(0x0004) (Edit)
	class UUIButton_Scripted*                          HeroInfoButton;                                           // 0x0664(0x0004) (Edit)
	class UUIButton_Scripted*                          CenteredHeroInfoButton;                                   // 0x0668(0x0004) (Edit)
	class UUIButton_Scripted*                          GamerInfoButton;                                          // 0x066C(0x0004) (Edit)
	class UUIButton_Scripted*                          InviteFriendsButton;                                      // 0x0670(0x0004) (Edit)
	class UUIButton_Scripted*                          KickPlayerButton;                                         // 0x0674(0x0004) (Edit)
	class UUIButton_Scripted*                          VisibleOnlineButton;                                      // 0x0678(0x0004) (Edit)
	class UUICheckbox*                                 SellableTowerCheckbox;                                    // 0x067C(0x0004) (Edit)
	class UUILabel*                                    MissionNameLabel;                                         // 0x0680(0x0004) (Edit)
	class UUILabel*                                    MixModeLabel;                                             // 0x0684(0x0004) (Edit)
	class UUILabel*                                    AltMissionNameLabel;                                      // 0x0688(0x0004) (Edit)
	class UUILabel*                                    MissionObjectiveLabel;                                    // 0x068C(0x0004) (Edit)
	class UUIObject*                                   DifficultyPanel;                                          // 0x0690(0x0004) (Edit)
	class UUILabel*                                    DifficultyLabel;                                          // 0x0694(0x0004) (Edit)
	class UUIPanel_DataList*                           PlayerDataList;                                           // 0x0698(0x0004) (Edit)
	struct FString                                     LeaveGameString;                                          // 0x069C(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIButton_Scripted*                          MuteButton;                                               // 0x06A8(0x0004) (Edit)
	class UUIButton_Scripted*                          ShowControlsButton;                                       // 0x06AC(0x0004) (Edit)
	struct FString                                     muteString;                                               // 0x06B0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     unmuteString;                                             // 0x06BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ShowOnlineGameString;                                     // 0x06C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     HideOnlineGameString;                                     // 0x06D4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     InvitePartyString;                                        // 0x06E0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExitToMainMenuFromMissionConfirmation;                    // 0x06EC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExitToTavernFromMissionConfirmation;                      // 0x06F8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AchievementsString;                                       // 0x0704(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       WantToUnpauseAnim;                                        // 0x0710(0x0008) (Edit)
	struct FName                                       WantToPauseAnim;                                          // 0x0718(0x0008) (Edit)
	struct FString                                     ToggleMapInputCommand;                                    // 0x0720(0x000C) (Edit, NeedCtorLink)
	class UUIButton_Scripted*                          OptionsButton;                                            // 0x072C(0x0004) (Edit)
	class UUIButton_Scripted*                          AddManaButton;                                            // 0x0730(0x0004) (Edit)
	class UUIButton_Scripted*                          AddScoreButton;                                           // 0x0734(0x0004) (Edit)
	class UUIButton_Scripted*                          UnlockAchievementsButton;                                 // 0x0738(0x0004) (Edit)
	class UUIButton_Scripted*                          KillAllEnemesButton;                                      // 0x073C(0x0004) (Edit)
	class UUIButton_Scripted*                          IncreaseTimeDilation;                                     // 0x0740(0x0004) (Edit)
	class UUIButton_Scripted*                          DecreaseTimeDilation;                                     // 0x0744(0x0004) (Edit)
	class UUI_OptionsMenu*                             OptionsMenuTemplate;                                      // 0x0748(0x0004) (Edit)
	class UUIButton_Scripted*                          ManageInvitesButton;                                      // 0x074C(0x0004) (Edit)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x0750(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x0754(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x0758(0x0004) (Edit)
	class UUILabel*                                    DeletionLabel;                                            // 0x075C(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x0760(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x076C(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x0774(0x0008) (Edit)
	TArray<struct FString>                             DeletionConfirmationStrings;                              // 0x077C(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x0788(0x0004) (Transient)
	unsigned long                                      bWantToUnpause : 1;                                       // 0x0788(0x0004)
	unsigned long                                      bWantsMiniMap : 1;                                        // 0x0788(0x0004)
	int                                                FocusCounter;                                             // 0x078C(0x0004)
	int                                                DeletionReason;                                           // 0x0790(0x0004)
	class UOnlineGameSettings*                         OnlineGameSettings;                                       // 0x0794(0x0004)
	int                                                ForceCameraUpdate;                                        // 0x0798(0x0004) (Transient)
	struct FString                                     InviteFriendsString;                                      // 0x079C(0x000C) (Transient, NeedCtorLink)
	class UUIButton_DataListEntry*                     LastPlayerButtonSelected;                                 // 0x07A8(0x0004)
	class UUIButton_Scripted*                          ReportBugButton;                                          // 0x07AC(0x0004) (Edit)
	float                                              LastVisibleChange;                                        // 0x07B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_PauseMenu");
		return ptr;
	}


	void STATIC_OpenPauseUIForAllPlayers(class ULocalPlayer* IgnorePlayer);
	void STATIC_CloseAllPauseUI();
	unsigned long STATIC_DoAllPauseUIWantToUnpause();
	unsigned long WantsToUnpause();
	void Update(float DeltaTime);
	void ToggleMute();
	void CloseWithAnimation();
	void NotifyPlayerLeft(class APlayerReplicationInfo* PRI);
	void NotifyPlayerJoined(class APlayerReplicationInfo* PRI);
	class ADunDefPlayerReplicationInfo* GetSelectedPRI();
	class UDunDefHero* GetSelectedHero();
	void RefreshTradeButton();
	void PlayerEntrySelected(class UUIButton_DataListEntry* Button);
	void UpdatePlayerList();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void ShowDeletionConfirmation(int Reason);
	void PostInitialSceneUpdate();
	void SceneActivated(unsigned long bInitialActivation);
	void SceneDeactivated();
	void ToggleWantToUnpause();
	unsigned long DoesAnyPauseUIWantMiniMap();
	void ShowMiniMap(unsigned long bShow);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
};


// Class UDKGame.UILabel_ToolTip
// 0x0000 (0x04CC - 0x04CC)
class UUILabel_ToolTip : public UUILabel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UILabel_ToolTip");
		return ptr;
	}

};


// Class UDKGame.UI_MessageBox
// 0x004C (0x0688 - 0x063C)
class UUI_MessageBox : public UDunDefUIScene
{
public:
	unsigned long                                      bDontHandleOKClick : 1;                                   // 0x063C(0x0004) (Edit)
	unsigned long                                      hasResponse : 1;                                          // 0x063C(0x0004)
	class UUIButton_Scripted*                          VersionButton;                                            // 0x0640(0x0004) (Edit)
	class UUIButton_Scripted*                          DLCButton;                                                // 0x0644(0x0004) (Edit)
	class UUILabel*                                    lblTitle;                                                 // 0x0648(0x0004) (Transient)
	class UUILabel*                                    lblMessage;                                               // 0x064C(0x0004) (Transient)
	class UUIButton_Scripted*                          btnOk;                                                    // 0x0650(0x0004) (Transient)
	class UUIButton_Scripted*                          btnYes;                                                   // 0x0654(0x0004) (Transient)
	class UUIButton_Scripted*                          btnNo;                                                    // 0x0658(0x0004) (Transient)
	class UUIButton_Scripted*                          btnCancel;                                                // 0x065C(0x0004) (Transient)
	struct FString                                     OriginalVersionButtonString;                              // 0x0660(0x000C) (Transient, NeedCtorLink)
	TEnumAsByte<EMessageBoxType>                       msgBoxType;                                               // 0x066C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x066D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnMessageBoxClicked__Delegate;                          // 0x0670(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnForceClose__Delegate;                                 // 0x067C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_MessageBox");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void HandleSceneActivated(class UUIScene* ActivatedScene, unsigned long bInitialActivation);
	void SceneActivated(unsigned long bInitialActivation);
	void SceneDeactivated();
	unsigned long OnButtonClicked(class UUIScreenObject* EventObject, int PlayerIndex);
	void SetMessageBoxType(TEnumAsByte<EMessageBoxType> withType);
	void ShowWidget(class UUIScreenObject* toEnable);
	void HideWidget(class UUIScreenObject* toDisable);
	void SetMessage(const struct FString& Message);
	void SetTitle(const struct FString& Title);
	void SetForceCloseDelegate(const struct FScriptDelegate& del);
	void SetOnClickedCallback(const struct FScriptDelegate& del);
	void OnForceClose(class UUI_MessageBox* Sender);
	unsigned long OnMessageBoxClicked(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
};


// Class UDKGame.UIButton_Scripted
// 0x0054 (0x0520 - 0x04CC)
class UUIButton_Scripted : public UUILabelButton
{
public:
	int                                                CustomData;                                               // 0x04CC(0x0004) (Edit)
	int                                                CustomDataTwo;                                            // 0x04D0(0x0004) (Edit)
	float                                              ToolTipDelay;                                             // 0x04D4(0x0004) (Edit)
	float                                              ToolTipXOffset;                                           // 0x04D8(0x0004) (Edit)
	float                                              ToolTipYOffset;                                           // 0x04DC(0x0004) (Edit)
	class UUIPrefab*                                   ToolTipPrefabTemplate;                                    // 0x04E0(0x0004) (Edit)
	struct FString                                     ToolTipString;                                            // 0x04E4(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ToolTipFadeInTime;                                        // 0x04F0(0x0004) (Edit)
	float                                              ToolTipFadeOutTime;                                       // 0x04F4(0x0004) (Edit)
	unsigned long                                      ToolTipMouseFollow : 1;                                   // 0x04F8(0x0004) (Edit)
	unsigned long                                      UseToolTip : 1;                                           // 0x04F8(0x0004) (Edit)
	unsigned long                                      lookedForResContainer : 1;                                // 0x04F8(0x0004)
	struct FVector                                     ToolTipScale;                                             // 0x04FC(0x000C) (Edit)
	TEnumAsByte<EToolTipAlignment>                     ToolTipHorizontalAlignment;                               // 0x0508(0x0001) (Edit)
	TEnumAsByte<EToolTipAlignment>                     ToolTipVerticalAlignment;                                 // 0x0509(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x050A(0x0002) MISSED OFFSET
	class UUIScreenObject*                             absoluteParentOverride;                                   // 0x050C(0x0004) (Edit)
	class UUIResolutionContainer*                      myResolutionContainer;                                    // 0x0510(0x0004)
	struct FScriptDelegate                             __NotifyWidgetClicked__Delegate;                          // 0x0514(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIButton_Scripted");
		return ptr;
	}


	void ActiveStateChanged(class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState);
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	struct FVector GetToolTipScale();
	class UUIScreenObject* GetAbsoluteParentOverride();
	void SearchedForResContainer();
	unsigned long HasSearchedForResContainer();
	void SetResolutionContainer(class UUIResolutionContainer* resContainer);
	class UUIResolutionContainer* GetResolutionContainer();
	TEnumAsByte<EToolTipAlignment> GetVerticalAlignment();
	TEnumAsByte<EToolTipAlignment> GetHorizontalAlignment();
	unsigned long GetToolTipShouldUse();
	unsigned long GetToolTipMouseFollow();
	float GetToolTipFadeOutTime();
	float GetToolTipFadeInTime();
	struct FString GetToolTipString();
	class UUIPrefab* GetToolTipPrefabTemplate();
	float GetToolTipYOffset();
	float GetToolTipXOffset();
	float GetToolTipDelay();
};


// Class UDKGame.UIScriptWidget_ToggleButton
// 0x0024 (0x05E8 - 0x05C4)
class UUIScriptWidget_ToggleButton : public UUIScriptWidget_Button
{
public:
	unsigned long                                      bIsChecked : 1;                                           // 0x05C4(0x0004) (Edit)
	unsigned long                                      SetValueTrueOnClick : 1;                                  // 0x05C4(0x0004) (Edit)
	unsigned long                                      bPreviewCheckedBackground : 1;                            // 0x05C4(0x0004) (Edit)
	unsigned long                                      bDontPlayAnimation : 1;                                   // 0x05C4(0x0004) (Edit)
	class USoundCue*                                   SelectedSound;                                            // 0x05C8(0x0004) (Edit)
	struct FLinearColor                                SelectedBGColor;                                          // 0x05CC(0x0010) (Edit)
	struct FColor                                      SelectedTextColor;                                        // 0x05DC(0x0004) (Edit)
	float                                              CheckedScaleMultiplier;                                   // 0x05E0(0x0004) (Edit)
	class USurface*                                    CheckedButtonBackground;                                  // 0x05E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_ToggleButton");
		return ptr;
	}


	void ApplyRenderOffsets(class UCanvas* C, float* X1, float* X2, float* Y1, float* Y2);
	float GetScaleMultiplier();
	struct FName GetFocusLostName();
	struct FName GetFocusGainedName();
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	class USurface* GetBackgroundImage();
	void SetValue(unsigned long bShouldBeChecked);
	unsigned long IsChecked();
	struct FColor GetTextDrawColor(unsigned long bEnabled);
	struct FLinearColor GetBackgroundDrawColor(unsigned long bEnabled);
};


// Class UDKGame.UIButton_DataListEntry
// 0x0030 (0x0618 - 0x05E8)
class UUIButton_DataListEntry : public UUIScriptWidget_ToggleButton
{
public:
	class UUIPanel_DataList*                           MyDataList;                                               // 0x05E8(0x0004)
	TScriptInterface<class UDataListEntryInterface>    MyDataListEntry;                                          // 0x05EC(0x0008)
	int                                                entryIndex;                                               // 0x05F4(0x0004)
	int                                                ColumnIndex;                                              // 0x05F8(0x0004)
	int                                                RowIndex;                                                 // 0x05FC(0x0004)
	int                                                ButtonArrayIndex;                                         // 0x0600(0x0004)
	struct FString                                     AltDisabledString;                                        // 0x0604(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bAllowFocus : 1;                                          // 0x0610(0x0004) (Edit)
	unsigned long                                      bIgnoreNextDataListClick : 1;                             // 0x0610(0x0004) (Transient)
	class UUIObject*                                   FocusOnOtherControl;                                      // 0x0614(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIButton_DataListEntry");
		return ptr;
	}


	unsigned long DoAllowNavigationAway(TEnumAsByte<EUIWidgetFace> Direction);
	void InitializeFromDataListEntry(class UUIPanel_DataList* DataList, const TScriptInterface<class UDataListEntryInterface>& Entry);
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void GainedFocus();
	class UUIPanel_DataList* GetDataList();
};


// Class UDKGame.UI_OptionsMenu
// 0x01E4 (0x0820 - 0x063C)
class UUI_OptionsMenu : public UDunDefUIScene
{
public:
	class UUIButton*                                   ConfirmButton;                                            // 0x063C(0x0004) (Edit)
	float                                              ConfirmDelay;                                             // 0x0640(0x0004) (Edit)
	class UUIButton*                                   CancelButton;                                             // 0x0644(0x0004) (Edit)
	class UUIButton*                                   ChangeCameraSchemeButton;                                 // 0x0648(0x0004) (Edit)
	float                                              MainMenuDelay;                                            // 0x064C(0x0004) (Edit)
	class USoundCue*                                   CloseCue;                                                 // 0x0650(0x0004) (Edit)
	class UUIButton*                                   ResetTutorialsButton;                                     // 0x0654(0x0004) (Edit)
	class UUIButton*                                   ShowTutorialButton;                                       // 0x0658(0x0004) (Edit)
	class UUIButton_Scripted*                          ResetMoveCalibration;                                     // 0x065C(0x0004) (Edit)
	class UUICheckbox*                                 AutoAdjustCameraCheckbox;                                 // 0x0660(0x0004) (Edit)
	class UUICheckbox*                                 ShowFloatingDamageNumbersCheckbox;                        // 0x0664(0x0004) (Edit)
	class UUICheckbox*                                 FullScreenCheckbox;                                       // 0x0668(0x0004) (Edit)
	class UUICheckbox*                                 PostProcessingCheckbox;                                   // 0x066C(0x0004) (Edit)
	class UUICheckbox*                                 TutorialsCheckbox;                                        // 0x0670(0x0004) (Edit)
	class UUICheckbox*                                 ShowAutoLevelUpCheckbox;                                  // 0x0674(0x0004) (Edit)
	class UUICheckbox*                                 ShowTalkerNamesCheckbox;                                  // 0x0678(0x0004) (Edit)
	class UUICheckbox*                                 InvertMouseCheckbox;                                      // 0x067C(0x0004) (Edit)
	class UUICheckbox*                                 HideMeleeTargetingReticleCheckbox;                        // 0x0680(0x0004) (Edit)
	class UUICheckbox*                                 ShowSpawNotificationsCheckbox;                            // 0x0684(0x0004) (Edit)
	class UUICheckbox*                                 LockTavernDrops;                                          // 0x0688(0x0004) (Edit)
	class UUICheckbox*                                 LockTavernDefenses;                                       // 0x068C(0x0004) (Edit)
	class UUILabel*                                    ShowTalkerNamesLabel;                                     // 0x0690(0x0004) (Edit)
	class UUICheckbox*                                 SwapTriggersAndButtonsCheckbox;                           // 0x0694(0x0004) (Edit)
	class UUICheckbox*                                 AlternateControlSchemeCheckbox;                           // 0x0698(0x0004) (Edit)
	class UUICheckbox*                                 InvertCameraPitchCheckbox;                                // 0x069C(0x0004) (Edit)
	class UUICheckbox*                                 DisableStepTowardsTarget;                                 // 0x06A0(0x0004) (Edit)
	class UUICheckbox*                                 DisableCameraShake;                                       // 0x06A4(0x0004) (Edit)
	class UUICheckbox*                                 FastMenuTransitionsCheckbox;                              // 0x06A8(0x0004) (Edit)
	class UUICheckbox*                                 DamageFlashingCheckbox;                                   // 0x06AC(0x0004) (Edit)
	class UUICheckbox*                                 ForceFeedbackCheckBox;                                    // 0x06B0(0x0004) (Edit)
	TArray<class UUICheckBox_Scripted*>                SplitCheckboxes;                                          // 0x06B4(0x000C) (Edit, NeedCtorLink)
	TArray<class UUILabel*>                            SplitOptions;                                             // 0x06C0(0x000C) (Edit, NeedCtorLink)
	class UUISlider*                                   GammaSlider;                                              // 0x06CC(0x0004) (Edit)
	class UUISlider*                                   SaturationSlider;                                         // 0x06D0(0x0004) (Edit)
	class UUISlider*                                   VolumeSFXSlider;                                          // 0x06D4(0x0004) (Edit)
	class UUISlider*                                   VolumeMusicSlider;                                        // 0x06D8(0x0004) (Edit)
	class UUISlider*                                   UIScaleSlider;                                            // 0x06DC(0x0004) (Edit)
	class UUISlider*                                   MouseCameraRotationSpeedSlider;                           // 0x06E0(0x0004) (Edit)
	class UUIButton_Scripted*                          ResetOptions;                                             // 0x06E4(0x0004) (Edit)
	class UUIButton_Scripted*                          ReportIssueButton;                                        // 0x06E8(0x0004) (Edit)
	class UUIImage*                                    ControllerImage;                                          // 0x06EC(0x0004) (Edit)
	TArray<class USurface*>                            gamepadImages;                                            // 0x06F0(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    keyboardImage;                                            // 0x06FC(0x0004) (Edit)
	class UUILabel*                                    PlayerNameLabel;                                          // 0x0700(0x0004) (Edit)
	class UUILabel*                                    MouseCameraTurnSpeedLabel;                                // 0x0704(0x0004) (Edit)
	class UUILabel*                                    CameraSchemeName;                                         // 0x0708(0x0004) (Edit)
	class UUICheckbox*                                 HideAccessoryCheckbox;                                    // 0x070C(0x0004) (Edit)
	class UUILabel*                                    ItemQualityFilterLabel;                                   // 0x0710(0x0004) (Edit)
	class UUIButton*                                   ItemQualityFilterPlusButton;                              // 0x0714(0x0004) (Edit)
	class UUIButton*                                   ItemQualityFilterMinusButton;                             // 0x0718(0x0004) (Edit)
	TArray<struct FString>                             ItemQualityDescriptorName;                                // 0x071C(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                currentItemQualityFilter;                                 // 0x0728(0x0004) (Transient)
	class UUISlider*                                   CaptureVolumeSlider;                                      // 0x072C(0x0004) (Edit)
	class UUISlider*                                   PlaybackVolumeSlider;                                     // 0x0730(0x0004) (Edit)
	class UUICheckBox_Scripted*                        PushToTalk;                                               // 0x0734(0x0004) (Edit)
	class UUICheckBox_Scripted*                        OutgoingVoice;                                            // 0x0738(0x0004) (Edit)
	class UUICheckBox_Scripted*                        IncomingVoice;                                            // 0x073C(0x0004) (Edit)
	class UUIButton*                                   NextControlSchemeButton;                                  // 0x0740(0x0004) (Edit)
	class UUIButton*                                   PrevControlSchemeButton;                                  // 0x0744(0x0004) (Edit)
	class UUIObject*                                   PrimaryOptionsPanel;                                      // 0x0748(0x0004) (Edit)
	TArray<struct FString>                             ControlSchemeName;                                        // 0x074C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CalibrateMoveString;                                      // 0x0758(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CreditsString;                                            // 0x0764(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ShowTalkerNamesString;                                    // 0x0770(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ResetOptionsString;                                       // 0x077C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MouseCameraStringSpeedString;                             // 0x0788(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ChangeCameraScheme;                                       // 0x0794(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<struct FString>                             CameraSchemeNames;                                        // 0x07A0(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      IsClosing : 1;                                            // 0x07AC(0x0004) (Transient)
	int                                                CameraSchemeValue;                                        // 0x07B0(0x0004) (Transient)
	float                                              ConfirmTimer;                                             // 0x07B4(0x0004)
	float                                              MainMenuTimer;                                            // 0x07B8(0x0004)
	class UUICheckbox*                                 CanMoveWhenBuildingCheck;                                 // 0x07BC(0x0004) (Edit)
	class UUICheckbox*                                 TowerDynamicLightingCheck;                                // 0x07C0(0x0004) (Edit)
	class UUICheckbox*                                 bDisplayCDPortal;                                         // 0x07C4(0x0004) (Edit)
	class UUICheckbox*                                 bDisplayCosmeticSetBonus;                                 // 0x07C8(0x0004) (Edit)
	class UUIButton_Scripted*                          IncreaseMaxDisplayedTowerUpgrades;                        // 0x07CC(0x0004) (Edit)
	class UUIButton_Scripted*                          NumSignificantFigures;                                    // 0x07D0(0x0004) (Edit)
	class UUILabel*                                    ItemQualityOutlineFilterLabel;                            // 0x07D4(0x0004) (Edit)
	class UUIButton*                                   ItemQualityOutlineFilterPlusButton;                       // 0x07D8(0x0004) (Edit)
	class UUIButton*                                   ItemQualityOutlineFilterMinusButton;                      // 0x07DC(0x0004) (Edit)
	int                                                currentItemQualityOutlineFilter;                          // 0x07E0(0x0004) (Transient)
	TArray<struct FPanelProperties>                    panels;                                                   // 0x07E4(0x000C) (Edit, NeedCtorLink)
	int                                                curPanel;                                                 // 0x07F0(0x0004)
	class UUICheckbox*                                 OutlineCheckBox;                                          // 0x07F4(0x0004) (Edit)
	class UUIScriptWidget_Combobox*                    CB_ResolutionPicker;                                      // 0x07F8(0x0004) (Edit)
	TArray<struct FString>                             SupportedResolutions;                                     // 0x07FC(0x000C) (Edit, NeedCtorLink)
	class UUIScriptWidget_Combobox*                    CB_GraphicsQualityPicker;                                 // 0x0808(0x0004) (Edit)
	class UUISlider*                                   DamageNumberScaleSlider;                                  // 0x080C(0x0004) (Edit)
	class UUICheckbox*                                 SimpleDamageNumbersCheckBox;                              // 0x0810(0x0004) (Edit)
	class UUICheckbox*                                 CensorItemsCheckBox;                                      // 0x0814(0x0004) (Edit)
	class UUISlider*                                   FrameRateLimitSlider;                                     // 0x0818(0x0004) (Edit)
	class UUILabel*                                    FrameRateLimitLabel;                                      // 0x081C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_OptionsMenu");
		return ptr;
	}


	unsigned long IsKeyboardOwned();
	void NextPanel();
	void PreviousPanel();
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void ActivatePanel(int panelIndex);
	unsigned long ToggleButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	unsigned long NotifyWidgetClickedEvent(class UUIScreenObject* EventObject, int PlayerIndex);
	void Update(float DeltaTime);
	void TransitionToMainMenu();
	struct FString GetResolutionString();
	unsigned char GetSplitConfig();
	void SetSplitScreenConfig(unsigned char currentConfig);
	void ApplyOptions();
	void CloseWithAnimation();
	void RefreshKeyBindingLabels();
	void SceneActivated(unsigned long bInitialActivation);
	void DisableSplitScreenOptions();
	unsigned long IsDesired(const struct FPanelProperties& panel);
};


// Class UDKGame.UIPanel_DataList
// 0x00FC (0x057C - 0x0480)
class UUIPanel_DataList : public UUIPanel
{
public:
	class UUIPrefab*                                   Button_DataListEntry_Template;                            // 0x0480(0x0004) (Edit)
	unsigned long                                      bUsePrefabToDataSetArray : 1;                             // 0x0484(0x0004) (Edit)
	unsigned long                                      bUsePrefabToRowMapping : 1;                               // 0x0484(0x0004) (Edit)
	unsigned long                                      AllowMultiSelection : 1;                                  // 0x0484(0x0004) (Edit)
	unsigned long                                      bCenterX : 1;                                             // 0x0484(0x0004) (Edit)
	unsigned long                                      bScalePositonsToViewport : 1;                             // 0x0484(0x0004) (Edit)
	unsigned long                                      bSetHighlightOnFocusWithGamepad : 1;                      // 0x0484(0x0004) (Edit)
	unsigned long                                      bAllowVerticalIncrementalScrolling : 1;                   // 0x0484(0x0004) (Edit)
	unsigned long                                      bAllowHorizontalIncrementalScrolling : 1;                 // 0x0484(0x0004) (Edit)
	unsigned long                                      bIndividuallyCenterEntries : 1;                           // 0x0484(0x0004) (Edit)
	unsigned long                                      bUseCyclePageSound : 1;                                   // 0x0484(0x0004) (Edit)
	unsigned long                                      bUseScrollingCyclePageSound : 1;                          // 0x0484(0x0004) (Edit)
	unsigned long                                      bIsInInitialization : 1;                                  // 0x0484(0x0004) (Transient)
	unsigned long                                      bDoForcePlaySelectionSound : 1;                           // 0x0484(0x0004) (Transient)
	TArray<class UUIPrefab*>                           Button_DataListEntry_PrefabsToDataSets;                   // 0x0488(0x000C) (Edit, NeedCtorLink)
	TArray<class UUIPrefab*>                           Button_DataListEntry_PrefabToRowMapping;                  // 0x0494(0x000C) (Edit, NeedCtorLink)
	float                                              EntryXOffset;                                             // 0x04A0(0x0004) (Edit)
	float                                              EntryYOffset;                                             // 0x04A4(0x0004) (Edit)
	float                                              EntryColumnPadding;                                       // 0x04A8(0x0004) (Edit)
	float                                              EntryRowPadding;                                          // 0x04AC(0x0004) (Edit)
	int                                                MaxEntriesPerRow;                                         // 0x04B0(0x0004) (Edit)
	float                                              HeightOfEntry;                                            // 0x04B4(0x0004) (Edit)
	float                                              WidthOfEntry;                                             // 0x04B8(0x0004) (Edit)
	int                                                dataSetType;                                              // 0x04BC(0x0004) (Edit)
	TArray<class UUIButton_DataListEntry*>             Buttons_DataListEntry;                                    // 0x04C0(0x000C) (NeedCtorLink)
	TArray<class UUIButton_DataListEntry*>             Buttons_Invisible;                                        // 0x04CC(0x000C) (NeedCtorLink)
	class UUIButton*                                   NextPageButton;                                           // 0x04D8(0x0004) (Edit)
	class UUIButton*                                   PrevPageButton;                                           // 0x04DC(0x0004) (Edit)
	int                                                MaxEntriesPerPage;                                        // 0x04E0(0x0004) (Edit)
	class UUILabel*                                    PageLabel;                                                // 0x04E4(0x0004) (Edit)
	class UUILabel*                                    NextPageLabel;                                            // 0x04E8(0x0004) (Edit)
	class UUILabel*                                    PreviousPageLabel;                                        // 0x04EC(0x0004) (Edit)
	class USoundCue*                                   CyclePageSound;                                           // 0x04F0(0x0004) (Edit)
	int                                                LastListSelectedIndex;                                    // 0x04F4(0x0004)
	int                                                CurrentEntryOffset;                                       // 0x04F8(0x0004)
	int                                                LastNumberOfDataEntries;                                  // 0x04FC(0x0004)
	int                                                CurrentPage;                                              // 0x0500(0x0004)
	int                                                MaxPage;                                                  // 0x0504(0x0004)
	int                                                PrefabsToDataSetsOffset;                                  // 0x0508(0x0004)
	TScriptInterface<class UDataListProviderInterface> theDataListProvider;                                      // 0x050C(0x0008)
	TArray<TScriptInterface<class UDataListEntryInterface>> dataEntries;                                              // 0x0514(0x000C) (NeedCtorLink)
	TArray<TScriptInterface<class UDataListEntryInterface>> RootDataEntries;                                          // 0x0520(0x000C) (NeedCtorLink)
	int                                                CurrentMaxEntriesPerPage;                                 // 0x052C(0x0004) (Transient)
	int                                                ActiveFolderID;                                           // 0x0530(0x0004)
	struct FScriptDelegate                             __OnButtonSelected__Delegate;                             // 0x0534(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnRefreshList__Delegate;                                // 0x0540(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __BeforeRefreshList__Delegate;                            // 0x054C(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __BeforeDataListUpdate__Delegate;                         // 0x0558(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AfterDataListUpdate__Delegate;                          // 0x0564(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __EntryEnabledCheck__Delegate;                            // 0x0570(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIPanel_DataList");
		return ptr;
	}


	unsigned long EntryEnabledCheck(const TScriptInterface<class UDataListEntryInterface>& dataEntry);
	class UUIScreenObject* GetScreenObjectOwner();
	void Created();
	unsigned long HasPrevPage();
	unsigned long HasNextPage();
	void ShowFirstPage();
	void ShowPrevPage();
	void ShowNextPage();
	int InitFromDataListProvider(const TScriptInterface<class UDataListProviderInterface>& dataListProvider, int theDataSetType, const TScriptInterface<class UDataListEntryInterface>& defaultSelectionEntry, int EntryOffset, class UUIPrefab* toolTipPrefab, unsigned long ForceSelection, unsigned long KeepFocus, unsigned long bSelectFirstAvailable, unsigned long bSelectLastAvailable, unsigned long bClearFocus, unsigned long bClearOffset, unsigned long bForcePlaySelectionSound);
	void AfterDataListUpdate(class UUIPanel_DataList* aDataList);
	void BeforeDataListUpdate(class UUIPanel_DataList* aDataList);
	unsigned long HasAnyEnabledEntries(const TScriptInterface<class UDataListProviderInterface>& dataListProvider, int theDataSetType);
	unsigned long HasAnyEnabledEntriesForPage(class UPlayer* ForPlayer);
	unsigned long IsFirstEnabledEntry(class UUIButton_DataListEntry* fromButton, unsigned long bIsVertical);
	unsigned long IsLastEnabledEntry(class UUIButton_DataListEntry* fromButton, unsigned long bIsVertical);
	unsigned long HandleScrollingUp(unsigned long bIsVertical, class UUIButton_DataListEntry* fromButton);
	unsigned long HandleScrollingDown(unsigned long bIsVertical, class UUIButton_DataListEntry* fromButton);
	TScriptInterface<class UDataListEntryInterface> GetPreviousEnabledDataEntry(int Index, int numEntriesToCheck);
	TScriptInterface<class UDataListEntryInterface> GetNextEnabledDataEntry(int Index, int numEntriesToCheck);
	void BeforeRefreshList();
	void OnRefreshList();
	void SetFocusedEntry(const TScriptInterface<class UDataListEntryInterface>& Entry);
	TScriptInterface<class UDataListEntryInterface> GetFocusedEntry();
	void RefreshDataList();
	void AddNewEntry(const TScriptInterface<class UDataListEntryInterface>& dataEntry, class UUIPrefab* toolTipPrefab, int entryIndex, int numOnThisRow);
	float CalcXCenterPadding(int numEntriesOnRow);
	int GetNumColumns(int numEntries);
	int GetNumRows(int numEntries);
	class UUIButton_DataListEntry* GetButtonAtIndices(int Row, int column);
	void ClearList();
	void UnregisterAllInputEvents(class UUIObject* Target, unsigned long recurse);
	void MakeSecretHiddenButton();
	void ClearInvisibleButtons();
	class UUIButton_DataListEntry* GetSelectedButton();
	TScriptInterface<class UDataListEntryInterface> GetSelectedEntry();
	void SelectEntry(const TScriptInterface<class UDataListEntryInterface>& Entry, unsigned long ForceSelection, unsigned long dontSetTrueValue, unsigned long SetFocus);
	void SelectButton(class UUIButton_DataListEntry* Button, unsigned long ForceSelection, unsigned long dontSetTrueValue, unsigned long SetFocus);
	void OnButtonSelected(class UUIButton_DataListEntry* Button);
	int GetIndexOfButton(class UUIButton_DataListEntry* Button);
	class UUIButton_DataListEntry* GetFocusedButton();
	class UUIButton_DataListEntry* GetButtonForEntry(const TScriptInterface<class UDataListEntryInterface>& Entry);
	int GetSelectedIndex();
	class UUIButton_DataListEntry* GetButtonAtIndex(int Index);
	int GetLastSelectableIndex();
	int GetFirstSelectableIndex(int startAtIndex);
	unsigned long NotifyButtonClicked(class UUIObject* Widget);
	class UUIPrefab* GetPrefabToUse(int Row);
	float GetViewportYScaleTo768();
	float GetViewportXScaleTo1024();
};


// Class UDKGame.DunDefMiniMap
// 0x006C (0x0288 - 0x021C)
class ADunDefMiniMap : public AInfo
{
public:
	float                                              OrigMapTexWidth;                                          // 0x021C(0x0004) (Edit)
	float                                              OrigMapTexHeight;                                         // 0x0220(0x0004) (Edit)
	float                                              MapBackgroundOpacity;                                     // 0x0224(0x0004) (Edit)
	struct FVector                                     MiniMapCenterTexCoords;                                   // 0x0228(0x000C) (Edit)
	struct FVector                                     MiniMapDistanceScale;                                     // 0x0234(0x000C) (Edit)
	struct FVector                                     MiniMapScreenDrawOffset;                                  // 0x0240(0x000C) (Edit)
	class UTexture2D*                                  MiniMapBackgroundTexture;                                 // 0x024C(0x0004) (Edit)
	float                                              MiniMapScale;                                             // 0x0250(0x0004) (Edit)
	float                                              MiniMapIconScale;                                         // 0x0254(0x0004) (Edit)
	unsigned long                                      ForceMapAlwaysOn : 1;                                     // 0x0258(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0258(0x0004) (Edit)
	unsigned long                                      bDroppedEquipmentQualityStatsEnabled : 1;                 // 0x0258(0x0004) (Edit)
	unsigned long                                      bShowing : 1;                                             // 0x0258(0x0004)
	unsigned long                                      bHideMiniMapBillboards : 1;                               // 0x0258(0x0004) (Transient)
	float                                              CurrentCenterDrawPosX;                                    // 0x025C(0x0004) (Transient)
	float                                              CurrentCenterDrawPosY;                                    // 0x0260(0x0004) (Transient)
	float                                              CurrentDrawMapScale;                                      // 0x0264(0x0004) (Transient)
	TArray<struct FString>                             DroppedEquipmentQualityText;                              // 0x0268(0x000C) (Edit, NeedCtorLink)
	TArray<struct FLinearColor>                        DroppedEquipmentQualityColor;                             // 0x0274(0x000C) (Edit, NeedCtorLink)
	float                                              Opacity;                                                  // 0x0280(0x0004)
	float                                              RealMiniMapDrawScale;                                     // 0x0284(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefMiniMap");
		return ptr;
	}


	class ADunDefMiniMap* STATIC_GetMiniMap();
	void ToggleDebugMode();
	unsigned long DoesAnyPlayerWantMiniMap();
	void Tick(float DeltaTime);
	void OnToggle(class USeqAct_Toggle* Action);
	void PostBeginPlay();
	struct FVector ConvertCanvasCoordToWorldCoord(const struct FVector& mapCoord, float additionalCoordScale);
	struct FVector ConvertWorldCoordToCenterMapCoord(const struct FVector& worldCoord, float additionalCoordScale);
	struct FVector ConvertCenterMapCoordToCanvasCoord(const struct FVector& mapCoord);
	struct FRotator GetTileRotationFromWorldRotation(const struct FRotator& worldRotation);
	void DrawMiniMap(class UCanvas* Canvas);
};


// Class UDKGame.UI_GlobalHUD
// 0x00CC (0x0708 - 0x063C)
class UUI_GlobalHUD : public UDunDefUIScene
{
public:
	class UUIObject*                                   GameplayPanel;                                            // 0x063C(0x0004) (Edit)
	class UUILabel*                                    WaveNumberLabel;                                          // 0x0640(0x0004) (Edit)
	class UUILabel*                                    WaveNameLabel;                                            // 0x0644(0x0004) (Edit)
	class UUILabel*                                    TowerUnitCostLabel;                                       // 0x0648(0x0004) (Edit)
	class UUILabel*                                    MinionUnitCostLabel;                                      // 0x064C(0x0004) (Edit)
	TArray<class UUILabel*>                            MajorNotificationLabels;                                  // 0x0650(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                TowerUnitCostLabelColorNormal;                            // 0x065C(0x0010) (Edit)
	struct FLinearColor                                TowerUnitCostLabelColorMaxed;                             // 0x066C(0x0010) (Edit)
	class UUIObject*                                   BuildPhaseIcon;                                           // 0x067C(0x0004) (Edit)
	class UUIObject*                                   CombatPhaseIcon;                                          // 0x0680(0x0004) (Edit)
	class UUIObject*                                   LevelVictoryPhaseIcon;                                    // 0x0684(0x0004) (Edit)
	class UUIObject*                                   GameOverPhaseIcon;                                        // 0x0688(0x0004) (Edit)
	class UUIObject*                                   BlackPanel;                                               // 0x068C(0x0004) (Edit)
	TArray<struct FVector>                             GPSplitscreenPostTransforms;                              // 0x0690(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             GPSplitscreenPostTranslationOffsets;                      // 0x069C(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                NormalWaveLabelColor;                                     // 0x06A8(0x0010) (Edit)
	struct FLinearColor                                FinalWaveLabelColor;                                      // 0x06B8(0x0010) (Edit)
	struct FName                                       CombatPhaseAnimation;                                     // 0x06C8(0x0008) (Edit)
	struct FName                                       BuildPhaseAnimation;                                      // 0x06D0(0x0008) (Edit)
	class UUILabel*                                    CompetitivePlayerList;                                    // 0x06D8(0x0004) (Edit)
	class UUILabel*                                    CompetitiveScoreLimitLabel;                               // 0x06DC(0x0004) (Edit)
	struct FString                                     ScoreLimitString;                                         // 0x06E0(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      wavePanelHidden : 1;                                      // 0x06EC(0x0004)
	unsigned long                                      spawnedInGameOver : 1;                                    // 0x06EC(0x0004) (Transient)
	unsigned long                                      bPlayedBuildPhaseAnimation : 1;                           // 0x06EC(0x0004) (Transient)
	unsigned long                                      bPlayedCombatPhaseAnimation : 1;                          // 0x06EC(0x0004) (Transient)
	unsigned long                                      bInitializedCompetitiveHUD : 1;                           // 0x06EC(0x0004) (Transient)
	unsigned long                                      bBlackPanelVisible : 1;                                   // 0x06EC(0x0004) (Transient)
	unsigned long                                      prevBlackPanelVisible : 1;                                // 0x06EC(0x0004) (Transient)
	int                                                LastMajorNotificationLabelIndex;                          // 0x06F0(0x0004)
	int                                                LastMajorNotificationLabelHiddenIndex;                    // 0x06F4(0x0004)
	int                                                LastCurrentTowerUnitCost;                                 // 0x06F8(0x0004) (Transient)
	int                                                LastMaxTowerUnitCost;                                     // 0x06FC(0x0004) (Transient)
	int                                                LastCurrentMinionUnitCost;                                // 0x0700(0x0004) (Transient)
	float                                              HideNotificationTimer;                                    // 0x0704(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_GlobalHUD");
		return ptr;
	}


	void CinematicCompleted();
	void InitializeCompetitiveHUD(class ADDGRI_Competitive* ddGRI);
	void UpdateCompetitive(float DeltaTime);
	class UUI_GlobalHUD* STATIC_GetGlobalHUD();
	void SetInCinematic(unsigned long InCinematic);
	void DoNotifyPhaseChange(unsigned long IsCombatPhase, unsigned long IsLevelVictory, unsigned long IsGameOver);
	void NotifyLevelVictory();
	void NotifyGameOver();
	void NotifyPhaseChange(unsigned long IsCombatPhase);
	void SceneActivated(unsigned long bInitialActivation);
	void ShowMajorNotificationLabel(const struct FString& LabelText, const struct FLinearColor& LabelColor, float LabelScale, unsigned long DontReplicate, float Timer, class USoundCue* ASound, class ADunDefEnemy* EnemyTemplate);
	unsigned long ShowMajorNotificationLabel_LocalizedKismet(class UDunDef_SeqVar_LocalizedString* LocalizedSeqVar, const struct FLinearColor& LabelColor, float LabelScale);
	void ShowMajorNotificationLabel_MapFriendlyName(const struct FLinearColor& LabelColor, float LabelScale);
	void ShowMajorNotificationLabel_GameOver(int GameOverType, const struct FLinearColor& LabelColor, float LabelScale, unsigned long appendNumber, int numberToAppend);
	void ShowMajorNotificationLabel_PredefinedType(int MajorNotificationTypeSwitch, const struct FLinearColor& LabelColor, float LabelScale, unsigned long appendNumber, int numberToAppend);
	void Update(float DeltaTime);
	unsigned long IsWavePanelHidden();
	void ShowWavePanel();
	void HideWavePanel();
	unsigned long AllowGlobalVisibilityToggling();
	void SetTowerUnitCosts(int CurrentTowerUnitCost, int CurrentMinionUnitCost, int MaxTowerUnitCost, unsigned long bDontReplicate);
	void SetWaveNumber(int theWaveNumber, int theFinalWaveNumber);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedUIMessage(const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDef_SeqVar_LocalizedString
// 0x000C (0x00A0 - 0x0094)
class UDunDef_SeqVar_LocalizedString : public USequenceVariable
{
public:
	struct FString                                     StringVar;                                                // 0x0094(0x000C) (Edit, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqVar_LocalizedString");
		return ptr;
	}


	struct FString GetObjectPath();
	struct FString GetLocalizedString();
};


// Class UDKGame.DDGRI_Competitive
// 0x0108 (0x082C - 0x0724)
class ADDGRI_Competitive : public ADunDefGameReplicationInfo
{
public:
	struct FTeamData                                   TeamDatas[0x8];                                           // 0x0724(0x0010) (Net, NeedCtorLink)
	int                                                WinManaBonus[0x6];                                        // 0x07A4(0x0004)
	int                                                ScoreLimits[0x6];                                         // 0x07BC(0x0004)
	struct FString                                     KilledSelfString;                                         // 0x07D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     KilledByString;                                           // 0x07E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     WonGameString;                                            // 0x07EC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     KilledByMonsterString;                                    // 0x07F8(0x000C) (Localized, NeedCtorLink)
	int                                                ScoreLimit;                                               // 0x0804(0x0004) (Net)
	class ADunDefPlayerReplicationInfo*                WinningPlayer;                                            // 0x0808(0x0004) (Net)
	float                                              PlayerSpawnInvincibilityTime;                             // 0x080C(0x0004) (Net)
	float                                              StatsSceneDelay;                                          // 0x0810(0x0004)
	float                                              PlayerExtraKnockbackMultiplier;                           // 0x0814(0x0004)
	float                                              PlayerGroundSpeedLerp;                                    // 0x0818(0x0004) (Net)
	class USoundCue*                                   WinSound;                                                 // 0x081C(0x0004)
	class USoundCue*                                   LoseSound;                                                // 0x0820(0x0004)
	struct FColor                                      DiedMessageColor;                                         // 0x0824(0x0004)
	unsigned long                                      bUseCompetitiveHUD : 1;                                   // 0x0828(0x0004)
	unsigned long                                      bPreventCompetitivePlayerDeathNotifications : 1;          // 0x0828(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DDGRI_Competitive");
		return ptr;
	}


	float GetPlayerHealthMultiplier(class ADunDefPlayer* aPlayer);
	float ModifyPlayerGroundSpeed(class ADunDefPlayer* aPlayer, float theGroundSpeed);
	unsigned long DoUseFamiliarAbilities(class UHeroEquipment_Familiar* aFamiliar);
	float GetExtraKnockbackMultiplier(class AActor* act);
	unsigned long DoUseScoreLabel();
	void SetupVictoryShopEquipments();
	class ADunDefPlayerReplicationInfo* GetWinningPRI();
	unsigned long AllowDeathSpectatorMode(class ADunDefPlayerController* PC);
	void AwardWaveCompletion(int theWaveNumber);
	void SellAllTowers();
	void PostBeginPlay();
	unsigned long AllowPlayerDamage(class ADunDefPlayer* aPlayer);
	struct FString GetCompetitivePlayerList();
	int GetAltCurrentTowerUnits(class ADunDefPlayerReplicationInfo* ddPRI);
	int GetCurrentTowerUnits(class ADunDefPlayerReplicationInfo* ddPRI);
	unsigned long CanPlaceTowerUnitCost(int Cost, class ADunDefPlayerController* ForPlayer, class ADunDefTower* Tower);
	void RemovedTower(class ADunDefTower* Tower);
	void AddedTower(class ADunDefTower* Tower);
	void ThePauseTimer();
	void DoLevelVictory();
	void WonGame(class ADunDefPlayerReplicationInfo* theWinningPlayer, int WinningTeamIndex);
	unsigned long DestroyTowerOnOwnerLeft(class ADunDefTower* aTower);
	void DoDeathNotification(class ADunDefPlayerReplicationInfo* Killer, class ADunDefPlayerReplicationInfo* Victim, int damageTypeIndex);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefBuffManager
// 0x0030 (0x024C - 0x021C)
class ADunDefBuffManager : public ABuffManager
{
public:
	class UDictionary_IntObj*                          buffDictonary;                                            // 0x021C(0x0004) (Transient)
	TArray<struct FsBuffArchetypeInstances>            LimitedBuffs;                                             // 0x0220(0x000C) (Transient, NeedCtorLink)
	TArray<struct FsBuffArchetypePerOwnerSpawnCount>   LimitedBuffsPerOwnerSpawnCounts;                          // 0x022C(0x000C) (Transient, NeedCtorLink)
	TArray<class UDunDefBuff*>                         tickingBuffs;                                             // 0x0238(0x000C) (NeedCtorLink)
	int                                                CurrentID;                                                // 0x0244(0x0004)
	unsigned long                                      InitializeAck : 1;                                        // 0x0248(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBuffManager");
		return ptr;
	}


	void RefreshedBuffValues(class UObject* CallingObject);
	void RemoveFromTicking(class UDunDefBuff* tickingBuff);
	void RegisterForTicking(class UDunDefBuff* tickingBuff);
	void Tick(float DeltaTime);
	void ShutDown();
	void ReplicateBuff(class UDunDefBuff* aBuffTemplate, int BuffID, class AActor* BuffOwner, class AActor* BuffTarget);
	void ClientAddBuff(struct FsBuffNetInfo* BuffInfo);
	class UDunDefBuff* GetBufffromID(int BuffID);
	int GenerateBuffID();
	unsigned long CanAddLimitedBuffPerOwnerSpawnCount(class UDunDefBuff* buff_template, class AActor* buff_owner);
	unsigned long CanAddLimitedBuff(class UDunDefBuff* Buff);
	void AddLimitedBuff(class UDunDefBuff* Buff);
	void AddLimitedBuffsPerOwnerSpawnCount(class UDunDefBuff* Buff);
	void RemoveBuff(class UDunDefBuff* oldBuff);
	void AddBuff(class UDunDefBuff* newBuff);
	void CreatedBuff(class UDunDefBuff* newBuff);
	void PostBeginPlay();
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.UI_GameStats
// 0x0984 (0x0FC0 - 0x063C)
class UUI_GameStats : public UDunDefUIScene
{
public:
	class UTexture2D*                                  unknownTexture;                                           // 0x063C(0x0004) (Edit)
	class UTexture2D*                                  feedbackButton;                                           // 0x0640(0x0004) (Edit)
	class UTexture2D*                                  gamerCardButton;                                          // 0x0644(0x0004) (Edit)
	class UTexture2D*                                  leftDPadButton;                                           // 0x0648(0x0004) (Edit)
	class UTexture2D*                                  rightDPadButton;                                          // 0x064C(0x0004) (Edit)
	class UTexture2D*                                  HeroPopupBGTexture;                                       // 0x0650(0x0004) (Edit)
	class UTexture2D*                                  HardcoreIcon;                                             // 0x0654(0x0004) (Edit)
	struct FString                                     genericFeedbackString;                                    // 0x0658(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     hideInfoString;                                           // 0x0664(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIImage_ProgressBar*                        statsReceivingProgress;                                   // 0x0670(0x0004) (Edit)
	class UUIPrefab*                                   LeaderboardPrefab;                                        // 0x0674(0x0004) (Edit)
	class UUILabel*                                    VictoryLabel;                                             // 0x0678(0x0004) (Edit)
	class UUILabel*                                    GameOverLabel;                                            // 0x067C(0x0004) (Edit)
	class USoundCue*                                   ConfirmReadyToProceedSound;                               // 0x0680(0x0004) (Edit)
	class UUIPanel*                                    MainPanel;                                                // 0x0684(0x0004) (Edit)
	class UUIPanel*                                    panelForHero;                                             // 0x0688(0x0004) (Edit)
	class UUILabel*                                    DifficultyLabel;                                          // 0x068C(0x0004) (Edit)
	TArray<class UTexture2D*>                          PopupBackgrounds;                                         // 0x0690(0x000C) (Edit, NeedCtorLink)
	class UUIImage*                                    scrollImage;                                              // 0x069C(0x0004) (Edit)
	float                                              HeroPopUpOffsetX;                                         // 0x06A0(0x0004) (Edit)
	float                                              HeroPopUpOffsetY;                                         // 0x06A4(0x0004) (Edit)
	float                                              EnemyStatLineWidth;                                       // 0x06A8(0x0004) (Edit)
	float                                              PlayerStatLineWidth;                                      // 0x06AC(0x0004) (Edit)
	struct FLinearColor                                LineColorEnemySpawn;                                      // 0x06B0(0x0010) (Edit)
	TArray<struct FLinearColor>                        LineColorPlayers;                                         // 0x06C0(0x000C) (Edit, NeedCtorLink)
	class UUILabel*                                    MVPAwardsLabel;                                           // 0x06CC(0x0004) (Edit)
	class UUIImage*                                    ControllerImage;                                          // 0x06D0(0x0004) (Edit)
	TArray<class USurface*>                            gamepadImages;                                            // 0x06D4(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    keyboardImage;                                            // 0x06E0(0x0004) (Edit)
	class UUILabel*                                    PlayerNameLabel;                                          // 0x06E4(0x0004) (Edit)
	class UUIPrefabInstance*                           LeaderboardInstance;                                      // 0x06E8(0x0004) (Transient)
	unsigned long                                      bAllowLeaderboard : 1;                                    // 0x06EC(0x0004) (Transient)
	unsigned long                                      hasInitialized : 1;                                       // 0x06EC(0x0004)
	unsigned long                                      bReadyToShow : 1;                                         // 0x06EC(0x0004) (Transient)
	unsigned long                                      isPopupRendering : 1;                                     // 0x06EC(0x0004) (Transient)
	unsigned long                                      isOnlineGame : 1;                                         // 0x06EC(0x0004) (Transient)
	unsigned long                                      removedMVP : 1;                                           // 0x06EC(0x0004)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x06EC(0x0004)
	class UUIResolutionContainer*                      ResContainerLink;                                         // 0x06F0(0x0004) (Transient)
	TArray<struct FStatPanelProperties>                panels;                                                   // 0x06F4(0x000C) (Edit, NeedCtorLink)
	class UUIButton_Scripted*                          leftPanel;                                                // 0x0700(0x0004) (Edit)
	class UUIButton_Scripted*                          rightPanel;                                               // 0x0704(0x0004) (Edit)
	class UUIButton_Scripted*                          leftWave;                                                 // 0x0708(0x0004) (Edit)
	class UUIButton_Scripted*                          rightWave;                                                // 0x070C(0x0004) (Edit)
	class UUILabel*                                    textColumns[0x4];                                         // 0x0710(0x0004) (Edit)
	class UUIImage*                                    selector;                                                 // 0x0720(0x0004) (Edit)
	float                                              lineHeight;                                               // 0x0724(0x0004) (Edit)
	float                                              lineTopPadding;                                           // 0x0728(0x0004) (Edit)
	float                                              lineBottomPadding;                                        // 0x072C(0x0004) (Edit)
	class UUILabel*                                    feedbackLabel;                                            // 0x0730(0x0004) (Edit)
	class UUILabel*                                    gamercardLabel;                                           // 0x0734(0x0004) (Edit)
	struct FString                                     showGamerCardString;                                      // 0x0738(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIButton_Scripted*                          pageUpButton;                                             // 0x0744(0x0004) (Edit)
	class UUIButton_Scripted*                          pageDownButton;                                           // 0x0748(0x0004) (Edit)
	int                                                curPanel;                                                 // 0x074C(0x0004) (Transient)
	int                                                curSelected;                                              // 0x0750(0x0004) (Transient)
	class UDunDefGameStats*                            Stats;                                                    // 0x0754(0x0004) (Transient)
	TArray<class UUIObject*>                           curObjects;                                               // 0x0758(0x000C) (Transient, NeedCtorLink)
	class UMaterialInstanceConstant*                   selectorMIC;                                              // 0x0764(0x0004) (Transient)
	struct FString                                     columnData[0x60];                                         // 0x0768(0x000C) (Transient, NeedCtorLink)
	int                                                StartWave;                                                // 0x0BE8(0x0004) (Transient)
	int                                                endWave;                                                  // 0x0BEC(0x0004) (Transient)
	int                                                curWave;                                                  // 0x0BF0(0x0004)
	class UUILineGraph*                                waveTimeline;                                             // 0x0BF4(0x0004) (Edit)
	TArray<class UUIPanel*>                            legendPanels;                                             // 0x0BF8(0x000C) (Edit, NeedCtorLink)
	class UUILabel*                                    waveTitle;                                                // 0x0C04(0x0004) (Edit)
	class UUILabel*                                    waveMax;                                                  // 0x0C08(0x0004) (Edit)
	class UUILabel*                                    waveEnd;                                                  // 0x0C0C(0x0004) (Edit)
	TArray<class UUILabel*>                            KillLabels;                                               // 0x0C10(0x000C) (Edit, NeedCtorLink)
	float                                              KillLabelOffset;                                          // 0x0C1C(0x0004) (Edit)
	float                                              TimeLabelOffset;                                          // 0x0C20(0x0004) (Edit)
	TArray<class UUILabel*>                            TimeLabels;                                               // 0x0C24(0x000C) (Edit, NeedCtorLink)
	class UTexture*                                    icon_PlayerDeath;                                         // 0x0C30(0x0004) (Edit)
	class UTexture*                                    icon_TowerDestroyed;                                      // 0x0C34(0x0004) (Edit)
	class UTexture*                                    icon_CrystalAttack;                                       // 0x0C38(0x0004) (Edit)
	class UTexture*                                    icon_Lord;                                                // 0x0C3C(0x0004) (Edit)
	class UTexture*                                    icon_Knight;                                              // 0x0C40(0x0004) (Edit)
	int                                                remainingEnemies;                                         // 0x0C44(0x0004) (Transient)
	int                                                waveSeconds;                                              // 0x0C48(0x0004) (Transient)
	int                                                lineCounter;                                              // 0x0C4C(0x0004) (Transient)
	int                                                numItems;                                                 // 0x0C50(0x0004) (Transient)
	int                                                maxItems;                                                 // 0x0C54(0x0004) (Transient)
	int                                                curItem;                                                  // 0x0C58(0x0004) (Transient)
	TArray<struct UUI_GameStats_FEnemyStatInfo>        enemyStats;                                               // 0x0C5C(0x000C) (Transient, NeedCtorLink)
	TArray<struct UUI_GameStats_FTowerStatInfo>        towerStats;                                               // 0x0C68(0x000C) (Transient, NeedCtorLink)
	TArray<struct FHeroStatInfo>                       heroStats;                                                // 0x0C74(0x000C) (Transient, NeedCtorLink)
	struct FString                                     colon;                                                    // 0x0C80(0x000C) (NeedCtorLink)
	struct FString                                     timeString;                                               // 0x0C8C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     totalString;                                              // 0x0C98(0x000C) (Localized, NeedCtorLink)
	struct FString                                     combatString;                                             // 0x0CA4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     buildString;                                              // 0x0CB0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     killsString;                                              // 0x0CBC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     playersString;                                            // 0x0CC8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     towersString;                                             // 0x0CD4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     wavesString;                                              // 0x0CE0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     chestsString;                                             // 0x0CEC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     builtString;                                              // 0x0CF8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     soldString;                                               // 0x0D04(0x000C) (Localized, NeedCtorLink)
	struct FString                                     repairedString;                                           // 0x0D10(0x000C) (Localized, NeedCtorLink)
	struct FString                                     destroyedString;                                          // 0x0D1C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     openedString;                                             // 0x0D28(0x000C) (Localized, NeedCtorLink)
	struct FString                                     bootyString;                                              // 0x0D34(0x000C) (Localized, NeedCtorLink)
	struct FString                                     usefulBootyString;                                        // 0x0D40(0x000C) (Localized, NeedCtorLink)
	struct FString                                     unusefulBootyString;                                      // 0x0D4C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     enemiesEncounteredString;                                 // 0x0D58(0x000C) (Localized, NeedCtorLink)
	struct FString                                     deathsString;                                             // 0x0D64(0x000C) (Localized, NeedCtorLink)
	struct FString                                     totalExpString;                                           // 0x0D70(0x000C) (Localized, NeedCtorLink)
	struct FString                                     totalManaString;                                          // 0x0D7C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     mvpString;                                                // 0x0D88(0x000C) (Localized, NeedCtorLink)
	struct FString                                     awardsString;                                             // 0x0D94(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LevelString;                                              // 0x0DA0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     teamScoreString;                                          // 0x0DAC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     waveString;                                               // 0x0DB8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     enemiesString;                                            // 0x0DC4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     spawnedString;                                            // 0x0DD0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     killedString;                                             // 0x0DDC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     playerDamageString;                                       // 0x0DE8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     upgradedString;                                           // 0x0DF4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     damageTakenString;                                        // 0x0E00(0x000C) (Localized, NeedCtorLink)
	struct FString                                     towerString;                                              // 0x0E0C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     heroString;                                               // 0x0E18(0x000C) (Localized, NeedCtorLink)
	struct FString                                     repeatLevelString;                                        // 0x0E24(0x000C) (Localized, NeedCtorLink)
	struct FString                                     nextLevelString;                                          // 0x0E30(0x000C) (Localized, NeedCtorLink)
	struct FString                                     closeString;                                              // 0x0E3C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lobbyString;                                              // 0x0E48(0x000C) (Localized, NeedCtorLink)
	struct FString                                     bestString;                                               // 0x0E54(0x000C) (Localized, NeedCtorLink)
	struct FString                                     leastString;                                              // 0x0E60(0x000C) (Localized, NeedCtorLink)
	struct FString                                     mostString;                                               // 0x0E6C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     naString;                                                 // 0x0E78(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PlayerString;                                             // 0x0E84(0x000C) (Localized, NeedCtorLink)
	struct FString                                     scoreString;                                              // 0x0E90(0x000C) (Localized, NeedCtorLink)
	struct FString                                     campaignString;                                           // 0x0E9C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     pureStrategyString;                                       // 0x0EA8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     survivalString;                                           // 0x0EB4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     highestString;                                            // 0x0EC0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     numberString;                                             // 0x0ECC(0x000C) (Localized, NeedCtorLink)
	class UUIButton_Scripted*                          nextLevelButton;                                          // 0x0ED8(0x0004) (Edit)
	class UUIButton_Scripted*                          nextLevelButtonTopLevel;                                  // 0x0EDC(0x0004) (Edit)
	class UUIScriptWidget_GameStatsPopup*              PopUp;                                                    // 0x0EE0(0x0004) (Edit)
	class UUIButton_Scripted*                          CloseButton;                                              // 0x0EE4(0x0004) (Edit)
	float                                              DeadZone;                                                 // 0x0EE8(0x0004) (Transient)
	int                                                MVPIndex;                                                 // 0x0EEC(0x0004) (Transient)
	int                                                realMVPIndex;                                             // 0x0EF0(0x0004) (Transient)
	float                                              scrollDir;                                                // 0x0EF4(0x0004) (Transient)
	TArray<class UDunDefPlayerStats*>                  bestOfStats;                                              // 0x0EF8(0x000C) (Transient, NeedCtorLink)
	class UUIToggleButton*                             leaderboardToggle;                                        // 0x0F04(0x0004) (Edit)
	class UUIPanel*                                    statsPanel;                                               // 0x0F08(0x0004) (Edit)
	class UUILabel*                                    receivingLabel;                                           // 0x0F0C(0x0004) (Edit)
	struct FName                                       OpenGameOverAnimation;                                    // 0x0F10(0x0008) (Edit)
	struct FName                                       OpenLevelVictoryAnimation;                                // 0x0F18(0x0008) (Edit)
	struct FString                                     receivingString;                                          // 0x0F20(0x000C) (Localized, NeedCtorLink)
	struct FString                                     exitString;                                               // 0x0F2C(0x000C) (Localized, NeedCtorLink)
	int                                                defaultPanel;                                             // 0x0F38(0x0004) (Transient)
	class UUIButton_Scripted*                          nextMode;                                                 // 0x0F3C(0x0004) (Transient)
	class UUIButton_Scripted*                          PrevMode;                                                 // 0x0F40(0x0004) (Transient)
	class UUIPanel_Leaderboard*                        leaderboardPanel;                                         // 0x0F44(0x0004) (Transient)
	int                                                enemyPopupWaveIndex;                                      // 0x0F48(0x0004) (Transient)
	int                                                TheCustomInitIndex;                                       // 0x0F4C(0x0004) (Transient)
	struct FString                                     unknownString;                                            // 0x0F50(0x000C) (Localized, NeedCtorLink)
	float                                              fontHeight;                                               // 0x0F5C(0x0004) (Transient)
	struct FString                                     campaignTag;                                              // 0x0F60(0x000C) (Transient, NeedCtorLink)
	float                                              checkLoginTimer;                                          // 0x0F6C(0x0004) (Transient)
	float                                              checkLoginDelay;                                          // 0x0F70(0x0004) (Transient)
	float                                              selectorPadValueX;                                        // 0x0F74(0x0004)
	float                                              selectorPadValueY;                                        // 0x0F78(0x0004)
	class UUIPanel*                                    popupClipPanel;                                           // 0x0F7C(0x0004) (Edit)
	class UUIImage*                                    popupBackground;                                          // 0x0F80(0x0004) (Edit)
	float                                              longLine;                                                 // 0x0F84(0x0004)
	int                                                mouseOverSelection;                                       // 0x0F88(0x0004)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x0F8C(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x0F90(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x0F94(0x0004) (Edit)
	class UUILabel*                                    DeletionLabel;                                            // 0x0F98(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x0F9C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x0FA8(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x0FB0(0x0008) (Edit)
	int                                                FocusCounter;                                             // 0x0FB8(0x0004)
	int                                                DeletionReason;                                           // 0x0FBC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_GameStats");
		return ptr;
	}


	void UIPostRender(class UCanvas* C);
	void SceneActivated(unsigned long bInitialActivation);
	void UnhideLeaderboardTab();
	void HideLeaderboardTab();
	unsigned long NotifyLoginStatusChanged(int ControllerId, TEnumAsByte<ELoginStatus> Status);
	void NotifyLinkStatusChanged(unsigned long bConnected);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void CheckLoginForLeaderboard();
	void RenderPerWaveBreakdown(class UCanvas* C, int StatClassIndex);
	unsigned long RenderTowerPopup(class UCanvas* C, int towerIndex);
	unsigned long RenderEnemyPopup(class UCanvas* C, int enemyIndex);
	void RenderHeroPopup(class UCanvas* C, int heroIndex);
	void CheckLongLine(class UCanvas* C, const struct FStatRenderEntry& entryToCheck);
	void SetupHeroPopupPanel(int heroIndex);
	struct FVector2D CenterPopup(class UCanvas* C, float Width, float Height, float XOffset, float YOffset, class UTexture2D* forceBGTexture, unsigned long clipRight);
	void AdjustPopupBackground(float Width, float Height, class UTexture2D* forceBGTexture, float* newBufferX, float* newBufferY);
	struct FString BuildBestOfString(int PlayerIndex, int StatClassIndex, const struct FString& BufferName, unsigned long isRecent, class UTexture2D** HeroIcon, struct FString* partTwo);
	void RenderBestOfStat(class UCanvas* C, int StatClassIndex, int PlayerIndex, const struct FString& headerString, unsigned long Time, float* lineX, float* lineY);
	void RenderCompletionIcons(class UCanvas* C, int heroIndex, float* lineX, float* lineY);
	void RenderStatEntries(class UCanvas* C, TArray<struct FStatRenderEntry> statsToRender, const struct FString& headerString, float* lineX, float* lineY);
	TArray<struct FStatRenderEntry> GetPlayerSpecificNamedTowerStats(int StatIndex, int PlayerIndex);
	TArray<struct FStatRenderEntry> GetPlayerSpecificNamedKillStats(int StatIndex, int PlayerIndex);
	void CheckNewBest(class UCanvas* C, int PlayerIndex, int StatClassIndex);
	int CountAwards(int heroIndex, TEnumAsByte<EHeroAwardEnum> award);
	void RenderPopup(class UCanvas* C);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void ToggleEnemyWaveIndex(int Dir);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long OnInterceptedInputKey(struct FInputEventParameters* EventParms);
	unsigned long OnReceivedInputAxis(struct FInputEventParameters* EventParms);
	struct FString BuildAwardsString(int PlayerIndex, unsigned long bFull);
	void AppendAwardsString(TEnumAsByte<EHeroAwardEnum> whichAward, int Count, int total, unsigned long bFull, unsigned long bFinalAward, struct FString* Source);
	void SetMVPAwards(const struct FString& mvpAwards);
	void SetHeroMIC(int heroIndex, class UUIObject* Target);
	void UpdateText();
	void ClearText();
	void SetTextLine(int Line, const struct FString& column0, const struct FString& column1, const struct FString& column2, const struct FString& column3);
	void MoveDown();
	void MoveUp();
	void DeactivatePopup();
	void ActivatePopup();
	void ShowHeroObjects(unsigned long bShouldShow);
	void FocusSelector();
	void SetSelected(int Index);
	struct FString BuildFeedbackString(const struct FString& feedbackText);
	void Update(float DeltaTime);
	int MouseSelectionIndex();
	void ClearSelectorObjects();
	void UpdateSelectorObjects(int numSelectors);
	void SetupSelectorObjects();
	void ActivatePanel(int panelIndex);
	unsigned long RightWaveClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long LeftWaveClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long RightPanelClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long LeftPanelClicked(class UUIScreenObject* Sender, int PlayerIndex);
	unsigned long ToggleButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void AddPlayerStats(int Index);
	void AddEnemyStats(const struct FName& enemyName);
	void AddTowerStats(const struct FName& towerName);
	void Preprocess();
	void CustomInit(int CustomInitIndex);
	struct FName GetOpenAnimation();
	void ShowDeletionConfirmation(int Reason);
};


// Class UDKGame.DunDefProjectile
// 0x0118 (0x0374 - 0x025C)
class ADunDefProjectile : public AProjectile
{
public:
	class ADunDefEmitterSpawnable*                     ProjectileEmitterTemplate;                                // 0x025C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ImpactEmitterTemplate;                                    // 0x0260(0x0004) (Edit)
	unsigned long                                      bUseHitNormalForImpactEmitter : 1;                        // 0x0264(0x0004) (Edit)
	unsigned long                                      bUseNetKillArrayIndex : 1;                                // 0x0264(0x0004) (Edit)
	unsigned long                                      bAllowFriendlyImpact : 1;                                 // 0x0264(0x0004) (Edit)
	unsigned long                                      bForceDisableLight : 1;                                   // 0x0264(0x0004) (Edit)
	unsigned long                                      AlsoCreateDownwardDecal : 1;                              // 0x0264(0x0004) (Edit)
	unsigned long                                      bEmitterAttachToImpactedPawnSKMesh : 1;                   // 0x0264(0x0004) (Edit)
	unsigned long                                      ScaleHeroDamage : 1;                                      // 0x0264(0x0004) (Edit)
	unsigned long                                      bSecondScaleDamageStatOnAdditionalDamage : 1;             // 0x0264(0x0004) (Edit)
	unsigned long                                      bSecondScaleDamageStatType : 1;                           // 0x0264(0x0004) (Edit)
	unsigned long                                      MultiplyProjectileDamageByWeaponDamage : 1;               // 0x0264(0x0004) (Edit)
	unsigned long                                      ScaleMomentumForPawnMass : 1;                             // 0x0264(0x0004) (Edit)
	unsigned long                                      OnlyCollideWithIgnoreClasses : 1;                         // 0x0264(0x0004) (Edit)
	unsigned long                                      bScaleImpactEmitterByProjectileSize : 1;                  // 0x0264(0x0004) (Edit)
	unsigned long                                      bReplicateWeaponProjectile : 1;                           // 0x0264(0x0004) (Edit)
	unsigned long                                      bLimitDistance : 1;                                       // 0x0264(0x0004) (Edit)
	unsigned long                                      bPlayImpactEffectOnHittingPawn : 1;                       // 0x0264(0x0004) (Edit)
	unsigned long                                      bScaleVisualsForDamage : 1;                               // 0x0264(0x0004) (Edit)
	unsigned long                                      bMakeEnemyCough : 1;                                      // 0x0264(0x0004) (Edit)
	unsigned long                                      bUseProjectilePerDistanceScalling : 1;                    // 0x0264(0x0004) (Edit)
	unsigned long                                      bUseProjectilePerDistanceSizeScalling : 1;                // 0x0264(0x0004) (Edit)
	unsigned long                                      bAllowReflect : 1;                                        // 0x0264(0x0004) (Edit)
	unsigned long                                      bApplyBuffsOnAoe : 1;                                     // 0x0264(0x0004) (Edit)
	unsigned long                                      bAlwaysUseRandomDamageType : 1;                           // 0x0264(0x0004) (Edit)
	unsigned long                                      bScaleDamagePerLevel : 1;                                 // 0x0264(0x0004) (Edit)
	unsigned long                                      bForceNoRotClamping : 1;                                  // 0x0264(0x0004) (Net, Transient)
	unsigned long                                      bExpired : 1;                                             // 0x0264(0x0004) (Transient)
	unsigned long                                      setEmitterColour : 1;                                     // 0x0264(0x0004) (Transient)
	unsigned long                                      bIsPetOwned : 1;                                          // 0x0264(0x0004) (Net, Transient)
	unsigned long                                      bAllowMultipleRefreshSpeedLifeSpan : 1;                   // 0x0264(0x0004) (Transient)
	unsigned long                                      bRefreshedSpeedLifeSpan : 1;                              // 0x0264(0x0004) (Transient)
	float                                              ProjDamage;                                               // 0x0268(0x0004) (Edit)
	float                                              ProjDamageRadius;                                         // 0x026C(0x0004) (Edit)
	float                                              ProjMomentumTransfer;                                     // 0x0270(0x0004) (Edit)
	class UClass*                                      ProjDamageType;                                           // 0x0274(0x0004) (Edit)
	class UMaterialInterface*                          ImpactDecalMaterial;                                      // 0x0278(0x0004) (Edit)
	float                                              ImpactDecalSizeMin;                                       // 0x027C(0x0004) (Edit)
	float                                              ImpactDecalSizeMax;                                       // 0x0280(0x0004) (Edit)
	float                                              ImpactDecalDepth;                                         // 0x0284(0x0004) (Edit)
	float                                              DamageRadiusFallOffExponent;                              // 0x0288(0x0004) (Edit)
	float                                              ImpactDecalLifespanNonMITV;                               // 0x028C(0x0004) (Edit)
	float                                              ProjectileSpeed;                                          // 0x0290(0x0004) (Edit, Net)
	float                                              ProjectileMaxSpeed;                                       // 0x0294(0x0004) (Edit)
	class UClass*                                      AdditionalDamageType;                                     // 0x0298(0x0004) (Edit)
	int                                                AdditionalDamageAmount;                                   // 0x029C(0x0004) (Edit)
	float                                              ProjectileLifespan;                                       // 0x02A0(0x0004) (Edit)
	TArray<class UClass*>                              DamageClassesToIgnore;                                    // 0x02A4(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ELevelUpValueType>                     ScaleDamageStatType;                                      // 0x02B0(0x0001) (Edit)
	TEnumAsByte<ELevelUpValueType>                     SecondScaleDamageStatType;                                // 0x02B1(0x0001) (Edit)
	unsigned char                                      WeaponIndex;                                              // 0x02B2(0x0001) (Net)
	unsigned char                                      KillArrayIndex;                                           // 0x02B3(0x0001) (Net)
	float                                              ProjectileDamageByWeaponDamageDivider;                    // 0x02B4(0x0004) (Edit)
	float                                              ScaleDamageStatExponent;                                  // 0x02B8(0x0004) (Edit)
	float                                              MaximumDecalRange;                                        // 0x02BC(0x0004) (Edit)
	float                                              MaxPawnMassMomentumScale;                                 // 0x02C0(0x0004) (Edit)
	float                                              MinPawnMassMomentumScale;                                 // 0x02C4(0x0004) (Edit)
	float                                              LimitDistanceAmount;                                      // 0x02C8(0x0004) (Edit)
	float                                              LimitDistanceGRIMultiplier;                               // 0x02CC(0x0004) (Edit)
	class USoundCue*                                   PawnImpactSound;                                          // 0x02D0(0x0004) (Edit)
	float                                              ProjectileDamageVisualScalingExponent;                    // 0x02D4(0x0004) (Edit)
	float                                              ProjectileDamageVisualScalingExponentSmall;               // 0x02D8(0x0004) (Edit)
	float                                              ProjectileMinimumScaleMult;                               // 0x02DC(0x0004) (Edit)
	float                                              ProjectileMaximumScaleMult;                               // 0x02E0(0x0004) (Edit)
	float                                              ProjectileVisualScaleBaseDamageMult;                      // 0x02E4(0x0004) (Edit)
	struct FVector                                     AdditionalProjectileVelocity;                             // 0x02E8(0x000C) (Edit)
	class AEmitterSpawnable*                           EmitterToAttachToImpactedActor;                           // 0x02F4(0x0004) (Edit)
	float                                              ProjectileMaximumScaleGlobalMult;                         // 0x02F8(0x0004) (Edit)
	float                                              ProjectileDamagePerDistanceTravelled;                     // 0x02FC(0x0004) (Edit)
	TArray<class UDunDefBuff*>                         BuffsToApplyOnImpact;                                     // 0x0300(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              RandomDamageTypes;                                        // 0x030C(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     LimitDistanceStartingLocation;                            // 0x0318(0x000C)
	struct FVector                                     StartingLocation;                                         // 0x0324(0x000C)
	int                                                MyTargetingTeam;                                          // 0x0330(0x0004) (Net, Transient)
	float                                              TimeAlive;                                                // 0x0334(0x0004)
	float                                              Time;                                                     // 0x0338(0x0004)
	float                                              A;                                                        // 0x033C(0x0004)
	float                                              B;                                                        // 0x0340(0x0004)
	float                                              tempDmgRadius;                                            // 0x0344(0x0004)
	class AActor*                                      OtherActorToIgnore;                                       // 0x0348(0x0004) (Net)
	class AActor*                                      AimAtTarget;                                              // 0x034C(0x0004) (Net)
	float                                              ProjectileVisualScaleMult;                                // 0x0350(0x0004) (Net)
	class ADunDefEmitterSpawnable*                     MyAttachedEmitter;                                        // 0x0354(0x0004) (Transient)
	class AActor*                                      HomingTarget;                                             // 0x0358(0x0004) (Net)
	struct FColor                                      newEmitterColor;                                          // 0x035C(0x0004) (Transient)
	TScriptInterface<class UIActorModifierInterface>   MyActorStatModifier;                                      // 0x0360(0x0008) (Transient)
	struct FScriptDelegate                             __OnProjectileImpacted__Delegate;                         // 0x0368(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile");
		return ptr;
	}


	TScriptInterface<class UIActorModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIActorModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
	void DoDestroy();
	unsigned long AllowReflect();
	void OnProjectileImpacted(class ADunDefProjectile* theProjectile, class AActor* impactedOn);
	unsigned long HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage);
	unsigned long AllowDamage(class AActor* aTarget);
	unsigned long DunDefProjHurtRadius(float BaseDamage, float TheDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage);
	void EndRadiusDamage();
	void AffectVictim(class AActor* Victim);
	void StartRadiusDamage();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	unsigned long SpawnImpactDecal(class UMaterialInterface* impactMat, const struct FVector& HitLocation, const struct FVector& HitNormal, float SizeChange, unsigned long bDontCheckImpactedActor);
	void ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation);
	void ScaleForHeroModifiers(unsigned long IsFirstTime, class UDunDefHero* myHero);
	unsigned long AllowHeroGUID(int GUID1, int GUID2, int GUID3, int GUID4);
	void InitializeDD();
	void ScaleProjectileVisualEffect();
	void Init(const struct FVector& Direction);
	void InitProjectile(const struct FVector& Direction, class APawn* MyInstigator, float baseDamageForScaling, class AActor* myHomingTarget, const TScriptInterface<class UIActorModifierInterface>& MyActorModifier);
	void Destroyed();
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	unsigned long IsImpactAllowed(class AActor* Other);
	void Expire();
	void RefreshSpeedLifeSpan();
	void IncreaseSize();
	void PostBeginPlay();
	void ScaleProjDamagePerCharacterLevel();
	void SetRandomDamageType();
	void SetClientSideLocation();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.UI_EquipmentInfo
// 0x0020 (0x065C - 0x063C)
class UUI_EquipmentInfo : public UDunDefUIScene
{
public:
	struct FName                                       ItemBoxCloseAnimation;                                    // 0x063C(0x0008) (Edit)
	struct FName                                       ItemBoxOpenAnimation;                                     // 0x0644(0x0008) (Edit)
	class UHeroEquipment*                              myEquipment;                                              // 0x064C(0x0004)
	class UUI_HeroInfo*                                OwnerHeroInfoUI;                                          // 0x0650(0x0004)
	class UDunDefHero*                                 myHero;                                                   // 0x0654(0x0004)
	unsigned long                                      bIsInForge : 1;                                           // 0x0658(0x0004)
	unsigned long                                      bIsInEquipmentBox : 1;                                    // 0x0658(0x0004)
	unsigned long                                      bIsInShop : 1;                                            // 0x0658(0x0004)
	unsigned long                                      WasInvesting : 1;                                         // 0x0658(0x0004)
	unsigned long                                      bIsRemoteHero : 1;                                        // 0x0658(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_EquipmentInfo");
		return ptr;
	}


	void InitForEquipment(class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long IsInForge, class UUI_HeroInfo* heroInfoUI, unsigned long IsRemoteHero, unsigned long IsInEquipmentBox, class AActor* forgeActor, unsigned long bIsInTrade, unsigned long bIsInPlayerShop);
	void SceneDeactivated();
};


// Class UDKGame.UI_SwapHero
// 0x0058 (0x0694 - 0x063C)
class UUI_SwapHero : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           HeroDataList;                                             // 0x063C(0x0004) (Edit)
	class UUIButton*                                   SwapButton;                                               // 0x0640(0x0004) (Edit)
	class UUIButton*                                   CloseButton;                                              // 0x0644(0x0004) (Edit)
	class UUIButton*                                   DeleteButton;                                             // 0x0648(0x0004) (Edit)
	class UUIButton*                                   HeroInfoButton;                                           // 0x064C(0x0004) (Edit)
	class UUIButton*                                   CreateNewHeroButton;                                      // 0x0650(0x0004) (Edit)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x0654(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x0658(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x065C(0x0004) (Edit)
	class UUILabel*                                    DeletionHeroNameLabel;                                    // 0x0660(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x0664(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x0670(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x0678(0x0008) (Edit)
	class UDunDefUIScene*                              CreateHeroUIScene;                                        // 0x0680(0x0004) (Edit)
	class USoundCue*                                   DeleteHeroSound;                                          // 0x0684(0x0004) (Edit)
	unsigned long                                      ChangingUser : 1;                                         // 0x0688(0x0004) (Transient)
	unsigned long                                      RefreshHeroListOnUpdate : 1;                              // 0x0688(0x0004) (Transient)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x0688(0x0004) (Transient)
	unsigned long                                      bDontRefreshHeroList : 1;                                 // 0x0688(0x0004) (Transient)
	unsigned long                                      bDontRecurse : 1;                                         // 0x0688(0x0004) (Transient)
	unsigned long                                      bSwappingHeroes : 1;                                      // 0x0688(0x0004) (Transient)
	int                                                FocusCounter;                                             // 0x068C(0x0004) (Transient)
	class UDunDefHero*                                 SwappingHero;                                             // 0x0690(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_SwapHero");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SelectHeroNumber(int Num);
	void Update(float DeltaTime);
	void InstantSwapHero(int HeroOffset);
	void swapHero();
	void RefreshedList();
	void RefreshHeroList(class UDunDefHero* defaultSelectedHero, unsigned long bSelectFirstAvailable);
	unsigned long EntryEnabledCheck(const TScriptInterface<class UDataListEntryInterface>& dataEntry);
	void PrepareToRefreshHeroList();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void DeleteSelectedHero();
	void HeroEntrySelected(class UUIButton_DataListEntry* Button);
	void PostInitialSceneUpdate();
	void SceneActivated(unsigned long bInitialActivation);
	class UDunDefHeroManager* GetHeroManager();
};


// Class UDKGame.DunDefManaToken
// 0x0065 (0x0371 - 0x030C)
class ADunDefManaToken : public AKActorSpawnable
{
public:
	float                                              ManaPower;                                                // 0x030C(0x0004) (Edit)
	float                                              ExtraAttractionForceMultiplier;                           // 0x0310(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CollectedEmitterTemplate;                                 // 0x0314(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ExpiredEmitterTemplate;                                   // 0x0318(0x0004) (Edit)
	float                                              ExpirationTime;                                           // 0x031C(0x0004) (Edit)
	float                                              AttractionForceStabilizationScalar;                       // 0x0320(0x0004) (Edit)
	float                                              InstigatorWaitTime;                                       // 0x0324(0x0004) (Edit)
	float                                              AttractionForceMultiplier;                                // 0x0328(0x0004) (Edit)
	float                                              AttractAfterInitialTime;                                  // 0x032C(0x0004) (Edit)
	unsigned long                                      bAllowCollectionAtMaxManaPower : 1;                       // 0x0330(0x0004) (Edit)
	unsigned long                                      bDontDestroyOverLimit : 1;                                // 0x0330(0x0004) (Edit)
	unsigned long                                      bUseCombatLifeSpan : 1;                                   // 0x0330(0x0004) (Edit)
	unsigned long                                      bAllowAttraction : 1;                                     // 0x0330(0x0004) (Edit, Net)
	unsigned long                                      WasCollected : 1;                                         // 0x0330(0x0004) (Transient)
	unsigned long                                      bFellOutOfWorld : 1;                                      // 0x0330(0x0004) (Transient)
	unsigned long                                      bHasBeenLocallyCollected : 1;                             // 0x0330(0x0004) (Transient)
	unsigned long                                      bWasCollectedByLocalPlayer : 1;                           // 0x0330(0x0004) (Transient)
	unsigned long                                      bUsingFallingPhysics : 1;                                 // 0x0330(0x0004) (Transient)
	unsigned long                                      bDontPlayDestroyedEffect : 1;                             // 0x0330(0x0004) (Transient)
	unsigned long                                      bWasCollected : 1;                                        // 0x0330(0x0004) (Transient)
	unsigned long                                      bIsPrivate : 1;                                           // 0x0330(0x0004) (Net, Transient)
	float                                              CollideWithOtherTokensTime;                               // 0x0334(0x0004) (Edit)
	float                                              FramerateForceBase;                                       // 0x0338(0x0004) (Edit)
	float                                              FramerateForceExponent;                                   // 0x033C(0x0004) (Edit)
	float                                              FramerateMaxForceMultiplier;                              // 0x0340(0x0004) (Edit)
	float                                              FallingPhysicsAttractionSpeed;                            // 0x0344(0x0004) (Edit)
	float                                              EnableAttractionAfterTime;                                // 0x0348(0x0004) (Edit)
	float                                              MaximumAttractionDistance;                                // 0x034C(0x0004) (Edit)
	class UStaticMesh*                                 HighPerformanceMesh;                                      // 0x0350(0x0004) (Edit)
	class ADunDefPlayer*                               MyAttractor;                                              // 0x0354(0x0004) (Transient)
	class ADunDefPlayer*                               InitialAttractor;                                         // 0x0358(0x0004) (Net, Transient)
	float                                              ServerCombatLifeSpan;                                     // 0x035C(0x0004) (Transient)
	class ADunDefPawn*                                 IgnorePawn;                                               // 0x0360(0x0004) (Net, Transient)
	class AActor*                                      LocalIgnoreAttractor;                                     // 0x0364(0x0004) (Transient)
	class AController*                                 AllowedController;                                        // 0x0368(0x0004) (Net, Transient)
	float                                              MyRating;                                                 // 0x036C(0x0004) (Transient)
	TEnumAsByte<ERBCollisionChannel>                   collisionChannel;                                         // 0x0370(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefManaToken");
		return ptr;
	}


	float GetRating();
	void ClearLocalCollection();
	void SetClearLocalCollectionTimer();
	int STATIC_DestroyAllManaTokens(unsigned long bBankMana);
	float GetFramerateForceScale(float DeltaTime);
	void Tick(float DeltaTime);
	void UpdateCombatLifeSpan(float DeltaTime);
	void ClearLocalIgnoreAttractor();
	void AttractTo(class ADunDefPlayer* Attractor);
	void ClearInstigator();
	void ReenableCollision();
	void PostBeginPlay();
	void PreBeginPlay();
	void Destroyed();
	void FellOutOfWorld(class UClass* dmgType);
	void TornOff();
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, class UObject* WhatHitMe);
	void TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	int GetManaPower();
	void Collected(class ADunDefPlayer* byPlayer);
	void ReEnableattraction();
	void SetAttractionEnabled(unsigned long newAllowAttraction);
	void ClearInitialAttractor();
	void SetInitialAttractor(class ADunDefPlayer* anAttractor);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefGasCloud
// 0x0074 (0x0348 - 0x02D4)
class ADunDefGasCloud : public ADunDefEmitterSpawnable
{
public:
	float                                              CloudLifeSpan;                                            // 0x02D4(0x0004) (Edit)
	float                                              CloudRadius;                                              // 0x02D8(0x0004) (Edit, Net)
	unsigned long                                      DoCough : 1;                                              // 0x02DC(0x0004) (Edit)
	unsigned long                                      DoDamage : 1;                                             // 0x02DC(0x0004) (Edit)
	unsigned long                                      DoFullDamage : 1;                                         // 0x02DC(0x0004) (Edit)
	unsigned long                                      OnlyDamageClosestActor : 1;                               // 0x02DC(0x0004) (Edit)
	unsigned long                                      StealEnemyElementalEffect : 1;                            // 0x02DC(0x0004) (Edit)
	unsigned long                                      RenderEnemiesUnableToAttack : 1;                          // 0x02DC(0x0004) (Edit)
	unsigned long                                      bScaleForHeroDefenseModifiers : 1;                        // 0x02DC(0x0004) (Edit)
	unsigned long                                      bUseParticleParamForScale : 1;                            // 0x02DC(0x0004) (Edit)
	unsigned long                                      bUseParticleParamForInverseScale : 1;                     // 0x02DC(0x0004) (Edit)
	unsigned long                                      bIsAbility : 1;                                           // 0x02DC(0x0004) (Edit)
	unsigned long                                      bdisableRateScaling : 1;                                  // 0x02DC(0x0004) (Edit)
	unsigned long                                      bNotifyWeaponDidDamage : 1;                               // 0x02DC(0x0004) (Edit)
	unsigned long                                      HasFadedOut : 1;                                          // 0x02DC(0x0004) (Transient)
	unsigned long                                      HasTicked : 1;                                            // 0x02DC(0x0004) (Transient)
	float                                              EffectInterval;                                           // 0x02E0(0x0004) (Edit, Net)
	float                                              DamageAmount;                                             // 0x02E4(0x0004) (Edit, Net)
	class UClass*                                      MyDamageType;                                             // 0x02E8(0x0004) (Edit)
	float                                              DamageMomentum;                                           // 0x02EC(0x0004) (Edit)
	TArray<class UClass*>                              IgnoreActorClasses;                                       // 0x02F0(0x000C) (Edit, NeedCtorLink)
	float                                              CloudLifeSpanMultiplierExponent;                          // 0x02FC(0x0004) (Edit)
	float                                              CloudDamageMultiplierExponent;                            // 0x0300(0x0004) (Edit)
	float                                              CloudAOEMultiplierExponent;                               // 0x0304(0x0004) (Edit)
	float                                              CloudEffectRateMultiplierExponent;                        // 0x0308(0x0004) (Edit)
	float                                              DamageFalloffExponent;                                    // 0x030C(0x0004) (Edit)
	TArray<struct FActorTypeDamageMultiplier>          ActorTypeDamageMultipliers;                               // 0x0310(0x000C) (Edit, NeedCtorLink)
	struct FName                                       ParticleScaleParamName;                                   // 0x031C(0x0008) (Edit)
	float                                              CloudEffectRadius;                                        // 0x0324(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     ScalarStat;                                               // 0x0328(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	class AActor*                                      ClosestTarget;                                            // 0x032C(0x0004) (Transient)
	class ADunDefTower*                                SpawnerTower;                                             // 0x0330(0x0004) (Net, Transient)
	float                                              lastTowerSpeed;                                           // 0x0334(0x0004) (Transient)
	float                                              timeLastSpeedUpdate;                                      // 0x0338(0x0004) (Transient)
	float                                              BaseSpeed;                                                // 0x033C(0x0004) (Transient)
	float                                              lastTowerDamage;                                          // 0x0340(0x0004) (Transient)
	float                                              timeLastDamageUpdate;                                     // 0x0344(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGasCloud");
		return ptr;
	}


	unsigned long STATIC_AllowSpawn(class AActor* theArchetype, const struct FVector& theLoc, const struct FRotator& theRot);
	float STATIC_StaticGetCloudLifeSpan(float lifeSpanStatModifier, class ADunDefGasCloud* gCloud);
	float STATIC_StaticGetAttackRange(float attackRangeStatModifier, class ADunDefGasCloud* gCloud);
	float STATIC_StaticGetAttackDamage(float damageStatModifier, class ADunDefGasCloud* gCloud);
	float STATIC_StaticGetAttackRate(float attackRateStatModifier, class ADunDefGasCloud* gCloud);
	void UpdateEffectInterval();
	float GetDamageMult();
	void ScaleRadiusEffect();
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	unsigned long AllowHeroGUID(int GUID1, int GUID2, int GUID3, int GUID4);
	void InitializeDD();
	void SetLifeSpanTimeout();
	void PostBeginPlay();
	float GetTargetDesirability(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	void EffectTimer();
	float GetRadiusDamage(float theBaseDamage, class AActor* Victim);
	unsigned long HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage);
	unsigned long IsClassOnIgnoreList(class UClass* ActorClass);
	void FadeOut(float theLightFadeOutTime);
	void ReplicatedEvent(const struct FName& VarName);
	void NotifyWeapon(class AActor* Target);
};


// Class UDKGame.UI_BuildTimer
// 0x0070 (0x06AC - 0x063C)
class UUI_BuildTimer : public UDunDefUIScene
{
public:
	class UDunDef_SeqAct_OpenBuildUI*                  BuildTimerUIAction;                                       // 0x063C(0x0004)
	class UUILabel*                                    BuildTimerLabel;                                          // 0x0640(0x0004) (Edit)
	class UUILabel*                                    BuildSkipLabel;                                           // 0x0644(0x0004) (Edit)
	class UUILabel*                                    KillCountLabel;                                           // 0x0648(0x0004) (Edit)
	class UUIObject*                                   BuildReadyPanel;                                          // 0x064C(0x0004) (Edit)
	class USoundCue*                                   TimerBeep;                                                // 0x0650(0x0004) (Edit)
	float                                              TimerBeepStartTime;                                       // 0x0654(0x0004) (Edit)
	float                                              TimerBeepMinVolume;                                       // 0x0658(0x0004) (Edit)
	float                                              TimerBeepMaxVolume;                                       // 0x065C(0x0004) (Edit)
	TArray<struct FVector>                             SplitscreenPostTransforms;                                // 0x0660(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             SplitscreenPostTranslationOffsets;                        // 0x066C(0x000C) (Edit, NeedCtorLink)
	int                                                MaximumBuildTime;                                         // 0x0678(0x0004) (Edit)
	struct FString                                     KillCountString;                                          // 0x067C(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              TotalBuildTime;                                           // 0x0688(0x0004) (Transient)
	int                                                ServerLastSentBuildTime;                                  // 0x068C(0x0004) (Transient)
	float                                              OpenSceneTime;                                            // 0x0690(0x0004) (Transient)
	float                                              LastTimerBeepTime;                                        // 0x0694(0x0004) (Transient)
	int                                                NextKillCount;                                            // 0x0698(0x0004) (Transient)
	struct FString                                     OldBuildSkipString;                                       // 0x069C(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bFinishedBuildPhase : 1;                                  // 0x06A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_BuildTimer");
		return ptr;
	}


	void FinishBuildPhase();
	void Update(float DeltaTime);
	void RefreshKillCount();
	void SceneActivated(unsigned long bInitialActivation);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedUIMessage(const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefWaveBillboard
// 0x01B4 (0x03D0 - 0x021C)
class ADunDefWaveBillboard : public AInfo
{
public:
	struct FVector                                     BillboardOffset;                                          // 0x021C(0x000C) (Edit)
	float                                              BillboardScale;                                           // 0x0228(0x0004) (Edit)
	struct FColor                                      MainLabelColor;                                           // 0x022C(0x0004) (Edit)
	struct FColor                                      EnemyLabelColor;                                          // 0x0230(0x0004) (Edit)
	TArray<class AActor*>                              AssociatedSpawnPoints;                                    // 0x0234(0x000C) (Edit, NeedCtorLink)
	float                                              MiniMapScale;                                             // 0x0240(0x0004) (Edit)
	class UTexture2D*                                  HeaderBGTexture;                                          // 0x0244(0x0004) (Edit)
	class UTexture2D*                                  HeaderBGTextureMiniMap;                                   // 0x0248(0x0004) (Edit)
	float                                              HeaderBGScale;                                            // 0x024C(0x0004) (Edit)
	float                                              HeaderBGSizeX;                                            // 0x0250(0x0004) (Edit)
	float                                              HeaderBGSizeY;                                            // 0x0254(0x0004) (Edit)
	float                                              HeaderOffsetX;                                            // 0x0258(0x0004) (Edit)
	float                                              HeaderOffsetY;                                            // 0x025C(0x0004) (Edit)
	float                                              HeaderTextScale;                                          // 0x0260(0x0004) (Edit)
	class UTexture2D*                                  TileBGTexture;                                            // 0x0264(0x0004) (Edit)
	class UTexture2D*                                  TileBGTextureMiniMap;                                     // 0x0268(0x0004) (Edit)
	float                                              TileBGScale;                                              // 0x026C(0x0004) (Edit)
	float                                              TileBGSizeX;                                              // 0x0270(0x0004) (Edit)
	float                                              TileBGSizeY;                                              // 0x0274(0x0004) (Edit)
	float                                              TileOffsetX;                                              // 0x0278(0x0004) (Edit)
	float                                              TileOffsetY;                                              // 0x027C(0x0004) (Edit)
	float                                              TileTextScale;                                            // 0x0280(0x0004) (Edit)
	float                                              TileTextOffsetX;                                          // 0x0284(0x0004) (Edit)
	float                                              TileTextOffsetY;                                          // 0x0288(0x0004) (Edit)
	float                                              EnemyIconOffsetX;                                         // 0x028C(0x0004) (Edit)
	float                                              EnemyIconOffsetY;                                         // 0x0290(0x0004) (Edit)
	float                                              EnemyIconSizeX;                                           // 0x0294(0x0004) (Edit)
	float                                              EnemyIconSizeY;                                           // 0x0298(0x0004) (Edit)
	float                                              HeaderTextOffsetY;                                        // 0x029C(0x0004) (Edit)
	class UTexture2D*                                  EnemyIconBGTexture;                                       // 0x02A0(0x0004) (Edit)
	class UTexture2D*                                  EnemyIconBGTextureMiniMap;                                // 0x02A4(0x0004) (Edit)
	struct FVector                                     MiniMapOffset;                                            // 0x02A8(0x000C) (Edit, Net)
	struct FString                                     enemiesString;                                            // 0x02B4(0x000C) (Edit, Localized, NeedCtorLink)
	class UTextComponent*                              TheTextComponent;                                         // 0x02C0(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	float                                              MinFadeDistance;                                          // 0x02C4(0x0004) (Edit)
	float                                              FadeDistanceOffset;                                       // 0x02C8(0x0004) (Edit)
	float                                              MinFadeOpacity;                                           // 0x02CC(0x0004) (Edit)
	float                                              FadeDotExponent;                                          // 0x02D0(0x0004) (Edit)
	float                                              FirstNewWaveDrawTime;                                     // 0x02D4(0x0004) (Transient)
	float                                              LastCombatPhaseBeginTime;                                 // 0x02D8(0x0004) (Transient)
	unsigned long                                      bWasCombatPhase : 1;                                      // 0x02DC(0x0004) (Transient)
	struct FWaveDisplayEntry                           WaveDisplayEntries[0xF];                                  // 0x02E0(0x0010) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWaveBillboard");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	int GetEntryIndexForEnemyType(class ADunDefEnemy* EnemyArchetype);
	int GetFreeDisplayEntryIndex();
	void RefreshBillboard();
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void DrawBillboard(class UCanvas* C, const struct FVector& ScreenPos, float Scale, float Opacity, unsigned long bIsMiniMap);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long OnlyDrawHUDForOwner();
	void ClearEnemyEntries();
	void ChangedGamePhases(unsigned long IsCombatPhase);
};


// Class UDKGame.DunDefDamageType_Generic
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Generic : public UDunDefDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Generic");
		return ptr;
	}

};


// Class UDKGame.DunDefForge
// 0x017C (0x0398 - 0x021C)
class ADunDefForge : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                         // 0x021C(0x0004) (Edit)
	struct FColor                                      ToolTipOutOfRangeColor;                                   // 0x0220(0x0004) (Edit)
	struct FColor                                      ToolTipInvalidUseColor;                                   // 0x0224(0x0004) (Edit)
	class USkeletalMeshComponent*                      MySkeletalMesh;                                           // 0x0228(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AmbientParticleEffect;                                    // 0x022C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UUI_ForgeMenu*                               ForgeUITemplate;                                          // 0x0230(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x0234(0x0004) (Edit)
	float                                              LeaderboardScaleInterpSpeed;                              // 0x0238(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x023C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActiveBlenderName;                                        // 0x0240(0x0008) (Edit)
	class UParticleSystemComponent*                    ActiveParticleEffect;                                     // 0x0248(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             ActiveSoundComp;                                          // 0x024C(0x0004) (Edit, ExportObject, Component, EditInline)
	class USoundCue*                                   ActivateSound;                                            // 0x0250(0x0004) (Edit)
	class USoundCue*                                   DeactivateSound;                                          // 0x0254(0x0004) (Edit)
	class USoundCue*                                   topLeaderboardSound;                                      // 0x0258(0x0004) (Edit)
	struct FString                                     ActivationString_FailureDuringCombatPhase;                // 0x025C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationString_Use;                                     // 0x0268(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AltActivationString;                                      // 0x0274(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DescriptiveName;                                          // 0x0280(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     topLeaderboardMessageString;                              // 0x028C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      topLeaderboardMessageColor;                               // 0x0298(0x0004) (Edit)
	unsigned long                                      bAllowActivationInCombatPhase : 1;                        // 0x029C(0x0004) (Edit)
	unsigned long                                      bUseLeaderboardStringTest : 1;                            // 0x029C(0x0004) (Edit)
	unsigned long                                      bDisableActivation : 1;                                   // 0x029C(0x0004) (Edit)
	unsigned long                                      bShowTopLeaderboardMessage : 1;                           // 0x029C(0x0004) (Edit)
	unsigned long                                      bForceEnableControllerWeighting : 1;                      // 0x029C(0x0004) (Edit, Net)
	unsigned long                                      IsActive : 1;                                             // 0x029C(0x0004) (Net)
	unsigned long                                      WasActive : 1;                                            // 0x029C(0x0004)
	unsigned long                                      bHidingLeaderboardSign : 1;                               // 0x029C(0x0004)
	unsigned long                                      bShowingLeaderboardSign : 1;                              // 0x029C(0x0004)
	unsigned long                                      bDisplayingLeaderboardEntry : 1;                          // 0x029C(0x0004)
	unsigned long                                      SuccessfulLeaderBoardRead : 1;                            // 0x029C(0x0004) (Transient)
	unsigned long                                      shouldHideSign : 1;                                       // 0x029C(0x0004)
	struct FString                                     LeaderboardStringTest;                                    // 0x02A0(0x000C) (Edit, Localized, NeedCtorLink)
	class UStaticMeshComponent*                        LeaderboardSignComp;                                      // 0x02AC(0x0004) (Edit, ExportObject, Component, EditInline)
	class UTextComponent*                              LeaderboardSignTextComp;                                  // 0x02B0(0x0004) (Edit, ExportObject, Component, EditInline)
	class UTextComponent*                              LeaderboardSignTextShadowComp;                            // 0x02B4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UPointLightComponent*                        ActivatedPointLightComp;                                  // 0x02B8(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LightBrightnessUpSpeed;                                   // 0x02BC(0x0004) (Edit)
	float                                              LightBrightnessDownSpeed;                                 // 0x02C0(0x0004) (Edit)
	class UAnimNodeBlend*                              ActiveBlender;                                            // 0x02C4(0x0004) (Transient)
	struct FString                                     CurrentLeaderboardNickName;                               // 0x02C8(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CurrentLeaderboardHeroName;                               // 0x02D4(0x000C) (Transient, NeedCtorLink)
	struct FRotator                                    ReplicatedRotation;                                       // 0x02E0(0x000C) (Net)
	TArray<class ADunDefPlayerController*>             UsingPCs;                                                 // 0x02EC(0x000C) (NeedCtorLink)
	struct FOnlineStatsRow                             CachedOnlineStatsRow;                                     // 0x02F8(0x0030) (Transient, NeedCtorLink)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0328(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x032C(0x0004) (Edit)
	struct FColor                                      MiniMapIconColor;                                         // 0x0330(0x0004) (Edit)
	struct FColor                                      MiniMapIconColorDisabled;                                 // 0x0334(0x0004) (Edit)
	class UFont*                                       ForgeFont;                                                // 0x0338(0x0004) (Edit)
	class UDunDefDataStore_OnlineStats*                statsStore;                                               // 0x033C(0x0004)
	struct FString                                     leaderboardSignPrefix;                                    // 0x0340(0x000C) (Localized, NeedCtorLink)
	struct FString                                     leaderboardEmptyString1;                                  // 0x034C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     leaderboardEmptyString2;                                  // 0x0358(0x000C) (Localized, NeedCtorLink)
	struct FString                                     scoreString;                                              // 0x0364(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LevelString;                                              // 0x0370(0x000C) (Localized, NeedCtorLink)
	struct FString                                     unknownClassString;                                       // 0x037C(0x000C) (Localized, NeedCtorLink)
	int                                                LeaderboardRetryCount;                                    // 0x0388(0x0004) (Edit)
	int                                                LeaderboardRetries;                                       // 0x038C(0x0004)
	struct FName                                       SMAttachToSocketName;                                     // 0x0390(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefForge");
		return ptr;
	}


	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long CheckAllowance();
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	class ADunDefForge* STATIC_GetAForge();
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	unsigned long shouldShowAltActivation(class ULocalPlayer* ForPlayer);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void SetLeaderboardSignString(const struct FString& Value);
	void RemoveLeaderboardSign();
	void UpdateUnhiding(float DeltaTime);
	void UpdateHiding(float DeltaTime);
	void Tick(float DeltaTime);
	float GetActivationOffset();
	void ShowLobbyLevelGamerTag(int ControllerId);
	void ShowLeaderboardEntryGamerTag(int ControllerId);
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	float GetActivationWeighting();
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	void ChangedGamePhases(unsigned long IsCombatPhase);
	void UpdateLeaderboardSign();
	void ShowLeaderboardSign();
	void HideLeaderboardSign();
	void CheckCombatPhase();
	void Destroyed();
	void ClearLeaderboardDelegate();
	void GetLeaderboardSignString();
	void OnLeaderboardReadComplete(unsigned long bWasSuccessful);
	void ServerAnalyzeHighScoresAgainstCache();
	void ClientUpdateLeaderBoardString(const struct FString& UberString, int HighScore);
	void CheckForLeaderboardHUDMessage(const struct FString& NickName, const struct FString& HeroName, int Score);
	void RefreshLeaderboardSign(unsigned long shouldHide);
	void PostBeginPlay();
	void Deactivate();
	void LightInterpDown();
	void LightInterpUp();
	void Activate();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefCustomNode
// 0x000C (0x0234 - 0x0228)
class ADunDefCustomNode : public ANote
{
public:
	int                                                CustomData;                                               // 0x0228(0x0004) (Edit)
	class ADunDefCustomNode*                           LinkedNode;                                               // 0x022C(0x0004) (Edit)
	class AActor*                                      LinkedActor;                                              // 0x0230(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefCustomNode");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
};


// Class UDKGame.HeroEquipment_Familiar_TowerBooster
// 0x0064 (0x0B60 - 0x0AFC)
class UHeroEquipment_Familiar_TowerBooster : public UHeroEquipment_Familiar
{
public:
	float                                              BaseBoostRange;                                           // 0x0AFC(0x0004) (Edit)
	float                                              BoostRangeExponent;                                       // 0x0B00(0x0004) (Edit)
	TEnumAsByte<ETowerBoostType>                       MyTowerBoostType;                                         // 0x0B04(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0B05(0x0003) MISSED OFFSET
	struct FName                                       BoostTowerAnim;                                           // 0x0B08(0x0008) (Edit)
	float                                              ETBAttackRateExponent;                                    // 0x0B10(0x0004) (Edit)
	float                                              ETBAttackRangeExponent;                                   // 0x0B14(0x0004) (Edit)
	float                                              ETBDamageExponent;                                        // 0x0B18(0x0004) (Edit)
	float                                              ETBResistanceExponent;                                    // 0x0B1C(0x0004) (Edit)
	float                                              BoostAmountMultiplier;                                    // 0x0B20(0x0004) (Edit)
	float                                              MaxRangeBoostStat;                                        // 0x0B24(0x0004) (Edit)
	class UParticleSystem*                             BoostTowerEffect;                                         // 0x0B28(0x0004) (Edit)
	int                                                MaxTowerBoostStat;                                        // 0x0B2C(0x0004) (Edit)
	int                                                TowerBoostStatUpgradeInterval;                            // 0x0B30(0x0004) (Edit)
	int                                                MaxNumberOfTowersToBoost;                                 // 0x0B34(0x0004) (Edit)
	int                                                SoftMaxNumberOfTowersToBoost;                             // 0x0B38(0x0004) (Edit)
	int                                                MaxBoostStatValue;                                        // 0x0B3C(0x0004) (Edit)
	TScriptInterface<class UDunDefTargetableInterface> BestTargetRef;                                            // 0x0B40(0x0008) (Transient)
	TArray<TScriptInterface<class UDunDefTargetableInterface>> AdditionalTargetRefs;                                     // 0x0B48(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass*>                              IgnoreTowerForMyBoost;                                    // 0x0B54(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_TowerBooster");
		return ptr;
	}


	int GetStatLevelUpAmountIterations(TEnumAsByte<EEquipmentStatType> EQS, int Value, int statSubIndex);
	int GetNextStatLevelUpValue(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long SetAsValue);
	int GetShiftClickUpgradeCount();
	void InitFromNetInfo(const struct FEquipmentNetInfo& Info, class UObject* fromDroppedEquipment);
	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	unsigned long CheckStatLevelUpIterations(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, int EquipmentLevelToCheck, float Value);
	unsigned long AllowStatLevelUp(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement);
	void NotifyEquipment_PawnAttacked(int FireMode);
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void GetFurthestAdditionalTarget(const struct FVector& playerLoc, class AActor** furthestTarget, float* furthestRangeSq);
	void UpdateAdditionaBoostTargets();
	void RemoveAllTargets();
	void ShutDown(unsigned long isDestruction);
	TScriptInterface<class UDunDefTargetableInterface> GetBestAdditionalBoostTarget();
	TScriptInterface<class UDunDefTargetableInterface> GetBestTarget();
	float GetBoostRange();
	float GetTowerBoostAmount(TEnumAsByte<ETowerBoostType> boostType);
	unsigned long HasTowerBoostingType(TEnumAsByte<ETowerBoostType> checkType);
	TScriptInterface<class UDunDefTargetableInterface> GetTowerBoostingTarget();
};


// Class UDKGame.HeroEquipment_Familiar_TowerHealer
// 0x0044 (0x0B40 - 0x0AFC)
class UHeroEquipment_Familiar_TowerHealer : public UHeroEquipment_Familiar
{
public:
	float                                              HealInterval;                                             // 0x0AFC(0x0004) (Edit)
	float                                              MaxAttackAnimationSpeed;                                  // 0x0B00(0x0004) (Edit)
	float                                              HealRange;                                                // 0x0B04(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     PawnHealEffect;                                           // 0x0B08(0x0004) (Edit)
	float                                              BaseHealAmount;                                           // 0x0B0C(0x0004) (Edit)
	float                                              HealAmountMultiplier;                                     // 0x0B10(0x0004) (Edit)
	float                                              ManaCostPerHealUnit;                                      // 0x0B14(0x0004) (Edit)
	float                                              ManaCostPerTrapCharge;                                    // 0x0B18(0x0004) (Edit)
	float                                              MaxTowerHealthPercentToRepair;                            // 0x0B1C(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x0B20(0x0004) (Edit)
	int                                                DetonationTypeHealInterval;                               // 0x0B24(0x0004) (Edit)
	unsigned long                                      bHealOverRadius : 1;                                      // 0x0B28(0x0004) (Edit)
	unsigned long                                      bUseFixedHealSpeed : 1;                                   // 0x0B28(0x0004) (Edit)
	unsigned long                                      bScaleRepairWithTowerHealthScaler : 1;                    // 0x0B28(0x0004) (Edit)
	unsigned long                                      bDoingHealing : 1;                                        // 0x0B28(0x0004) (Transient)
	float                                              HealRadius;                                               // 0x0B2C(0x0004) (Edit)
	float                                              LastHealTime;                                             // 0x0B30(0x0004) (Transient)
	TScriptInterface<class UDunDefTargetableInterface> BestTargetRef;                                            // 0x0B34(0x0008) (Transient)
	int                                                detonationTypeHealCounter;                                // 0x0B3C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_TowerHealer");
		return ptr;
	}


	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void DoHealing();
	int GetWeaponDamage();
	void ApplyPrimaryDamageMultiplierDisplay(int* StatValue);
	float GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp);
	float GetAttackInterval();
	float GetHealAmount();
	void NotifyEquipment_PawnAttacked(int FireMode);
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	void UpdateAI(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void ShutDown(unsigned long isDestruction);
	TScriptInterface<class UDunDefTargetableInterface> GetBestTarget();
	void AttachedComponent(class UPrimitiveComponent* aComp);
};


// Class UDKGame.DunDef_SeqEvent_CustomEvent
// 0x0010 (0x0110 - 0x0100)
class UDunDef_SeqEvent_CustomEvent : public USequenceEvent
{
public:
	struct FName                                       CustomEventName;                                          // 0x0100(0x0008) (Edit)
	int                                                CustomEventID;                                            // 0x0108(0x0004) (Edit)
	class AActor*                                      CustomEventActor;                                         // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_CustomEvent");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.UI_LoadingScreen
// 0x003C (0x0678 - 0x063C)
class UUI_LoadingScreen : public UDunDefUIScene
{
public:
	TArray<class UUIImage*>                            LoadingBGImages;                                          // 0x063C(0x000C) (Edit, NeedCtorLink)
	TArray<class UUIImage*>                            AltLoadingBGImages;                                       // 0x0648(0x000C) (Edit, NeedCtorLink)
	class UMaterialInstanceConstant*                   LoadingBGMaterial;                                        // 0x0654(0x0004) (Edit)
	class UMaterialInstanceConstant*                   AltLoadingBGMaterial;                                     // 0x0658(0x0004) (Edit)
	class UUILabel*                                    ProTipLabel;                                              // 0x065C(0x0004) (Edit)
	struct FName                                       ProTipShowAnimation;                                      // 0x0660(0x0008) (Edit)
	float                                              ForceCloseAllUITimer;                                     // 0x0668(0x0004) (Edit)
	class UMaterialInstanceConstant*                   LoadingBGMaterialInstance;                                // 0x066C(0x0004) (Transient)
	class UMaterialInstanceConstant*                   AltLoadingBGMaterialInstance;                             // 0x0670(0x0004) (Transient)
	float                                              OpenCounter;                                              // 0x0674(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_LoadingScreen");
		return ptr;
	}


	void ShowProTip();
	unsigned long AllowGlobalVisibilityToggling();
	void SceneActivated(unsigned long bInitialActivation);
	void Update(float DeltaTime);
	void CloseWithAnimation();
	unsigned long CloseScene(class UUIScene* SceneToClose, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately);
};


// Class UDKGame.UILabel_ScoreIndicator
// 0x0078 (0x0544 - 0x04CC)
class UUILabel_ScoreIndicator : public UUILabel
{
public:
	float                                              InterpSpeedFactor;                                        // 0x04CC(0x0004) (Edit)
	float                                              LerpSpeedFactor;                                          // 0x04D0(0x0004) (Edit)
	struct FName                                       ScoreAddedAnimationName;                                  // 0x04D4(0x0008) (Edit)
	struct FLinearColor                                ScoreAddingColor;                                         // 0x04DC(0x0010) (Edit)
	struct FLinearColor                                ScoreNormalColor;                                         // 0x04EC(0x0010) (Edit)
	float                                              AwardInterval;                                            // 0x04FC(0x0004) (Edit)
	TArray<class UUILabel*>                            MajorNotificationLabels;                                  // 0x0500(0x000C) (Edit, NeedCtorLink)
	struct FString                                     scoreString;                                              // 0x050C(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              CurrentScore;                                             // 0x0518(0x0004) (Transient)
	int                                                TargetScore;                                              // 0x051C(0x0004) (Transient)
	int                                                LastDisplayScore;                                         // 0x0520(0x0004) (Transient)
	float                                              CurrentInterpSpeed;                                       // 0x0524(0x0004) (Transient)
	TArray<struct FScoreAwardEntry>                    ScoreAwardEntries;                                        // 0x0528(0x000C) (Transient, NeedCtorLink)
	float                                              LastScoreAwardTime;                                       // 0x0534(0x0004) (Transient)
	float                                              LastPlaySpeed;                                            // 0x0538(0x0004) (Transient)
	int                                                LastMajorNotificationLabelIndex;                          // 0x053C(0x0004)
	int                                                LastMajorNotificationLabelHiddenIndex;                    // 0x0540(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UILabel_ScoreIndicator");
		return ptr;
	}


	void Created();
	void Update(float DeltaTime);
	void ShowMajorNotificationLabel(const struct FString& LabelText, const struct FLinearColor& LabelColor, float LabelScale, float playSpeed);
	void AddPopUp(const struct FString& aString, float playSpeed, struct FLinearColor* aColor);
	void AddToScore(int TotalScore, int AmountToAdd, const struct FString& ScoreAwardReason, const struct FLinearColor& ScoreAwardColor, float playSpeed, int ScoreTagReason, int ScoreTagAdditionalNum, int ScoreTagSecondaryNum, class AActor* ActorArchetype);
};


// Class UDKGame.DunDefHUDInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefHUDInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHUDInterface");
		return ptr;
	}


	unsigned long OnlyDrawHUDForOwner();
	unsigned long DrawMyHUD(class ADunDefHUD* H);
};


// Class UDKGame.DunDefTower_AuraStrengthDrain
// 0x0008 (0x08C8 - 0x08C0)
class ADunDefTower_AuraStrengthDrain : public ADunDefTower_Aura
{
public:
	float                                              DrainagePercent;                                          // 0x08C0(0x0004) (Edit)
	float                                              MinimumStrength;                                          // 0x08C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_AuraStrengthDrain");
		return ptr;
	}


	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetStrengthDrainMultiplier();
	void ExitEffect(class ADunDefPawn* P);
	void EntryEffect(class ADunDefPawn* P);
};


// Class UDKGame.DunDefTower_DetonationType
// 0x00C4 (0x08F0 - 0x082C)
class ADunDefTower_DetonationType : public ADunDefTower_NonPhysical
{
public:
	class AActor*                                      TrapResultTemplate;                                       // 0x082C(0x0004) (Edit)
	struct FVector                                     SpringTrapLocationOffset;                                 // 0x0830(0x000C) (Edit)
	struct FRotator                                    SpringTrapRotationOffset;                                 // 0x083C(0x000C) (Edit)
	class USoundCue*                                   TrapSprungSound;                                          // 0x0848(0x0004) (Edit)
	TArray<class UClass*>                              ClassTypesToSpringOn;                                     // 0x084C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      ReplicateTrapResult : 1;                                  // 0x0858(0x0004) (Edit)
	unsigned long                                      bCheckDetonationTouchUponReset : 1;                       // 0x0858(0x0004) (Edit)
	unsigned long                                      bSetInitialRadiusScale : 1;                               // 0x0858(0x0004) (Edit)
	unsigned long                                      bDrawNumDetonations : 1;                                  // 0x0858(0x0004) (Edit)
	unsigned long                                      bUsesAttackDuration : 1;                                  // 0x0858(0x0004) (Edit)
	unsigned long                                      bUsesAttackRange : 1;                                     // 0x0858(0x0004) (Edit)
	unsigned long                                      bUsesAttackDamage : 1;                                    // 0x0858(0x0004) (Edit)
	unsigned long                                      bUsesAttackRate : 1;                                      // 0x0858(0x0004) (Edit)
	unsigned long                                      bDestroyTrapResultUponSelling : 1;                        // 0x0858(0x0004) (Edit)
	float                                              MaximumDetonations;                                       // 0x085C(0x0004) (Edit)
	int                                                AdditionalDetonations;                                    // 0x0860(0x0004) (Edit)
	float                                              DetonationResetTime;                                      // 0x0864(0x0004) (Edit, Net)
	float                                              DetonationResetTimeMultiplier;                            // 0x0868(0x0004) (Edit)
	class UFont*                                       DetonationNumberHUDFont;                                  // 0x086C(0x0004) (Edit)
	struct FVector                                     ResettingColor;                                           // 0x0870(0x000C) (Edit)
	struct FString                                     ActivationRangeString;                                    // 0x087C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MaximumDetonationsString;                                 // 0x0888(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackDurationString;                                     // 0x0894(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DetonationResetTimeString;                                // 0x08A0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackDamagePerSecondString;                              // 0x08AC(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              IconDistanceScalar;                                       // 0x08B8(0x0004) (Edit)
	int                                                repairHealthPerCharge;                                    // 0x08BC(0x0004) (Edit)
	int                                                partialRepairCount;                                       // 0x08C0(0x0004) (Transient)
	float                                              ReplicatedStatModifier_DefenseAttackRate;                 // 0x08C4(0x0004) (Net)
	float                                              ReplicatedStatModifier_DefenseAOE;                        // 0x08C8(0x0004) (Net)
	float                                              ReplicatedStatModifier_DefenseHealth;                     // 0x08CC(0x0004) (Net)
	class ADunDefPawn*                                 TrapSprungVictim;                                         // 0x08D0(0x0004) (Transient)
	class AActor*                                      TrapResult;                                               // 0x08D4(0x0004) (Transient)
	float                                              RadiusScale;                                              // 0x08D8(0x0004) (Net)
	int                                                NumDetonations;                                           // 0x08DC(0x0004) (Net)
	int                                                MaxDetonations;                                           // 0x08E0(0x0004) (Net)
	float                                              StartRepairEnergy;                                        // 0x08E4(0x0004)
	float                                              baseCollisionRadius;                                      // 0x08E8(0x0004) (Transient)
	float                                              baseCollisionHeight;                                      // 0x08EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_DetonationType");
		return ptr;
	}


	unsigned long UsesRange();
	float GetGlobalTowerHealthMultiplier();
	float GetDamageMultiplier();
	unsigned long CanTargetInvisibleTarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	void HealPctOfMaxHealth(float HealPct, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	void HealDetonationStyle(int HealAmt, class AController* Healer, class UClass* DamageType, unsigned long bShowFloatingNumbers);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void AddHealth(int howMuch, unsigned long bDontDisplayFloatingNumber);
	void PlaySellFX();
	unsigned long UseForTowerSelectionPassThrough();
	class UClass* GetDamageType();
	void PerformFullHeal();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float IncrementRepair(float CurrentMana, float DeltaTime);
	float GetCurrentRepairPercentage(float StartRepairTime, float RepairSpeed);
	void StartRepair();
	float GetTimeOfTotalRepair();
	float GetTimeToRepair();
	float GetCostToRepair();
	unsigned long NeedsRepair(unsigned long requireFullHealth);
	int GetMaxDetonations();
	float STATIC_StaticGetTowerScale(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float GetAttackDamage();
	float GetAttackRate();
	float GetAttackDuration();
	float GetAttackRange();
	float GetCollisionRadius();
	void SetRadiusScale(float theRadiusScale);
	struct FString GetToolTipText();
	void RemoveTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster, int indexOverride);
	void AddTowerBooster(const TScriptInterface<class UTowerBoosterInterface>& aBooster);
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	void ScaleHealthMultiplier();
	void PostBeginPlay();
	int GetHealth(unsigned long bGetMax);
	float GetHealthPercent();
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long CanDetonate();
	void CheckOverlappedTouchingDetonation();
	unsigned long CheckTouchingDetonation(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Detonate(int SetDetonationsNumber);
	void SpringTrap();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
	void OnDestroy_RemoveFromTargetableList();
	void OnPostBeginPlay_AddToTargetableList();
};


// Class UDKGame.DecalActorMovableSpawnable
// 0x0000 (0x0220 - 0x0220)
class ADecalActorMovableSpawnable : public ADecalActorMovable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DecalActorMovableSpawnable");
		return ptr;
	}

};


// Class UDKGame.Dictionary_IntObj
// 0x0010 (0x004C - 0x003C)
class UDictionary_IntObj : public UObject
{
public:
	class UDictionary*                                 pDictionary;                                              // 0x003C(0x0004) (Transient)
	TArray<class UObject*>                             ObjList;                                                  // 0x0040(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.Dictionary_IntObj");
		return ptr;
	}


	unsigned long IsEmpty();
	void Clear();
	void ToArray(unsigned long bIgnoreNullRefs, TArray<class UObject*>* OutValues);
	unsigned long GetKeyByValue(class UObject* ObjValue, int* OutKey);
	unsigned long Remove(int InKey);
	unsigned long Get(int InKey, class UObject** OutValue);
	void Add(int InKey, class UObject* ObjValue);
	void Init();
	class UDictionary_IntObj* STATIC_Create();
};


// Class UDKGame.DLCDataListProvider
// 0x000C (0x0048 - 0x003C)
class UDLCDataListProvider : public UObject
{
public:
	TArray<class UDLCListEntry*>                       DLCListEntries;                                           // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DLCDataListProvider");
		return ptr;
	}


	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
};


// Class UDKGame.DLCListEntry
// 0x0034 (0x0070 - 0x003C)
class UDLCListEntry : public UObject
{
public:
	class USurface*                                    DLCImage;                                                 // 0x003C(0x0004) (Edit)
	int                                                DLCAppID;                                                 // 0x0040(0x0004) (Edit)
	TArray<int>                                        DLCAppIDs;                                                // 0x0044(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DLCFriendlyName;                                          // 0x0050(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PurchaseURL;                                              // 0x005C(0x000C) (Edit, NeedCtorLink)
	int                                                Priority;                                                 // 0x0068(0x0004) (Edit)
	unsigned long                                      bPCOnly : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bMacOnly : 1;                                             // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DLCListEntry");
		return ptr;
	}


	unsigned long IsRootEntry();
	int GetFolderID();
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetDataString(int dataSetType);
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
};


// Class UDKGame.DunDef3DNote_Gameplay
// 0x0000 (0x0220 - 0x0220)
class ADunDef3DNote_Gameplay : public ADunDef3DNote
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef3DNote_Gameplay");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqAct_ActivateNetworkEvent
// 0x001C (0x0104 - 0x00E8)
class UDunDef_SeqAct_ActivateNetworkEvent : public USequenceAction
{
public:
	struct FName                                       EventName;                                                // 0x00E8(0x0008) (Edit)
	int                                                CustomEventID;                                            // 0x00F0(0x0004) (Edit)
	unsigned long                                      bActivateForLocalPlayers : 1;                             // 0x00F4(0x0004) (Edit)
	class AActor*                                      EventInstigator;                                          // 0x00F8(0x0004) (Edit)
	class AActor*                                      EventOriginator;                                          // 0x00FC(0x0004) (Edit)
	class AActor*                                      EventActor;                                               // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ActivateNetworkEvent");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_AddMana
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_AddMana : public USequenceAction
{
public:
	int                                                ManaAmount;                                               // 0x00E8(0x0004) (Edit)
	unsigned long                                      AddForEveryone : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      OnlyAddMinimumMana : 1;                                   // 0x00EC(0x0004) (Edit)
	unsigned long                                      bScaleManaByPlayers : 1;                                  // 0x00EC(0x0004) (Edit)
	unsigned long                                      bOnlyAddForActivePlayers : 1;                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      bOnlyAddForPrimaryLocalPlayer : 1;                        // 0x00EC(0x0004) (Edit)
	unsigned long                                      bIgnoreBankLimit : 1;                                     // 0x00EC(0x0004) (Edit)
	TArray<float>                                      PlayerManaScales;                                         // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_AddMana");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_AddScore
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_AddScore : public USequenceAction
{
public:
	int                                                ScoreAmount;                                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      AddForEveryone : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      OnlyAddMinimumScore : 1;                                  // 0x00EC(0x0004) (Edit)
	int                                                Points;                                                   // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_AddScore");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_AppPurchased
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_AppPurchased : public USequenceAction
{
public:
	int                                                APP_ID;                                                   // 0x00E8(0x0004) (Edit)
	unsigned long                                      bIsDLC : 1;                                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_AppPurchased");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_AwardWaveCompletion
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_AwardWaveCompletion : public USequenceAction
{
public:
	int                                                WaveNumberOverride;                                       // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_AwardWaveCompletion");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_BankAllDrops
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_BankAllDrops : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_BankAllDrops");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_BasicActorSpawner
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_BasicActorSpawner : public USequenceAction
{
public:
	class AActor*                                      ActorTemplate;                                            // 0x00E8(0x0004) (Edit)
	TEnumAsByte<ENetRole>                              NetworkRemoteRole;                                        // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	float                                              ActorDrawScaleMultiplier;                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_BasicActorSpawner");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_CheckForLevelUps
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_CheckForLevelUps : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_CheckForLevelUps");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ConcatString
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ConcatString : public USequenceAction
{
public:
	int                                                NumFloatDecimals;                                         // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ConcatString");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_DestroyAllType
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_DestroyAllType : public USequenceAction
{
public:
	class UClass*                                      ActorClass;                                               // 0x00E8(0x0004) (Edit)
	unsigned long                                      bUseInterface : 1;                                        // 0x00EC(0x0004) (Edit)
	class UClass*                                      InterfaceClass;                                           // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_DestroyAllType");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_DisablePlayerInput
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_DisablePlayerInput : public USequenceAction
{
public:
	unsigned long                                      DisablePlayerInput : 1;                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_DisablePlayerInput");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqVar_TutorialData
// 0x0054 (0x00E8 - 0x0094)
class UDunDef_SeqVar_TutorialData : public USequenceVariable
{
public:
	struct FTutorialData                               PCTutorialDefault;                                        // 0x0094(0x0014) (Edit, NeedCtorLink)
	struct FTutorialData                               XboxTutorial;                                             // 0x00A8(0x0014) (Edit, NeedCtorLink)
	struct FTutorialData                               PS3Tutorial;                                              // 0x00BC(0x0014) (Edit, NeedCtorLink)
	struct FTutorialData                               MobileTutorial;                                           // 0x00D0(0x0014) (Edit, NeedCtorLink)
	unsigned long                                      bUseConsoleTutorialIfPCGamepad : 1;                       // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqVar_TutorialData");
		return ptr;
	}


	struct FString ParsePCString(const struct FString& theString);
	struct FTutorialData GetTutorialData();
};


// Class UDKGame.DunDef_SeqAct_DisplayTutorialText
// 0x0024 (0x011C - 0x00F8)
class UDunDef_SeqAct_DisplayTutorialText : public USeqAct_Latent
{
public:
	float                                              DisplayTime;                                              // 0x00F8(0x0004) (Edit)
	float                                              DisplayAfterPlaySound;                                    // 0x00FC(0x0004) (Edit)
	class UUI_TutorialText*                            TutorialSceneTemplate;                                    // 0x0100(0x0004) (Edit)
	unsigned long                                      bHideIsConsideredAborted : 1;                             // 0x0104(0x0004) (Edit)
	unsigned long                                      bHideJustAdvanceTimer : 1;                                // 0x0104(0x0004) (Edit)
	unsigned long                                      bDisplayOnBottom : 1;                                     // 0x0104(0x0004) (Edit)
	unsigned long                                      forceHide : 1;                                            // 0x0104(0x0004) (Transient)
	unsigned long                                      bPlayedSound : 1;                                         // 0x0104(0x0004) (Transient)
	unsigned long                                      bWasEverActivated : 1;                                    // 0x0104(0x0004) (Transient)
	float                                              SoundTimer;                                               // 0x0108(0x0004) (Edit)
	struct FName                                       DisplayOnBottomAnimationName;                             // 0x010C(0x0008) (Edit)
	class UUI_TutorialText*                            MyTutText;                                                // 0x0114(0x0004) (Transient)
	class USoundCue*                                   MySound;                                                  // 0x0118(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_DisplayTutorialText");
		return ptr;
	}


	unsigned long Update(float DeltaTime);
	void Hide();
	void Activated();
};


// Class UDKGame.UI_TutorialText
// 0x000C (0x0648 - 0x063C)
class UUI_TutorialText : public UDunDefUIScene
{
public:
	class UUILabel*                                    TutorialTextLabel;                                        // 0x063C(0x0004) (Edit)
	class UUILabel*                                    BottomTutorialTextLabel;                                  // 0x0640(0x0004) (Edit)
	class UDunDef_SeqAct_DisplayTutorialText*          MySequenceAction;                                         // 0x0644(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_TutorialText");
		return ptr;
	}


	void SetDisplayText(const struct FString& displayText, unsigned long bDisplayOnBottom);
};


// Class UDKGame.DunDef_SeqAct_EnablePostMissionCinematic
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_EnablePostMissionCinematic : public USequenceAction
{
public:
	unsigned long                                      bEnablePostMissionCinematic : 1;                          // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_EnablePostMissionCinematic");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_EndTBRTimer
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_EndTBRTimer : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_EndTBRTimer");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.UI_KillCount
// 0x0058 (0x0694 - 0x063C)
class UUI_KillCount : public UDunDefUIScene
{
public:
	class UUIObject*                                   KillCountPanel;                                           // 0x063C(0x0004) (Edit)
	class UUIImage_HealthBar*                          BossHealthBar;                                            // 0x0640(0x0004) (Edit)
	class UUIImage_HealthBar*                          EnemyKillCountBar;                                        // 0x0644(0x0004) (Edit)
	TScriptInterface<class UDunDefTargetableInterface> HealthBarBoss;                                            // 0x0648(0x0008)
	int                                                KillCountRemaining;                                       // 0x0650(0x0004)
	int                                                TotalKillCount;                                           // 0x0654(0x0004)
	TEnumAsByte<ESplitScreenType>                      LastBossSplitType;                                        // 0x0658(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0659(0x0003) MISSED OFFSET
	class UDunDef_SeqAct_OpenKillCountUI*              KillCountUIAction;                                        // 0x065C(0x0004)
	TArray<struct FVector>                             SplitscreenPostTransforms;                                // 0x0660(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             SplitscreenPostTranslationOffsets;                        // 0x066C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             BossSplitscreenPostTransforms;                            // 0x0678(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             BossSplitscreenPostTranslationOffsets;                    // 0x0684(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bSurvivalTimeLimitGameType : 1;                           // 0x0690(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_KillCount");
		return ptr;
	}


	unsigned long IsSurvivalTimeLimitGameType();
	void SceneDeactivated();
	void NotifyLevelVictory();
	void NotifyGameOver();
	void STATIC_StaticHideBossHealthBar();
	void STATIC_StaticShowBossHealthBar(const TScriptInterface<class UDunDefTargetableInterface>& forBoss);
	void STATIC_StaticSubtractFromKillCount(int Num);
	void Update(float DeltaTime);
	void HideBossHealthBar();
	void ShowBossHealthBar(const TScriptInterface<class UDunDefTargetableInterface>& forBoss);
	void SubtractFromKillCount(int amountToSubtract);
	void HideKillCountPanel();
	void AddKillCountFromWaveEntries(TArray<struct FEnemyWaveEntry>* waveEntries);
	void SetKillCountRemaining(int theKillCountRemaining);
	void SetTotalKillCount(int theTotalKillCount);
	void SceneActivated(unsigned long bInitialActivation);
	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
	void ExecReplicatedUIMessage(const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefBoss
// 0x0034 (0x0D40 - 0x0D0C)
class ADunDefBoss : public ADunDefEnemy
{
public:
	float                                              MiniMapCoordinateScale;                                   // 0x0D0C(0x0004) (Edit)
	unsigned long                                      bDunDefCheckForEncroachers : 1;                           // 0x0D10(0x0004) (Edit)
	unsigned long                                      bDunDefEncroachersOnlyCheckEnemies : 1;                   // 0x0D10(0x0004) (Edit)
	unsigned long                                      bDrawRotatedMiniMapIcon : 1;                              // 0x0D10(0x0004) (Edit)
	unsigned long                                      UseMultipleHealthBars : 1;                                // 0x0D10(0x0004) (Edit)
	unsigned long                                      bAllowBuffs : 1;                                          // 0x0D10(0x0004) (Edit)
	float                                              BumpTowerDamage;                                          // 0x0D14(0x0004) (Edit)
	float                                              EncroachmentExtraRadius;                                  // 0x0D18(0x0004) (Edit)
	float                                              PawnPushBackSpeed;                                        // 0x0D1C(0x0004) (Edit)
	float                                              TowerPushBackSpeed;                                       // 0x0D20(0x0004) (Edit)
	struct FRotator                                    MiniMapIconRotationOffset;                                // 0x0D24(0x000C) (Edit)
	float                                              ProtonChargeBlastDamageMultiplier;                        // 0x0D30(0x0004) (Edit)
	int                                                NumberOfHealthBars;                                       // 0x0D34(0x0004) (Edit)
	int                                                MaximumNumberOfHealthBars;                                // 0x0D38(0x0004) (Net, Transient)
	int                                                NumberOfRemainingHealthBars;                              // 0x0D3C(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBoss");
		return ptr;
	}


	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void CheckForEncroachers(float DeltaTime);
	void Tick(float DeltaTime);
	unsigned long ForceFriendlyFire(class AActor* Target);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void EnableDarkness();
	void PlayJumpAnimation();
	void EnemyExpired();
	void ForceSkelUpdating(unsigned long Force, unsigned long bOnlyForceTickAnimNodes);
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void SetRuthlessModifiers();
	void DoDrawHealthBar(class ADunDefHUD* H, float Opacity);
	void UpdateMaxHealth(unsigned long bSetHealthToMax);
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
};


// Class UDKGame.DunDefEnemyController
// 0x01D4 (0x060C - 0x0438)
class ADunDefEnemyController : public ANativeDunDefEnemyController
{
public:
	unsigned long                                      CurrentTargetIsReachable : 1;                             // 0x0438(0x0004)
	unsigned long                                      AddAggroUponAcquiringTarget : 1;                          // 0x0438(0x0004) (Edit)
	unsigned long                                      bDoObstructionJumpJump : 1;                               // 0x0438(0x0004) (Edit)
	unsigned long                                      bIgnoreMoveAroundBlockade : 1;                            // 0x0438(0x0004) (Edit)
	unsigned long                                      bReachedInitialTarget : 1;                                // 0x0438(0x0004) (Edit)
	unsigned long                                      bAddAggroFromBumpingTarget : 1;                           // 0x0438(0x0004) (Edit)
	unsigned long                                      bAllowChoosingUntargetableTargets : 1;                    // 0x0438(0x0004) (Edit)
	unsigned long                                      bDoStuckChecks : 1;                                       // 0x0438(0x0004) (Edit)
	unsigned long                                      bClearPlayerIgnoreOnBump : 1;                             // 0x0438(0x0004) (Edit)
	unsigned long                                      bForceLineOfSightWithinAttackRangeMelee : 1;              // 0x0438(0x0004) (Edit)
	unsigned long                                      bClearIgnoreTargetsOnAttack : 1;                          // 0x0438(0x0004) (Edit)
	unsigned long                                      bForceTargetReachable : 1;                                // 0x0438(0x0004) (Edit)
	unsigned long                                      bUseStuckOnBlockadeTargetingHack : 1;                     // 0x0438(0x0004) (Edit)
	unsigned long                                      bIgnoreDTMaxNumberOfAttackers : 1;                        // 0x0438(0x0004) (Edit)
	unsigned long                                      HasReachedNewTarget : 1;                                  // 0x0438(0x0004) (Transient)
	unsigned long                                      bIsInPathfinding : 1;                                     // 0x0438(0x0004)
	unsigned long                                      bUseAlternateMovePoint : 1;                               // 0x0438(0x0004) (Transient)
	unsigned long                                      bUseNonCustomAttackRangeBoosting : 1;                     // 0x0438(0x0004) (Edit)
	unsigned long                                      bDamageInterruptsAttacking : 1;                           // 0x0438(0x0004) (Edit)
	unsigned long                                      bIgnoreReturnPoint : 1;                                   // 0x0438(0x0004) (Transient)
	unsigned long                                      bForceMove : 1;                                           // 0x0438(0x0004) (Transient)
	unsigned long                                      bForceFollow : 1;                                         // 0x0438(0x0004) (Transient)
	unsigned long                                      bDoNegativeAggroForUnreachableTargets : 1;                // 0x0438(0x0004) (Edit)
	float                                              AttackRange;                                              // 0x043C(0x0004) (Edit)
	float                                              AttackInterval;                                           // 0x0440(0x0004) (Edit)
	float                                              AttackIntervalRandomPercent;                              // 0x0444(0x0004) (Edit)
	struct FName                                       AttackStateName;                                          // 0x0448(0x0008) (Edit)
	float                                              ReachTargetTimeout;                                       // 0x0450(0x0004) (Edit)
	float                                              DestroyTargetAfterReachingTimeout;                        // 0x0454(0x0004) (Edit)
	float                                              ClearIgnoreAttackRangeOffset;                             // 0x0458(0x0004) (Edit)
	float                                              PawnLocationChangeTimeout;                                // 0x045C(0x0004) (Edit)
	float                                              MaximumAttackRangeDeltaZCheck;                            // 0x0460(0x0004) (Edit)
	float                                              StuckOnBlockadeTargetingHackBoundsAddition;               // 0x0464(0x0004) (Edit)
	float                                              NavMeshArrivalDistance;                                   // 0x0468(0x0004) (Edit)
	float                                              NavMeshMoveToDestinationOffset;                           // 0x046C(0x0004) (Edit)
	float                                              MinAggroValue;                                            // 0x0470(0x0004) (Edit)
	int                                                ObstructionJumpLimit;                                     // 0x0474(0x0004) (Edit)
	TArray<class UClass*>                              DamageClassesToIgnore;                                    // 0x0478(0x000C) (Edit, NeedCtorLink)
	float                                              AggroFactorDamagePercentageMultiplier;                    // 0x0484(0x0004) (Edit)
	float                                              AttackRotationRange;                                      // 0x0488(0x0004) (Edit)
	float                                              StuckOnBlockadeTargetingHackAggroAdd;                     // 0x048C(0x0004) (Edit)
	float                                              OverrideReachCheckDuration;                               // 0x0490(0x0004) (Edit)
	float                                              FailedReachDestinationOffset;                             // 0x0494(0x0004) (Edit)
	float                                              NavActorReachableMinimumDistance;                         // 0x0498(0x0004) (Edit)
	float                                              NavMeshSpreadMultiplier;                                  // 0x049C(0x0004) (Edit)
	float                                              AddAggroFromTouchingBlockade;                             // 0x04A0(0x0004) (Edit)
	float                                              InitialTargetNodeID;                                      // 0x04A4(0x0004) (Edit)
	float                                              InitialTargetNodeSelectionRange;                          // 0x04A8(0x0004) (Edit)
	float                                              InitialMoveAllowanceTime;                                 // 0x04AC(0x0004) (Edit)
	float                                              BumpAddAgroInterval;                                      // 0x04B0(0x0004) (Edit)
	float                                              LocationSampleInterval;                                   // 0x04B4(0x0004) (Edit)
	float                                              LocationSampleMinDistance;                                // 0x04B8(0x0004) (Edit)
	struct FVector                                     ObstructionJumpSideVec;                                   // 0x04BC(0x000C) (Edit)
	struct FVector                                     ObstructionJumpFrontVec;                                  // 0x04C8(0x000C) (Edit)
	float                                              LastBlockadeCheckTime;                                    // 0x04D4(0x0004) (Transient)
	struct FName                                       CoughingAnimName;                                         // 0x04D8(0x0008) (Transient)
	class AActor*                                      LastMovingAroundBlockadeActor;                            // 0x04E0(0x0004) (Transient)
	struct FVector                                     MovingAroundBlockadePoint;                                // 0x04E4(0x000C) (Transient)
	float                                              MovingAroundBlockadeDirection;                            // 0x04F0(0x0004) (Transient)
	float                                              LastMovingAroundBlockadeTime;                             // 0x04F4(0x0004) (Transient)
	struct FVector                                     LastBlockadeHitNormal;                                    // 0x04F8(0x000C) (Transient)
	float                                              LastBlockadeWidth;                                        // 0x0504(0x0004) (Transient)
	float                                              LastAttackEndTime;                                        // 0x0508(0x0004) (Transient)
	float                                              tempAttackInterval;                                       // 0x050C(0x0004) (Transient)
	struct FVector                                     targetDestinationPosition;                                // 0x0510(0x000C) (Transient)
	TArray<TScriptInterface<class UDunDefTargetableInterface>> DarknessIgnoredTargets;                                   // 0x051C(0x000C) (Transient, NeedCtorLink)
	float                                              LastNewTargetTime;                                        // 0x0528(0x0004) (Transient)
	float                                              LastReachedNewTargetTime;                                 // 0x052C(0x0004) (Transient)
	float                                              AttackIntervalRandomizer;                                 // 0x0530(0x0004) (Transient)
	struct FVector                                     LastTimedOutPawnLocation;                                 // 0x0534(0x000C) (Transient)
	float                                              LastObstructionJumpTime;                                  // 0x0540(0x0004) (Transient)
	int                                                ObstructionJumpCount;                                     // 0x0544(0x0004) (Transient)
	struct FVector                                     lastTargetDestinationPosition;                            // 0x0548(0x000C) (Transient)
	struct FVector                                     LastCheckAttackRangePawnLocation;                         // 0x0554(0x000C) (Transient)
	struct FVector                                     LastCheckAttackRangeTargetLocation;                       // 0x0560(0x000C) (Transient)
	struct FVector                                     LastCheckAttackRangeClosestPoint;                         // 0x056C(0x000C) (Transient)
	class AActor*                                      LastCheckAttackRangeTarget;                               // 0x0578(0x0004) (Transient)
	float                                              LastLineCheckPolySearch;                                  // 0x057C(0x0004) (Transient)
	struct FVector                                     LastNavMeshPath_SearchExtent_Modifier;                    // 0x0580(0x000C) (Transient)
	float                                              ZeroSizeSearchExtentAfterSpawnTime;                       // 0x058C(0x0004) (Transient)
	float                                              LastBumpAddAgroTime;                                      // 0x0590(0x0004) (Transient)
	int                                                ObstructionDir;                                           // 0x0594(0x0004)
	class AActor*                                      InitialMoveToTarget;                                      // 0x0598(0x0004) (Transient)
	float                                              LastLocationSampleTime;                                   // 0x059C(0x0004) (Transient)
	struct FVector                                     LastSamplePawnLocation;                                   // 0x05A0(0x000C) (Transient)
	int                                                TargetingTeam;                                            // 0x05AC(0x0004) (Transient)
	struct FVector                                     StartMovingAroundBlockadeLocation;                        // 0x05B0(0x000C)
	float                                              spreadValue;                                              // 0x05BC(0x0004)
	struct FVector                                     PreviousGoalLocation;                                     // 0x05C0(0x000C)
	struct FVector                                     DesiredMovementLocation;                                  // 0x05CC(0x000C) (Transient)
	float                                              MaxFollowDistance;                                        // 0x05D8(0x0004) (Edit)
	float                                              TargetableRange;                                          // 0x05DC(0x0004) (Edit)
	TArray<class UClass*>                              NoTargetElementTypes;                                     // 0x05E0(0x000C) (Edit, NeedCtorLink)
	class AActor*                                      FriendlyFollowTarget;                                     // 0x05EC(0x0004) (Transient)
	struct FVector                                     ReturnPoint;                                              // 0x05F0(0x000C) (Transient)
	struct FName                                       currentCommandStateName;                                  // 0x05FC(0x0008) (Transient)
	float                                              lastBounceTime;                                           // 0x0604(0x0004) (Transient)
	float                                              distanceOffset;                                           // 0x0608(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEnemyController");
		return ptr;
	}


	int GetAttackDamage();
	unsigned long WithinFollowRange(class AActor* checkTarget);
	unsigned long WithinRangeOfMovementPoint(const struct FVector& MovementPoint);
	struct FVector GeneratePathToPoint(const struct FVector& GoalPoint, float WithinDistance, unsigned long bAllowPartialPath);
	unsigned long NavPointReachable(const struct FVector& V);
	unsigned long GetNearestWalkablePointFromPoint(const struct FVector& Checkpoint, unsigned long bMustBeUnderneath, unsigned long bDoLineChecks, struct FVector* Dest);
	unsigned long TestPathLength();
	class AActor* FindTargetWithinRange(const struct FVector& Checkpoint, float checkRadius, unsigned long bDontSetAsTarget);
	unsigned long IsWithinTargetableRange(class AActor* Other, const struct FVector& inRangeOfPoint, unsigned long bCheckAttackRange, float AttackRangeOffset, unsigned long bCheckDeltaZ);
	unsigned long IsWithinReturnPointRange();
	unsigned long IsCommandState();
	void SetMaxFollowRange(float newFollowRange);
	unsigned long ForceAttackTarget(class AActor* NewTarget, unsigned long bKeepStateStack);
	unsigned long SetDesiredMovementLocation(const struct FVector& NewDestination, unsigned long bAllowAttacking, unsigned long bKeepStateStack);
	unsigned long SetFollowTarget(class AActor* newFollowTarget, unsigned long bSetForceFollow);
	struct FVector GetReturnPoint();
	void SetReturnPoint(const struct FVector& newReturnPoint);
	void SetTargetableRange(float newRange);
	float GetTargetableRange(unsigned long bCheckAttackRange);
	void SetIdleEnemy(unsigned long bSetLocationAsReturnPoint, unsigned long bForce);
	unsigned long CheckValidPathNodeID(class AActor* checkActor);
	int GetTargetingTeam();
	unsigned long CanChooseUntargetableTarget(const TScriptInterface<class UDunDefTargetableInterface>& aTargetInterface);
	void EnableDarkness();
	float GetAttackInterval(class AActor* Victim);
	float GetSpreadValue();
	struct FVector GeneratePathToActor(class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath);
	unsigned long GetWalkablePoint(struct FVector* Dest);
	unsigned long NavActorReachable(class AActor* A);
	void InitNavigationHandle();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void DoAttack();
	unsigned long WantsHurtAnimation();
	void Cough(const struct FName& coughAnimName);
	void StuckNotification();
	void CheckForCustomAttacks();
	void ObstructionJump(const struct FVector& jumpForwardDir, const struct FVector& jumpSideDir);
	void CancelMoveAround();
	void TryOtherBlockadeDirection();
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	void BumpedATarget(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	unsigned long CheckMoveAroundBlockadePoint(const struct FVector& moveToPoint);
	void CancelCurrentTarget(int Reason);
	void CheckDirectReachability();
	void CheckIndirectReachability();
	unsigned long IsWithinAttackRange(class AActor* Other, float AttackRangeOffset, unsigned long bCheckDeltaZ);
	unsigned long IsWithinLineOfSight(class AActor* Other, unsigned long bIsWithinAttackRange);
	void PawnDied(class APawn* inPawn);
	void SetTarget(class AActor* NewTarget, unsigned long bDontClearIgnoreList);
	TScriptInterface<class UDunDefTargetableInterface> GetATarget(const TScriptInterface<class UDunDefTargetableInterface>& ignoreTarget, unsigned long ReturnIgnoreTargetIfNoOthers, TArray<TScriptInterface<class UDunDefTargetableInterface>>* theIgnoreTargets);
	void Destroyed();
	float GetReachCheckDuration();
	unsigned long IsValidTarget(const TScriptInterface<class UDunDefTargetableInterface>& testTarget);
	void AddActorTargetingMultiplier(const struct FActorTargetingMultiplier& actorMult);
	unsigned long IsWithinTargetingPreventionVolume(class AActor* testTarget);
	void AddToAggro(const TScriptInterface<class UDunDefTargetableInterface>& Attacker, float DamagePercent);
	void UpdateAggro();
	void ClearAggro();
	float GetToolTipAttackRange();
	float GetAttackRange();
	unsigned long AllowMovingAroundPawn();
	unsigned long IgnoreDamageByClass(class AActor* damagee);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	float GetGlobalSpreadValue();
	void PostSpawnTargetingTeam();
	void Possess(class APawn* inPawn, unsigned long bVehicleTransition);
	void PostBeginPlay();
	void InitialMoveTimeOut();
	unsigned long OnlyDrawHUDForOwner();
};


// Class UDKGame.DunDef_SeqVar_EnemyWaveEntries
// 0x0054 (0x00E8 - 0x0094)
class UDunDef_SeqVar_EnemyWaveEntries : public USequenceVariable
{
public:
	TArray<struct FEnemyWaveEntry>                     EnemyWaveEntries;                                         // 0x0094(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefEnemy*>                        MixDisallowedEnemyArchetypes;                             // 0x00A0(0x000C) (Edit, NeedCtorLink)
	TArray<class ADunDefEnemy*>                        MixAdditionalEnemyArchetypes;                             // 0x00AC(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              MixDisallowedEnemyClasses;                                // 0x00B8(0x000C) (Edit, NeedCtorLink)
	float                                              MixPercentChanceForElemental;                             // 0x00C4(0x0004) (Edit)
	float                                              MixDifficultyOffsetRandomFactor;                          // 0x00C8(0x0004) (Edit)
	float                                              MixNumberOfEnemiesRandomFactor;                           // 0x00CC(0x0004) (Edit)
	float                                              MixTimeOfWaveRandomFactor;                                // 0x00D0(0x0004) (Edit)
	unsigned long                                      MixAllowRandomEnemyTemplate : 1;                          // 0x00D4(0x0004) (Edit)
	unsigned long                                      MixDisable : 1;                                           // 0x00D4(0x0004) (Edit)
	unsigned long                                      bMixDontRandomize : 1;                                    // 0x00D4(0x0004) (Edit)
	TArray<struct FEnemyWaveEntry>                     MixBackupEnemyWaveEntries;                                // 0x00D8(0x000C) (Transient, NeedCtorLink)
	int                                                MixLastPhaseCycleID;                                      // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqVar_EnemyWaveEntries");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqAct_FinishedWaveScaling
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_FinishedWaveScaling : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_FinishedWaveScaling");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GameLogicInt
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GameLogicInt : public USequenceAction
{
public:
	unsigned long                                      bSetGameLogicInt : 1;                                     // 0x00E8(0x0004) (Edit)
	int                                                GameLogicIntIndex;                                        // 0x00EC(0x0004) (Edit)
	int                                                GameLogicIntValue;                                        // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GameLogicInt");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GameOver
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_GameOver : public USequenceAction
{
public:
	int                                                theGameOverReason;                                        // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GameOver");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GameplayMovie
// 0x0008 (0x0100 - 0x00F8)
class UDunDef_SeqAct_GameplayMovie : public USeqAct_Latent
{
public:
	int                                                AdditionalMovieID;                                        // 0x00F8(0x0004) (Edit)
	unsigned long                                      justEnabled : 1;                                          // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GameplayMovie");
		return ptr;
	}


	unsigned long Update(float DeltaTime);
};


// Class UDKGame.DunDef_SeqAct_GetCampaignLevelObject
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetCampaignLevelObject : public USequenceAction
{
public:
	struct FString                                     LevelFriendlyName;                                        // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetCampaignLevelObject");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetCurrentDuCount
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_GetCurrentDuCount : public USequenceAction
{
public:
	unsigned long                                      GetMUinstead : 1;                                         // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetCurrentDuCount");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetGameInfo
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_GetGameInfo : public USequenceAction
{
public:
	unsigned long                                      bReturnGRI : 1;                                           // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetGameInfo");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetGameSettings
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetGameSettings : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetGameSettings");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetMissionSwitchValue
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetMissionSwitchValue : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetMissionSwitchValue");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetNumItemBoxItems
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetNumItemBoxItems : public USequenceAction
{
public:
	unsigned long                                      bConsumeItems : 1;                                        // 0x00E8(0x0004) (Edit)
	int                                                NumItemsToConsume;                                        // 0x00EC(0x0004) (Edit)
	class UHeroEquipment*                              EquipmentTemplate;                                        // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetNumItemBoxItems");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetRandomInt
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_GetRandomInt : public USequenceAction
{
public:
	int                                                Min;                                                      // 0x00E8(0x0004) (Edit)
	int                                                Max;                                                      // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetRandomInt");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetStartWave
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetStartWave : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetStartWave");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetTouchingActors
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GetTouchingActors : public USequenceAction
{
public:
	unsigned long                                      bUseBaseActorClass : 1;                                   // 0x00E8(0x0004) (Edit)
	class UClass*                                      ActorClassType;                                           // 0x00EC(0x0004) (Edit)
	class AActor*                                      aToucher;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetTouchingActors");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GetWaveCompletionPercent
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_GetWaveCompletionPercent : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GetWaveCompletionPercent");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GiveEquipmentToPlayers
// 0x002C (0x0114 - 0x00E8)
class UDunDef_SeqAct_GiveEquipmentToPlayers : public USequenceAction
{
public:
	TArray<struct FGiveEquipmentEntry>                 GiveEquipmentEntries;                                     // 0x00E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bGiveToEveryone : 1;                                      // 0x00F4(0x0004) (Edit)
	unsigned long                                      bNotifyUser : 1;                                          // 0x00F4(0x0004) (Edit)
	unsigned long                                      bAutoLockEquipment : 1;                                   // 0x00F4(0x0004) (Edit)
	unsigned long                                      bForceEquipmentIntoItemBox : 1;                           // 0x00F4(0x0004) (Edit)
	unsigned long                                      bOnlyGiveToUniqueProfile : 1;                             // 0x00F4(0x0004) (Edit)
	unsigned long                                      bOnlyGiveToPrimaryLocalPlayer : 1;                        // 0x00F4(0x0004) (Edit)
	unsigned long                                      bUseNightmareRandomizerMultiplier : 1;                    // 0x00F4(0x0004) (Edit)
	unsigned long                                      bAllowTranscendentGear : 1;                               // 0x00F4(0x0004) (Edit)
	unsigned long                                      bForceGiveEquipmentEvenOnFirstWave : 1;                   // 0x00F4(0x0004) (Edit)
	unsigned long                                      bChooseRandomRewardEntry : 1;                             // 0x00F4(0x0004) (Edit)
	unsigned long                                      bChooseThebestReward : 1;                                 // 0x00F4(0x0004) (Edit)
	unsigned long                                      FactorUpgradesForBestReward : 1;                          // 0x00F4(0x0004) (Edit)
	class USoundCue*                                   GivenEquipmentSound;                                      // 0x00F8(0x0004) (Edit)
	float                                              NightmareRandomizerMultiplier;                            // 0x00FC(0x0004) (Edit)
	float                                              HardcoreRandomizerMultiplier;                             // 0x0100(0x0004) (Edit)
	float                                              ExtraInsaneRandomizerMultiplier;                          // 0x0104(0x0004) (Edit)
	float                                              ExtraInsaneHardcoreRandomizerMultiplier;                  // 0x0108(0x0004) (Edit)
	float                                              HardcoreMinimumTranscendentRandomizerMultiplier;          // 0x010C(0x0004) (Edit)
	int                                                NumberOfRewardsToChooseFrom;                              // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GiveEquipmentToPlayers");
		return ptr;
	}


	void GiveEquipment(class ADunDefPlayerController* PC);
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GlobalHUDMessage
// 0x0028 (0x0110 - 0x00E8)
class UDunDef_SeqAct_GlobalHUDMessage : public USequenceAction
{
public:
	struct FString                                     theString;                                                // 0x00E8(0x000C) (Edit, NeedCtorLink)
	int                                                FontSize;                                                 // 0x00F4(0x0004) (Edit)
	struct FLinearColor                                msgColor;                                                 // 0x00F8(0x0010) (Edit)
	float                                              TimeToDisplay;                                            // 0x0108(0x0004) (Edit)
	int                                                ForTeam;                                                  // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GlobalHUDMessage");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_GotoURL
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_GotoURL : public USequenceAction
{
public:
	struct FString                                     URLToVisit;                                               // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_GotoURL");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_HasPendingInvite
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqAct_HasPendingInvite : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_HasPendingInvite");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_KeyboardConsoleCommand
// 0x0010 (0x0108 - 0x00F8)
class UDunDef_SeqAct_KeyboardConsoleCommand : public USeqAct_Latent
{
public:
	unsigned long                                      RunCompareToString : 1;                                   // 0x00F8(0x0004) (Edit)
	unsigned long                                      TransformString : 1;                                      // 0x00F8(0x0004) (Edit)
	unsigned long                                      bSetConsoleCommandHack : 1;                               // 0x00F8(0x0004) (Edit)
	unsigned long                                      bKeyboardReturn : 1;                                      // 0x00F8(0x0004) (Transient)
	unsigned long                                      bKeyboardFail : 1;                                        // 0x00F8(0x0004) (Transient)
	struct FString                                     compareString;                                            // 0x00FC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_KeyboardConsoleCommand");
		return ptr;
	}


	void ShowUIKeyboard();
	void KeyboardInputDone(unsigned long Success);
	unsigned long Update(float DeltaTime);
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_KillAllEnemies
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_KillAllEnemies : public USequenceAction
{
public:
	float                                              pctToKill;                                                // 0x00E8(0x0004) (Edit)
	unsigned long                                      bUseSpecificKillType : 1;                                 // 0x00EC(0x0004) (Edit)
	class UClass*                                      KillType;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_KillAllEnemies");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDefDamageType_ForceKill
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ForceKill : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_ForceKill");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqAct_LevelVictory
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_LevelVictory : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_LevelVictory");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_LoadLevel
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_LoadLevel : public USequenceAction
{
public:
	struct FString                                     LevelName;                                                // 0x00E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      ProceedToNextGameplayLevel : 1;                           // 0x00F4(0x0004) (Edit)
	unsigned long                                      IsGameplayLevel : 1;                                      // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_LoadLevel");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_LockContent
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_LockContent : public USequenceAction
{
public:
	unsigned long                                      bLockLevel : 1;                                           // 0x00E8(0x0004) (Edit)
	struct FString                                     MissionTag;                                               // 0x00EC(0x000C) (Edit, NeedCtorLink)
	class UDunDefHero*                                 aHeroTemplate;                                            // 0x00F8(0x0004) (Edit)
	int                                                costumeIndex;                                             // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_LockContent");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_OpenBuildUI
// 0x0014 (0x010C - 0x00F8)
class UDunDef_SeqAct_OpenBuildUI : public USeqAct_Latent
{
public:
	class UUI_BuildTimer*                              BuildUITemplate;                                          // 0x00F8(0x0004) (Edit)
	float                                              BuildTime;                                                // 0x00FC(0x0004) (Edit)
	float                                              BuildTimeExtraMultiplier;                                 // 0x0100(0x0004) (Edit)
	class UUI_BuildTimer*                              InstanceBuildUI;                                          // 0x0104(0x0004)
	unsigned long                                      IsTimerFinished : 1;                                      // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_OpenBuildUI");
		return ptr;
	}


	void BuildTimerFinished();
	unsigned long Update(float DeltaTime);
	void Reset();
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_OpenKillCountUI
// 0x0010 (0x0108 - 0x00F8)
class UDunDef_SeqAct_OpenKillCountUI : public USeqAct_Latent
{
public:
	class UUI_KillCount*                               KillCountUITemplate;                                      // 0x00F8(0x0004) (Edit)
	unsigned long                                      CloseUIWhenCompletedKillCount : 1;                        // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUseRegisteredWaveEntries : 1;                            // 0x00FC(0x0004) (Edit)
	unsigned long                                      bForceTotalKillCount : 1;                                 // 0x00FC(0x0004) (Edit)
	unsigned long                                      IsAllKilled : 1;                                          // 0x00FC(0x0004)
	unsigned long                                      bIgnoreAllKilled : 1;                                     // 0x00FC(0x0004)
	int                                                ForceTotalKillCount;                                      // 0x0100(0x0004) (Edit)
	class UUI_KillCount*                               InstanceKillCountUI;                                      // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_OpenKillCountUI");
		return ptr;
	}


	void AllKilled();
	unsigned long Update(float DeltaTime);
	void Reset();
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_PauseGame
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_PauseGame : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_PauseGame");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_PlayerCountSwitch
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_PlayerCountSwitch : public USequenceAction
{
public:
	unsigned long                                      OnlyCountLocalPlayers : 1;                                // 0x00E8(0x0004) (Edit)
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                              // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_PlayerCountSwitch");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_RateLimiter
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_RateLimiter : public USequenceAction
{
public:
	float                                              RefireTimeLimit;                                          // 0x00E8(0x0004) (Edit)
	float                                              LastSuccessfulActivationTime;                             // 0x00EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_RateLimiter");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_RefreshWaveEntries
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_RefreshWaveEntries : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_RefreshWaveEntries");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_RegisterEnemyWaveEntry
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_RegisterEnemyWaveEntry : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_RegisterEnemyWaveEntry");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ResetEnemyWaveEntries
// 0x0008 (0x0100 - 0x00F8)
class UDunDef_SeqAct_ResetEnemyWaveEntries : public USeqAct_Latent
{
public:
	class UDunDef_SeqVar_EnemyWaveEntries*             TheEnemyWaveEntries;                                      // 0x00F8(0x0004)
	int                                                lockAttempts;                                             // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ResetEnemyWaveEntries");
		return ptr;
	}


	unsigned long Update(float DeltaTime);
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_RessurectPlayers
// 0x0020 (0x0108 - 0x00E8)
class UDunDef_SeqAct_RessurectPlayers : public USequenceAction
{
public:
	int                                                waveNumber;                                               // 0x00E8(0x0004) (Edit)
	int                                                WaveIntervalForCoreHeal;                                  // 0x00EC(0x0004) (Edit)
	unsigned long                                      bForceHealCore : 1;                                       // 0x00F0(0x0004) (Edit)
	unsigned long                                      bForceNoHealingCore : 1;                                  // 0x00F0(0x0004) (Edit)
	struct FLinearColor                                NotificationColor;                                        // 0x00F4(0x0010) (Edit)
	class ADunDefEmitterSpawnable*                     HealPlayerEffect;                                         // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_RessurectPlayers");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SaveHeroes
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_SaveHeroes : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SaveHeroes");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ScaleEnemyWave
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_ScaleEnemyWave : public USequenceAction
{
public:
	float                                              NumEnemiesScalar;                                         // 0x00E8(0x0004) (Edit)
	float                                              WaveIntervalScalar;                                       // 0x00EC(0x0004) (Edit)
	float                                              NumGroupsScalar;                                          // 0x00F0(0x0004) (Edit)
	float                                              DifficultySetOffset;                                      // 0x00F4(0x0004) (Edit)
	int                                                AbsoluteMaximumNumberOfEnemiesPerEntry;                   // 0x00F8(0x0004) (Edit)
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                              // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ScaleEnemyWave");
		return ptr;
	}


	void Activated();
	float GetTotalWaveTime(TArray<struct FEnemyWaveEntry>* waveEntries);
};


// Class UDKGame.DunDef_SeqAct_ScaleFloatForPlayerCount
// 0x0040 (0x0128 - 0x00E8)
class UDunDef_SeqAct_ScaleFloatForPlayerCount : public USequenceAction
{
public:
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOverrideIdentityArray : 1;                               // 0x00E8(0x0004) (Edit)
	TArray<float>                                      ScaleValueForNumberOfPlayers;                             // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      IdentityArray1;                                           // 0x00F8(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      OverridenIdentityArray1;                                  // 0x0104(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      IdentityArray2;                                           // 0x0110(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      OverridenIdentityArray2;                                  // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ScaleFloatForPlayerCount");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ScaleIntForPlayerCount
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_ScaleIntForPlayerCount : public USequenceAction
{
public:
	unsigned long                                      OnlyCountSpawnedPlayers : 1;                              // 0x00E8(0x0004) (Edit)
	TArray<float>                                      ScaleValueForNumberOfPlayers;                             // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ScaleIntForPlayerCount");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetActorCollision
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetActorCollision : public USequenceAction
{
public:
	unsigned long                                      bNewBlockActors : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bNewCollideActors : 1;                                    // 0x00E8(0x0004) (Edit)
	unsigned long                                      bNewIgnoreEncroachers : 1;                                // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetActorCollision");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetAllowPlayerSpawns
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetAllowPlayerSpawns : public USequenceAction
{
public:
	unsigned long                                      bAllowPlayerSpawns : 1;                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetAllowPlayerSpawns");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetCheckboxWithLabelValue
// 0x0014 (0x0100 - 0x00EC)
class UDunDef_SeqAct_SetCheckboxWithLabelValue : public UUIAction
{
public:
	class UUICheckbox*                                 checkbox;                                                 // 0x00EC(0x0004) (Edit)
	class UUILabel*                                    Label;                                                    // 0x00F0(0x0004) (Edit)
	struct FString                                     NewString;                                                // 0x00F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetCheckboxWithLabelValue");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetCombatPhase
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetCombatPhase : public USequenceAction
{
public:
	unsigned long                                      bCombatPhase : 1;                                         // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetCombatPhase");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetCursorPosition
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_SetCursorPosition : public USequenceAction
{
public:
	struct FVector                                     CursorPosXY;                                              // 0x00E8(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetCursorPosition");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetDifficulty
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetDifficulty : public USequenceAction
{
public:
	TEnumAsByte<EGameDifficulty>                       newDifficulty;                                            // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	unsigned long                                      bHardcoreMode : 1;                                        // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetDifficulty");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetDTDamageMultiplier
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetDTDamageMultiplier : public USequenceAction
{
public:
	class ADunDefDamageableTarget*                     DTActor;                                                  // 0x00E8(0x0004) (Edit)
	float                                              DTDamageMultiplier;                                       // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetDTDamageMultiplier");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetFinalWaveNumber
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetFinalWaveNumber : public USequenceAction
{
public:
	int                                                FinalWaveNumber;                                          // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetFinalWaveNumber");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetHidden
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetHidden : public USequenceAction
{
public:
	class AActor*                                      TargetActor;                                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      bHide : 1;                                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      bToggle : 1;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetHidden");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.ReplicatedInterpActor
// 0x0004 (0x0258 - 0x0254)
class AReplicatedInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      ReplicatedHidden : 1;                                     // 0x0254(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ReplicatedInterpActor");
		return ptr;
	}


	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDef_SeqAct_SetHiddenEnemyIcons
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetHiddenEnemyIcons : public USequenceAction
{
public:
	unsigned long                                      bDisableEnemyIcons : 1;                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetHiddenEnemyIcons");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetKeyBinding
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_SetKeyBinding : public USequenceAction
{
public:
	struct FName                                       KeyName;                                                  // 0x00E8(0x0008) (Edit)
	struct FString                                     Command;                                                  // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetKeyBinding");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetMaxFramerate
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetMaxFramerate : public USequenceAction
{
public:
	float                                              MaxFramerate;                                             // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetMaxFramerate");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetMaximumNumberOfEnemies
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_SetMaximumNumberOfEnemies : public USequenceAction
{
public:
	TArray<int>                                        MaximumNumberOfEnemies;                                   // 0x00E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bFixedSet : 1;                                            // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetMaximumNumberOfEnemies");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetMissionObjectiveText
// 0x0010 (0x00F8 - 0x00E8)
class UDunDef_SeqAct_SetMissionObjectiveText : public USequenceAction
{
public:
	struct FLinearColor                                MissionObjectiveColor;                                    // 0x00E8(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetMissionObjectiveText");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetMixEnemies
// 0x0018 (0x0100 - 0x00E8)
class UDunDef_SeqAct_SetMixEnemies : public USequenceAction
{
public:
	TArray<class ADunDefEnemy*>                        MixEnemyArchetypes;                                       // 0x00E8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMixEnemyDifficultyThreshold>        MixEnemyDifficultyThresholds;                             // 0x00F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetMixEnemies");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetNightmareUnlocked
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetNightmareUnlocked : public USequenceAction
{
public:
	unsigned long                                      bSetUnlocked : 1;                                         // 0x00E8(0x0004) (Edit)
	unsigned long                                      bActuallyDoSet : 1;                                       // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetNightmareUnlocked");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetProjectileDistanceLimit
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetProjectileDistanceLimit : public USequenceAction
{
public:
	unsigned long                                      bLimitProjectileDistance : 1;                             // 0x00E8(0x0004) (Edit)
	unsigned long                                      bLimitTowerProjectileDistance : 1;                        // 0x00E8(0x0004) (Edit)
	unsigned long                                      bLimitProjectileDistancesUsePlayerRangeMultiplier : 1;    // 0x00E8(0x0004) (Edit)
	float                                              ProjectileDistanceLimit;                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetProjectileDistanceLimit");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetSkeletalMesh
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               aSkeletalMesh;                                            // 0x00E8(0x0004) (Edit)
	class AActor*                                      anActor;                                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetSkeletalMesh");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetSpeedyBuild
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetSpeedyBuild : public USequenceAction
{
public:
	unsigned long                                      bSpeedyBuild : 1;                                         // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetSpeedyBuild");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetTowerUnits
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetTowerUnits : public USequenceAction
{
public:
	int                                                newTowerUnits;                                            // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetTowerUnits");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.UI_MainMenu
// 0x0108 (0x0744 - 0x063C)
class UUI_MainMenu : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          PlayButton;                                               // 0x063C(0x0004) (Edit)
	class UUIButton_Scripted*                          MultiplayerButton;                                        // 0x0640(0x0004) (Edit)
	class UUIButton_Scripted*                          BuyFullGameButton;                                        // 0x0644(0x0004) (Edit)
	class UUIButton_Scripted*                          DLCButton;                                                // 0x0648(0x0004) (Edit)
	class UUIButton_Scripted*                          ExitButton;                                               // 0x064C(0x0004) (Edit)
	class UUIObject*                                   CreditsButton;                                            // 0x0650(0x0004) (Edit)
	class UUILabelButton*                              OptionsButton;                                            // 0x0654(0x0004) (Edit)
	class UUILabelButton*                              StatsButton;                                              // 0x0658(0x0004) (Edit)
	class UUI_NetworkMultiplayer*                      NetworkMultiplayerUITemplate;                             // 0x065C(0x0004) (Edit)
	class UUI_CharacterSelect*                         CharacterSelectScene;                                     // 0x0660(0x0004) (Edit)
	class UUI_CharacterSelect*                         CharacterSelectScene3D;                                   // 0x0664(0x0004) (Edit)
	class USoundCue*                                   CloseCue;                                                 // 0x0668(0x0004) (Edit)
	float                                              OptionsMenuDelay;                                         // 0x066C(0x0004) (Edit)
	class UUI_OptionsMenu*                             OptionsMenuScene;                                         // 0x0670(0x0004) (Edit)
	class UUI_GameSpyLogin*                            LoginScene;                                               // 0x0674(0x0004) (Edit)
	class UUI_TitleScreen*                             TitleScene;                                               // 0x0678(0x0004) (Edit)
	float                                              TitleSceneDelay;                                          // 0x067C(0x0004) (Edit)
	struct FName                                       AnimatedLogoTag;                                          // 0x0680(0x0008) (Edit)
	unsigned long                                      bDontAllowBackToTitleScreen : 1;                          // 0x0688(0x0004) (Transient)
	struct FString                                     MSG_UnlockGame;                                           // 0x068C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_UnlockGameDescription;                                // 0x0698(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_OnlineNotSupported;                                   // 0x06A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_OnlineNotSupportedDescription;                        // 0x06B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RedeemSteamCodeString;                                    // 0x06BC(0x000C) (Localized, NeedCtorLink)
	float                                              OptionsMenuTimer;                                         // 0x06C8(0x0004)
	float                                              TitleSceneTimer;                                          // 0x06CC(0x0004)
	class ULocalPlayer*                                OptionsMenuPlayer;                                        // 0x06D0(0x0004)
	float                                              BlendTitleOpenTimer;                                      // 0x06D4(0x0004)
	float                                              LogoHideTimer;                                            // 0x06D8(0x0004)
	struct FString                                     StatisticsString;                                         // 0x06DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LeaderboardString;                                        // 0x06E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DLCString;                                                // 0x06F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FullVersionString;                                        // 0x0700(0x000C) (Localized, NeedCtorLink)
	float                                              DeadZone;                                                 // 0x070C(0x0004)
	float                                              AxisRepeatDelay;                                          // 0x0710(0x0004)
	struct FmyUIKeyRepeatData                          controllerInputs[0x4];                                    // 0x0714(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_MainMenu");
		return ptr;
	}


	void UIPostRender(class UCanvas* Canvas);
	void HideLogos();
	void SceneDeactivated();
	float PlayDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void NotifyLinkStatusChanged(unsigned long bConnected);
	unsigned long NotifyLoginStatusChanged(int ControllerId, TEnumAsByte<ELoginStatus> NewStatus);
	unsigned long OnReceivedInputAxis(struct FInputEventParameters* EventParms);
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long UnlockFullGame(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	int LiveSignInValidation(int ControllerId);
	void OpenOptions(class ULocalPlayer* forWho);
	void PlayGame();
	void UpdateNetworkButtonState(unsigned long bDoForceValue, unsigned long bForcedValue);
	void SceneActivated(unsigned long bInitialActivation);
	void SetLastControl(class UUIObject* theControl);
	void RefocusLastControl();
};


// Class UDKGame.DunDefToolTipInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefToolTipInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefToolTipInterface");
		return ptr;
	}


	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
};


// Class UDKGame.TradeManager
// 0x00D4 (0x02F0 - 0x021C)
class ATradeManager : public AActor
{
public:
	TArray<class UHeroEquipment*>                      Trader1HeroEquipments;                                    // 0x021C(0x000C) (NeedCtorLink)
	TArray<class UHeroEquipment*>                      Trader2HeroEquipments;                                    // 0x0228(0x000C) (NeedCtorLink)
	class APlayerReplicationInfo*                      Trader1;                                                  // 0x0234(0x0004) (Net)
	class APlayerReplicationInfo*                      Trader2;                                                  // 0x0238(0x0004) (Net)
	class APlayerReplicationInfo*                      AutoOpenForTrader;                                        // 0x023C(0x0004) (Net)
	struct FString                                     MSG_InitiateTradeWithYou;                                 // 0x0240(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_TradeWith;                                            // 0x024C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_HasBeenCancelled;                                     // 0x0258(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_HasBeenCompleted;                                     // 0x0264(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_YouHaveInitiatedTradeWith;                            // 0x0270(0x000C) (Localized, NeedCtorLink)
	struct FColor                                      TradeWithYouColor;                                        // 0x027C(0x0004)
	class UUI_Trade*                                   TradeSceneTemplate;                                       // 0x0280(0x0004) (Edit)
	float                                              SendManaInterval;                                         // 0x0284(0x0004) (Edit)
	class USoundCue*                                   TradeInitiatedSound;                                      // 0x0288(0x0004) (Edit)
	class USoundCue*                                   TradeConfirmedSound;                                      // 0x028C(0x0004) (Edit)
	class USoundCue*                                   TradeUnconfirmedSound;                                    // 0x0290(0x0004) (Edit)
	class USoundCue*                                   TradeCancelledSound;                                      // 0x0294(0x0004) (Edit)
	class USoundCue*                                   TradeCompletedSound;                                      // 0x0298(0x0004) (Edit)
	class UUI_Trade*                                   tradeScene1;                                              // 0x029C(0x0004)
	class UUI_Trade*                                   tradeScene2;                                              // 0x02A0(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x02A4(0x0004) (Transient)
	unsigned long                                      Trader1FinalConfirmed : 1;                                // 0x02A4(0x0004) (Transient)
	unsigned long                                      Trader2FinalConfirmed : 1;                                // 0x02A4(0x0004) (Transient)
	unsigned long                                      bSentFinalTradeConfirmation : 1;                          // 0x02A4(0x0004) (Transient)
	unsigned long                                      Trader1Confirmed : 1;                                     // 0x02A4(0x0004) (Net)
	unsigned long                                      Trader2Confirmed : 1;                                     // 0x02A4(0x0004) (Net)
	unsigned long                                      bTrader1Executed : 1;                                     // 0x02A4(0x0004) (Transient)
	unsigned long                                      bTrader2Executed : 1;                                     // 0x02A4(0x0004) (Transient)
	struct FHighDigitInt                               Trader1Mana;                                              // 0x02A8(0x0010) (Net)
	struct FHighDigitInt                               Trader2Mana;                                              // 0x02B8(0x0010) (Net)
	struct FHighDigitInt                               LastSentTrader1Mana;                                      // 0x02C8(0x0010)
	struct FHighDigitInt                               LastSentTrader2Mana;                                      // 0x02D8(0x0010)
	float                                              LastSentTrader1ManaTime;                                  // 0x02E8(0x0004)
	float                                              LastSentTrader2ManaTime;                                  // 0x02EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.TradeManager");
		return ptr;
	}


	struct FHighDigitInt ClampItemBoxInfo(const struct FHighDigitInt& Value, const struct FHighDigitInt& Min, const struct FHighDigitInt& Max);
	unsigned long GetFinalTradeConfirmation(class APlayerReplicationInfo* aTrader);
	unsigned long GetTradeConfirmation(class APlayerReplicationInfo* aTrader);
	unsigned long IsPlayerInTrade(class APlayerReplicationInfo* PRI);
	unsigned long AllowAddingMoreEquipments(class APlayerReplicationInfo* aTrader);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void CancelTrade();
	void InitializeDD();
	void CloseTradeScenes();
	void Destroyed();
	void SetTradeConfirmation(class APlayerReplicationInfo* forTrader, unsigned long bConfirm);
	void RefreshTradeUI();
	void SetTradeMana(class APlayerReplicationInfo* PRI, const struct FHighDigitInt& mana);
	unsigned long GetConfirmation(class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex);
	struct FHighDigitInt GetTradeMana(class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex);
	int GetTraderIndex(class APlayerReplicationInfo* PRI, unsigned long bReturnOtherIndex);
	void TradeSceneClosed(class UUI_Trade* TradeScene);
	void ShowTradeUI(class APlayerReplicationInfo* forTrader, unsigned char ForceSceneStackPriority);
	unsigned long IsInTrade(struct FEquipmentNetInfo* netInfo);
	void LocalAddHeroEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void LocalRemoveHeroEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void LocalUpdateHeroEquipment(class APlayerReplicationInfo* forTrader, const struct FEquipmentNetInfo& netInfo);
	void UpdateLocalTradingInfo(class APlayerReplicationInfo* forTrader, unsigned long bIsFinalConfirmed, unsigned long bDontCheckMana, TArray<class UHeroEquipment*>* HeroEquipments, struct FHighDigitInt* traderMana, struct FHighDigitInt* lastSentTraderMana, float* lastSentTraderManaTime);
	void PostBeginPlay();
	class ADunDefPlayerReplicationInfo* GetOtherTrader(class APlayerReplicationInfo* PRI);
	void RemoveLocalTradeItems(class APlayerReplicationInfo* forTrader);
	unsigned long LocalFinalConfirmTrade(class APlayerReplicationInfo* forTrader);
	void ExecuteTrade(class APlayerReplicationInfo* forTrader);
	void AcknowledgeFinalTradeConfirmation(class ADunDefPlayerReplicationInfo* forTrader);
	void SendFinalTradeConfirmation();
	void Tick(float DeltaTime);
	void UpdateHeroEquipment(class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info);
	void RemoveHeroEquipment(class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info);
	void AddHeroEquipment(class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* Info);
	unsigned long IsEquipmentIDInTrade(int EquipmentID1, int EquipmentID2);
	int GetTradeEquipmentIndex(class APlayerReplicationInfo* forTrader, struct FEquipmentNetInfo* tInfo);
	void ReplicatedEvent(const struct FName& VarName);
	void ResetTradeConfirmations();
	TArray<TScriptInterface<class UDataListEntryInterface>> GetDataListEntries(int dataSetType, int PlayerIndex, int FolderID);
};


// Class UDKGame.UI_HeroSelection
// 0x00A8 (0x06E4 - 0x063C)
class UUI_HeroSelection : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           HeroDataList;                                             // 0x063C(0x0004) (Edit)
	class UUIButton*                                   ConfirmButton;                                            // 0x0640(0x0004) (Edit)
	class UUIButton*                                   DeleteButton;                                             // 0x0644(0x0004) (Edit)
	class UUIButton*                                   InfoButton;                                               // 0x0648(0x0004) (Edit)
	class UUIButton*                                   CreateNewHeroButton;                                      // 0x064C(0x0004) (Edit)
	class UUIButton*                                   ExitGameButton;                                           // 0x0650(0x0004) (Edit)
	class UUIButton*                                   EditHeroButton;                                           // 0x0654(0x0004) (Edit)
	class UUIButton*                                   CustomizeCoreButton;                                      // 0x0658(0x0004) (Edit)
	class UUIButton*                                   SelectProfileButton;                                      // 0x065C(0x0004) (Edit)
	class UDunDefUIScene*                              CreateHeroInGameUIScene;                                  // 0x0660(0x0004) (Edit)
	class USoundCue*                                   SelectHeroSound;                                          // 0x0664(0x0004) (Edit)
	class USoundCue*                                   DeleteHeroSound;                                          // 0x0668(0x0004) (Edit)
	struct FName                                       LostTopSceneAnimation;                                    // 0x066C(0x0008) (Edit)
	struct FName                                       GainedTopSceneAnimation;                                  // 0x0674(0x0008) (Edit)
	struct FString                                     CancelString;                                             // 0x067C(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIButton*                                   CancelDeletionButton;                                     // 0x0688(0x0004) (Edit)
	class UUIButton*                                   ConfirmDeletionButton;                                    // 0x068C(0x0004) (Edit)
	class UUIObject*                                   DeletionPanel;                                            // 0x0690(0x0004) (Edit)
	class UUILabel*                                    DeletionHeroNameLabel;                                    // 0x0694(0x0004) (Edit)
	class UUILabel*                                    PlayerNameLabel;                                          // 0x0698(0x0004) (Edit)
	TArray<class UUIObject*>                           ConfirmationButtons;                                      // 0x069C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       AnimShowDeletionConfirmation;                             // 0x06A8(0x0008) (Edit)
	struct FName                                       AnimHideDeletionConfirmation;                             // 0x06B0(0x0008) (Edit)
	class UUIImage*                                    ControllerImage;                                          // 0x06B8(0x0004) (Edit)
	TArray<class USurface*>                            gamepadImages;                                            // 0x06BC(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    keyboardImage;                                            // 0x06C8(0x0004) (Edit)
	unsigned long                                      bShowingDeletionConfirmation : 1;                         // 0x06CC(0x0004)
	unsigned long                                      bPlayedTopSceneAnimation : 1;                             // 0x06CC(0x0004)
	unsigned long                                      ConfirmedHero : 1;                                        // 0x06CC(0x0004)
	unsigned long                                      ChangingUser : 1;                                         // 0x06CC(0x0004)
	unsigned long                                      RefreshHeroListOnUpdate : 1;                              // 0x06CC(0x0004)
	unsigned long                                      bIsInCancelMode : 1;                                      // 0x06CC(0x0004)
	unsigned long                                      bSwappingHeroes : 1;                                      // 0x06CC(0x0004) (Transient)
	class UDunDefHero*                                 StartingHero;                                             // 0x06D0(0x0004)
	int                                                FocusCounter;                                             // 0x06D4(0x0004)
	float                                              ShowCreateHeroTimer;                                      // 0x06D8(0x0004)
	TScriptInterface<class UDataListEntryInterface>    SwappingHero;                                             // 0x06DC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_HeroSelection");
		return ptr;
	}


	void ShowCharacterSelectionCreateHero();
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SelectHeroNumber(int Num);
	void DeleteSelectedHero();
	unsigned long HandleConfirmation();
	void InstantChooseHero(int HeroOffset);
	void RefreshedList();
	void RefreshHeroList(class UDunDefHero* defaultSelectedHero);
	void PrepareToRefreshHeroList();
	void EditCurrentHero();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void HeroEntrySelected(class UUIButton_DataListEntry* Button);
	void PostInitialSceneUpdate();
	void SceneActivated(unsigned long bInitialActivation);
	class UDunDefHeroManager* GetHeroManager();
};


// Class UDKGame.DunDefActivatableInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefActivatableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefActivatableInterface");
		return ptr;
	}


	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
};


// Class UDKGame.HeroEquipmentManualReplicationInterface
// 0x0000 (0x003C - 0x003C)
class UHeroEquipmentManualReplicationInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipmentManualReplicationInterface");
		return ptr;
	}


	void ClientProcessEquipmentManualReplication(int AdditionalData1, int AdditionalData2, int AdditionalData3, struct FEquipmentNetInfo* equipmentInfo);
};


// Class UDKGame.DunDefManualReplicationInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefManualReplicationInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefManualReplicationInterface");
		return ptr;
	}


	void ReplicateToNewPlayerController(class ADunDefPlayerController* PC);
};


// Class UDKGame.UI_Spectating
// 0x0008 (0x0644 - 0x063C)
class UUI_Spectating : public UDunDefUIScene
{
public:
	class UUILabel*                                    MainWaitLabel;                                            // 0x063C(0x0004) (Edit)
	class UUILabel*                                    SpectateeLabel;                                           // 0x0640(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_Spectating");
		return ptr;
	}


	void CloseWithAnimation();
	void NotifyGameOver();
	void ToggleSpectatorLabel();
	void ToggleWaitLabel();
	void SetSpectatee(class ADunDefPlayerReplicationInfo* Spectatee);
};


// Class UDKGame.DunDefTower_GasTrap
// 0x0044 (0x0934 - 0x08F0)
class ADunDefTower_GasTrap : public ADunDefTower_DetonationType
{
public:
	class UParticleSystemComponent*                    AmbientParticleEffect;                                    // 0x08F0(0x0004) (Edit, ExportObject, Component, EditInline)
	class ADecalActorMovableSpawnable*                 DecalActorTemplate;                                       // 0x08F4(0x0004) (Edit)
	struct FVector                                     DecalOffset;                                              // 0x08F8(0x000C) (Edit)
	class UMaterialInstanceConstant*                   TheDecalMaterial;                                         // 0x0904(0x0004) (Edit)
	float                                              DecalFarPlaneAddition;                                    // 0x0908(0x0004) (Edit)
	float                                              FarPlaneWidthMultiplier;                                  // 0x090C(0x0004) (Edit)
	class ADecalActorMovableSpawnable*                 MyDecalActor;                                             // 0x0910(0x0004) (Transient)
	class UMaterialInstanceConstant*                   DecalMat;                                                 // 0x0914(0x0004) (Transient)
	struct FLinearColor                                DecalColor;                                               // 0x0918(0x0010)
	class UMaterialInterface*                          TowerRatingMaterial;                                      // 0x0928(0x0004) (Edit)
	unsigned long                                      bDontSpringTrap : 1;                                      // 0x092C(0x0004) (Transient)
	unsigned long                                      bFirstReset : 1;                                          // 0x092C(0x0004) (Transient)
	class ATrapLargeCylinderTriggerWrapper*            GroundTriggerVolume;                                      // 0x0930(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_GasTrap");
		return ptr;
	}


	void ClientSingleSetMovement(const struct FVector& endLoc, const struct FRotator& endRot, unsigned long bShouldCollideWorld);
	unsigned long ForceSingleMove(const struct FVector& NewLoc, const struct FRotator& endRot, unsigned long bShouldCollideWorld);
	void InitTowerRatingMaterial();
	void UpdateTowerRatingMaterial();
	void SetRadiusScale(float theRadiusScale);
	void CheckOverlappedTouchingDetonation();
	void Destroyed();
	void PostBeginPlay();
};


// Class UDKGame.UI_DLCSplash
// 0x0014 (0x0650 - 0x063C)
class UUI_DLCSplash : public UDunDefUIScene
{
public:
	class UUIButton*                                   CloseButton;                                              // 0x063C(0x0004) (Edit)
	class UUIPanel_DataList*                           DLCDataList;                                              // 0x0640(0x0004) (Edit)
	class UDLCDataListProvider*                        DLCProvider;                                              // 0x0644(0x0004) (Edit)
	int                                                EntryOffset;                                              // 0x0648(0x0004) (Transient)
	unsigned long                                      bCloseNextFrame : 1;                                      // 0x064C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_DLCSplash");
		return ptr;
	}


	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void RefreshDLC();
	void Update(float DeltaTime);
	void PostInitialSceneUpdate();
};


// Class UDKGame.DunDef_SeqAct_ShowNotification
// 0x002C (0x0114 - 0x00E8)
class UDunDef_SeqAct_ShowNotification : public USequenceAction
{
public:
	struct FString                                     NotificationText;                                         // 0x00E8(0x000C) (Edit, NeedCtorLink)
	struct FLinearColor                                NotificationColor;                                        // 0x00F4(0x0010) (Edit)
	float                                              LabelScale;                                               // 0x0104(0x0004) (Edit)
	unsigned long                                      ShowMapFriendlyNameNotification : 1;                      // 0x0108(0x0004) (Edit)
	unsigned long                                      PredefinedType_AppendNumber : 1;                          // 0x0108(0x0004) (Edit)
	int                                                PredefinedType;                                           // 0x010C(0x0004) (Edit)
	int                                                PredefinedType_NumberToAppend;                            // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowNotification");
		return ptr;
	}


	class UDunDef_SeqVar_LocalizedString* GetLocalizedStringSeqVar();
	void Activated();
};


// Class UDKGame.DunDefTwoWayRPCInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTwoWayRPCInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTwoWayRPCInterface");
		return ptr;
	}


	void ServerExecCommand(class ADunDefPlayerController* fromPC, const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
	void ClientExecCommand(const struct FName& CommandName, const struct FName& nameParam1, const struct FName& nameParam2, float floatParam1, float floatParam2, float intParam1, float intParam2, const struct FVector& vecParam1, const struct FVector& VecParam2, class UObject* ObjectRef1, class UObject* ObjectRef2);
};


// Class UDKGame.DunDef_SeqEvent_SkipToWave
// 0x0004 (0x0104 - 0x0100)
class UDunDef_SeqEvent_SkipToWave : public USequenceEvent
{
public:
	int                                                ToWave;                                                   // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_SkipToWave");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqEvent_PlayerLeft
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_PlayerLeft : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_PlayerLeft");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqEvent_PlayerJoined
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_PlayerJoined : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_PlayerJoined");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDefOgre
// 0x0060 (0x0DA0 - 0x0D40)
class ADunDefOgre : public ADunDefBoss
{
public:
	struct FName                                       PoundGroundAnimation;                                     // 0x0D40(0x0008) (Edit)
	struct FName                                       ShootPoisonAnimation;                                     // 0x0D48(0x0008) (Edit)
	struct FName                                       MajorHurtAnimation;                                       // 0x0D50(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     PoundImpactEffect;                                        // 0x0D58(0x0004) (Edit)
	struct FVector                                     PoundImpactEffectOffset;                                  // 0x0D5C(0x000C) (Edit)
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D68(0x0008) (Edit)
	struct FName                                       GloveEffectSocketName;                                    // 0x0D70(0x0008) (Edit)
	class UParticleSystemComponent*                    PoisonGloveEffectComponent;                               // 0x0D78(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMaterialInterface*                          InDangerHUDWaypointMat;                                   // 0x0D7C(0x0004) (Edit)
	float                                              IndicateDamageTime;                                       // 0x0D80(0x0004) (Edit)
	class UMaterialInstanceConstant*                   EnemyHealthBarMaterialTemplate;                           // 0x0D84(0x0004) (Edit)
	TArray<float>                                      OgreJouseKnockbackMultipliers;                            // 0x0D88(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   LandedSound;                                              // 0x0D94(0x0004) (Edit)
	unsigned long                                      bWantsAllyHUD : 1;                                        // 0x0D98(0x0004) (Edit)
	unsigned long                                      bNoAllowAllyHeal : 1;                                     // 0x0D98(0x0004) (Edit)
	unsigned long                                      bPlayLandedSoundOnce : 1;                                 // 0x0D98(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MyUniqueHealthBarMIC;                                     // 0x0D9C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOgre");
		return ptr;
	}


	unsigned long STATIC_UseMaxSimultaneousAllowedForPlayers(class ADunDefEnemy* anEnemyTemplate);
	void EnemyExpired();
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Destroyed();
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	class UMaterialInstanceConstant* GetHealthBarMIC(class ADunDefPlayerController* PC);
	unsigned long HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	unsigned long OnlyDrawHUDForOwner();
	void PoisonAttackShoot();
	void PoisonAttackBegin();
	void PostBeginPlay();
	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	unsigned long IsCurrentlyPlayingAttackAnimation();
	float PlayAttackAnimation();
	float PlayShootPoisonAnimation();
	float PlayPoundAnimation();
	unsigned long IsCurrentlyPlayingHurtAnimation();
	void PlayMajorHurtAnimation();
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void PlayJumpAnimation();
	struct FVector GetAMeleeSwingLocation(const struct FName& SocketName);
	void PoundedTheGround();
	void MeleeSwingEnd();
	void MeleeSwingStart();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	unsigned long AllowTrapSpringing(class ADunDefTower_DetonationType* trap);
	unsigned long ForceFriendlyFire(class AActor* Target);
};


// Class UDKGame.DunDefHeroOverrideList
// 0x000C (0x0048 - 0x003C)
class UDunDefHeroOverrideList : public UObject
{
public:
	TArray<class UDunDefHero*>                         HeroTemplates;                                            // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHeroOverrideList");
		return ptr;
	}


	class UDunDefHero* GetHeroOverride(class UDunDefHero* BaseHero);
};


// Class UDKGame.GameInfo_PureStrategy
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_PureStrategy : public AMain
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.GameInfo_PureStrategy");
		return ptr;
	}

};


// Class UDKGame.DunDefOnlineGameSettings
// 0x0000 (0x00E8 - 0x00E8)
class UDunDefOnlineGameSettings : public UOnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOnlineGameSettings");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqAct_SetTutorialFlag
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetTutorialFlag : public USequenceAction
{
public:
	TEnumAsByte<ETUTORIALFLAG>                         flagType;                                                 // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	unsigned long                                      FlagValue : 1;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      JustClearAllFlags : 1;                                    // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetTutorialFlag");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetTutorialMode
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetTutorialMode : public USequenceAction
{
public:
	unsigned long                                      EnableTutorialMode : 1;                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetTutorialMode");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetWaterDetail
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_SetWaterDetail : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetWaterDetail");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetWaveBillboardSpawnPoints
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetWaveBillboardSpawnPoints : public USequenceAction
{
public:
	class ADunDefWaveBillboard*                        waveBillboard;                                            // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetWaveBillboardSpawnPoints");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetWaveEntries
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_SetWaveEntries : public USequenceAction
{
public:
	class UDunDef_SeqVar_EnemyWaveEntries*             Original;                                                 // 0x00E8(0x0004)
	class UDunDef_SeqVar_EnemyWaveEntries*             Value;                                                    // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetWaveEntries");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SetWaveNumber
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SetWaveNumber : public USequenceAction
{
public:
	int                                                waveNumber;                                               // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SetWaveNumber");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ShowBossHealthBar
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ShowBossHealthBar : public USequenceAction
{
public:
	class AActor*                                      BossActor;                                                // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowBossHealthBar");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ShowGlobalUIScene
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_ShowGlobalUIScene : public USequenceAction
{
public:
	class UDunDefUIScene*                              aUIScene;                                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      bOpenForPlayer : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      bCloseAllOtherScenes : 1;                                 // 0x00EC(0x0004) (Edit)
	int                                                CustomInitIndex;                                          // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowGlobalUIScene");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ShowLoginUI
// 0x0004 (0x00F0 - 0x00EC)
class UDunDef_SeqAct_ShowLoginUI : public UUIAction
{
public:
	class UUI_GameSpyLogin*                            LoginScene;                                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowLoginUI");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.UI_GameSpyLogin
// 0x0094 (0x06D0 - 0x063C)
class UUI_GameSpyLogin : public UDunDefUIScene
{
public:
	class UUIEditBox*                                  UserID;                                                   // 0x063C(0x0004) (Edit)
	class UUIEditBox*                                  Password;                                                 // 0x0640(0x0004) (Edit)
	class UUIButton_Scripted*                          LoginButton;                                              // 0x0644(0x0004) (Edit)
	class UUIButton_Scripted*                          CreateButton;                                             // 0x0648(0x0004) (Edit)
	class UUIButton_Scripted*                          CancelButton;                                             // 0x064C(0x0004) (Edit)
	class UUIButton_Scripted*                          LANButton;                                                // 0x0650(0x0004) (Edit)
	class UUICheckbox*                                 SaveLoginCheckBox;                                        // 0x0654(0x0004) (Edit)
	struct FString                                     MSG_InvalidCharacterTitle;                                // 0x0658(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_InvalidCharacterDescription1;                         // 0x0664(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_InvalidCharacterDescription2;                         // 0x0670(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_LoggingInTitle;                                       // 0x067C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_LoginFailedTitle;                                     // 0x0688(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_LoginSucceededTitle;                                  // 0x0694(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_LoginSucceededDescription;                            // 0x06A0(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      fromMultiplayerMenu : 1;                                  // 0x06AC(0x0004)
	unsigned long                                      LeftShiftIsDown : 1;                                      // 0x06AC(0x0004)
	unsigned long                                      RightShiftIsDown : 1;                                     // 0x06AC(0x0004)
	class UUI_MultiplayerMenu*                         MultiplayerUI;                                            // 0x06B0(0x0004)
	class UUI_NetworkMultiplayer*                      ServerListUI;                                             // 0x06B4(0x0004)
	struct FString                                     CreateLoginURL;                                           // 0x06B8(0x000C) (Config, NeedCtorLink)
	float                                              LoginTimer;                                               // 0x06C4(0x0004)
	float                                              LoginTimeout;                                             // 0x06C8(0x0004)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x06CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_GameSpyLogin");
		return ptr;
	}


	unsigned long IsGamepadOwned();
	unsigned long IsKeyboardOwned();
	struct FString ConvertKeyNameToSymbol(const struct FName& Key);
	unsigned long OnInterceptedInputKey(struct FInputEventParameters* EventParms);
	void SceneDeactivated();
	void SceneActivated(unsigned long bInitialActivation);
	void PostInitialize();
	void Initialized();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	unsigned long LoginCancelled(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void Update(float DeltaTime);
	void OnLoginStatusChange(TEnumAsByte<ELoginStatus> NewStatus, const struct FUniqueNetId& NewId);
	void SaveLogin();
	void OnLoginChanged(unsigned char LocalUserNum);
	void ClearLoginSuccessMsg();
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	TEnumAsByte<EUserPassState> ValidateUserPass(const struct FString& UserIdString, const struct FString& PassString);
	unsigned long HasChr(const struct FString& Str, const struct FString& Chr);
};


// Class UDKGame.DunDef_SeqAct_ShowTitleScreen
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqAct_ShowTitleScreen : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowTitleScreen");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ShowUIScene
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_ShowUIScene : public USequenceAction
{
public:
	class UDunDefUIScene*                              theUIScene;                                               // 0x00E8(0x0004) (Edit)
	unsigned long                                      bDontShowIfTemplateAlreadyOpen : 1;                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      bOpenForPlayer : 1;                                       // 0x00EC(0x0004) (Edit)
	int                                                UICustomValue;                                            // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ShowUIScene");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_SplitTBRTimer
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_SplitTBRTimer : public USequenceAction
{
public:
	int                                                targetSplit;                                              // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_SplitTBRTimer");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_StartTBRTimer
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_StartTBRTimer : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_StartTBRTimer");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ToggleBossMode
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ToggleBossMode : public USequenceAction
{
public:
	unsigned long                                      BossModeEnabled : 1;                                      // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ToggleBossMode");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_ToggleDemonElectricPylon
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_ToggleDemonElectricPylon : public USequenceAction
{
public:
	unsigned long                                      EnablePylon : 1;                                          // 0x00E8(0x0004) (Edit)
	class ADunDefDemonElectricPylon*                   dPylon;                                                   // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ToggleDemonElectricPylon");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDefDemonElectricPylon
// 0x0088 (0x0590 - 0x0508)
class ADunDefDemonElectricPylon : public ADunDefDamageableTarget
{
public:
	class UParticleSystemComponent*                    ChargedParticleEffect;                                    // 0x0508(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    TargetableParticleEffect;                                 // 0x050C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BeamParticleEffect;                                       // 0x0510(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    SuperChargeEffect;                                        // 0x0514(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              RemainChargedTime;                                        // 0x0518(0x0004) (Edit)
	float                                              PostSuperChargeResetTime;                                 // 0x051C(0x0004) (Edit)
	struct FVector                                     BeamStartOffset;                                          // 0x0520(0x000C) (Edit)
	int                                                theDamageAmount;                                          // 0x052C(0x0004) (Edit)
	float                                              DamageInterval;                                           // 0x0530(0x0004) (Edit)
	class UClass*                                      MyDamageType;                                             // 0x0534(0x0004) (Edit)
	class USoundCue*                                   ActivatedSound;                                           // 0x0538(0x0004) (Edit)
	class USoundCue*                                   DeactivatedSound;                                         // 0x053C(0x0004) (Edit)
	class USoundCue*                                   TargetableOnSound;                                        // 0x0540(0x0004) (Edit)
	class USoundCue*                                   TargetableOffSound;                                       // 0x0544(0x0004) (Edit)
	TArray<float>                                      DifficultyHealthMultipliers;                              // 0x0548(0x000C) (Edit, NeedCtorLink)
	int                                                MaxDifficultySets;                                        // 0x0554(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChargedOnParticleEffect;                                  // 0x0558(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SuperChargedParticleEffect;                               // 0x055C(0x0004) (Edit)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0560(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x0564(0x0004) (Edit)
	struct FColor                                      MiniMapTargetableColor;                                   // 0x0568(0x0004) (Edit)
	struct FColor                                      MiniMapChargedColor;                                      // 0x056C(0x0004) (Edit)
	struct FColor                                      MiniMapSuperChargedColor;                                 // 0x0570(0x0004) (Edit)
	struct FColor                                      MiniMapInactiveColor;                                     // 0x0574(0x0004) (Edit)
	class UAudioComponent*                             LoopingActiveSound;                                       // 0x0578(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             LoopingElectrocutingSound;                                // 0x057C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             LoopingTargetableSound;                                   // 0x0580(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LastDamageTime;                                           // 0x0584(0x0004)
	unsigned long                                      bTargetable : 1;                                          // 0x0588(0x0004) (Net)
	unsigned long                                      bCharged : 1;                                             // 0x0588(0x0004) (Net)
	unsigned long                                      bSuperCharged : 1;                                        // 0x0588(0x0004) (Net)
	class AActor*                                      Target;                                                   // 0x058C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDemonElectricPylon");
		return ptr;
	}


	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	void SetTargetable(unsigned long targetable);
	void SetCharged(unsigned long charged);
	void CheckCharges();
	void Destroyed();
	void PostBeginPlay();
	void EnableTargeting();
	void Decharge();
	unsigned long IgnoreFriendlyFireDamage(const TScriptInterface<class UDunDefTargetableInterface>& instigatorActor, class AController* OptionalController);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void Died(class AController* EventInstigator, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser);
	float DTGetEnemyTargetingDesirability(class ADunDefEnemyController* forController);
	float DTGetTowerTargetingDesirability(class ADunDefTower* forTower);
	float DTGetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	int GetTargetingTeam();
	void ReplicatedEvent(const struct FName& VarName);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
};


// Class UDKGame.DunDef_SeqAct_ToggleEmitter
// 0x0004 (0x00EC - 0x00E8)
class UDunDef_SeqAct_ToggleEmitter : public USequenceAction
{
public:
	class AEmitter*                                    TheEmitter;                                               // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_ToggleEmitter");
		return ptr;
	}


	void DoWork(class AEmitter* anEmitter);
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_TogglePostProcessEffects
// 0x0028 (0x0120 - 0x00F8)
class UDunDef_SeqAct_TogglePostProcessEffects : public USeqAct_Latent
{
public:
	TArray<struct FPostProcessEffectToggle>            EffectToggles;                                            // 0x00F8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      ToggleForEveryone : 1;                                    // 0x0104(0x0004) (Edit)
	TArray<struct FPostProcessEffectToggle>            TurnOnEffects;                                            // 0x0108(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPostProcessEffectToggle>            TurnOffEffects;                                           // 0x0114(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_TogglePostProcessEffects");
		return ptr;
	}


	unsigned long Update(float DeltaTime);
	unsigned long UpdateEffects(float DeltaTime);
	void AddEffectToList(const struct FPostProcessEffectToggle& effectToggle, class UPostProcessEffect* Effect, unsigned long bTurnOn);
	void MakeMaterialEffectConstantUnique(class UMaterialEffect* Effect);
	void EnableEffect(unsigned long bTurnOn);
};


// Class UDKGame.DunDef_SeqAct_UnlockAchievement
// 0x0008 (0x00F0 - 0x00E8)
class UDunDef_SeqAct_UnlockAchievement : public USequenceAction
{
public:
	TEnumAsByte<EAchievement>                          Achievement;                                              // 0x00E8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	unsigned long                                      UnlockForEveryone : 1;                                    // 0x00EC(0x0004) (Edit)
	unsigned long                                      bRequirePawnPossession : 1;                               // 0x00EC(0x0004) (Edit)
	unsigned long                                      onlyUnlockLocal : 1;                                      // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_UnlockAchievement");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_UnlockCostumes
// 0x0014 (0x00FC - 0x00E8)
class UDunDef_SeqAct_UnlockCostumes : public USequenceAction
{
public:
	TArray<struct FGiveCostumeEntry>                   GiveCostumeEntries;                                       // 0x00E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bGiveToEveryone : 1;                                      // 0x00F4(0x0004) (Edit)
	unsigned long                                      bNotifyUser : 1;                                          // 0x00F4(0x0004) (Edit)
	unsigned long                                      bOnlyGiveToPrimaryLocalPlayer : 1;                        // 0x00F4(0x0004) (Edit)
	class USoundCue*                                   GivenCostumeSound;                                        // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_UnlockCostumes");
		return ptr;
	}


	void GiveCostume(class ADunDefPlayerController* PC);
	void Activated();
};


// Class UDKGame.DunDef_SeqAct_UnlockMission
// 0x0020 (0x0108 - 0x00E8)
class UDunDef_SeqAct_UnlockMission : public USequenceAction
{
public:
	struct FString                                     MissionTag;                                               // 0x00E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bNotify : 1;                                              // 0x00F4(0x0004) (Edit)
	struct FString                                     NotificationString;                                       // 0x00F8(0x000C) (Edit, Localized, NeedCtorLink)
	class USoundCue*                                   UnlockedSoundCue;                                         // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_UnlockMission");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_UnlockRestrictedDifficultyMission
// 0x0000 (0x00E8 - 0x00E8)
class UDunDef_SeqAct_UnlockRestrictedDifficultyMission : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_UnlockRestrictedDifficultyMission");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqAct_UpgradeTowers
// 0x000C (0x00F4 - 0x00E8)
class UDunDef_SeqAct_UpgradeTowers : public USequenceAction
{
public:
	int                                                TargetingTeam;                                            // 0x00E8(0x0004) (Edit)
	unsigned long                                      bUseTeam : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      bDowngradeTowers : 1;                                     // 0x00EC(0x0004) (Edit)
	int                                                numLevelsToUpgrade;                                       // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqAct_UpgradeTowers");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_CustomMetaFlag
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_CustomMetaFlag : public USequenceCondition
{
public:
	int                                                FlagIndex;                                                // 0x00D0(0x0004) (Edit)
	int                                                CheckValue;                                               // 0x00D4(0x0004) (Edit)
	unsigned long                                      SetToValue : 1;                                           // 0x00D8(0x0004) (Edit)
	unsigned long                                      bDontOutputToLinkedVariable : 1;                          // 0x00D8(0x0004) (Edit)
	unsigned long                                      bOnlySetOnSpawnedPlayer : 1;                              // 0x00D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_CustomMetaFlag");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_DifficultySwitch
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_DifficultySwitch : public USequenceCondition
{
public:
	unsigned long                                      bClampToInsane : 1;                                       // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_DifficultySwitch");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_GetGraphicsQuality
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_GetGraphicsQuality : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_GetGraphicsQuality");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_GetMultiplayerMode
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_GetMultiplayerMode : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_GetMultiplayerMode");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_GetPlatform
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_GetPlatform : public USequenceCondition
{
public:
	unsigned long                                      bReturnMacSeparately : 1;                                 // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_GetPlatform");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IntSwitch
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IntSwitch : public USequenceCondition
{
public:
	unsigned long                                      TreatValuesOutsideOfRangeAsZero : 1;                      // 0x00D0(0x0004) (Edit)
	int                                                ModuloBase;                                               // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IntSwitch");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IntSwitchMega
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IntSwitchMega : public USequenceCondition
{
public:
	unsigned long                                      TreatValuesOutsideOfRangeAsZero : 1;                      // 0x00D0(0x0004) (Edit)
	int                                                ModuloBase;                                               // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IntSwitchMega");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsAchievementUnlocked
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsAchievementUnlocked : public USequenceCondition
{
public:
	TEnumAsByte<EAchievement>                          Achievement;                                              // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	unsigned long                                      IsUnlockedByAnyLocalPlayer : 1;                           // 0x00D4(0x0004) (Edit)
	unsigned long                                      bOnlyCheckPrimaryLocalPlayer : 1;                         // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsAchievementUnlocked");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsCostumeUnlocked
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsCostumeUnlocked : public USequenceCondition
{
public:
	class UDunDefHero*                                 heroArchetype;                                            // 0x00D0(0x0004) (Edit)
	int                                                costumeIndex;                                             // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsCostumeUnlocked");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsDemoMode
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsDemoMode : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsDemoMode");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsDLCInstalled
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_IsDLCInstalled : public USequenceCondition
{
public:
	int                                                DlcID;                                                    // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsDLCInstalled");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDefDLCSummary
// 0x001C (0x0098 - 0x007C)
class UDunDefDLCSummary : public UUIResourceDataProvider
{
public:
	int                                                DlcID;                                                    // 0x007C(0x0004) (Config)
	TArray<struct FCampaignLevelEntry>                 DLCLevelEntries;                                          // 0x0080(0x000C) (Config, NeedCtorLink)
	TArray<struct FDLCEquipmentEntry>                  DLCEquipmentEntries;                                      // 0x008C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDLCSummary");
		return ptr;
	}


	unsigned long HasLevelEntry(const struct FCampaignLevelEntry& levelEntry);
};


// Class UDKGame.DunDef_SeqCond_IsEditor
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsEditor : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsEditor");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsGameOver
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsGameOver : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsGameOver");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsHardcore
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsHardcore : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsHardcore");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsHeroTemplate
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsHeroTemplate : public USequenceCondition
{
public:
	class UDunDefHero*                                 HeroTemplate;                                             // 0x00D0(0x0004) (Edit)
	unsigned long                                      CheckAllPlayers : 1;                                      // 0x00D4(0x0004) (Edit)
	class UObject*                                     theObject;                                                // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsHeroTemplate");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsInCombatPhase
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsInCombatPhase : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsInCombatPhase");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsInVolume
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_IsInVolume : public USequenceCondition
{
public:
	unsigned long                                      CheckAllPlayers : 1;                                      // 0x00D0(0x0004) (Edit)
	class UObject*                                     TheActor;                                                 // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsInVolume");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsLocalPlayer
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsLocalPlayer : public USequenceCondition
{
public:
	int                                                MatchLocalPlayerIndex;                                    // 0x00D0(0x0004) (Edit)
	unsigned long                                      IsPrimaryProfilePlayer : 1;                               // 0x00D4(0x0004) (Edit)
	class UObject*                                     theObject;                                                // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsLocalPlayer");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsMissionUnlocked
// 0x0011 (0x00E1 - 0x00D0)
class UDunDef_SeqCond_IsMissionUnlocked : public USequenceCondition
{
public:
	unsigned long                                      bCheckBeaten : 1;                                         // 0x00D0(0x0004) (Edit)
	unsigned long                                      bOnlyCheckLocal : 1;                                      // 0x00D0(0x0004) (Edit)
	unsigned long                                      bIsMinimumDifficulty : 1;                                 // 0x00D0(0x0004) (Edit)
	unsigned long                                      bIsHardcore : 1;                                          // 0x00D0(0x0004) (Edit)
	unsigned long                                      bUseCurrentMissionSettingForHardcore : 1;                 // 0x00D0(0x0004) (Edit)
	unsigned long                                      bUseCurrentMissionSettingForDifficulty : 1;               // 0x00D0(0x0004) (Edit)
	struct FString                                     MissionTag;                                               // 0x00D4(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EGameDifficulty>                       CheckBeatenDifficulty;                                    // 0x00E0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsMissionUnlocked");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsOfClass
// 0x000C (0x00DC - 0x00D0)
class UDunDef_SeqCond_IsOfClass : public USequenceCondition
{
public:
	struct FName                                       ClassName;                                                // 0x00D0(0x0008) (Edit)
	class UObject*                                     theObject;                                                // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsOfClass");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsPlayerUsingGamepad
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsPlayerUsingGamepad : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsPlayerUsingGamepad");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsPlayInEditor
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsPlayInEditor : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsPlayInEditor");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsPureStrategy
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsPureStrategy : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsPureStrategy");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsSceneOpen
// 0x0004 (0x00D4 - 0x00D0)
class UDunDef_SeqCond_IsSceneOpen : public USequenceCondition
{
public:
	class UClass*                                      UISceneClass;                                             // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsSceneOpen");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsStandaloneGame
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsStandaloneGame : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsStandaloneGame");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_IsStereoscopic3D
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_IsStereoscopic3D : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_IsStereoscopic3D");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_ShowTutorial
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_SeqCond_ShowTutorial : public USequenceCondition
{
public:
	int                                                TutorialSet;                                              // 0x00D0(0x0004) (Edit)
	unsigned long                                      DisableTutorialSet : 1;                                   // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_ShowTutorial");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqCond_SignedIn
// 0x0000 (0x00D0 - 0x00D0)
class UDunDef_SeqCond_SignedIn : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqCond_SignedIn");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqEvent_CoreDeath
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_CoreDeath : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_CoreDeath");
		return ptr;
	}

};


// Class UDKGame.DunDef_SeqEvent_DifficultyChanged
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_DifficultyChanged : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_DifficultyChanged");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqEvent_OptionsChanged
// 0x0000 (0x0100 - 0x0100)
class UDunDef_SeqEvent_OptionsChanged : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_OptionsChanged");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_SeqEvent_SkipBossTimer
// 0x0004 (0x0104 - 0x0100)
class UDunDef_SeqEvent_SkipBossTimer : public USequenceEvent
{
public:
	int                                                NewBossTime;                                              // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_SeqEvent_SkipBossTimer");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_TickableAnimNodeInterface
// 0x0000 (0x003C - 0x003C)
class UDunDef_TickableAnimNodeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_TickableAnimNodeInterface");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class UDKGame.DunDef_UIAction_CheckAllPlayersLoggedIn
// 0x0018 (0x0104 - 0x00EC)
class UDunDef_UIAction_CheckAllPlayersLoggedIn : public UUIAction
{
public:
	struct FString                                     MessageTitle;                                             // 0x00EC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MessageText;                                              // 0x00F8(0x000C) (Edit, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_CheckAllPlayersLoggedIn");
		return ptr;
	}


	void Activated();
	unsigned long AcceptedSaveWarning(class UUI_MessageBox* theMessageBox, const struct FString& ButtonPressed, int whichPlayer);
};


// Class UDKGame.DunDef_UIAction_CloseSceneWithAnimation
// 0x0000 (0x00EC - 0x00EC)
class UDunDef_UIAction_CloseSceneWithAnimation : public UUIAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_CloseSceneWithAnimation");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_GotoURL
// 0x000C (0x00F8 - 0x00EC)
class UDunDef_UIAction_GotoURL : public UUIAction
{
public:
	struct FString                                     URLToVisit;                                               // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_GotoURL");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_LoadLevel
// 0x001C (0x0108 - 0x00EC)
class UDunDef_UIAction_LoadLevel : public UUIAction
{
public:
	struct FString                                     CampaignLevelTag;                                         // 0x00EC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LevelName;                                                // 0x00F8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      IsGameplayLevel : 1;                                      // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_LoadLevel");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_PlayAnimation
// 0x000C (0x00F8 - 0x00EC)
class UDunDef_UIAction_PlayAnimation : public UUIAction
{
public:
	unsigned long                                      PlayOnSelf : 1;                                           // 0x00EC(0x0004) (Edit)
	struct FName                                       AnimationName;                                            // 0x00F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_PlayAnimation");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_PlayMusic
// 0x0024 (0x0110 - 0x00EC)
class UDunDef_UIAction_PlayMusic : public UUIAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                               // 0x00EC(0x0024) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_PlayMusic");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_PlaySound
// 0x0004 (0x00F0 - 0x00EC)
class UDunDef_UIAction_PlaySound : public UUIAction
{
public:
	class USoundCue*                                   CueToPlay;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_PlaySound");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_SetDunDefUICustomValue
// 0x0008 (0x00F4 - 0x00EC)
class UDunDef_UIAction_SetDunDefUICustomValue : public UUIAction
{
public:
	class UUIScene*                                    SceneToSetOn;                                             // 0x00EC(0x0004) (Edit)
	int                                                CustomValue;                                              // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_SetDunDefUICustomValue");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UIAction_UnlockAchievement
// 0x0008 (0x00F4 - 0x00EC)
class UDunDef_UIAction_UnlockAchievement : public UUIAction
{
public:
	TEnumAsByte<EAchievement>                          Achievement;                                              // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned long                                      UnlockForEveryone : 1;                                    // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UIAction_UnlockAchievement");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDef_UICond_DunDefUIValue
// 0x0008 (0x00D8 - 0x00D0)
class UDunDef_UICond_DunDefUIValue : public USequenceCondition
{
public:
	class UUIObject*                                   ownerObject;                                              // 0x00D0(0x0004) (Edit)
	int                                                ValueToCheck;                                             // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDef_UICond_DunDefUIValue");
		return ptr;
	}


	void Activated();
};


// Class UDKGame.DunDefAchievementTrophy
// 0x009C (0x02B8 - 0x021C)
class ADunDefAchievementTrophy : public AActor
{
public:
	TEnumAsByte<EAchievement>                          myAchievement;                                            // 0x021C(0x0001) (Edit, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	float                                              ActivationWeighting;                                      // 0x0220(0x0004) (Edit)
	float                                              ActivationOffset;                                         // 0x0224(0x0004) (Edit)
	float                                              ToolTipTextScale;                                         // 0x0228(0x0004) (Edit)
	float                                              ToolTipTextDescriptionScale;                              // 0x022C(0x0004) (Edit)
	float                                              ToolTipDescriontYOffset;                                  // 0x0230(0x0004) (Edit)
	struct FColor                                      AchievementDescriptionColor;                              // 0x0234(0x0004) (Edit)
	struct FVector                                     ToolTipWorldOffset;                                       // 0x0238(0x000C) (Edit)
	struct FVector                                     ToolTipScreenOffset;                                      // 0x0244(0x000C) (Edit)
	class UStaticMeshComponent*                        MyStaticMeshComp;                                         // 0x0250(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0254(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bDrawToolTip : 1;                                         // 0x0258(0x0004) (Edit)
	unsigned long                                      bAchievementUnlocked : 1;                                 // 0x0258(0x0004) (Net)
	int                                                MaterialIndexForAchievementIcon;                          // 0x025C(0x0004) (Edit, Net)
	struct FName                                       TextureParamForAchievementIcon;                           // 0x0260(0x0008) (Edit, Net)
	struct FString                                     ActivationString_Use;                                     // 0x0268(0x000C) (Edit, Localized, NeedCtorLink)
	struct FAchievementEntry                           theAchievement;                                           // 0x0274(0x002C) (NeedCtorLink)
	class UStaticMesh*                                 ReplicatedStaticMesh;                                     // 0x02A0(0x0004) (Net)
	float                                              ReplicatedScale;                                          // 0x02A4(0x0004) (Net)
	struct FVector                                     ReplicatedStaticMeshTranslation;                          // 0x02A8(0x000C) (Net)
	class UMaterialInstanceConstant*                   AchievementIconMaterialInstance;                          // 0x02B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefAchievementTrophy");
		return ptr;
	}


	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	float GetActivationOffset();
	float GetActivationWeighting();
	void ShowAchievementInfo(class ADunDefPlayerController* activatedByPC);
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	void SetAchievementUnlocked(unsigned long bUnlocked);
	void Destroyed();
	void PostBeginPlay();
	void UpdateMaterialIcon();
	void UpdateAchievementBinding();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.PawnBoosterInterface
// 0x0000 (0x003C - 0x003C)
class UPawnBoosterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.PawnBoosterInterface");
		return ptr;
	}


	void GetBoostedTargets(TArray<class APawn*>* boostedTargets);
	void NotifyOfBoostedRemoval(class APawn* removedBoostee);
	float GetPawnBoostAmount(TEnumAsByte<EPawnBoostType> boostType);
	unsigned long HasPawnBoostingType(TEnumAsByte<EPawnBoostType> boostType);
};


// Class UDKGame.DunDefTower_ChainLightning
// 0x00B8 (0x08DC - 0x0824)
class ADunDefTower_ChainLightning : public ADunDefTower
{
public:
	float                                              AttackRange;                                              // 0x0824(0x0004) (Edit)
	float                                              MaxChainLength;                                           // 0x0828(0x0004) (Edit)
	float                                              AttackChargeUpTime;                                       // 0x082C(0x0004) (Edit)
	float                                              AttackDuration;                                           // 0x0830(0x0004) (Edit)
	float                                              AttackInterval;                                           // 0x0834(0x0004) (Edit)
	class UParticleSystem*                             AttackBeamTemplate;                                       // 0x0838(0x0004) (Edit)
	float                                              AttackDamageInterval;                                     // 0x083C(0x0004) (Edit)
	float                                              AttackDamageAmount;                                       // 0x0840(0x0004) (Edit)
	float                                              AttackDamagePercent;                                      // 0x0844(0x0004) (Edit)
	class UClass*                                      AttackDamageType;                                         // 0x0848(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffectTemplate;                               // 0x084C(0x0004) (Edit)
	struct FVector                                     AttackMuzzleEffectSpawnOffset;                            // 0x0850(0x000C) (Edit)
	struct FName                                       AttackAnimBlenderName;                                    // 0x085C(0x0008) (Edit)
	struct FName                                       MuzzleSocketName;                                         // 0x0864(0x0008) (Edit)
	class UParticleSystemComponent*                    AmbientMuzzleEffect;                                      // 0x086C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AmbientGroundEffect;                                      // 0x0870(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystem*                             BeamEmitterTemplate;                                      // 0x0874(0x0004) (Edit)
	float                                              AIUpdateInterval;                                         // 0x0878(0x0004) (Edit)
	class USoundCue*                                   ChainLightningCharge;                                     // 0x087C(0x0004) (Edit)
	class USoundCue*                                   ChainLightningShootBegin;                                 // 0x0880(0x0004) (Edit)
	class UAudioComponent*                             LoopingShootSoundComponent;                               // 0x0884(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FString                                     ChainLengthString;                                        // 0x0888(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackDamagePerSecondString;                              // 0x0894(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ChainTargetsString;                                       // 0x08A0(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                MaxChainTargetsBase;                                      // 0x08AC(0x0004) (Edit)
	float                                              MaxChainTargetsStatExponent;                              // 0x08B0(0x0004) (Edit)
	TArray<struct FEnemyChainLink>                     EnemyChainLinks;                                          // 0x08B4(0x000C) (Component, NeedCtorLink)
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffect;                                       // 0x08C0(0x0004) (Transient)
	float                                              LastApplyDamageTime;                                      // 0x08C4(0x0004) (Transient)
	float                                              LastAttackTime;                                           // 0x08C8(0x0004) (Transient)
	class UAnimNodeBlend*                              MyAttackAnimBlender;                                      // 0x08CC(0x0004) (Transient)
	class AActor*                                      Target;                                                   // 0x08D0(0x0004) (Net)
	unsigned long                                      IsDoingAttackDamage : 1;                                  // 0x08D4(0x0004)
	float                                              LastAIUUpdate;                                            // 0x08D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_ChainLightning");
		return ptr;
	}


	unsigned long UsesRange();
	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	int GetMaxChainTargets();
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float GetRateDivisor();
	float GetAttackDamage();
	float GetMaxChainLength();
	float GetAttackRange();
	float GetAttackDuration();
	struct FVector GetMuzzleLocation();
	void GetMuzzleTransformation(struct FVector* Position, struct FRotator* Orientation);
	void SetTarget(class AActor* theTarget);
	TScriptInterface<class UDunDefTargetableInterface> FindBestTarget();
	void UpdateAI(float DeltaTime);
	void Tick(float DeltaTime);
	void Destroyed();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefBuffEffectInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefBuffEffectInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBuffEffectInterface");
		return ptr;
	}


	void ReportHeroSwapped();
	void AdjustTargetDamage(class AActor* forActor, class AController* fromController, class UClass* TheDamageType, class UObject* WhatHitMe, const struct FsLastDamageInfo& damageInfo, int* howMuchDamage, struct FVector* Momentum);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void TriggerEvent(TEnumAsByte<EBuffSpawnEvent> EventToTrigger);
	void ReportOwnerDeath();
	void ReportOwnerJumped();
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
	void ReportHealed(int healedAmount, class AActor* Healer);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void AdjustDealtDamage(class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum);
	void GetStatValue(class AActor* forActor, TEnumAsByte<ELevelUpValueType> levelUpValue, unsigned long bAdditivePass, float* buffVal);
	class USurface* GetBuffIcon(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	struct FString GetBuffDescription(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
	struct FString GetBuffName(const TScriptInterface<class UDunDefTargetableInterface>& aTarget);
};


// Class UDKGame.DunDefBuffInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefBuffInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBuffInterface");
		return ptr;
	}


	void AdjustDealtDamage(class AActor* damagedTarget, int OriginalDamage, int* inDamage, struct FsLastDamageInfo* damageInfo, struct FVector* Momentum);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
	struct FVector GetLocation();
	int GetHealth(unsigned long bGetMax);
	void OnBuffRemoved(class UObject* BuffRemoved);
	void OnBuffAdded(class UObject* BuffAdded);
};


// Class UDKGame.DunDefDamageType_Silly
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Silly : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Silly");
		return ptr;
	}

};


// Class UDKGame.DunDefInventoryManager
// 0x0000 (0x0238 - 0x0238)
class ADunDefInventoryManager : public AInventoryManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefInventoryManager");
		return ptr;
	}


	void DestroyAllWeapons();
	void ClientWeaponSet(class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate);
	void TearOffInventory();
	class AInventory* CreateInventoryFromTemplate(class AActor* InventoryActorTemplate, unsigned long bDoNotActivate);
	void OwnerDied();
};


// Class UDKGame.DunDefManaItemInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefManaItemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefManaItemInterface");
		return ptr;
	}


	int GetManaPower();
	void Collected(class ADunDefPlayer* byPlayer);
};


// Class UDKGame.DunDefDamageType_Invincible
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Invincible : public UDunDefDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Invincible");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_ProxMine
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ProxMine : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_ProxMine");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Poison
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Poison : public UDunDefDamageType_Elemental
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Poison");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Fire
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Fire : public UDunDefDamageType_Elemental
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Fire");
		return ptr;
	}

};


// Class UDKGame.DunDefMiniMapIconInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefMiniMapIconInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefMiniMapIconInterface");
		return ptr;
	}


	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
};


// Class UDKGame.DunDefDamageType_Lightning
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning : public UDunDefDamageType_Elemental
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Lightning");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_ForceKnockBack
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ForceKnockBack : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_ForceKnockBack");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_ProtonChargeBlast
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ProtonChargeBlast : public UDunDefDamageType_ForceKnockBack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_ProtonChargeBlast");
		return ptr;
	}

};


// Class UDKGame.DunDefPracticeDummy
// 0x00BC (0x05C4 - 0x0508)
class ADunDefPracticeDummy : public ADunDefDamageableTarget
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0508(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DummyChestMeshComp;                                       // 0x050C(0x0004) (Edit, ExportObject, Component, EditInline)
	TArray<int>                                        DamageThresholds;                                         // 0x0510(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               BehindAnimationsOneForDamageThresholds;                   // 0x051C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               BehindAnimationsTwoForDamageThresholds;                   // 0x0528(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               AnimationsOneForDamageThresholds;                         // 0x0534(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               AnimationsTwoForDamageThresholds;                         // 0x0540(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DamagePerSecondString;                                    // 0x054C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DamageTotalString;                                        // 0x0558(0x000C) (Edit, Localized, NeedCtorLink)
	struct FLinearColor                                DPSColor;                                                 // 0x0564(0x0010) (Edit)
	float                                              AveragingTimeForDPS;                                      // 0x0574(0x0004) (Edit)
	float                                              ReportTextTime;                                           // 0x0578(0x0004) (Edit)
	TArray<class UClass*>                              ResistsDamage;                                            // 0x057C(0x000C) (Edit, NeedCtorLink)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x0588(0x0004)
	struct FHighDigitInt                               DamageSinceDPSBegin;                                      // 0x058C(0x0010)
	float                                              FirstDamageTime;                                          // 0x059C(0x0004)
	float                                              LastDamageTime;                                           // 0x05A0(0x0004)
	unsigned long                                      bTargetableByFamiliars : 1;                               // 0x05A4(0x0004) (Edit, Net)
	float                                              enemyDrainResistanceModifier;                             // 0x05A8(0x0004) (Transient)
	TArray<TScriptInterface<class UPawnBoosterInterface>> PawnDeBoosters;                                           // 0x05AC(0x000C) (Transient, NeedCtorLink)
	TArray<TScriptInterface<class UPawnBoosterInterface>> PawnBoosters;                                             // 0x05B8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPracticeDummy");
		return ptr;
	}


	void ReportPercentage(float fraction, const struct FString& Text, float Offset);
	float GetBoostAmount(TEnumAsByte<EPawnBoostType> boostType);
	TScriptInterface<class UPawnBoosterInterface> GetPawnDeBooster(TEnumAsByte<EPawnBoostType> boostType, float* boostValue);
	void RemovePawnDeBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster, int indexOverride);
	void AddPawnDeBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster);
	TScriptInterface<class UPawnBoosterInterface> GetPawnBooster(TEnumAsByte<EPawnBoostType> boostType, float* boostValue);
	void RemoveAllPawnBoosters();
	void RemovePawnBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster, int indexOverride);
	void AddPawnBooster(const TScriptInterface<class UPawnBoosterInterface>& aBooster);
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	struct FString GetToolTipText();
	void Destroyed();
	void PostBeginPlay();
	void PlayHitAnim(unsigned char hitAnimIndex, unsigned long fromBehind);
	void AdjustDamage(class UClass* DamageType, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, int* DamageAmount, struct FVector* Momentum);
	void StartTimer();
	void NotifyTookDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class AActor* DamageCauser);
	void SubtractHealth(int DamageAmount);
	void DPSEnd(float TimePassed, unsigned long noRestart);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
};


// Class UDKGame.IStatusEffectHandler
// 0x0000 (0x003C - 0x003C)
class UIStatusEffectHandler : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IStatusEffectHandler");
		return ptr;
	}


	unsigned long HasStatusEffect(TEnumAsByte<EStatusEffect> StatusToCheck);
	void RemoveStatusEffect(TEnumAsByte<EStatusEffect> Status);
	void AddStatusEffect(TEnumAsByte<EStatusEffect> Status);
};


// Class UDKGame.DunDefBuffToken
// 0x0007 (0x0378 - 0x0371)
class ADunDefBuffToken : public ADunDefManaToken
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	class UDunDefBuff*                                 BuffTemplate;                                             // 0x0374(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefBuffToken");
		return ptr;
	}


	void Vanish();
	void ApplyBuff(class ADunDefPlayer* byPlayer);
	void Collected(class ADunDefPlayer* byPlayer);
	void PostBeginPlay();
};


// Class UDKGame.DunDefCagedPet
// 0x0024 (0x0240 - 0x021C)
class ADunDefCagedPet : public AActor
{
public:
	int                                                ShopPetIndex;                                             // 0x021C(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0220(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     FamMeshOffset;                                            // 0x0224(0x000C) (Edit)
	float                                              ScaleFactor;                                              // 0x0230(0x0004) (Edit)
	class USkeletalMeshComponent*                      myMeshComp;                                               // 0x0234(0x0004) (ExportObject, Transient, Component, EditInline)
	class UHeroEquipment*                              LastHeroEquipment;                                        // 0x0238(0x0004) (Transient)
	class UMaterialInstanceConstant*                   FamMat;                                                   // 0x023C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefCagedPet");
		return ptr;
	}


	void Tick(float DeltaTime);
	void UpdateMesh();
	void PostBeginPlay();
};


// Class UDKGame.DunDefConsole
// 0x0000 (0x01E0 - 0x01E0)
class UDunDefConsole : public UConsole
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefConsole");
		return ptr;
	}

};


// Class UDKGame.UI_PlayerStats
// 0x0568 (0x0BA4 - 0x063C)
class UUI_PlayerStats : public UDunDefUIScene
{
public:
	class UUIScriptWidget_Button*                      CloseButton;                                              // 0x063C(0x0004) (Edit)
	class UUIPanel_DataList*                           LevelList;                                                // 0x0640(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                CampaignButton;                                           // 0x0644(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                ChallengeButton;                                          // 0x0648(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                AllTimeButton;                                            // 0x064C(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                BestOfButton;                                             // 0x0650(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                LeaderboardButton;                                        // 0x0654(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                AchievementButton;                                        // 0x0658(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                KillButton;                                               // 0x065C(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                TowerButton;                                              // 0x0660(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                EnemyButton;                                              // 0x0664(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                TreasureButton;                                           // 0x0668(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                NightmareButton;                                          // 0x066C(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                RuthlessButton;                                           // 0x0670(0x0004) (Edit)
	class UUILabel*                                    StatOwnerLabel;                                           // 0x0674(0x0004) (Edit)
	class UUIScriptWidget_Button*                      PrevStatButton;                                           // 0x0678(0x0004) (Edit)
	class UUIScriptWidget_Button*                      NextStatButton;                                           // 0x067C(0x0004) (Edit)
	class UUIPrefab*                                   LeaderboardPrefab;                                        // 0x0680(0x0004) (Edit)
	class UUIObject*                                   displayPanel;                                             // 0x0684(0x0004) (Edit)
	class UFont*                                       statFont;                                                 // 0x0688(0x0004) (Edit)
	class UUIImage*                                    scrollUpImage;                                            // 0x068C(0x0004) (Edit)
	class UUIImage*                                    scrollDownImage;                                          // 0x0690(0x0004) (Edit)
	class UTexture2D*                                  XBoxLeftShoulder;                                         // 0x0694(0x0004) (Edit)
	class UTexture2D*                                  XBoxRightShoulder;                                        // 0x0698(0x0004) (Edit)
	class UUILabel*                                    gamercardLabel;                                           // 0x069C(0x0004) (Edit)
	class UTexture2D*                                  gamerCardButton;                                          // 0x06A0(0x0004) (Edit)
	class UTexture2D*                                  HardcoreIcon;                                             // 0x06A4(0x0004) (Edit)
	struct FString                                     showGamerCardString;                                      // 0x06A8(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              tabAmount;                                                // 0x06B4(0x0004) (Edit)
	class UUILabel*                                    statDisplayLabel;                                         // 0x06B8(0x0004) (Edit)
	class UUIScriptWidget_GameStatsPopup*              newStatDisplayWidget;                                     // 0x06BC(0x0004) (Edit)
	struct FColor                                      earnedAchievementNameColor;                               // 0x06C0(0x0004) (Edit)
	struct FColor                                      earnedAchievementDescColor;                               // 0x06C4(0x0004) (Edit)
	struct FColor                                      unearnedAchievementNameColor;                             // 0x06C8(0x0004) (Edit)
	struct FColor                                      unearnedAchievementDescColor;                             // 0x06CC(0x0004) (Edit)
	class UDunDefGameStats*                            GameStats;                                                // 0x06D0(0x0004) (Transient)
	class UDunDefPlayerStats*                          Stats;                                                    // 0x06D4(0x0004) (Transient)
	class UUIPrefabInstance*                           LeaderboardInstance;                                      // 0x06D8(0x0004) (Transient)
	int                                                statsIndex;                                               // 0x06DC(0x0004) (Transient)
	class UCampaignLevelEntryObject*                   SelectedButton;                                           // 0x06E0(0x0004) (Transient)
	class UUIPanel_Leaderboard*                        theLeaderboard;                                           // 0x06E4(0x0004) (Transient)
	int                                                difficulty;                                               // 0x06E8(0x0004) (Transient)
	float                                              retryDelay;                                               // 0x06EC(0x0004) (Transient)
	float                                              retryTimer;                                               // 0x06F0(0x0004) (Transient)
	float                                              lineX;                                                    // 0x06F4(0x0004) (Transient)
	float                                              lineY;                                                    // 0x06F8(0x0004) (Transient)
	float                                              startY;                                                   // 0x06FC(0x0004) (Transient)
	int                                                scrollDir;                                                // 0x0700(0x0004) (Transient)
	float                                              checkLoginTimer;                                          // 0x0704(0x0004) (Transient)
	float                                              checkLoginDelay;                                          // 0x0708(0x0004) (Transient)
	TEnumAsByte<EViewMode>                             curViewMode;                                              // 0x070C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x070D(0x0003) MISSED OFFSET
	TArray<struct UUI_PlayerStats_FEnemyStatInfo>      enemyStats;                                               // 0x0710(0x000C) (Transient, NeedCtorLink)
	TArray<struct UUI_PlayerStats_FTowerStatInfo>      towerStats;                                               // 0x071C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FClassToTextureMapping>              nameTextures;                                             // 0x0728(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  unknownTexture;                                           // 0x0734(0x0004) (Edit)
	struct FString                                     unknownString;                                            // 0x0738(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     campaignTag;                                              // 0x0744(0x000C) (Transient, NeedCtorLink)
	int                                                campaignIndex;                                            // 0x0750(0x0004) (Transient)
	unsigned long                                      isHostMode : 1;                                           // 0x0754(0x0004) (Transient)
	unsigned long                                      isChallenge : 1;                                          // 0x0754(0x0004) (Transient)
	unsigned long                                      isBestOf : 1;                                             // 0x0754(0x0004) (Transient)
	unsigned long                                      isLeaderboard : 1;                                        // 0x0754(0x0004) (Transient)
	unsigned long                                      isAward : 1;                                              // 0x0754(0x0004) (Transient)
	unsigned long                                      CurrentUserRemote : 1;                                    // 0x0754(0x0004) (Transient)
	struct FString                                     totalString;                                              // 0x0758(0x000C) (Localized, NeedCtorLink)
	struct FString                                     bestString;                                               // 0x0764(0x000C) (Localized, NeedCtorLink)
	struct FString                                     leastString;                                              // 0x0770(0x000C) (Localized, NeedCtorLink)
	struct FString                                     mostString;                                               // 0x077C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     killString;                                               // 0x0788(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PlayerString;                                             // 0x0794(0x000C) (Localized, NeedCtorLink)
	struct FString                                     towerString;                                              // 0x07A0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     towersString;                                             // 0x07AC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     builtString;                                              // 0x07B8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     repairString;                                             // 0x07C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     destroyString;                                            // 0x07D0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     soldString;                                               // 0x07DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     timeString;                                               // 0x07E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     chestString;                                              // 0x07F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     manaString;                                               // 0x0800(0x000C) (Localized, NeedCtorLink)
	struct FString                                     expString;                                                // 0x080C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     scoreString;                                              // 0x0818(0x000C) (Localized, NeedCtorLink)
	struct FString                                     damageString;                                             // 0x0824(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DeathString;                                              // 0x0830(0x000C) (Localized, NeedCtorLink)
	struct FString                                     naString;                                                 // 0x083C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     pureStrategyString;                                       // 0x0848(0x000C) (Localized, NeedCtorLink)
	struct FString                                     survivalString;                                           // 0x0854(0x000C) (Localized, NeedCtorLink)
	struct FString                                     highestString;                                            // 0x0860(0x000C) (Localized, NeedCtorLink)
	struct FString                                     waveString;                                               // 0x086C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     endingsAchieved;                                          // 0x0878(0x000C) (Localized, NeedCtorLink)
	struct FString                                     towerButtonString;                                        // 0x0884(0x000C) (Localized, NeedCtorLink)
	struct FString                                     enemyButtonString;                                        // 0x0890(0x000C) (Localized, NeedCtorLink)
	struct FString                                     treasureButtonString;                                     // 0x089C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     generalString;                                            // 0x08A8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     awardString;                                              // 0x08B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     flawlessVictoryString;                                    // 0x08C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     immortalString;                                           // 0x08CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     invincibleString;                                         // 0x08D8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     mvpString;                                                // 0x08E4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     strategistString;                                         // 0x08F0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     triggerHappyString;                                       // 0x08FC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     bankerString;                                             // 0x0908(0x000C) (Localized, NeedCtorLink)
	struct FString                                     chillaxString;                                            // 0x0914(0x000C) (Localized, NeedCtorLink)
	struct FString                                     janitorString;                                            // 0x0920(0x000C) (Localized, NeedCtorLink)
	struct FString                                     knightString;                                             // 0x092C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lordString;                                               // 0x0938(0x000C) (Localized, NeedCtorLink)
	struct FString                                     handymanString;                                           // 0x0944(0x000C) (Localized, NeedCtorLink)
	struct FString                                     campaignString;                                           // 0x0950(0x000C) (Localized, NeedCtorLink)
	class UUIButton_Scripted*                          nextMode;                                                 // 0x095C(0x0004) (Transient)
	class UUIButton_Scripted*                          PrevMode;                                                 // 0x0960(0x0004) (Transient)
	class UUIButton_Scripted*                          nextGameMode;                                             // 0x0964(0x0004) (Transient)
	class UUIButton_Scripted*                          prevGameMode;                                             // 0x0968(0x0004) (Transient)
	TArray<class UUIScriptWidget_ToggleButton*>        DifficultyButtons;                                        // 0x096C(0x000C) (Transient, NeedCtorLink)
	TArray<class UUIScriptWidget_ToggleButton*>        ModeButtons;                                              // 0x0978(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentMode;                                              // 0x0984(0x0004) (Transient)
	int                                                CurrentUserID;                                            // 0x0988(0x0004) (Transient)
	struct FAchievementInfo                            curAchievements;                                          // 0x098C(0x01F4) (Transient)
	TArray<struct FLevelProgressInfo>                  curProgress;                                              // 0x0B80(0x000C) (Transient, NeedCtorLink)
	struct FString                                     earnedString;                                             // 0x0B8C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     unearnedString;                                           // 0x0B98(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_PlayerStats");
		return ptr;
	}


	unsigned long IsKeyboardOwned();
	void UnhideLeaderboardTab();
	void HideLeaderboardTab();
	unsigned long NotifyLoginStatusChanged(int ControllerId, TEnumAsByte<ELoginStatus> Status);
	void NotifyLinkStatusChanged(unsigned long bConnected);
	void NotifyOnlineServiceStatusChanged(TEnumAsByte<EOnlineServerConnectionStatus> NewConnectionStatus);
	void CheckLoginForLeaderboard();
	void RenderPopup(class UCanvas* C);
	void RenderCompletionIcons(class UCanvas* C);
	void RenderAchievements(class UCanvas* C);
	void RenderTreasureStats(class UCanvas* C);
	void RenderEnemyStats(class UCanvas* C);
	void RenderTowerStats(class UCanvas* C);
	void RenderKillStats(class UCanvas* C);
	void RenderSingleLine(class UCanvas* C, const struct FString& toRender, float XOffset, class UTexture2D* Icon, unsigned long bDoWrap, float EndX);
	void RenderBestOfStat(class UCanvas* C, int StatClassIndex, const struct FString& prefixString, unsigned long Time);
	void RenderViewedEndings(class UCanvas* C);
	struct FString BuildBestOfString(int StatClassIndex, const struct FString& BufferName, int theDifficulty, class UTexture2D** Icon, struct FString* partTwo);
	void CycleMode(int Dir);
	void CycleDifficulty(int Dir);
	unsigned long AnyDifficultiesEnabled();
	int Cycle(int Start, int Dir, int Min, int Max, unsigned long shouldCycle);
	unsigned long OnInterceptedInputKey(struct FInputEventParameters* EventParms);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void Update(float DeltaTime);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void GetNextStat(unsigned long bMoveForward, int failsafedepth);
	void SetupLeaderboardDifficulty();
	void GetDifficulty(int OverrideDifficulty);
	void RefreshStats();
	int RenderAwards(class UCanvas* C);
	unsigned long AppendAwardString(class UCanvas* C, int whichAward);
	void SetHostMode(unsigned long isHost);
	void SetCampaignTag(const struct FString& newTag);
	void EnableAllButtons(unsigned long bEnabled);
	void SceneDeactivated();
	void LevelSelected(class UUIButton_DataListEntry* Button);
	void SelectAButton();
	void SceneActivated(unsigned long bInitialActivation);
	void SetStatReadIndex();
	unsigned long CheckSetupUI();
	void AddEnemyStats(const struct FName& enemyName, int curDifficulty);
	void AddTowerStats(const struct FName& towerName, int curDifficulty);
	void Preprocess();
	void PostInitialSceneUpdate();
	void PostInitialize();
	void Initialized();
};


// Class UDKGame.DunDefGameplayMessage
// 0x0000 (0x0164 - 0x0164)
class UDunDefGameplayMessage : public UDunDefGameMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGameplayMessage");
		return ptr;
	}

};


// Class UDKGame.DunDefTowerPreventOrAllowInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefTowerPreventOrAllowInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTowerPreventOrAllowInterface");
		return ptr;
	}


	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long CheckAllowance();
	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
};


// Class UDKGame.DunDefDamageType_Bleed
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Bleed : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Bleed");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Blunt
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Blunt : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Blunt");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Cutting
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Cutting : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Cutting");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Debug
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Debug : public UDunDefDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Debug");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_ElectricCutting
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_ElectricCutting : public UDunDefDamageType_Cutting
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_ElectricCutting");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_EnemySharp
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_EnemySharp : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_EnemySharp");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_EtherealSpike
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_EtherealSpike : public UDunDefDamageType_Lightning
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_EtherealSpike");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Fire_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Fire_Passive : public UDunDefDamageType_Fire
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Fire_Passive");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_FullMomentum
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_FullMomentum : public UDunDefDamageType_Blunt
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_FullMomentum");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Holy
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Holy : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Holy");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Ice
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Ice : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Ice");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_IgnoreResistance
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_IgnoreResistance : public UDunDefDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_IgnoreResistance");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_InfernoTrap
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_InfernoTrap : public UDunDefDamageType_Fire_Passive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_InfernoTrap");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_LightingTower
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_LightingTower : public UDunDefDamageType_Lightning
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_LightingTower");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Lightning_FullMomentum
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning_FullMomentum : public UDunDefDamageType_Lightning
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Lightning_FullMomentum");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Lightning_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Lightning_Passive : public UDunDefDamageType_Lightning
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Lightning_Passive");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Love
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Love : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Love");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_MegaDamage
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_MegaDamage : public UDunDefDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_MegaDamage");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Passive
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Passive : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Passive");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Poison_Passive
// 0x0000 (0x00D8 - 0x00D8)
class UDunDefDamageType_Poison_Passive : public UDunDefDamageType_Poison
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Poison_Passive");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Special
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Special : public UDunDefDamageType_Generic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Special");
		return ptr;
	}

};


// Class UDKGame.DunDefDamageType_Suction
// 0x0000 (0x00D4 - 0x00D4)
class UDunDefDamageType_Suction : public UDunDefDamageType_ForceKnockBack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDamageType_Suction");
		return ptr;
	}

};


// Class UDKGame.DunDefDarkElf
// 0x003C (0x0D48 - 0x0D0C)
class ADunDefDarkElf : public ADunDefEnemy
{
public:
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D0C(0x0008) (Edit)
	struct FName                                       ArrowAttachmentSocketName;                                // 0x0D14(0x0008) (Edit)
	class USkeletalMesh*                               ArrowMesh;                                                // 0x0D1C(0x0004) (Edit)
	struct FVector                                     ArrowMeshTranslationOffset;                               // 0x0D20(0x000C) (Edit)
	struct FRotator                                    ArrowMeshRotationOffset;                                  // 0x0D2C(0x000C) (Edit)
	struct FVector                                     ArrowMeshScale;                                           // 0x0D38(0x000C) (Edit)
	class USkeletalMeshComponent*                      ArrowMeshComponent;                                       // 0x0D44(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElf");
		return ptr;
	}


	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	void EndedAttack();
	void MeleeSwingEnd();
	void MeleeSwingStart();
};


// Class UDKGame.DunDefDarkElfController
// 0x002C (0x0638 - 0x060C)
class ADunDefDarkElfController : public ADunDefEnemyController
{
public:
	class ADunDefProjectile*                           AttackProjectileTemplate;                                 // 0x060C(0x0004) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0610(0x000C) (Edit)
	float                                              LeadTargetBasePercent;                                    // 0x061C(0x0004) (Edit)
	float                                              LeadTargetRandomPercent;                                  // 0x0620(0x0004) (Edit)
	float                                              AimRandomSpread;                                          // 0x0624(0x0004) (Edit)
	float                                              MaxShootOffsetYawArc;                                     // 0x0628(0x0004) (Edit)
	TArray<float>                                      DifficultyAttackRanges;                                   // 0x062C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElfController");
		return ptr;
	}


	int GetAttackDamage();
	float GetAttackRange();
	float GetAttackInterval(class AActor* Victim);
	void FireProjectile();
};


// Class UDKGame.DunDefEnemyTargetingPreventionInterface
// 0x0000 (0x003C - 0x003C)
class UDunDefEnemyTargetingPreventionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEnemyTargetingPreventionInterface");
		return ptr;
	}


	unsigned long PreventTargeting(const TScriptInterface<class UDunDefTargetableInterface>& Target, class ADunDefEnemy* forEnemy);
};


// Class UDKGame.DunDefTower_Blockade
// 0x0014 (0x0838 - 0x0824)
class ADunDefTower_Blockade : public ADunDefTower
{
public:
	float                                              BlockadeWidth;                                            // 0x0824(0x0004) (Edit)
	class UParticleSystemComponent*                    AmbientParticleEffect;                                    // 0x0828(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      StealEnemyElementalEffect : 1;                            // 0x082C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     StealElementPawnEffect;                                   // 0x0830(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     StealElementTowerEffect;                                  // 0x0834(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_Blockade");
		return ptr;
	}


	void PlayElementalStealingEffect(class ADunDefEnemy* fromEnemy);
	void NotifyTookDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class AActor* DamageCauser);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefDarkElfMage
// 0x0038 (0x0D80 - 0x0D48)
class ADunDefDarkElfMage : public ADunDefDarkElf
{
public:
	struct FName                                       SpawnAnimName;                                            // 0x0D48(0x0008) (Edit)
	struct FName                                       HealAnimName;                                             // 0x0D50(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     HealRadiusEffect;                                         // 0x0D58(0x0004) (Edit)
	class UParticleSystem*                             HealEffectPawns;                                          // 0x0D5C(0x0004) (Edit)
	float                                              RadiusEffectDivisor;                                      // 0x0D60(0x0004) (Edit)
	class UParticleSystemComponent*                    StaffParticleComponent;                                   // 0x0D64(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       StaffEffectSocketName;                                    // 0x0D68(0x0008) (Edit)
	int                                                StaffMaterialIndex;                                       // 0x0D70(0x0004) (Edit)
	TArray<class UParticleSystem*>                     StaffDifficultyParticleFX;                                // 0x0D74(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElfMage");
		return ptr;
	}


	int UpdateDifficultyMaterial();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void Destroyed();
	unsigned long Died(class AController* Killer, class UClass* dt, const struct FVector& HitLoc);
	void FireProjectile();
	unsigned long PlayingSpawnAnim();
	unsigned long PlayingHealingAnim();
	void PlaySpawnAnim();
	void PlayHealingAnim();
	void PostBeginPlay();
	void PlayHealEffect(float Radius);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefDarkElfMageController
// 0x00E9 (0x0721 - 0x0638)
class ADunDefDarkElfMageController : public ADunDefDarkElfController
{
public:
	int                                                HealingRadius;                                            // 0x0638(0x0004) (Edit)
	int                                                HealingAmount;                                            // 0x063C(0x0004) (Edit)
	float                                              HealSeekRange;                                            // 0x0640(0x0004) (Edit)
	float                                              HealHealthThreshold;                                      // 0x0644(0x0004) (Edit)
	float                                              SelfHealthThreshold;                                      // 0x0648(0x0004) (Edit)
	class ADunDefEnemy*                                SpawnEnemyTemplate;                                       // 0x064C(0x0004) (Edit)
	float                                              SpawnDistance;                                            // 0x0650(0x0004) (Edit)
	float                                              SpawnHeight;                                              // 0x0654(0x0004) (Edit)
	int                                                SpawnLimit;                                               // 0x0658(0x0004) (Edit)
	float                                              SpawnRange;                                               // 0x065C(0x0004) (Edit)
	struct FName                                       SpawnStateName;                                           // 0x0660(0x0008) (Edit)
	struct FName                                       HealStateName;                                            // 0x0668(0x0008) (Edit)
	struct FName                                       RunStateName;                                             // 0x0670(0x0008) (Edit)
	float                                              PanicRadius;                                              // 0x0678(0x0004) (Edit)
	float                                              PanicStopRange;                                           // 0x067C(0x0004) (Edit)
	float                                              SafeFloorZDistance;                                       // 0x0680(0x0004) (Edit)
	unsigned long                                      bDontKillMySpawnsOnDeath : 1;                             // 0x0684(0x0004) (Edit)
	unsigned long                                      bCanHeal : 1;                                             // 0x0684(0x0004)
	unsigned long                                      bCanSpawn : 1;                                            // 0x0684(0x0004)
	unsigned long                                      bNoAllowPanic : 1;                                        // 0x0684(0x0004) (Edit)
	unsigned long                                      bHealByHealthPct : 1;                                     // 0x0684(0x0004) (Edit)
	int                                                AbortRunTime;                                             // 0x0688(0x0004) (Edit)
	float                                              OtherMageHealingMultiplier;                               // 0x068C(0x0004) (Edit)
	float                                              RunAwayTimeOut;                                           // 0x0690(0x0004) (Edit)
	float                                              MoveToHealTargetTimeOut;                                  // 0x0694(0x0004) (Edit)
	float                                              OtherStateTimeOut;                                        // 0x0698(0x0004) (Edit)
	float                                              SummonInterval;                                           // 0x069C(0x0004) (Edit)
	float                                              LastActionTimeout;                                        // 0x06A0(0x0004) (Edit)
	float                                              PawnHealthMultiplierHealingExponent;                      // 0x06A4(0x0004) (Edit)
	TArray<float>                                      DifficultyHealingRadiusMultipliers;                       // 0x06A8(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      DifficultyHealingAmountMultipliers;                       // 0x06B4(0x000C) (Edit, NeedCtorLink)
	float                                              PawnHealthMultiplier;                                     // 0x06C0(0x0004) (Transient)
	int                                                SpawnsInPlay;                                             // 0x06C4(0x0004)
	TArray<class ADunDefPawn*>                         SpawnList;                                                // 0x06C8(0x000C) (NeedCtorLink)
	TArray<class AActor*>                              IgnoreDeadPawnsList;                                      // 0x06D4(0x000C) (NeedCtorLink)
	class ADunDefPawn*                                 RunFrom;                                                  // 0x06E0(0x0004)
	struct FVector                                     RunToLoc;                                                 // 0x06E4(0x000C)
	struct FVector                                     RunToLocVia;                                              // 0x06F0(0x000C)
	class AActor*                                      RunToActor;                                               // 0x06FC(0x0004)
	float                                              StartRunTime;                                             // 0x0700(0x0004)
	int                                                RunCounter;                                               // 0x0704(0x0004)
	class ADunDefPawn*                                 HealTarget;                                               // 0x0708(0x0004)
	float                                              CooldownTimeHeal;                                         // 0x070C(0x0004) (Edit)
	float                                              CooldownTimeSpawn;                                        // 0x0710(0x0004) (Edit)
	float                                              LastActionTime;                                           // 0x0714(0x0004)
	float                                              LastSpawnTime;                                            // 0x0718(0x0004) (Transient)
	float                                              HealthPctToHeal;                                          // 0x071C(0x0004) (Edit)
	TEnumAsByte<EWhatToDo>                             WhatToDoNext;                                             // 0x0720(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElfMageController");
		return ptr;
	}


	void CheckForCustomAttacks();
	void GetPawnHealthMultiplier();
	float GetHealingRadius();
	void DefaultStateCheck();
	int GetHealingAmount(class ADunDefPawn* healingActor);
	struct FVector GeneratePathToPoint(const struct FVector& Goal, float WithinDistance, unsigned long bAllowPartialPath);
	void HealCooldown();
	void SpawnCooldown();
	void NotifySpawnDeath(class ADunDefPawn* P);
	unsigned long ShouldSpawn();
	void TimedDecideWhatToDo();
	unsigned long CheckForDeadSpawns();
	void DecideWhatToDo();
	unsigned long ShouldPanic();
	unsigned long ShouldDoHeal();
	void KillSpawns(class AController* Killer);
	void InterruptLatent();
	void FireProjectile();
	void PostBeginPlay();
};


// Class UDKGame.DunDefSkeleton
// 0x0040 (0x0D4C - 0x0D0C)
class ADunDefSkeleton : public ADunDefEnemy
{
public:
	int                                                Lives;                                                    // 0x0D0C(0x0004) (Edit)
	float                                              ResurrectionTimer;                                        // 0x0D10(0x0004) (Edit)
	struct FName                                       ResurrectionAnimName;                                     // 0x0D14(0x0008) (Edit)
	struct FName                                       MeleeSwingSocketAName;                                    // 0x0D1C(0x0008) (Edit)
	struct FName                                       MeleeSwingSocketBName;                                    // 0x0D24(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     DeathEmitterTemplate;                                     // 0x0D2C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     RezEmitterTemplate;                                       // 0x0D30(0x0004) (Edit)
	class UParticleSystem*                             SpawnEffect;                                              // 0x0D34(0x0004) (Edit)
	class USoundCue*                                   SpawnSound;                                               // 0x0D38(0x0004) (Edit)
	TArray<class UClass*>                              DeathDealingDmgTypes;                                     // 0x0D3C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bTempDead : 1;                                            // 0x0D48(0x0004) (Net)
	unsigned long                                      bResurrect : 1;                                           // 0x0D48(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefSkeleton");
		return ptr;
	}


	unsigned long PlayingResurrectionAnim();
	void Resurrect();
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	float GetTowerTargetingDesirability(class ADunDefTower* forTower);
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	unsigned long IsCurrentlyPlayingHurtAnimation();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void PlayTempDying(class UClass* DamageType, const struct FVector& HitLocation);
	void Destroyed();
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	struct FVector GetMeleeSwingBLocation();
	struct FVector GetMeleeSwingALocation();
	void EndMeleeSwing();
	void StartMeleeSwing();
	void ReplicatedEvent(const struct FName& VarName);
	void CheckLives();
	void PostBeginPlay();
	struct FColor GetMiniMapIconColor();
	void SetCreator(class ADunDefEnemyController* C);
	unsigned long StopsProjectile(class AProjectile* P);
	unsigned long IsDead();
};


// Class UDKGame.DunDefDarkElfWarrior
// 0x0080 (0x0D8C - 0x0D0C)
class ADunDefDarkElfWarrior : public ADunDefEnemy
{
public:
	float                                              DashSpeed;                                                // 0x0D0C(0x0004) (Edit)
	float                                              DashAccelRate;                                            // 0x0D10(0x0004) (Edit)
	float                                              CrushedDamageInterval;                                    // 0x0D14(0x0004) (Edit)
	float                                              CrushedDamageMultiplier;                                  // 0x0D18(0x0004) (Edit)
	struct FRotator                                    DashRotationRate;                                         // 0x0D1C(0x000C) (Edit)
	struct FName                                       DashAnimName;                                             // 0x0D28(0x0008) (Edit)
	struct FName                                       DashLoopAnimName;                                         // 0x0D30(0x0008) (Edit)
	struct FName                                       DashAttackAnimName;                                       // 0x0D38(0x0008) (Edit)
	struct FName                                       MeleeSwingSocketAName;                                    // 0x0D40(0x0008) (Edit)
	struct FName                                       MeleeSwingSocketBName;                                    // 0x0D48(0x0008) (Edit)
	struct FName                                       LeapStartAnimName;                                        // 0x0D50(0x0008) (Edit)
	struct FName                                       LeapLandAnimName;                                         // 0x0D58(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     ShockwaveEffect;                                          // 0x0D60(0x0004) (Edit)
	class USoundCue*                                   StartDashSound;                                           // 0x0D64(0x0004) (Edit)
	TArray<struct FName>                               UpperBodyCustomAnimNodeNames;                             // 0x0D68(0x000C) (Edit, NeedCtorLink)
	struct FName                                       UpperBodyCustomAnimBlenderName;                           // 0x0D74(0x0008) (Edit)
	class UAnimNodeBlend*                              UpperBodyCustomAnimBlender;                               // 0x0D7C(0x0004)
	int                                                LastUpperBodyCustomAnimNodePlayIndex;                     // 0x0D80(0x0004)
	float                                              LastCrushedDamageTime;                                    // 0x0D84(0x0004) (Transient)
	unsigned long                                      bLeaping : 1;                                             // 0x0D88(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElfWarrior");
		return ptr;
	}


	unsigned long AllowTrapSpringing(class ADunDefTower_DetonationType* trap);
	void DoCrushed(class AActor* Victim);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	float WarriorPlayAttackAnimation(int UseAttackAnimation);
	void StuckOnPawn(class APawn* Op);
	void JumpOffPawn();
	struct FVector GetMeleeSwingBLocation();
	struct FVector GetMeleeSwingALocation();
	void EndMeleeSwing();
	void StartMeleeSwing();
	void EndDash();
	void StartDash();
	void ResetDashingMetrics();
	void SetDashingMetrics();
	void DoShockwave();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void StartLeap();
	unsigned long IsPlayingLeapAnim();
	void PlayLeapAnim();
	unsigned long IsPlayingDashAnim();
	void PlayDashForwardAnim();
	void PlayDashAttackAnim();
	void PlayDashAnim();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	float GetEnemyTargetingDesirability(class AEngineNativeDunDefAIController* forController);
	void PostBeginPlay();
};


// Class UDKGame.DunDefDarkElfWarriorController
// 0x00A4 (0x06B0 - 0x060C)
class ADunDefDarkElfWarriorController : public ADunDefEnemyController
{
public:
	int                                                DashZDiffMax;                                             // 0x060C(0x0004) (Edit)
	int                                                SpecialAttackDistanceMin;                                 // 0x0610(0x0004) (Edit)
	int                                                SpecialAttackDistanceMax;                                 // 0x0614(0x0004) (Edit)
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x0618(0x0004)
	unsigned long                                      bUseMoveTowardForDash : 1;                                // 0x0618(0x0004) (Edit)
	unsigned long                                      IsInShockwave : 1;                                        // 0x0618(0x0004) (Transient)
	struct FVector                                     PreviousMeleeSwingALocation;                              // 0x061C(0x000C)
	struct FVector                                     PreviousMeleeSwingBLocation;                              // 0x0628(0x000C)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x0634(0x000C) (NeedCtorLink)
	TArray<class AActor*>                              ShockWaveHurtList;                                        // 0x0640(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x064C(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0650(0x0004) (Edit)
	float                                              LandOnDamageMomentum;                                     // 0x0654(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x0658(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0664(0x0004) (Edit)
	float                                              ShockwaveExpansionTime;                                   // 0x0668(0x0004) (Edit)
	float                                              MaxShockwaveRadius;                                       // 0x066C(0x0004) (Edit)
	int                                                ShockwaveDamage;                                          // 0x0670(0x0004) (Edit)
	float                                              ShockwaveMomentum;                                        // 0x0674(0x0004) (Edit)
	float                                              TowerDamageMultiplier;                                    // 0x0678(0x0004) (Edit)
	class UClass*                                      ShockwaveDamageType;                                      // 0x067C(0x0004) (Edit)
	float                                              LeapOverDashPercent;                                      // 0x0680(0x0004) (Edit)
	float                                              DashTimeOutTime;                                          // 0x0684(0x0004) (Edit)
	float                                              LeapMinimumAlivetime;                                     // 0x0688(0x0004) (Edit)
	struct FVector                                     DashToLoc;                                                // 0x068C(0x000C)
	float                                              ReachTime;                                                // 0x0698(0x0004)
	int                                                AttackCounter;                                            // 0x069C(0x0004)
	struct FVector                                     ShockwaveOrigin;                                          // 0x06A0(0x000C) (Transient)
	float                                              ShockwaveTimer;                                           // 0x06AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDarkElfWarriorController");
		return ptr;
	}


	int GetAttackDamage();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	float GetDamageMultiplier(class AActor* forTarget);
	void StartShockwave(const struct FVector& ShockwaveCenter);
	void Tick(float DeltaTime);
	void StartMeleeSwing();
	void DoMeleeSwingTrace();
	unsigned long AddToShockwaveHurtList(class AActor* newEntry);
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void CheckForCustomAttacks();
	unsigned long IsDashing();
};


// Class UDKGame.DunDefDataProvider_SearchResult
// 0x0000 (0x0090 - 0x0090)
class UDunDefDataProvider_SearchResult : public UUIDataProvider_Settings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataProvider_SearchResult");
		return ptr;
	}

};


// Class UDKGame.DunDefDataProvider_ServerDetails
// 0x0004 (0x005C - 0x0058)
class UDunDefDataProvider_ServerDetails : public UUIDataProvider
{
public:
	int                                                SearchResultsRow;                                         // 0x0058(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataProvider_ServerDetails");
		return ptr;
	}

};


// Class UDKGame.DunDefDataStore_GameSettings
// 0x0000 (0x008C - 0x008C)
class UDunDefDataStore_GameSettings : public UUIDataStore_OnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDataStore_GameSettings");
		return ptr;
	}


	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class UDKGame.DunDefDemon
// 0x0078 (0x0DB8 - 0x0D40)
class ADunDefDemon : public ADunDefBoss
{
public:
	struct FName                                       PoundGroundAnimation;                                     // 0x0D40(0x0008) (Edit)
	struct FName                                       SummonFlameLineAnimation;                                 // 0x0D48(0x0008) (Edit)
	struct FName                                       ShootFireballAnimation;                                   // 0x0D50(0x0008) (Edit)
	struct FName                                       MajorHurtAnimation;                                       // 0x0D58(0x0008) (Edit)
	struct FName                                       LandingAnimation;                                         // 0x0D60(0x0008) (Edit)
	struct FName                                       TakeoffAnimation;                                         // 0x0D68(0x0008) (Edit)
	struct FName                                       ShockedInAirAnimation;                                    // 0x0D70(0x0008) (Edit)
	struct FName                                       ShockedOnGroundAnimation;                                 // 0x0D78(0x0008) (Edit)
	struct FName                                       ShockedLandingAnimation;                                  // 0x0D80(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     PoundImpactEffect;                                        // 0x0D88(0x0004) (Edit)
	class UParticleSystemComponent*                    ShockedParticleEffect;                                    // 0x0D8C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     PoundImpactEffectOffset;                                  // 0x0D90(0x000C) (Edit)
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D9C(0x0008) (Edit)
	struct FName                                       DivingToLandAnimation;                                    // 0x0DA4(0x0008) (Edit)
	class USoundCue*                                   ElectrocutedSound;                                        // 0x0DAC(0x0004) (Edit)
	float                                              FlameLineAnimSpeed;                                       // 0x0DB0(0x0004) (Edit)
	unsigned long                                      bIsShocked : 1;                                           // 0x0DB4(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDemon");
		return ptr;
	}


	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	unsigned long AllowTrapSpringing(class ADunDefTower_DetonationType* trap);
	void PostBeginPlay();
	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	unsigned long IsCurrentlyPlayingAttackAnimation();
	float PlayRightAttackAnimation();
	float PlayLeftAttackAnimation();
	float PlayFrontAttackAnimation();
	float PlayTakeOffAnimation();
	float PlayLandingAnimation();
	float PlayShootFireballAnimation();
	float PlaySummonFlameLineAnimation();
	float PlayPoundAnimation();
	float PlayShockedLandingAnimation();
	float PlayDivingToLandAnimation();
	void StopShockedAnims();
	float PlayShockedInAirAnimation();
	float PlayShockedOnGroundAnimation();
	unsigned long IsCurrentlyPlayingHurtAnimation();
	void PlayMajorHurtAnimation();
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void PlayJumpAnimation();
	struct FVector GetAMeleeSwingLocation(const struct FName& SocketName);
	void ShootFireball();
	void StopFlameSummoning();
	void StartFlameSummoning();
	void PoundedTheGround();
	void MeleeSwingEnd();
	void MeleeSwingStart();
	void SetShocked(unsigned long Shocked);
	void SetDyingPhysics();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	unsigned long ForceFriendlyFire(class AActor* Target);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefDemonController
// 0x0158 (0x0764 - 0x060C)
class ADunDefDemonController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x060C(0x0004)
	unsigned long                                      bRequireForwardFlameLine : 1;                             // 0x060C(0x0004) (Edit)
	unsigned long                                      bAllowLanding : 1;                                        // 0x060C(0x0004) (Edit)
	unsigned long                                      SummoningFlameLine : 1;                                   // 0x060C(0x0004)
	unsigned long                                      IsInShockwave : 1;                                        // 0x060C(0x0004) (Transient)
	TArray<struct FVector>                             PreviousMeleeSwingLocations;                              // 0x0610(0x000C) (NeedCtorLink)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x061C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               MeleeSwingSockets;                                        // 0x0628(0x000C) (Edit, NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0634(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0638(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x063C(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0648(0x0004) (Edit)
	struct FName                                       AltAttackStateName;                                       // 0x064C(0x0008) (Edit)
	float                                              RandomChanceOfPounding;                                   // 0x0654(0x0004) (Edit)
	int                                                LastPlayedHurtHealth;                                     // 0x0658(0x0004)
	float                                              HurtStateHealthPercentInterval;                           // 0x065C(0x0004) (Edit)
	float                                              ShockwaveExpansionTime;                                   // 0x0660(0x0004) (Edit)
	float                                              MaxShockwaveRadius;                                       // 0x0664(0x0004) (Edit)
	float                                              SummonFlameTime;                                          // 0x0668(0x0004) (Edit)
	int                                                ShockwaveDamage;                                          // 0x066C(0x0004) (Edit)
	int                                                FlightPathNodeConnectionSet;                              // 0x0670(0x0004) (Edit)
	TArray<int>                                        NumProjectilesPerDifficulty;                              // 0x0674(0x000C) (Edit, NeedCtorLink)
	float                                              ShockwaveMomentum;                                        // 0x0680(0x0004) (Edit)
	class UClass*                                      ShockwaveDamageType;                                      // 0x0684(0x0004) (Edit)
	class ADunDefGasCloud*                             FlameCloudTemplate;                                       // 0x0688(0x0004) (Edit)
	struct FVector                                     FlameLineSpawnOffset;                                     // 0x068C(0x000C) (Edit)
	float                                              SummonFlameInterval;                                      // 0x0698(0x0004) (Edit)
	float                                              FlameLineTurnSpeed;                                       // 0x069C(0x0004) (Edit)
	float                                              FlameLineMoveSpeed;                                       // 0x06A0(0x0004) (Edit)
	float                                              LandingAttackAirSpeed;                                    // 0x06A4(0x0004) (Edit)
	float                                              ShockedOnGroundWaitTime;                                  // 0x06A8(0x0004) (Edit)
	float                                              ReachFlightDestinationWaitTime;                           // 0x06AC(0x0004) (Edit)
	float                                              ForcePoundGroundMeleeDistance;                            // 0x06B0(0x0004) (Edit)
	float                                              LandingAttackTimeOut;                                     // 0x06B4(0x0004) (Edit)
	float                                              StartLandingAttackTime;                                   // 0x06B8(0x0004)
	float                                              LastSummonFlameLineTime;                                  // 0x06BC(0x0004)
	struct FVector                                     CurrentFlameLinePos;                                      // 0x06C0(0x000C)
	struct FVector                                     CurentFlameLinedirection;                                 // 0x06CC(0x000C)
	struct FVector                                     LastFlameLinePos;                                         // 0x06D8(0x000C)
	float                                              LandTimeInterval;                                         // 0x06E4(0x0004) (Edit)
	float                                              FlightTimeInterval;                                       // 0x06E8(0x0004) (Edit)
	class AActor*                                      CurrentFlightDestination;                                 // 0x06EC(0x0004)
	TArray<class AActor*>                              FlightDestinations;                                       // 0x06F0(0x000C) (NeedCtorLink)
	TArray<class ADunDefCustomNode*>                   LandNodes;                                                // 0x06FC(0x000C) (NeedCtorLink)
	float                                              LastLandTime;                                             // 0x0708(0x0004)
	float                                              ShockedLandingAirSpeed;                                   // 0x070C(0x0004)
	struct FName                                       ProjectileAttackStateName;                                // 0x0710(0x0008) (Edit)
	float                                              ProjectileShootRange;                                     // 0x0718(0x0004) (Edit)
	float                                              ProjectileShootInterval;                                  // 0x071C(0x0004) (Edit)
	struct FName                                       AirProjectileAttackStateName;                             // 0x0720(0x0008) (Edit)
	float                                              AirProjectileShootRange;                                  // 0x0728(0x0004) (Edit)
	float                                              AirProjectileShootInterval;                               // 0x072C(0x0004) (Edit)
	class ADunDefProjectile*                           AttackProjectileTemplate;                                 // 0x0730(0x0004) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0734(0x000C) (Edit)
	float                                              LeadTargetBasePercent;                                    // 0x0740(0x0004) (Edit)
	float                                              LeadTargetRandomPercent;                                  // 0x0744(0x0004) (Edit)
	float                                              AimRandomSpread;                                          // 0x0748(0x0004) (Edit)
	float                                              MaxShootOffsetYawArc;                                     // 0x074C(0x0004) (Edit)
	struct FVector                                     ShockwaveOrigin;                                          // 0x0750(0x000C) (Transient)
	float                                              ShockwaveTimer;                                           // 0x075C(0x0004) (Transient)
	float                                              LastProjectileShootTime;                                  // 0x0760(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDemonController");
		return ptr;
	}


	void ShootFireball();
	void DoProjectileAttack();
	void CheckForCustomAttacks();
	void DoAttack();
	void DoFlight();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void PostBeginPlay();
	class AActor* GetNearestLandNodeToTarget(class AActor* toTarget);
	class AActor* GetRandomFlightPoint();
	void Shock();
	void ObstructionJump(const struct FVector& jumpForwardDir, const struct FVector& jumpSideDir);
	void CancelCurrentTarget(int Reason);
	void StopFlameSummoning();
	void StartFlameSummoning();
	void StartShockwave(const struct FVector& ShockwaveCenter);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void StartMeleeSwing();
};


// Class UDKGame.DunDefDragonBoss
// 0x00E0 (0x0E20 - 0x0D40)
class ADunDefDragonBoss : public ADunDefBoss
{
public:
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D40(0x0008) (Edit)
	struct FName                                       ShootingFireballAnimationLeft;                            // 0x0D48(0x0008) (Edit)
	struct FName                                       ShootingFireballAnimationRight;                           // 0x0D50(0x0008) (Edit)
	float                                              StrafingSpeed;                                            // 0x0D58(0x0004) (Edit)
	float                                              MaxStrafingDistance;                                      // 0x0D5C(0x0004) (Edit)
	struct FName                                       HitByHarpoonAnimation;                                    // 0x0D60(0x0008) (Edit)
	struct FName                                       BitingAnimation;                                          // 0x0D68(0x0008) (Edit)
	struct FName                                       FlamethrowerAnimation;                                    // 0x0D70(0x0008) (Edit)
	float                                              FaceToFaceInterpolationTime;                              // 0x0D78(0x0004) (Edit)
	float                                              LookAtLocationInterpSpeed;                                // 0x0D7C(0x0004) (Edit)
	float                                              ShootFireballAnimSpeed;                                   // 0x0D80(0x0004) (Edit)
	struct FVector                                     LookAtOffset;                                             // 0x0D84(0x000C) (Edit)
	struct FName                                       FlamethrowerSocketName;                                   // 0x0D90(0x0008) (Edit)
	struct FName                                       LandedShootingFireballAnimation;                          // 0x0D98(0x0008) (Edit)
	struct FName                                       LandingFinishAnimation;                                   // 0x0DA0(0x0008) (Edit)
	struct FName                                       LandingLetGoAnimation;                                    // 0x0DA8(0x0008) (Edit)
	int                                                KilledByHeroClassType;                                    // 0x0DB0(0x0004) (Edit)
	TArray<float>                                      AirSpeedMultipliers;                                      // 0x0DB4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bOnlyTargetableWhenFaceToFace : 1;                        // 0x0DC0(0x0004) (Edit)
	unsigned long                                      bUseFallingBlender : 1;                                   // 0x0DC0(0x0004) (Net)
	unsigned long                                      bIsStrafing : 1;                                          // 0x0DC0(0x0004) (Net)
	unsigned long                                      StrafingRight : 1;                                        // 0x0DC0(0x0004)
	unsigned long                                      StrafeSwitchedDirection : 1;                              // 0x0DC0(0x0004)
	unsigned long                                      bUsingFaceToFaceBlender : 1;                              // 0x0DC0(0x0004) (Net)
	unsigned long                                      IsInFaceToFaceInterp : 1;                                 // 0x0DC0(0x0004)
	struct FVector                                     FlyingTargetingLocationOffset;                            // 0x0DC4(0x000C)
	struct FVector                                     StrafingCenterPoint;                                      // 0x0DD0(0x000C)
	struct FRotator                                    StrafeStartingRotation;                                   // 0x0DDC(0x000C)
	struct FVector                                     FaceToFaceInterpStart;                                    // 0x0DE8(0x000C)
	struct FVector                                     FaceToFaceInterpEnd;                                      // 0x0DF4(0x000C)
	float                                              FaceToFaceInterpSpeed;                                    // 0x0E00(0x0004)
	class UAnimNodeBlend*                              FallingBlender;                                           // 0x0E04(0x0004)
	class UAnimNodeBlend*                              FaceToFaceBlender;                                        // 0x0E08(0x0004)
	class USkelControlLookAt*                          LookAtController;                                         // 0x0E0C(0x0004)
	class USkelControlLookAt*                          AltLookAtController;                                      // 0x0E10(0x0004)
	class USkelControlSingleBone*                      NeckPitchController;                                      // 0x0E14(0x0004)
	class USkelControlSingleBone*                      AltNeckPitchController;                                   // 0x0E18(0x0004)
	class AActor*                                      MyLookAtTarget;                                           // 0x0E1C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDragonBoss");
		return ptr;
	}


	struct FVector GetInterpolatedTargetingLocation(class AActor* RequestedBy);
	struct FVector GetTargetingLocation(class AActor* RequestedBy);
	struct FVector GetTargetingLocationOffset();
	void UpdateDifficultyValues(unsigned long UpdateMaterial, unsigned long onlyDynamicValues);
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void FellOutOfWorld(class UClass* dmgType);
	void SetLookAtTarget(class AActor* newLookAtTarget);
	void AltNeckPitchOn();
	void AltNeckPitchOff();
	void NeckPitchOn();
	void NeckPitchOff();
	void UpdateInterpolation(float DeltaTime);
	void StartFaceToFaceInterpolation();
	void EndFaceToFace();
	void DoFalling();
	float GetPlayerTargetingDesirability(class ADunDefPlayerController* forController, class ADunDefPlayer* ForPlayer);
	void SetFaceToFaceBlender(unsigned long bFaceToFaceBlender);
	void SetFallingBlender(unsigned long bFallingBlender);
	void PostBeginPlay();
	void UpdateStrafing(float DeltaTime);
	void Tick(float DeltaTime);
	void SetOnAllOverlappingAuras(unsigned long bSet);
	float GetAirSpeed();
	void StopStrafing();
	void StartStrafing();
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void PlayJumpAnimation();
	unsigned long ForceFriendlyFire(class AActor* Target);
	void GetFlamethrowerSocketTransformation(struct FVector* theLoc, struct FRotator* theRot);
	struct FVector GetAMeleeSwingLocation(const struct FName& MeleeSwingSocketName);
	void FlamethrowerEnd();
	void FlamethrowerStart();
	void EndMeleeSwing();
	void StartMeleeSwing();
	void FireProjectile();
	unsigned long IsCurrentlyPlayingAttackAnimation();
	float PlayFlamethrowerAnimation();
	float PlayBitingAnimation();
	float PlayLandingLetGoAnimation();
	float PlayLandingFinishAnimation();
	float PlayShootingFireballAnimation(unsigned long overrideAnimation, int Direction);
	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefDragonBossController
// 0x00D4 (0x06E0 - 0x060C)
class ADunDefDragonBossController : public ADunDefEnemyController
{
public:
	float                                              FireballShootingInterval;                                 // 0x060C(0x0004) (Edit)
	float                                              StartFireballShootingTime;                                // 0x0610(0x0004)
	float                                              FirebalShootingDurationAfterNavigation;                   // 0x0614(0x0004) (Edit)
	float                                              LastProjectileShootTime;                                  // 0x0618(0x0004)
	class ADunDefHomingProjectile*                     AttackProjectileTemplate;                                 // 0x061C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ProjectileMuzzleSpawnEffect;                              // 0x0620(0x0004) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0624(0x000C) (Edit)
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                        // 0x0630(0x000C) (Edit)
	float                                              MaxShootOffsetYawArc;                                     // 0x063C(0x0004) (Edit)
	int                                                NumFireballProjectiles;                                   // 0x0640(0x0004) (Edit)
	class ADunDefHomingProjectile*                     FaceToFaceAttackProjectileTemplate;                       // 0x0644(0x0004) (Edit)
	float                                              FaceToFaceDuration;                                       // 0x0648(0x0004) (Edit)
	float                                              FaceToFaceAttackInterval;                                 // 0x064C(0x0004) (Edit)
	float                                              HitByHarpoonPreFallingWait;                               // 0x0650(0x0004) (Edit)
	float                                              HitByHarpoonPostFallingWait;                              // 0x0654(0x0004) (Edit)
	struct FVector                                     HarpoonFallingAcceleration;                               // 0x0658(0x000C) (Edit)
	float                                              FaceToFaceBiteAttackChance;                               // 0x0664(0x0004) (Edit)
	float                                              FaceToFaceFlamethrowerAttackChance;                       // 0x0668(0x0004) (Edit)
	float                                              BiteRange;                                                // 0x066C(0x0004) (Edit)
	float                                              FlamethrowerRange;                                        // 0x0670(0x0004) (Edit)
	float                                              FlamethrowerDamageInterval;                               // 0x0674(0x0004) (Edit)
	float                                              FlamethrowerDamageAmount;                                 // 0x0678(0x0004) (Edit)
	float                                              FlamethrowerMaxRange;                                     // 0x067C(0x0004) (Edit)
	float                                              FlamethrowerRangeIncreaseSpeed;                           // 0x0680(0x0004) (Edit)
	float                                              FlamethrowerHitMaxDeltaYaw;                               // 0x0684(0x0004) (Edit)
	float                                              FlamethrowerHitMaxDeltaPitch;                             // 0x0688(0x0004) (Edit)
	float                                              FlamethrowerOriginDamageRadius;                           // 0x068C(0x0004) (Edit)
	float                                              FlamethrowerLookAwayDelay;                                // 0x0690(0x0004) (Edit)
	float                                              FaceToFaceLeaveDeltaHealthPercent;                        // 0x0694(0x0004) (Edit)
	class UClass*                                      FlamethrowerDamageType;                                   // 0x0698(0x0004) (Edit)
	float                                              StartFaceToFaceTime;                                      // 0x069C(0x0004)
	float                                              FlamethrowerCurrentRange;                                 // 0x06A0(0x0004)
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x06A4(0x0004)
	unsigned long                                      bFaceToFaceTested : 1;                                    // 0x06A4(0x0004)
	unsigned long                                      bLeavingFaceToFace : 1;                                   // 0x06A4(0x0004)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x06A8(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x06B4(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x06B8(0x0004) (Edit)
	float                                              MeleeHitRadius;                                           // 0x06BC(0x0004) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x06C0(0x0004) (Edit)
	TArray<struct FName>                               MeleeSwingSocketNames;                                    // 0x06C4(0x000C) (Edit, NeedCtorLink)
	class AActor*                                      NavigationTarget;                                         // 0x06D0(0x0004)
	class AActor*                                      TargetActor;                                              // 0x06D4(0x0004)
	class ADunDefHomingProjectile*                     CurrentFireballTemplate;                                  // 0x06D8(0x0004)
	float                                              FaceToFaceBeginHealthPercent;                             // 0x06DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDragonBossController");
		return ptr;
	}


	class AActor* GetANavigationTarget();
	class ANavigationPoint* FindNearestNavPointTo(class AActor* A, unsigned long bCheckVisible);
	struct FVector GeneratePathToActor(class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	void InitNavigationHandle();
	unsigned long NavActorReachable(class AActor* A);
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void DoHitByHarpoon();
	void FlamethrowerEnd();
	void FlamethrowerStart();
	unsigned long ShouldDamage(class AActor* act);
	void EndMeleeSwing();
	void StartMeleeSwing();
	void ShootFireball();
};


// Class UDKGame.DunDefDragonBossBallista
// 0x008C (0x02A8 - 0x021C)
class ADunDefDragonBossBallista : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                         // 0x021C(0x0004) (Edit)
	struct FColor                                      ToolTipOutOfRangeColor;                                   // 0x0220(0x0004) (Edit)
	struct FColor                                      ToolTipInvalidUseColor;                                   // 0x0224(0x0004) (Edit)
	struct FColor                                      MiniMapIconColor;                                         // 0x0228(0x0004) (Edit)
	struct FColor                                      DisabledMiniMapIconColor;                                 // 0x022C(0x0004) (Edit)
	class USkeletalMeshComponent*                      MySkeletalMesh;                                           // 0x0230(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              ActivationDistance;                                       // 0x0234(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0238(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ShootAnimationName;                                       // 0x023C(0x0008) (Edit)
	float                                              ActivationInterval;                                       // 0x0244(0x0004) (Edit)
	class ADunDefProjectile*                           ProjectileTemplate;                                       // 0x0248(0x0004) (Edit)
	struct FName                                       ProjectileSocketName;                                     // 0x024C(0x0008) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0254(0x000C) (Edit)
	float                                              PitchControllerAngle;                                     // 0x0260(0x0004) (Edit, Net)
	struct FString                                     StringBallistaName;                                       // 0x0264(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StringBallistaResetting;                                  // 0x0270(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StringBallistaActivation;                                 // 0x027C(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ActivationWeighting;                                      // 0x0288(0x0004) (Edit)
	float                                              ActivationOffset;                                         // 0x028C(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x0290(0x0004) (Edit)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x0294(0x0004) (Edit)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x0298(0x0004) (Transient)
	class USkelControlSingleBone*                      PitchController;                                          // 0x029C(0x0004) (Transient)
	float                                              LastActivationTime;                                       // 0x02A0(0x0004)
	class APawn*                                       LastActivatedByPawn;                                      // 0x02A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefDragonBossBallista");
		return ptr;
	}


	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	void ShootProjectile();
	void Activated();
	void UpdatePitchController();
	void Destroyed();
	void PostBeginPlay();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefHomingProjectile
// 0x0054 (0x03C8 - 0x0374)
class ADunDefHomingProjectile : public ADunDefProjectile
{
public:
	float                                              HomingInterpSpeed;                                        // 0x0374(0x0004) (Edit)
	float                                              EarlyHomingInterpSpeed;                                   // 0x0378(0x0004) (Edit)
	float                                              EarlyHomingTime;                                          // 0x037C(0x0004) (Edit)
	float                                              EarlyNoHomingTime;                                        // 0x0380(0x0004) (Edit)
	struct FVector                                     HomingDirOffset;                                          // 0x0384(0x000C) (Edit)
	float                                              HomingDuration;                                           // 0x0390(0x0004) (Edit)
	float                                              DestructionDelayTime;                                     // 0x0394(0x0004) (Edit)
	int                                                NumAllowedPassThrough;                                    // 0x0398(0x0004) (Edit)
	unsigned long                                      bPlayPawnImpactSoundOnHittingEachPawn : 1;                // 0x039C(0x0004) (Edit)
	unsigned long                                      bDamageOnTouch : 1;                                       // 0x039C(0x0004) (Edit)
	unsigned long                                      bPlayImpactEffectOnHittingEachPawn : 1;                   // 0x039C(0x0004) (Edit)
	unsigned long                                      bPierceEnemies : 1;                                       // 0x039C(0x0004) (Edit)
	unsigned long                                      DidClientExplode : 1;                                     // 0x039C(0x0004)
	struct FVector                                     ClientExplodeLocation;                                    // 0x03A0(0x000C)
	struct FVector                                     ClientExplodeNormal;                                      // 0x03AC(0x000C)
	TArray<class AActor*>                              PreviousHitActors;                                        // 0x03B8(0x000C) (NeedCtorLink)
	int                                                NumPassThrough;                                           // 0x03C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHomingProjectile");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void NotifyStopHoming();
	void DoHoming(float DeltaTime);
	void Tick(float DeltaTime);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.HUDPrefabContainer
// 0x003C (0x04B4 - 0x0478)
class UHUDPrefabContainer : public UUIContainer
{
public:
	class UObject*                                     associatedObject;                                         // 0x0478(0x0004)
	float                                              LastRenderTime;                                           // 0x047C(0x0004)
	class UUIPrefab*                                   myPrefab;                                                 // 0x0480(0x0004)
	unsigned long                                      HasLoadedSequences : 1;                                   // 0x0484(0x0004)
	unsigned long                                      soundsInQueue : 1;                                        // 0x0484(0x0004)
	TArray<struct FDunDefUIAnimation>                  UIAnimationSequences;                                     // 0x0488(0x000C) (Edit, NeedCtorLink)
	struct FName                                       UIAnimSequence_OpenPrefab;                                // 0x0494(0x0008) (Edit)
	struct FName                                       UIAnimSequence_ClosePrefab;                               // 0x049C(0x0008) (Edit)
	TArray<struct FUIAnimationSound>                   soundQueue;                                               // 0x04A4(0x000C) (NeedCtorLink)
	float                                              timeToClose;                                              // 0x04B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HUDPrefabContainer");
		return ptr;
	}


	unsigned long DestroyedContainer();
	void CreatedContainer();
	void CancelClose();
	unsigned long IsClosing();
	void Update(float DeltaTime);
	void PlayUIAnimationSound(class USoundCue* Cue);
	float DunDefGetSequenceLength(const struct FName& DunDefUIAnimSeqName);
	void StopDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn);
	float PlayDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn);
	void LoadSequences();
};


// Class UDKGame.UIOverlayContainer_Equipment
// 0x0128 (0x05DC - 0x04B4)
class UUIOverlayContainer_Equipment : public UHUDPrefabContainer
{
public:
	class UUILabel*                                    EquipmentNameLabel;                                       // 0x04B4(0x0004) (Edit)
	class UUIDataContainer_EquipmentOverlay*           DataContainer;                                            // 0x04B8(0x0004) (Edit)
	class UUIImage*                                    EquipmentBG;                                              // 0x04BC(0x0004) (Edit)
	class USurface*                                    BackgroundImages[0x4];                                    // 0x04C0(0x0004) (Edit)
	class USurface*                                    CantEquipImage;                                           // 0x04D0(0x0004) (Edit)
	TArray<class USurface*>                            ComparisonImages;                                         // 0x04D4(0x000C) (Edit, NeedCtorLink)
	class UUIImage*                                    EquipmentStatusIcon;                                      // 0x04E0(0x0004) (Edit)
	class UUIImage*                                    LockedIcon;                                               // 0x04E4(0x0004) (Edit)
	class UUIImage*                                    UsedInTradeIcon;                                          // 0x04E8(0x0004) (Edit)
	class UUIObject*                                   EquipmentPreviewIcon;                                     // 0x04EC(0x0004) (Edit)
	class UUILabel*                                    CurrentEquipmentLabel;                                    // 0x04F0(0x0004) (Edit)
	class UUILabel*                                    EquipmentWorthLabel;                                      // 0x04F4(0x0004) (Edit)
	class UUILabel*                                    EquipRequirementString;                                   // 0x04F8(0x0004) (Edit)
	class UUILabel*                                    ItemBoxCapacityLabel;                                     // 0x04FC(0x0004) (Edit)
	class UUILabel*                                    EquipmentLevelLabels[0x4];                                // 0x0500(0x0004) (Edit)
	struct FString                                     EquipmentLevelString;                                     // 0x0510(0x000C) (Transient, Localized, NeedCtorLink)
	struct FLinearColor                                CantUpgradeColor;                                         // 0x051C(0x0010) (Edit)
	struct FLinearColor                                CanUpgradeColor;                                          // 0x052C(0x0010) (Edit)
	struct FLinearColor                                CantEquipLevelGradient;                                   // 0x053C(0x0010) (Edit)
	struct FLinearColor                                CantEquipClassGradient;                                   // 0x054C(0x0010) (Edit)
	struct FLinearColor                                CantEquipInvalidGradient;                                 // 0x055C(0x0010) (Edit)
	struct FLinearColor                                CantEquipLevelColor;                                      // 0x056C(0x0010) (Edit)
	struct FLinearColor                                CantEquipClassColor;                                      // 0x057C(0x0010) (Edit)
	struct FLinearColor                                CantEquipInvalidColor;                                    // 0x058C(0x0010) (Edit)
	struct FLinearColor                                ItemCountColorFull;                                       // 0x059C(0x0010) (Edit)
	struct FLinearColor                                ItemCountColorRegular;                                    // 0x05AC(0x0010) (Edit)
	struct FLinearColor                                CanEquipColor;                                            // 0x05BC(0x0010) (Edit)
	struct FLinearColor                                CanEquipGradient;                                         // 0x05CC(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIOverlayContainer_Equipment");
		return ptr;
	}


	void InitializeForOwnedEquipment(class UDunDefHero* theHero, class UHeroEquipment* myEquipment, unsigned long HideCurrentEquipmentLabel, unsigned long bCompareStats, class UHeroEquipment* compareStatsAgainstOtherEquipment);
	void InitializeForDroppedEquipment(class UDunDefHero* theHero, class ADunDefDroppedEquipment* theDroppedEquipment, class ADunDefPlayerController* PC);
};


// Class UDKGame.DunDefEnemyTargetingPreventionVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefEnemyTargetingPreventionVolume : public AVolume
{
public:
	unsigned long                                      PreventionEnabled : 1;                                    // 0x0258(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEnemyTargetingPreventionVolume");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	unsigned long PreventTargeting(const TScriptInterface<class UDunDefTargetableInterface>& Target, class ADunDefEnemy* forEnemy);
};


// Class UDKGame.DunDefEngine
// 0x0000 (0x06D4 - 0x06D4)
class UDunDefEngine : public UGameEngine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefEngine");
		return ptr;
	}

};


// Class UDKGame.DunDefOgreController
// 0x00C8 (0x06D4 - 0x060C)
class ADunDefOgreController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x060C(0x0004)
	unsigned long                                      bDontShootProjectileAtCore : 1;                           // 0x060C(0x0004) (Edit)
	unsigned long                                      IsInShockwave : 1;                                        // 0x060C(0x0004) (Transient)
	TArray<struct FVector>                             PreviousMeleeSwingLocations;                              // 0x0610(0x000C) (NeedCtorLink)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x061C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               MeleeSwingSockets;                                        // 0x0628(0x000C) (Edit, NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0634(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0638(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x063C(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0648(0x0004) (Edit)
	struct FName                                       AltAttackStateName;                                       // 0x064C(0x0008) (Edit)
	float                                              RandomChanceOfPounding;                                   // 0x0654(0x0004) (Edit)
	int                                                LastPlayedHurtHealth;                                     // 0x0658(0x0004)
	float                                              HurtStateHealthPercentInterval;                           // 0x065C(0x0004) (Edit)
	float                                              ShockwaveExpansionTime;                                   // 0x0660(0x0004) (Edit)
	float                                              MaxShockwaveRadius;                                       // 0x0664(0x0004) (Edit)
	int                                                ShockwaveDamage;                                          // 0x0668(0x0004) (Edit)
	float                                              ShockwaveMomentum;                                        // 0x066C(0x0004) (Edit)
	float                                              ZThresholdForAlwaysPoundGround;                           // 0x0670(0x0004) (Edit)
	class UClass*                                      ShockwaveDamageType;                                      // 0x0674(0x0004) (Edit)
	class ADunDefProjectile*                           AttackProjectileTemplate;                                 // 0x0678(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ProjectileMuzzleSpawnEffect;                              // 0x067C(0x0004) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0680(0x000C) (Edit)
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                        // 0x068C(0x000C) (Edit)
	float                                              LeadTargetBasePercent;                                    // 0x0698(0x0004) (Edit)
	float                                              LeadTargetRandomPercent;                                  // 0x069C(0x0004) (Edit)
	float                                              AimRandomSpread;                                          // 0x06A0(0x0004) (Edit)
	float                                              MaxShootOffsetYawArc;                                     // 0x06A4(0x0004) (Edit)
	struct FName                                       ProjectileAttackStateName;                                // 0x06A8(0x0008) (Edit)
	float                                              ProjectileShootRange;                                     // 0x06B0(0x0004) (Edit)
	float                                              ProjectileShootInterval;                                  // 0x06B4(0x0004) (Edit)
	float                                              ProjectileShootRandomPercent;                             // 0x06B8(0x0004) (Edit)
	struct FVector                                     ShockwaveOrigin;                                          // 0x06BC(0x000C) (Transient)
	float                                              ShockwaveTimer;                                           // 0x06C8(0x0004) (Transient)
	float                                              LastProjectileShootTime;                                  // 0x06CC(0x0004) (Transient)
	float                                              ProjectileShootIntervalRandomizer;                        // 0x06D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOgreController");
		return ptr;
	}


	int GetProjectileDamage();
	int GetAttackDamage();
	void DoProjectileAttack();
	float GetProjectileShootInterval();
	void CheckForCustomAttacks();
	void DoAttack();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void PostBeginPlay();
	void FireProjectile();
	void StartShockwave(const struct FVector& ShockwaveCenter);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void StartMeleeSwing();
};


// Class UDKGame.DunDefForestGolem
// 0x0000 (0x0DA0 - 0x0DA0)
class ADunDefForestGolem : public ADunDefOgre
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefForestGolem");
		return ptr;
	}


	void AlternateMeleeSwingEnd();
	void AlternateMeleeSwingStart();
	void MeleeSwingEnd();
	void MeleeSwingStart();
};


// Class UDKGame.DunDefForestGolemController
// 0x0020 (0x06F4 - 0x06D4)
class ADunDefForestGolemController : public ADunDefOgreController
{
public:
	TArray<struct FName>                               AlternateMeleeSwingSockets;                               // 0x06D4(0x000C) (Edit, NeedCtorLink)
	float                                              MeleeAttackRange;                                         // 0x06E0(0x0004) (Edit)
	TArray<struct FVector>                             PreviousAlternateMeleeSwingLocations;                     // 0x06E4(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      IsInAlternateMeleeSwing : 1;                              // 0x06F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefForestGolemController");
		return ptr;
	}


	void CheckForCustomAttacks();
	float GetProjectileShootInterval();
	void DoAttack();
	void DoProjectileAttack();
	class AActor* GetHighestHealthTarget();
	void EndAlternateMeleeSwing();
	void StartAlternateMeleeSwing();
	void PostBeginPlay();
};


// Class UDKGame.DunDefGoblin
// 0x0008 (0x0D14 - 0x0D0C)
class ADunDefGoblin : public ADunDefEnemy
{
public:
	struct FName                                       MeleeSwingSocketName;                                     // 0x0D0C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGoblin");
		return ptr;
	}


	float PlayGoblinAttackAnimation(int AnimationIndex);
	float PlayAttackAnimation();
	struct FVector GetMeleeSwingLocation();
	void MeleeSwingEnd();
	void MeleeSwingStart();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefGoblinController
// 0x0034 (0x0640 - 0x060C)
class ADunDefGoblinController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x060C(0x0004)
	struct FVector                                     PreviousMeleeSwingLocation;                               // 0x0610(0x000C)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x061C(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0628(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x062C(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x0630(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x063C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGoblinController");
		return ptr;
	}


	int GetAttackDamage();
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void StartMeleeSwing();
};


// Class UDKGame.DunDefGoblinMech
// 0x008C (0x0DCC - 0x0D40)
class ADunDefGoblinMech : public ADunDefBoss
{
public:
	class UParticleSystemComponent*                    ExhaustEffectComponent;                                   // 0x0D40(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              SuperHurtDamageMultiplier;                                // 0x0D44(0x0004) (Edit)
	float                                              ExhaustOnDuration;                                        // 0x0D48(0x0004) (Edit)
	float                                              ExhaustOffInterval;                                       // 0x0D4C(0x0004) (Edit)
	float                                              MinimumAngleDotForSuperHit;                               // 0x0D50(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     SuperHurtEffectTemplate;                                  // 0x0D54(0x0004) (Edit)
	struct FName                                       ExhaustSocketName;                                        // 0x0D58(0x0008) (Edit)
	struct FName                                       FireProjectileAnimName;                                   // 0x0D60(0x0008) (Edit)
	struct FName                                       RocketSocketLeftName;                                     // 0x0D68(0x0008) (Edit)
	struct FName                                       RocketSocketRightName;                                    // 0x0D70(0x0008) (Edit)
	float                                              TurretInterpSpeed;                                        // 0x0D78(0x0004) (Edit)
	struct FName                                       MajorHurtAnimation;                                       // 0x0D7C(0x0008) (Edit)
	class UParticleSystemComponent*                    MediumHealthEffectComp;                                   // 0x0D84(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    LowHealthEffectComp;                                      // 0x0D88(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       MediumHealthEffectCompSocket;                             // 0x0D8C(0x0008) (Edit)
	struct FName                                       LowHealthEffectCompSocket;                                // 0x0D94(0x0008) (Edit)
	class UParticleSystemComponent*                    CigarSmokingEffectComp;                                   // 0x0D9C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       CigarSmokingEffectCompSocket;                             // 0x0DA0(0x0008) (Edit)
	class USoundCue*                                   FurnaseOpenSound;                                         // 0x0DA8(0x0004) (Edit)
	class USoundCue*                                   FurnaceCloseSound;                                        // 0x0DAC(0x0004) (Edit)
	class UAudioComponent*                             FurnaceLoopSound;                                         // 0x0DB0(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              DamageFromTowersMultiplier;                               // 0x0DB4(0x0004) (Edit)
	class USkelControlSingleBone*                      UpperBodyTwistControl;                                    // 0x0DB8(0x0004)
	class USkelControlSingleBone*                      FurnaceBoneControl;                                       // 0x0DBC(0x0004)
	class AActor*                                      UpperBodyFocus;                                           // 0x0DC0(0x0004) (Net)
	class AActor*                                      TheLastDamageCauser;                                      // 0x0DC4(0x0004)
	unsigned long                                      bIsExhaustOpen : 1;                                       // 0x0DC8(0x0004) (Net)
	unsigned long                                      bLookAtTarget : 1;                                        // 0x0DC8(0x0004) (Net)
	unsigned long                                      bEnableMediumHealthEffect : 1;                            // 0x0DC8(0x0004) (Net)
	unsigned long                                      bEnableLowHealthEffect : 1;                               // 0x0DC8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGoblinMech");
		return ptr;
	}


	unsigned long ForceFriendlyFire(class AActor* Target);
	struct FVector GetAMeleeSwingLocation(const struct FName& MeleeSwingSocketName);
	void MeleeSwingEnd();
	void MeleeSwingStart();
	float PlayRightAttackAnimation();
	float PlayLeftAttackAnimation();
	float PlayFrontAttackAnimation();
	void FireProjectile();
	unsigned long IsCurrentlyPlayingAttackAnimation();
	float PlayShootRocketsAnimation();
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void SetMovementPhysics();
	void Tick(float DeltaTime);
	void PostBeginPlay();
	float GetAngleDot(const struct FVector& toPosition);
	struct FRotator GetUpperBodyRotation();
	unsigned long IsSuperHurtDamage(const struct FVector& HitLocation);
	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UObject* WhatHitMe, int* inDamage, struct FVector* Momentum);
	void PlaySuperHurtEffect(class UClass* DamageType, const struct FVector& HitLocation);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void TurnExhaustOff();
	void TurnExhaustOn();
	void TurnLowHealthEffectOff();
	void TurnLowHealthEffectOn();
	void TurnMediumHealthEffectOff();
	void TurnMediumHealthEffectOn();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void ReplicatedEvent(const struct FName& VarName);
	void SetDyingPhysics();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	unsigned long IsCurrentlyPlayingHurtAnimation();
	void PlayMajorHurtAnimation();
};


// Class UDKGame.DunDefGoblinMechController
// 0x00C4 (0x06D0 - 0x060C)
class ADunDefGoblinMechController : public ADunDefEnemyController
{
public:
	class ADunDefHomingProjectile*                     HomingProjectileTemplate;                                 // 0x060C(0x0004) (Edit)
	struct FName                                       ProjectileAttackStateName;                                // 0x0610(0x0008) (Edit)
	float                                              ProjectileShootRange;                                     // 0x0618(0x0004) (Edit)
	float                                              ProjectileShootInterval;                                  // 0x061C(0x0004) (Edit)
	float                                              ProjectileShootMinDistance;                               // 0x0620(0x0004) (Edit)
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x0624(0x0004)
	unsigned long                                      bUseNavigation : 1;                                       // 0x0624(0x0004) (Edit)
	unsigned long                                      bLeftSocket : 1;                                          // 0x0624(0x0004) (Transient)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x0628(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0634(0x0004) (Edit)
	int                                                NodeRequiredCustomData;                                   // 0x0638(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x063C(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x0640(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x064C(0x0004) (Edit)
	TArray<struct FName>                               MeleeSwingSocketNames;                                    // 0x0650(0x000C) (Edit, NeedCtorLink)
	float                                              MeleeAttackPlayerInterval;                                // 0x065C(0x0004) (Edit)
	float                                              ZeroHealthRockets;                                        // 0x0660(0x0004) (Edit)
	TArray<float>                                      PlayerRocketMultipliers;                                  // 0x0664(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             PreviousMeleeSwingLocations;                              // 0x0670(0x000C) (NeedCtorLink)
	int                                                LastPlayedHurtHealth;                                     // 0x067C(0x0004)
	float                                              HurtStateHealthPercentInterval;                           // 0x0680(0x0004) (Edit)
	float                                              MediumHealthThreshold;                                    // 0x0684(0x0004) (Edit)
	float                                              LowHealthThreshold;                                       // 0x0688(0x0004) (Edit)
	float                                              TowerDamageMultiplier;                                    // 0x068C(0x0004) (Edit)
	float                                              RocketsFiringDelay;                                       // 0x0690(0x0004) (Edit)
	float                                              DelayBetweenRocketSets;                                   // 0x0694(0x0004) (Edit)
	TArray<TScriptInterface<class UDunDefTargetableInterface>> theTargetsToIgnore;                                       // 0x0698(0x000C) (Transient, NeedCtorLink)
	int                                                NumRocketsToFire;                                         // 0x06A4(0x0004) (Transient)
	struct FVector                                     nodePos1;                                                 // 0x06A8(0x000C)
	struct FVector                                     nodePos2;                                                 // 0x06B4(0x000C)
	struct FVector                                     NewDest;                                                  // 0x06C0(0x000C)
	float                                              LastProjectileShootTime;                                  // 0x06CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGoblinMechController");
		return ptr;
	}


	float GetAttackInterval(class AActor* Victim);
	void PostBeginPlay();
	struct FVector GetClosestNodeMovementPoint(const struct FVector& Point);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	int GetNumRockets();
	unsigned long WantsHurtAnimation();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void Cough(const struct FName& coughAnimName);
	void FireProjectile();
	void DoProjectileAttack();
	void CheckForCustomAttacks();
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void StartMeleeSwing();
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void MovementRefreshTimer();
};


// Class UDKGame.DunDefGRI_MainSixPlayer
// 0x0000 (0x0724 - 0x0724)
class ADunDefGRI_MainSixPlayer : public ADunDefGameReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGRI_MainSixPlayer");
		return ptr;
	}

};


// Class UDKGame.DunDefGRI_PureStrategy
// 0x0000 (0x0724 - 0x0724)
class ADunDefGRI_PureStrategy : public ADunDefGameReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefGRI_PureStrategy");
		return ptr;
	}


	unsigned long CanPlaceTowerUnitCost(int Cost, class ADunDefPlayerController* ForPlayer, class ADunDefTower* Tower);
	int AdjustDUCostForCheck(class ADunDefTower* Tower);
	int AdjustDUCost(class ADunDefTower* Tower);
	void RemovedTower(class ADunDefTower* Tower);
	void AddedTower(class ADunDefTower* Tower);
};


// Class UDKGame.StatObject_Equipment
// 0x0000 (0x016C - 0x016C)
class UStatObject_Equipment : public UStatObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.StatObject_Equipment");
		return ptr;
	}


	unsigned long IsRootEntry();
	int GetFolderID();
	void GetDataProps(int dataSetType, struct FDataEntryProps* dProps);
	struct FString GetDataString(int dataSetType);
	unsigned long GetEntryEnabled(class UPlayer* ForPlayer, int dataSetType, class UUIScreenObject* relatedUIObject);
	unsigned long STATIC_StaticIsValidForEquipment(class UStatObject_Equipment* StatObjectTemplate, class UHeroEquipment* theEquipment);
};


// Class UDKGame.DunDefHeroStats
// 0x0000 (0x009C - 0x009C)
class UDunDefHeroStats : public UStatSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefHeroStats");
		return ptr;
	}

};


// Class UDKGame.DunDefKobold
// 0x0038 (0x0D44 - 0x0D0C)
class ADunDefKobold : public ADunDefEnemy
{
public:
	unsigned long                                      bIsLightingFuse : 1;                                      // 0x0D0C(0x0004)
	unsigned long                                      bFuseLit : 1;                                             // 0x0D0C(0x0004) (Net)
	unsigned long                                      ImmediatelyKamikaze : 1;                                  // 0x0D0C(0x0004) (Edit)
	struct FName                                       LightFuseAnimName;                                        // 0x0D10(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     ExplodeEffect;                                            // 0x0D18(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     InsaneExplodeEffect;                                      // 0x0D1C(0x0004) (Edit)
	class UParticleSystem*                             FuseEffectTemplate;                                       // 0x0D20(0x0004) (Edit)
	struct FName                                       FuseEffectSocket;                                         // 0x0D24(0x0008) (Edit)
	float                                              KamikazeExplosionTimeout;                                 // 0x0D2C(0x0004) (Edit)
	float                                              KamikazeHealthThreshold;                                  // 0x0D30(0x0004) (Edit)
	float                                              StopLightingFuseFailsafeDelay;                            // 0x0D34(0x0004) (Edit)
	class UAudioComponent*                             FuseLoopSound;                                            // 0x0D38(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             ScreamLoopSound;                                          // 0x0D3C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    FuseEffect;                                               // 0x0D40(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefKobold");
		return ptr;
	}


	void AutoKamikaze();
	void PostBeginPlay();
	void Explode();
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void StartKamikazeSound();
	void StopLightingFuse();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DoLightFuse();
	void LightFuse();
	void BeginLightingFuse();
	void PlayLightFuseAnimation();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefKoboldController
// 0x0024 (0x0630 - 0x060C)
class ADunDefKoboldController : public ADunDefEnemyController
{
public:
	unsigned long                                      bKamikazeTargetSet : 1;                                   // 0x060C(0x0004)
	unsigned long                                      AllowPostKamikazeTargeting : 1;                           // 0x060C(0x0004) (Edit)
	unsigned long                                      bForceNewKamikazeTarget : 1;                              // 0x060C(0x0004) (Transient)
	class AActor*                                      KamikazeTarget;                                           // 0x0610(0x0004)
	TArray<float>                                      KamikazeActivationRanges;                                 // 0x0614(0x000C) (Edit, NeedCtorLink)
	float                                              KamikazeMinDotProduct;                                    // 0x0620(0x0004) (Edit)
	TArray<float>                                      KamikazeGroundSpeeds;                                     // 0x0624(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefKoboldController");
		return ptr;
	}


	float GetKamikazeActivationRangeSq();
	void Cough(const struct FName& coughAnimName);
	unsigned long WantsHurtAnimation();
	void StartKamikaze(class AActor* DamageCauser);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
};


// Class UDKGame.DunDefManaBomb
// 0x005C (0x0330 - 0x02D4)
class ADunDefManaBomb : public ADunDefEmitterSpawnable
{
public:
	float                                              MaximumMassMomentumScale;                                 // 0x02D4(0x0004) (Edit)
	float                                              MassMomentumBaseScale;                                    // 0x02D8(0x0004) (Edit)
	float                                              MassMomentumScaleExponent;                                // 0x02DC(0x0004) (Edit)
	int                                                Damage;                                                   // 0x02E0(0x0004) (Edit)
	float                                              Radius;                                                   // 0x02E4(0x0004) (Edit)
	float                                              EffectRadius;                                             // 0x02E8(0x0004) (Edit)
	class UClass*                                      MyDamageType;                                             // 0x02EC(0x0004) (Edit)
	float                                              MyMomentum;                                               // 0x02F0(0x0004) (Edit)
	float                                              DamageDelay;                                              // 0x02F4(0x0004) (Edit)
	float                                              ScalingHeroStatExponentDamage;                            // 0x02F8(0x0004) (Edit)
	float                                              ScalingHeroStatExponentRadius;                            // 0x02FC(0x0004) (Edit)
	float                                              DamageFalloffExponent;                                    // 0x0300(0x0004) (Edit)
	float                                              NightmareDamageMultiplier;                                // 0x0304(0x0004) (Edit)
	float                                              NightmareScalingHeroStatExponentDamage;                   // 0x0308(0x0004) (Edit)
	float                                              MaxBombRadius;                                            // 0x030C(0x0004) (Edit)
	float                                              SecondScalingHeroStatExponentDamage;                      // 0x0310(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     ScalingHeroStatType;                                      // 0x0314(0x0001) (Edit)
	TEnumAsByte<ELevelUpValueType>                     SecondScalingHeroStatType;                                // 0x0315(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0316(0x0002) MISSED OFFSET
	unsigned long                                      bScaleWithPawnDamageModifier : 1;                         // 0x0318(0x0004) (Edit)
	float                                              PawnDamageAdditionalMultiplier;                           // 0x031C(0x0004) (Edit)
	TArray<class UClass*>                              DamageClassesToIgnore;                                    // 0x0320(0x000C) (Edit, NeedCtorLink)
	float                                              PowerMult;                                                // 0x032C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefManaBomb");
		return ptr;
	}


	unsigned long STATIC_AllowSpawn(class AActor* theArchetype, const struct FVector& theLoc, const struct FRotator& theRot);
	unsigned long HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage);
	unsigned long IgnoreDamageByClass(class AActor* damagee);
	float GetDamageRadius();
	float GetDamage();
	void DoDamage();
	void PostBeginPlay();
};


// Class UDKGame.DunDefNPC_BarKeep
// 0x0094 (0x02B0 - 0x021C)
class ADunDefNPC_BarKeep : public AActor
{
public:
	struct FColor                                      ToolTipDrawColor;                                         // 0x021C(0x0004) (Edit)
	struct FColor                                      ToolTipOutOfRangeColor;                                   // 0x0220(0x0004) (Edit)
	struct FColor                                      ToolTipInvalidUseColor;                                   // 0x0224(0x0004) (Edit)
	class USkeletalMeshComponent*                      MySkeletalMesh;                                           // 0x0228(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDunDefUIScene*                              ShopUITemplate;                                           // 0x022C(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x0230(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0234(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActiveBlenderName;                                        // 0x0238(0x0008) (Edit)
	class USoundCue*                                   ActivateSound;                                            // 0x0240(0x0004) (Edit)
	class USoundCue*                                   DeactivateSound;                                          // 0x0244(0x0004) (Edit)
	struct FString                                     ActivationString_Use;                                     // 0x0248(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DescriptiveName;                                          // 0x0254(0x000C) (Edit, Localized, NeedCtorLink)
	class UTexture2D*                                  ActivationIcons[0x2];                                     // 0x0260(0x0004) (Edit)
	class UAudioComponent*                             MyAudioComponent;                                         // 0x0268(0x0004) (Edit, ExportObject, Component, EditInline)
	class USoundCue*                                   IdleQuipSound;                                            // 0x026C(0x0004) (Edit)
	class USoundCue*                                   TalkSound;                                                // 0x0270(0x0004) (Edit)
	class USoundCue*                                   BuySound;                                                 // 0x0274(0x0004) (Edit)
	class USoundCue*                                   SellSound;                                                // 0x0278(0x0004) (Edit)
	float                                              IdleQuipMinWait;                                          // 0x027C(0x0004) (Edit)
	float                                              IdleQuipMaxWait;                                          // 0x0280(0x0004) (Edit)
	class UAnimNodeBlend*                              ActiveBlender;                                            // 0x0284(0x0004) (Transient)
	unsigned long                                      IsActive : 1;                                             // 0x0288(0x0004) (Net)
	unsigned long                                      WasActive : 1;                                            // 0x0288(0x0004)
	struct FRotator                                    ReplicatedRotation;                                       // 0x028C(0x000C) (Net)
	TArray<class ADunDefPlayerController*>             UsingPCs;                                                 // 0x0298(0x000C) (NeedCtorLink)
	class UTexture2D*                                  MiniMapIconTexture;                                       // 0x02A4(0x0004) (Edit)
	float                                              MiniMapIconSize;                                          // 0x02A8(0x0004) (Edit)
	struct FColor                                      MiniMapIconColor;                                         // 0x02AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefNPC_BarKeep");
		return ptr;
	}


	void PlayTalkSound();
	void PlayBuySound();
	void PlaySellSound();
	void PlayIdleQuipSound(unsigned long bDontPlay);
	class UTexture2D* GetActivationIcon(int activationType);
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	void DrawMiniMapIcon(class UCanvas* Canvas, class ADunDefMiniMap* MiniMap);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
	unsigned long shouldShowAltActivation(class ULocalPlayer* ForPlayer);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void Tick(float DeltaTime);
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	void Destroyed();
	void PostBeginPlay();
	void Deactivate();
	void Activate();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefOgreNoDerpController
// 0x0000 (0x06D4 - 0x06D4)
class ADunDefOgreNoDerpController : public ADunDefOgreController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOgreNoDerpController");
		return ptr;
	}


	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
};


// Class UDKGame.UI_NetworkMultiplayer
// 0x0184 (0x07C0 - 0x063C)
class UUI_NetworkMultiplayer : public UDunDefUIScene
{
public:
	class UUIButton_Scripted*                          HostGameButton;                                           // 0x063C(0x0004) (Edit)
	class UUIButton_Scripted*                          JoinByIPGameButton;                                       // 0x0640(0x0004) (Edit)
	class UUIButton_Scripted*                          JoinGameButton;                                           // 0x0644(0x0004) (Edit)
	class UUIButton_Scripted*                          SearchGamesButton;                                        // 0x0648(0x0004) (Edit)
	class UUIButton_Scripted*                          SearchFiltersButton;                                      // 0x064C(0x0004) (Edit)
	class UUIButton_Scripted*                          BackButton;                                               // 0x0650(0x0004) (Edit)
	class UUIButton_Scripted*                          ShowGamerCardButton;                                      // 0x0654(0x0004) (Edit)
	class UUIButton_Scripted*                          ResetFilterButton;                                        // 0x0658(0x0004) (Edit)
	class UUIButton_Scripted*                          ToggleShopMode;                                           // 0x065C(0x0004) (Edit)
	class UUIButton*                                   DefendersStoreButton;                                     // 0x0660(0x0004) (Edit)
	class UUIButton*                                   SteamWorkshopButton;                                      // 0x0664(0x0004) (Edit)
	class UUIEditBox*                                  JoinAddressEditBox;                                       // 0x0668(0x0004) (Edit)
	class UUIPrefab*                                   SessionEntryPrefab;                                       // 0x066C(0x0004) (Edit)
	class UUI_HeroSelection*                           HeroSelectionSceneTemplate;                               // 0x0670(0x0004) (Edit)
	class UUIList*                                     ServerList;                                               // 0x0674(0x0004) (Edit)
	class UUIPanel*                                    LanPanel;                                                 // 0x0678(0x0004) (Edit)
	class UUILabel*                                    TitleLabel;                                               // 0x067C(0x0004) (Edit)
	class UUILabel*                                    TitleLabelLower;                                          // 0x0680(0x0004) (Edit)
	class UUILabelButton*                              LanLabel;                                                 // 0x0684(0x0004) (Edit)
	struct FString                                     LANString;                                                // 0x0688(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     InternetString;                                           // 0x0694(0x000C) (Edit, Localized, NeedCtorLink)
	class UUI_GameSpyLogin*                            LoginScene;                                               // 0x06A0(0x0004) (Edit)
	class USoundCue*                                   SearchingForGamesSound;                                   // 0x06A4(0x0004) (Edit)
	class UUI_SearchFilters*                           SearchFilterScene;                                        // 0x06A8(0x0004) (Edit)
	class UTexture2D*                                  UnknownHeroTinyIcon;                                      // 0x06AC(0x0004) (Edit)
	TArray<class UTexture2D*>                          PingTextures;                                             // 0x06B0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MSG_SearchingForGamesTitle;                               // 0x06BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_SearchingForGamesDescription;                         // 0x06C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_FailedToJoinGameTitle;                                // 0x06D4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_FailedToJoinGameDescription;                          // 0x06E0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningGameTitle;                                     // 0x06EC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningGameDescription;                               // 0x06F8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CannotJoinTitle;                                      // 0x0704(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CannotJoinGameFull;                                   // 0x0710(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CannotJoinNotAllOnline;                               // 0x071C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatingGameTitle;                                    // 0x0728(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatingGameDescription;                              // 0x0734(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_ResetGameFilters;                                     // 0x0740(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ResetFiltersString;                                       // 0x074C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ToggleShop_ShowShops;                                     // 0x0758(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ToggleShop_ShowGames;                                     // 0x0764(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIImage*                                    MultiplayerModeImage;                                     // 0x0770(0x0004) (Edit)
	unsigned long                                      bPendingSearchRequest : 1;                                // 0x0774(0x0004) (Transient)
	unsigned long                                      PrevTopLevel : 1;                                         // 0x0774(0x0004) (Transient)
	unsigned long                                      bLameToggle : 1;                                          // 0x0774(0x0004)
	unsigned long                                      IsJoiningGame : 1;                                        // 0x0774(0x0004)
	unsigned long                                      IsLANGame : 1;                                            // 0x0774(0x0004)
	unsigned long                                      hasCancelledJoin : 1;                                     // 0x0774(0x0004) (Transient)
	class UUI_PasswordPrompt*                          PasswordPrompt;                                           // 0x0778(0x0004) (Edit)
	TArray<class UUI_SessionBrowser_EntryPanel*>       SessionEntryPanels;                                       // 0x077C(0x000C) (NeedCtorLink)
	class UUIButton_Scripted*                          ServerListButtonA;                                        // 0x0788(0x0004)
	class UUIButton_Scripted*                          ServerListButtonB;                                        // 0x078C(0x0004)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0790(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0794(0x0008)
	class UOnlineGameSearch*                           OnlineSearchSettings;                                     // 0x079C(0x0004)
	class UDataStoreClient*                            DSClient;                                                 // 0x07A0(0x0004)
	class UUIDataStore_OnlineGameSettings*             SettingsDataStore;                                        // 0x07A4(0x0004)
	class UDunDefDataStore_GameSearch*                 SearchDataStore;                                          // 0x07A8(0x0004)
	struct FString                                     connectUrl;                                               // 0x07AC(0x000C) (NeedCtorLink)
	float                                              JoinTimer;                                                // 0x07B8(0x0004)
	float                                              JoinDelay;                                                // 0x07BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_NetworkMultiplayer");
		return ptr;
	}


	unsigned long IsGamepadOwned();
	unsigned long IsKeyboardOwned();
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SwitchLANSettings();
	void RefreshLANPanel();
	void SceneActivated(unsigned long bInitialActivation);
	unsigned long TextSubmitted(class UUIEditBox* Sender, int PlayerIndex);
	unsigned long OnLanPanelClicked(class UUIScreenObject* Obj, int PlayerIndex);
	unsigned long OnPasswordEntered(const struct FString& pass);
	unsigned long JoinCurrentServer();
	void SceneDeactivated();
	unsigned long OnSearchCancelled(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void SearchForGames(unsigned long bUserDriven);
	void OnJoinGameComplete(const struct FName& SessionName, unsigned long bSuccessful);
	void BuildJoinURL(const struct FString& ResolvedConnectionURL);
	void JoinGame(const struct FOnlineGameSearchResult& gameSession);
	unsigned long OnAcceptJoinFailedClicked(class UUI_MessageBox* Sender, const struct FString& ButtonClicked, int PlayerIndex);
	unsigned long OnCancelJoinClicked(class UUI_MessageBox* Sender, const struct FString& ButtonClicked, int PlayerIndex);
	void JoinGameIP(const struct FString& IPAddress);
	void OnSearchComplete(unsigned long bWasSuccessful);
	unsigned long OnResetFilterMessageBox(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void CloseSearchMessage();
	void OnGameCreated(const struct FName& SessionName, unsigned long bWasSuccessful);
	void OnDestroyForCancelComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	void CleanupSession();
	unsigned long OnCreateCancelled(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void ShowCancelCreateButton();
	void HostGame(const struct FString& withGameName);
	void SetupSearch();
	void SetupSettings(const struct FString& withGameName);
	void STATIC_SetupDefaultCustomKeys(class UOnlineGameSettings* InOnlineGameSettings);
	struct FString CleanupTags(const struct FString& InString);
	unsigned long IsIPValid(const struct FString& IP);
	void KeyboardInputDone(unsigned long Success);
	void ShowGamerCardForCurrentSelection();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void ResetGameFilters();
};


// Class UDKGame.DunDefOnlineProfileSettings
// 0x0000 (0x008C - 0x008C)
class UDunDefOnlineProfileSettings : public UOnlineProfileSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOnlineProfileSettings");
		return ptr;
	}

};


// Class UDKGame.DunDefOrc
// 0x0000 (0x0D0C - 0x0D0C)
class ADunDefOrc : public ADunDefEnemy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOrc");
		return ptr;
	}


	struct FVector GetAMeleeSwingLocation(const struct FName& SocketName);
	float PlayOrcAttackAnimation(int AnimationIndex);
	float PlayAttackAnimation();
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void MeleeSwingEnd();
	void MeleeSwingStart();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefOrcController
// 0x0018 (0x0658 - 0x0640)
class ADunDefOrcController : public ADunDefGoblinController
{
public:
	TArray<struct FName>                               MeleeSwingSockets;                                        // 0x0640(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             PreviousMeleeSwingLocations;                              // 0x064C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefOrcController");
		return ptr;
	}


	void PostBeginPlay();
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
};


// Class UDKGame.DunDefPhoenixControllerV3
// 0x0098 (0x06A4 - 0x060C)
class ADunDefPhoenixControllerV3 : public ADunDefEnemyController
{
public:
	class ADunDefProjectile*                           DropFireballProjectileTemplate;                           // 0x060C(0x0004) (Edit)
	class ADunDefProjectile*                           LaunchFireballProjectileTemplate;                         // 0x0610(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     BeakProjectileLaunchEffect;                               // 0x0614(0x0004) (Edit)
	struct FVector                                     BeakSpawnOffset;                                          // 0x0618(0x000C) (Edit)
	int                                                MaxNumProjectilesToLaunch;                                // 0x0624(0x0004) (Edit)
	float                                              DashDamageBase;                                           // 0x0628(0x0004) (Edit)
	class ADunDefPhoenixMiniV2*                        BabyPhoenixTemplate;                                      // 0x062C(0x0004) (Edit)
	TArray<int>                                        BabyPhoenixMaxAlive;                                      // 0x0630(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        BabyPhoenixSpawnInterval;                                 // 0x063C(0x000C) (Edit, NeedCtorLink)
	float                                              AbortDiveMinimumZPosition;                                // 0x0648(0x0004) (Edit)
	float                                              LastShootProjectileTime;                                  // 0x064C(0x0004) (Transient)
	class AFlightPathNode*                             NavigationTarget;                                         // 0x0650(0x0004) (Transient)
	TArray<class AFlightPathNode*>                     FlyingNavPoints;                                          // 0x0654(0x000C) (Transient, NeedCtorLink)
	TArray<class AFlightPathNode*>                     DashEndNavPoints;                                         // 0x0660(0x000C) (Transient, NeedCtorLink)
	float                                              TimeEnteredState;                                         // 0x066C(0x0004) (Transient)
	float                                              TimeInState;                                              // 0x0670(0x0004) (Transient)
	int                                                numAliveMiniBirds;                                        // 0x0674(0x0004) (Transient)
	TArray<class ADunDefPhoenixMiniV2*>                MyMiniBirds;                                              // 0x0678(0x000C) (Transient, NeedCtorLink)
	float                                              StuckCheck_RecentDistance;                                // 0x0684(0x0004) (Transient)
	float                                              StuckCheck_TimeElapsed;                                   // 0x0688(0x0004) (Transient)
	struct FVector                                     StuckCheck_OldLocation;                                   // 0x068C(0x000C) (Transient)
	struct FVector                                     StuckCheck_ResetLocation;                                 // 0x0698(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPhoenixControllerV3");
		return ptr;
	}


	void ResetPhoenix();
	void StuckCheck(float DeltaTime);
	void ShootFireball();
	void GetAFlightNavigationTarget();
	unsigned long AllowDamage(class AActor* Victim);
	unsigned long HurtRadius(float BaseDamage, float TheDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage);
	void MiniBirdDied(class ADunDefPhoenixMiniV2* miniBird);
	void SpawnMiniPhoenix();
	int getMaxAllowedLiveMiniBirds();
	unsigned long WantsHurtAnimation();
	void GotToFlyingState();
	void PostBeginPlay();
};


// Class UDKGame.DunDefWyvern
// 0x0034 (0x0D40 - 0x0D0C)
class ADunDefWyvern : public ADunDefEnemy
{
public:
	struct FName                                       RangedAttackAnimation;                                    // 0x0D0C(0x0008)
	unsigned long                                      bPlayedDeathAnim : 1;                                     // 0x0D14(0x0004)
	unsigned long                                      bPlayedFinalDeathAnim : 1;                                // 0x0D14(0x0004) (Transient)
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D18(0x0008) (Edit)
	struct FName                                       MeleeSwingSocketName;                                     // 0x0D20(0x0008) (Edit)
	struct FName                                       FinalDeathAnim;                                           // 0x0D28(0x0008) (Edit)
	float                                              WyvernFallTimeout;                                        // 0x0D30(0x0004) (Edit)
	float                                              AllowObstructionJumpAfterSpawnTime;                       // 0x0D34(0x0004) (Edit)
	float                                              WyvernObsJumpMinDistFromSpawnLocation;                    // 0x0D38(0x0004) (Edit)
	int                                                wyvernNumber;                                             // 0x0D3C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWyvern");
		return ptr;
	}


	void UpdateDifficultyValues(unsigned long UpdateMaterial, unsigned long onlyDynamicValues);
	unsigned long AllowObstructionJump();
	void CheckWyvernProximity();
	void FireProjectile();
	void EndMeleeSwing();
	void StartMeleeSwing();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	float PlayAttackAnimation();
	unsigned long IsCurrentlyPlayingRangedAttackAnimation();
	float PlayRangedAttackAnimation();
	void SetMovementPhysics();
	void PauseAnimationAfterDeath();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	struct FVector GetMeleeSwingLocation();
	void DisableSpawnCollision();
	void PostBeginPlay();
};


// Class UDKGame.DunDefPhoenixMiniV2
// 0x000C (0x0D4C - 0x0D40)
class ADunDefPhoenixMiniV2 : public ADunDefWyvern
{
public:
	class ADunDefGasCloud*                             ExplodeEffect;                                            // 0x0D40(0x0004) (Edit)
	float                                              LifespanBeforeExplosion;                                  // 0x0D44(0x0004) (Edit)
	class ADunDefPhoenixControllerV3*                  Phoenix;                                                  // 0x0D48(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPhoenixMiniV2");
		return ptr;
	}


	void Explode();
	void TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	unsigned long Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
	void PostBeginPlay();
};


// Class UDKGame.DunDefPhoenixV3
// 0x0160 (0x0EA0 - 0x0D40)
class ADunDefPhoenixV3 : public ADunDefBoss
{
public:
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0D40(0x0008) (Edit)
	struct FName                                       FlamethrowerSocketName;                                   // 0x0D48(0x0008) (Edit)
	struct FName                                       DropSocketName;                                           // 0x0D50(0x0008) (Edit)
	float                                              StrafingSpeed;                                            // 0x0D58(0x0004) (Edit)
	float                                              MaxStrafingDistance;                                      // 0x0D5C(0x0004) (Edit)
	TArray<float>                                      AirSpeedMultipliers;                                      // 0x0D60(0x000C) (Edit, NeedCtorLink)
	struct FName                                       DashLoopAnim;                                             // 0x0D6C(0x0008) (Edit)
	struct FName                                       DashStartAnim;                                            // 0x0D74(0x0008) (Edit)
	struct FName                                       DashEndAnim;                                              // 0x0D7C(0x0008) (Edit)
	struct FName                                       FlightMortarLoopAnim;                                     // 0x0D84(0x0008) (Edit)
	struct FName                                       FlightMortarStartAnim;                                    // 0x0D8C(0x0008) (Edit)
	struct FName                                       FlightMortarEndAnim;                                      // 0x0D94(0x0008) (Edit)
	struct FName                                       GlideBreathAnim;                                          // 0x0D9C(0x0008) (Edit)
	struct FName                                       GlideLoopAnim;                                            // 0x0DA4(0x0008) (Edit)
	struct FName                                       GlideStartAnim;                                           // 0x0DAC(0x0008) (Edit)
	struct FName                                       GlideEndAnim;                                             // 0x0DB4(0x0008) (Edit)
	struct FName                                       FlightConeOfFireAnim;                                     // 0x0DBC(0x0008) (Edit)
	struct FName                                       FlightDeathAnim;                                          // 0x0DC4(0x0008) (Edit)
	struct FName                                       FlightEndAnim;                                            // 0x0DCC(0x0008) (Edit)
	struct FName                                       FlightFlameburstAnim;                                     // 0x0DD4(0x0008) (Edit)
	struct FName                                       FlightIdleAnim;                                           // 0x0DDC(0x0008) (Edit)
	struct FName                                       FlightIgniteScaffoldingAnim;                              // 0x0DE4(0x0008) (Edit)
	struct FName                                       FlightLandingAnim;                                        // 0x0DEC(0x0008) (Edit)
	struct FName                                       FlightLoopAnim;                                           // 0x0DF4(0x0008) (Edit)
	struct FName                                       FlightStartAnim;                                          // 0x0DFC(0x0008) (Edit)
	struct FName                                       FlightStunnedAnim;                                        // 0x0E04(0x0008) (Edit)
	struct FName                                       FlightStrafeBackAnim;                                     // 0x0E0C(0x0008) (Edit)
	struct FName                                       FlightStrafeLeftAnim;                                     // 0x0E14(0x0008) (Edit)
	struct FName                                       FlightStrafeRightAnim;                                    // 0x0E1C(0x0008) (Edit)
	struct FName                                       DescendLavaLoopAnim;                                      // 0x0E24(0x0008) (Edit)
	struct FName                                       DescendLavaStartAnim;                                     // 0x0E2C(0x0008) (Edit)
	struct FName                                       EmergeLavaLoopAnim;                                       // 0x0E34(0x0008) (Edit)
	struct FName                                       EmergeLavaEndAnim;                                        // 0x0E3C(0x0008) (Edit)
	struct FName                                       GroundConeOfFireAnim;                                     // 0x0E44(0x0008) (Edit)
	struct FName                                       GroundFlameburstAnim;                                     // 0x0E4C(0x0008) (Edit)
	struct FName                                       GroundIgniteScaffoldingAnim;                              // 0x0E54(0x0008) (Edit)
	struct FName                                       GroundTakeOffAnim;                                        // 0x0E5C(0x0008) (Edit)
	struct FName                                       GroundMortarLoopAnim;                                     // 0x0E64(0x0008) (Edit)
	struct FName                                       GroundMortarStartAnim;                                    // 0x0E6C(0x0008) (Edit)
	struct FName                                       GroundMortarEndAnim;                                      // 0x0E74(0x0008) (Edit)
	class UAnimNodeBlend*                              LoopingBlender;                                           // 0x0E7C(0x0004) (Transient)
	class UAnimNodeSequence*                           LoopingAnimation;                                         // 0x0E80(0x0004) (Transient)
	float                                              DashStartTime;                                            // 0x0E84(0x0004) (Transient)
	float                                              DashAirSpeed;                                             // 0x0E88(0x0004) (Transient)
	struct FRotator                                    DashRot;                                                  // 0x0E8C(0x000C) (Transient)
	int                                                it;                                                       // 0x0E98(0x0004) (Transient)
	class UPlayer*                                     aTarget;                                                  // 0x0E9C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPhoenixV3");
		return ptr;
	}


	void TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UObject* WhatHitMe);
	void ShootFireball();
	void EndFlightMortar();
	void StartFlightMortar();
	void GotoNoState();
	void EndDash();
	void StartDash();
	void StartFlight();
	void GetDropProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	void GetProjectileSpawnTransformation(struct FVector* Position, struct FRotator* Orientation);
	float GetPawnDamageModifier(unsigned long bDontIncludeAbilities);
	void PlayHurtAnimation(class UClass* DamageType, const struct FVector& HitLocation);
	void PostBeginPlay();
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefWyvernController
// 0x00C4 (0x06D0 - 0x060C)
class ADunDefWyvernController : public ADunDefEnemyController
{
public:
	class ANavigationPoint*                            TargetPath;                                               // 0x060C(0x0004)
	class AActor*                                      TargetActor;                                              // 0x0610(0x0004)
	class AActor*                                      TempActor;                                                // 0x0614(0x0004)
	struct FVector                                     TargetLocation;                                           // 0x0618(0x000C)
	struct FVector                                     TempLocation;                                             // 0x0624(0x000C)
	struct FVector                                     hn;                                                       // 0x0630(0x000C)
	float                                              Dist;                                                     // 0x063C(0x0004)
	float                                              LastNavCheck;                                             // 0x0640(0x0004)
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x0644(0x0004)
	struct FVector                                     PreviousMeleeSwingLocation;                               // 0x0648(0x000C)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x0654(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0660(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0664(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x0668(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0674(0x0004) (Edit)
	class ADunDefProjectile*                           AttackProjectileTemplate;                                 // 0x0678(0x0004) (Edit)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x067C(0x000C) (Edit)
	struct FVector                                     ProjectileMuzzleEffectSpawnOffset;                        // 0x0688(0x000C) (Edit)
	float                                              LeadTargetBasePercent;                                    // 0x0694(0x0004) (Edit)
	float                                              LeadTargetRandomPercent;                                  // 0x0698(0x0004) (Edit)
	float                                              AimRandomSpread;                                          // 0x069C(0x0004) (Edit)
	float                                              MaxShootOffsetYawArc;                                     // 0x06A0(0x0004) (Edit)
	struct FName                                       RangedAttackStateName;                                    // 0x06A4(0x0008) (Edit)
	float                                              MaximumProjectileAttackRange;                             // 0x06AC(0x0004) (Edit)
	float                                              MaximumCoreProjectileAttackRange;                         // 0x06B0(0x0004) (Edit)
	float                                              MinimumProjectileAttackRange;                             // 0x06B4(0x0004) (Edit)
	class ANavigationPoint*                            RecentAnchor;                                             // 0x06B8(0x0004)
	float                                              StuckCheck_RecentDistance;                                // 0x06BC(0x0004)
	float                                              StuckCheck_TimeElapsed;                                   // 0x06C0(0x0004)
	struct FVector                                     StuckCheck_OldLocation;                                   // 0x06C4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWyvernController");
		return ptr;
	}


	struct FVector GetObstructionJumpForwardDir(const struct FVector& forwardDir);
	void ObstructionJump(const struct FVector& jumpForwardDir, const struct FVector& jumpSideDir);
	void DoRangedAttack();
	void DoAttack();
	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void NotifyTakeHitEX(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void CheckDirectReachability();
	void CheckIndirectReachability();
	void MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget);
	struct FVector GeneratePathToActor(class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath);
	unsigned long MoveAroundBlockade(class AActor* blockadeActor, float BlockadeWidth, const struct FVector& HitNormal, unsigned long SkipBlockingCheck);
	unsigned long NavActorReachable(class AActor* A);
	unsigned long DrawMyHUD(class ADunDefHUD* H);
	class ANavigationPoint* FindNearestNavPointTo(class AActor* A, unsigned long bCheckVisible);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void EndMeleeSwing();
	void StartMeleeSwing();
	void FireProjectile();
};


// Class UDKGame.DunDefPhoenixMiniControllerV2
// 0x0004 (0x06D4 - 0x06D0)
class ADunDefPhoenixMiniControllerV2 : public ADunDefWyvernController
{
public:
	class ADunDefPlayer*                               PlayerTarget;                                             // 0x06D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPhoenixMiniControllerV2");
		return ptr;
	}


	void findPlayer(unsigned long bNearest);
	void Tick(float DeltaTime);
};


// Class UDKGame.DunDefPlayerAbility_AreaOfEffect
// 0x005C (0x04D8 - 0x047C)
class ADunDefPlayerAbility_AreaOfEffect : public ADunDefPlayerAbility_CharacterToggle
{
public:
	float                                              ActorEffectScale;                                         // 0x047C(0x0004) (Edit)
	class UParticleSystem*                             ActorEffectTemplate;                                      // 0x0480(0x0004) (Edit)
	class UParticleSystemComponent*                    AbilityEffectComponent;                                   // 0x0484(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActivationAnimation;                                      // 0x0488(0x0008) (Edit)
	struct FName                                       AttachEffectToPawnSocket;                                 // 0x0490(0x0008) (Edit)
	float                                              Range;                                                    // 0x0498(0x0004) (Edit, Net)
	float                                              EffectInterval;                                           // 0x049C(0x0004) (Edit)
	TArray<class UClass*>                              ClassesToAffect;                                          // 0x04A0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      AffectAllies : 1;                                         // 0x04AC(0x0004) (Edit)
	unsigned long                                      AffectEnemies : 1;                                        // 0x04AC(0x0004) (Edit)
	unsigned long                                      bAttachEffectToPawnMesh : 1;                              // 0x04AC(0x0004) (Edit)
	unsigned long                                      bAffectInstigator : 1;                                    // 0x04AC(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     HeroRadiusScalingStat;                                    // 0x04B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	struct FLinearColor                                OverlayEffectColor;                                       // 0x04B4(0x0010) (Edit)
	float                                              RangeScalingExponent;                                     // 0x04C4(0x0004) (Edit)
	float                                              AreaOfEffectParticleBaseScale;                            // 0x04C8(0x0004) (Edit)
	TArray<struct FAffectedActor>                      AffectedActors;                                           // 0x04CC(0x000C) (Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_AreaOfEffect");
		return ptr;
	}


	unsigned long STATIC_IsFirstAOEAbility(class AActor* act, class ADunDefPlayerAbility_AreaOfEffect* Effect);
	unsigned long STATIC_IsOnlyAOEAbility(class AActor* act, class ADunDefPlayerAbility_AreaOfEffect* Effect);
	unsigned long IsAffectingActor(class AActor* act);
	void SetRange(float theRange);
	void DoEffect();
	unsigned long CanAffect(class AActor* theAct);
	void AddEffect(class AActor* theAct);
	void RemoveEffect(int Index);
	void RemoveAllEffects();
	void Destroyed();
	void PostBeginPlay();
	void ScaleForHeroModifiers(unsigned long IsFirstTime);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefTowerPreventionRadius
// 0x0010 (0x0230 - 0x0220)
class ADunDefTowerPreventionRadius : public ADecalActor
{
public:
	float                                              IdentiyPreventionRadius;                                  // 0x0220(0x0004) (Edit)
	float                                              IdentityDecalWidth;                                       // 0x0224(0x0004) (Edit)
	float                                              PreventionCollisionHeight;                                // 0x0228(0x0004) (Edit)
	unsigned long                                      PreventionEnabled : 1;                                    // 0x022C(0x0004) (Edit)
	unsigned long                                      bSetEnemiesInvincible : 1;                                // 0x022C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTowerPreventionRadius");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Destroyed();
	void PostBeginPlay();
	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long CheckAllowance();
};


// Class UDKGame.DunDefPlayerAbility_BuildAura
// 0x0000 (0x0718 - 0x0718)
class ADunDefPlayerAbility_BuildAura : public ADunDefPlayerAbility_BuildTower
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_BuildAura");
		return ptr;
	}


	float GetOtherAbilityPlacementPreventionRadius(class ADunDefTower* forOtherTowerArchetype);
	void UpdateDecalPlacement(float DeltaTime);
};


// Class UDKGame.DunDefPlayerAbility_DetonateTraps
// 0x001C (0x0448 - 0x042C)
class ADunDefPlayerAbility_DetonateTraps : public ADunDefPlayerAbility
{
public:
	float                                              DetonateTrapInterval;                                     // 0x042C(0x0004) (Edit)
	float                                              DetonationRange;                                          // 0x0430(0x0004) (Edit)
	struct FString                                     ActivationFailureString_NoTrapsToDetonate;                // 0x0434(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      ActivationFailureColor_NoTrapsToDetonate;                 // 0x0440(0x0004) (Edit)
	float                                              LastDetonateTrapTime;                                     // 0x0444(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_DetonateTraps");
		return ptr;
	}


	class ADunDefDamageableTarget* GetBestPresentToOpen();
	class ADunDefDamageableTarget* GetBestTrapToDetonate();
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	void OnActivate();
	unsigned long RequestActivation(unsigned long bHeld);
};


// Class UDKGame.DunDefPlayerAbility_GenericActorSpawner
// 0x00AC (0x04D8 - 0x042C)
class ADunDefPlayerAbility_GenericActorSpawner : public ADunDefPlayerAbility
{
public:
	float                                              CastTime;                                                 // 0x042C(0x0004) (Edit)
	int                                                CastCost;                                                 // 0x0430(0x0004) (Edit)
	class AActor*                                      ActorToSpawnUponCompletion;                               // 0x0434(0x0004) (Edit)
	unsigned long                                      TakeTransformationFromInstigator : 1;                     // 0x0438(0x0004) (Edit)
	unsigned long                                      TakeTransformationFromWeapon : 1;                         // 0x0438(0x0004) (Edit)
	unsigned long                                      SpawnedBaseOnInstigator : 1;                              // 0x0438(0x0004) (Edit)
	unsigned long                                      SpawnedBaseOnWeapon : 1;                                  // 0x0438(0x0004) (Edit)
	unsigned long                                      bForceFullBodyCompletionAnimation : 1;                    // 0x0438(0x0004) (Edit)
	unsigned long                                      SetInstigatorAsActorInstigator : 1;                       // 0x0438(0x0004) (Edit)
	unsigned long                                      SetInstigatorAsActorOwner : 1;                            // 0x0438(0x0004) (Edit)
	unsigned long                                      PlayShootAnimation : 1;                                   // 0x0438(0x0004) (Edit)
	unsigned long                                      PlayBigShootAnimation : 1;                                // 0x0438(0x0004) (Edit)
	unsigned long                                      AimAtPlayerTarget : 1;                                    // 0x0438(0x0004) (Edit)
	unsigned long                                      bWaitingForActorSpawn : 1;                                // 0x0438(0x0004) (Transient)
	unsigned long                                      bPaidForUse : 1;                                          // 0x0438(0x0004) (Transient)
	unsigned long                                      bDidCompletion : 1;                                       // 0x0438(0x0004) (Transient)
	unsigned long                                      bLimitActiveSpawns : 1;                                   // 0x0438(0x0004) (Edit)
	unsigned long                                      bIsBomb : 1;                                              // 0x0438(0x0004) (Edit)
	unsigned long                                      bAllowSpawnAtCursor : 1;                                  // 0x0438(0x0004) (Edit)
	unsigned long                                      bUseManaHoming : 1;                                       // 0x0438(0x0004) (Edit)
	unsigned long                                      bHasDesiredSpawnLoc : 1;                                  // 0x0438(0x0004) (Transient)
	struct FVector                                     SpawnLocationOffset;                                      // 0x043C(0x000C) (Edit)
	struct FRotator                                    SpawnRotationOffset;                                      // 0x0448(0x000C) (Edit)
	struct FName                                       CastingCharacterAnimation;                                // 0x0454(0x0008) (Edit)
	struct FName                                       CompletedCharacterAnimation;                              // 0x045C(0x0008) (Edit)
	struct FName                                       CharacterEmitterSocketName;                               // 0x0464(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     CastingCharacterEmitter;                                  // 0x046C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CastingWeaponEmitter;                                     // 0x0470(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CompletedCharacterEmitter;                                // 0x0474(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CompletedWeaponEmitter;                                   // 0x0478(0x0004) (Edit)
	float                                              AimMaxShootOffsetYawArc;                                  // 0x047C(0x0004) (Edit)
	float                                              ProjectileSpread;                                         // 0x0480(0x0004) (Edit)
	float                                              CompletedAnimBlendTimeIn;                                 // 0x0484(0x0004) (Edit)
	float                                              CompletedAnimBlendTimeOut;                                // 0x0488(0x0004) (Edit)
	float                                              CompletedAnimSpeed;                                       // 0x048C(0x0004) (Edit)
	struct FString                                     CastingDescription;                                       // 0x0490(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              SpawnDelayTime;                                           // 0x049C(0x0004) (Edit)
	float                                              CastCounter;                                              // 0x04A0(0x0004) (Transient)
	int                                                MaxAllowedActiveSpawns;                                   // 0x04A4(0x0004) (Edit)
	struct FString                                     ActivationFailureString_MaxAllowedSpawns;                 // 0x04A8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FVector                                     desiredSpawnLocation;                                     // 0x04B4(0x000C) (Transient)
	struct FVector                                     LocationOfSpawn;                                          // 0x04C0(0x000C)
	TArray<class AActor*>                              spawnedActors;                                            // 0x04CC(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_GenericActorSpawner");
		return ptr;
	}


	struct FRotator AddSpread(const struct FRotator& BaseAim);
	void ServerActivateWithLocation(const struct FVector& SpawnLocation);
	unsigned long RequestActivation(unsigned long bHeld);
	void DoActorSpawn();
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	void SetUpActorSpawn();
	unsigned long AllowCastingCancelOnDamage();
	int GetCostToActivate(unsigned long returnTrueValue);
	void ManaHoming();
};


// Class UDKGame.DunDefPlayerAbility_GenericSpellTimer
// 0x003C (0x0468 - 0x042C)
class ADunDefPlayerAbility_GenericSpellTimer : public ADunDefPlayerAbility
{
public:
	struct FString                                     CastingDescription;                                       // 0x042C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_Short;                            // 0x0438(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString;                                  // 0x0444(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              TimeToComplete;                                           // 0x0450(0x0004) (Edit)
	unsigned long                                      bUseHeroCastRate : 1;                                     // 0x0454(0x0004) (Edit)
	class USoundCue*                                   CompletedSound;                                           // 0x0458(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CastingCharacterEmitterTemplate;                          // 0x045C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     CastingWeaponEmitterTemplate;                             // 0x0460(0x0004) (Edit)
	float                                              CastingTimer;                                             // 0x0464(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_GenericSpellTimer");
		return ptr;
	}


	int GetDisplayCost();
	int GetCostToActivate(unsigned long returnTrueValue);
	struct FString GetActivationFailureString(TEnumAsByte<EPlayerAbilityStatus> Status, unsigned long ShortString);
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
};


// Class UDKGame.DunDefPlayerAbility_Heal
// 0x0030 (0x045C - 0x042C)
class ADunDefPlayerAbility_Heal : public ADunDefPlayerAbility
{
public:
	struct FString                                     CastingDescription;                                       // 0x042C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString_Short;                            // 0x0438(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationFailureString;                                  // 0x0444(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              HealSelfSpeedFactor;                                      // 0x0450(0x0004) (Edit)
	class USoundCue*                                   HealCompletedSound;                                       // 0x0454(0x0004) (Edit)
	float                                              CachedAmountCost;                                         // 0x0458(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Heal");
		return ptr;
	}


	int GetDisplayCost();
	int GetCostToActivate(unsigned long returnTrueValue);
	struct FString GetActivationFailureString(TEnumAsByte<EPlayerAbilityStatus> Status, unsigned long ShortString);
	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
};


// Class UDKGame.DunDefPlayerAbility_Huntress_Invisibility
// 0x0024 (0x04A0 - 0x047C)
class ADunDefPlayerAbility_Huntress_Invisibility : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                                   // 0x047C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActivationAnimation;                                      // 0x0480(0x0008) (Edit)
	struct FLinearColor                                OverlayEffectColor;                                       // 0x0488(0x0010) (Edit)
	float                                              HeroStatGroundSpeedExponent;                              // 0x0498(0x0004) (Edit)
	float                                              SpeedMultiplier;                                          // 0x049C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Huntress_Invisibility");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
};


// Class UDKGame.DunDefPlayerAbility_Initiate_Invisibility
// 0x0020 (0x049C - 0x047C)
class ADunDefPlayerAbility_Initiate_Invisibility : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                                   // 0x047C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystem*                             BlinkEffectComponent;                                     // 0x0480(0x0004) (Edit)
	struct FName                                       ActivationAnimation;                                      // 0x0484(0x0008) (Edit)
	struct FLinearColor                                OverlayEffectColor;                                       // 0x048C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Initiate_Invisibility");
		return ptr;
	}

};


// Class UDKGame.DunDefPlayerAbility_Recruit_HeroBoost
// 0x002C (0x0504 - 0x04D8)
class ADunDefPlayerAbility_Recruit_HeroBoost : public ADunDefPlayerAbility_AreaOfEffect
{
public:
	float                                              HealingPerInterval;                                       // 0x04D8(0x0004) (Edit)
	float                                              AdditionalDamageMultiplier;                               // 0x04DC(0x0004) (Edit)
	float                                              AdditionalDamageExponent;                                 // 0x04E0(0x0004) (Edit)
	float                                              HealingExponent;                                          // 0x04E4(0x0004) (Edit)
	float                                              GroundSpeedMultiplier;                                    // 0x04E8(0x0004) (Edit)
	float                                              OwnerGroundSpeedMultiplier;                               // 0x04EC(0x0004) (Edit)
	float                                              OwnerHeroStatGroundSpeedExponent;                         // 0x04F0(0x0004) (Edit)
	float                                              OwnerAdditionalDamageMultiplier;                          // 0x04F4(0x0004) (Edit)
	float                                              OwnerDamageResistanceMultiplier;                          // 0x04F8(0x0004) (Edit)
	float                                              OwnerHeroStatDamageResistanceExponent;                    // 0x04FC(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x0500(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Recruit_HeroBoost");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	void AddEffect(class AActor* theAct);
	void RemoveEffect(int Index);
	void DoEffect();
	float GetSpeedMultiplier();
	float GetHealingAmount();
	float GetDamageMultiplier();
};


// Class UDKGame.DunDefPlayerAbility_Recruit_TowerBoost
// 0x0014 (0x04EC - 0x04D8)
class ADunDefPlayerAbility_Recruit_TowerBoost : public ADunDefPlayerAbility_AreaOfEffect
{
public:
	float                                              HealingPerInterval;                                       // 0x04D8(0x0004) (Edit)
	float                                              AdditionalTowerDamageMultiplier;                          // 0x04DC(0x0004) (Edit)
	float                                              TowerDamageMultExponent;                                  // 0x04E0(0x0004) (Edit)
	float                                              HealingMultExponent;                                      // 0x04E4(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x04E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Recruit_TowerBoost");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	void AddEffect(class AActor* theAct);
	void RemoveEffect(int Index);
	void DoEffect();
	float GetHealingAmount();
	float GetDamageMultiplier();
};


// Class UDKGame.DunDefPlayerAbility_RepairTower
// 0x0068 (0x05A8 - 0x0540)
class ADunDefPlayerAbility_RepairTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialRepair;                                      // 0x0540(0x0004) (Edit)
	class UTexture2D*                                  CursorRepairTexture;                                      // 0x0544(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingRepairWeaponEmitter;                              // 0x0548(0x0004) (Edit)
	struct FName                                       RepairingStateNamePC;                                     // 0x054C(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     RepairTowerEmitterTemplate;                               // 0x0554(0x0004) (Edit)
	float                                              RepairSpeedMultiplier;                                    // 0x0558(0x0004) (Edit)
	float                                              RepairAutoSelectRangeOffset;                              // 0x055C(0x0004) (Edit)
	struct FColor                                      RepairTextDrawColor;                                      // 0x0560(0x0004) (Edit)
	float                                              RepairTextScale;                                          // 0x0564(0x0004) (Edit)
	float                                              InfiniteBuildPhaseSpeedMultiplier;                        // 0x0568(0x0004) (Edit)
	struct FString                                     NotificationString;                                       // 0x056C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     RepairingString;                                          // 0x0578(0x000C) (Edit, Localized, NeedCtorLink)
	struct FLinearColor                                ValidNotificationColor;                                   // 0x0584(0x0010) (Edit)
	class USoundCue*                                   RepairCompletedLocalSound;                                // 0x0594(0x0004) (Edit)
	unsigned long                                      bWasValidTower : 1;                                       // 0x0598(0x0004) (Transient)
	class ADunDefTower*                                RepairTower;                                              // 0x059C(0x0004) (Transient)
	float                                              StartRepairTime;                                          // 0x05A0(0x0004) (Transient)
	float                                              CachedAmountCost;                                         // 0x05A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_RepairTower");
		return ptr;
	}


	void StartRepairingState();
	void ClientStartRepairingState();
	unsigned long PlacementTraceCheckActors(class AActor* A);
	class ADunDefTower* GetBestRepairTower();
	void ServerRequestRepairTower(class ADunDefTower* Tower);
	void PostBeginPlay();
	void PostCursorDrawHUD(class ADunDefHUD* H, const struct FVector& CursorPos);
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect();
	class UTexture2D* GetCursorPlacementTexture();
	int GetDisplayCost();
	int GetCostToActivate(unsigned long returnTrueValue);
};


// Class UDKGame.DunDefPlayerAbility_SellTower
// 0x0038 (0x0578 - 0x0540)
class ADunDefPlayerAbility_SellTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialSell;                                        // 0x0540(0x0004) (Edit)
	class UTexture2D*                                  CursorSellTexture;                                        // 0x0544(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     ChoosingSellWeaponEmitter;                                // 0x0548(0x0004) (Edit)
	struct FColor                                      SellTextDrawColor;                                        // 0x054C(0x0004) (Edit)
	float                                              SellTextScale;                                            // 0x0550(0x0004) (Edit)
	struct FString                                     NotificationString;                                       // 0x0554(0x000C) (Edit, Localized, NeedCtorLink)
	struct FLinearColor                                ValidNotificationColor;                                   // 0x0560(0x0010) (Edit)
	unsigned long                                      bWasValidTower : 1;                                       // 0x0570(0x0004) (Transient)
	class ADunDefTower*                                SellTower;                                                // 0x0574(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_SellTower");
		return ptr;
	}


	void SortTracedActors(TArray<struct FActorHitInfo>* TracedActors);
	void ServerRequestSellTower(class ADunDefTower* Tower);
	void PostCursorDrawHUD(class ADunDefHUD* H, const struct FVector& CursorPos);
	void PostBeginPlay();
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect();
	class UTexture2D* GetCursorPlacementTexture();
};


// Class UDKGame.DunDefPlayerAbility_Squire_BloodRage
// 0x0040 (0x04BC - 0x047C)
class ADunDefPlayerAbility_Squire_BloodRage : public ADunDefPlayerAbility_CharacterToggle
{
public:
	class UParticleSystemComponent*                    AbilityEffectComponent;                                   // 0x047C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ActivationAnimation;                                      // 0x0480(0x0008) (Edit)
	float                                              GroundSpeedMultiplier;                                    // 0x0488(0x0004) (Edit)
	float                                              AttackDamageMultiplier;                                   // 0x048C(0x0004) (Edit)
	float                                              DamageResistanceMultiplier;                               // 0x0490(0x0004) (Edit)
	float                                              HeroStatGroundSpeedExponent;                              // 0x0494(0x0004) (Edit)
	float                                              HeroStatAttackDamageExponentNightmare;                    // 0x0498(0x0004) (Edit)
	float                                              HeroStatAttackDamageExponent;                             // 0x049C(0x0004) (Edit)
	float                                              HeroStatDamageResistanceExponentNightmare;                // 0x04A0(0x0004) (Edit)
	float                                              HeroStatDamageResistanceExponent;                         // 0x04A4(0x0004) (Edit)
	float                                              NightmareAttackDamageExponent;                            // 0x04A8(0x0004) (Edit)
	struct FLinearColor                                OverlayEffectColor;                                       // 0x04AC(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Squire_BloodRage");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
};


// Class UDKGame.DunDefPlayerAbility_Squire_CircleSlice
// 0x0038 (0x0464 - 0x042C)
class ADunDefPlayerAbility_Squire_CircleSlice : public ADunDefPlayerAbility
{
public:
	int                                                ManaCostToActivate;                                       // 0x042C(0x0004) (Edit)
	struct FName                                       PlayerSliceAnimation;                                     // 0x0430(0x0008) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0438(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x043C(0x000C) (Edit)
	float                                              MassMomentumExponentialScale;                             // 0x0448(0x0004) (Edit)
	float                                              WeaponDamageMultiplier;                                   // 0x044C(0x0004) (Edit)
	float                                              AdditionalDamageAmount;                                   // 0x0450(0x0004) (Edit)
	float                                              HeroStatDamageModifierExponent;                           // 0x0454(0x0004) (Edit)
	float                                              HeroStatMomentumModifierExponent;                         // 0x0458(0x0004) (Edit)
	float                                              TimeBeforeEndAnimationToFinish;                           // 0x045C(0x0004) (Edit)
	unsigned long                                      IsInSwing : 1;                                            // 0x0460(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_Squire_CircleSlice");
		return ptr;
	}


	TEnumAsByte<EPlayerAbilityStatus> GetAbilityStatus(int* ExtraStatusFlag);
	float GetMomentum();
	float GetDamage();
	void AnimNotify_CurrentAbility_Off();
	void AnimNotify_CurrentAbility_On();
	unsigned long RequestCancellation(unsigned long bForce);
	void CancelAbility();
	int GetCostToActivate(unsigned long returnTrueValue);
};


// Class UDKGame.DunDefPlayerAbility_UpgradeTower
// 0x0088 (0x05C8 - 0x0540)
class ADunDefPlayerAbility_UpgradeTower : public ADunDefPlayerAbility_TowerPlacement
{
public:
	class UMaterialInstanceConstant*                   DecalMaterialUpgrade;                                     // 0x0540(0x0004) (Edit)
	TArray<class UTexture2D*>                          CursorUpgradeTextures;                                    // 0x0544(0x000C) (Edit, NeedCtorLink)
	class ADunDefEmitterSpawnable*                     ChoosingUpgradeWeaponEmitter;                             // 0x0550(0x0004) (Edit)
	struct FName                                       UpgradingStateNamePC;                                     // 0x0554(0x0008) (Edit)
	class ADunDefEmitterSpawnable*                     UpgradeTowerEmitterTemplate;                              // 0x055C(0x0004) (Edit)
	float                                              UpgradeSpeedMultiplier;                                   // 0x0560(0x0004) (Edit)
	struct FColor                                      CanUpgradeTowerOverlayColor;                              // 0x0564(0x0004) (Edit)
	struct FColor                                      CanNotUpgradeTowerOverlayColor;                           // 0x0568(0x0004) (Edit)
	struct FString                                     FailureString_TowerHasMaxUpgrades;                        // 0x056C(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                DefaultUpgradeCostToActivate;                             // 0x0578(0x0004) (Edit)
	struct FString                                     NotificationString;                                       // 0x057C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UpgradingString;                                          // 0x0588(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              UpgradeAutoSelectRangeOffset;                             // 0x0594(0x0004) (Edit)
	float                                              AutoSelectUpgradeLevelWeighting;                          // 0x0598(0x0004) (Edit)
	float                                              AutoSelectDotWeighting;                                   // 0x059C(0x0004) (Edit)
	float                                              InfiniteBuildPhaseSpeedMultiplier;                        // 0x05A0(0x0004) (Edit)
	struct FLinearColor                                ValidNotificationColor;                                   // 0x05A4(0x0010) (Edit)
	unsigned long                                      bWasValidTower : 1;                                       // 0x05B4(0x0004) (Transient)
	class ADunDefTower*                                UpgradeTower;                                             // 0x05B8(0x0004) (Transient)
	struct FColor                                      DrawUpgradeColor;                                         // 0x05BC(0x0004) (Transient)
	float                                              CurrentUpgradeTime;                                       // 0x05C0(0x0004) (Transient)
	int                                                NextTowerUpgradeLevel;                                    // 0x05C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerAbility_UpgradeTower");
		return ptr;
	}


	class ADunDefTower* GetBestTower(TArray<class AActor*> candidates);
	class ADunDefTower* GetBestUpgradeTower();
	void PreCursorDrawHUD(class ADunDefHUD* H, const struct FVector& CursorPos);
	void StartUpgradingState();
	void ClientStartUpgradingState();
	unsigned long IsValidUpgradeTower(class ADunDefTower* Tower, unsigned long bDontCountMana, int* theNextUpgradeLevel);
	void ServerRequestUpgradeTower(class ADunDefTower* Tower);
	void PostBeginPlay();
	class ADunDefEmitterSpawnable* GetPlacementWeaponEffect();
	class UTexture2D* GetCursorPlacementTexture();
	int GetTowerCost();
	int GetDisplayCost();
	int GetCostToActivate(unsigned long returnTrueValue);
};


// Class UDKGame.DunDefPlayerController_Mobile
// 0x0000 (0x0B38 - 0x0B38)
class ADunDefPlayerController_Mobile : public ADunDefPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerController_Mobile");
		return ptr;
	}

};


// Class UDKGame.DunDefPlayerSelectUICharacter
// 0x0068 (0x02C4 - 0x025C)
class ADunDefPlayerSelectUICharacter : public ASkeletalMeshActorMAT
{
public:
	int                                                PlayerIndex;                                              // 0x025C(0x0004) (Edit)
	struct FName                                       SelectedAnimationName;                                    // 0x0260(0x0008) (Edit)
	struct FName                                       UnselectedAnimationName;                                  // 0x0268(0x0008) (Edit)
	struct FName                                       CustomAnimationNodeName;                                  // 0x0270(0x0008) (Edit)
	struct FName                                       IdleBlendNodeName;                                        // 0x0278(0x0008) (Edit)
	struct FVector                                     CharacterMeshGlobalTranslationOffset;                     // 0x0280(0x000C) (Edit)
	class ASceneCaptureActor*                          LinkedSceneCaptureActor;                                  // 0x028C(0x0004) (Edit)
	class USkeletalMeshComponent*                      FamiliarMeshComp;                                         // 0x0290(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FRotator                                    characterInitialRotation;                                 // 0x0294(0x000C)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x02A0(0x0004)
	class UAnimNodeBlend*                              IdleBlendNode;                                            // 0x02A4(0x0004)
	class UDunDefHero*                                 curHero;                                                  // 0x02A8(0x0004)
	class USkeletalMeshComponent*                      weaponMeshComp;                                           // 0x02AC(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      offHandWeaponMeshComp;                                    // 0x02B0(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMesh*                               LastCostumeMesh;                                          // 0x02B4(0x0004)
	struct FVector                                     OriginalTranslationOffset;                                // 0x02B8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefPlayerSelectUICharacter");
		return ptr;
	}


	void AddDefaultOffHandWeaponAttachment(class ADunDefWeapon* weaponTemplate, const struct FName& SocketName);
	void AddDefaultWeaponAttachment(class ADunDefWeapon* weaponTemplate);
	void Unselected(unsigned long bNoPlayAnimation);
	void Selected(class UDunDefHero* hero, unsigned long bForce, unsigned long bDontPlayAnimation, int CostumeIndexOverride);
	void RestoreRotation();
	void PostBeginPlay();
};


// Class UDKGame.DunDefProjectile_Arrow
// 0x0000 (0x0374 - 0x0374)
class ADunDefProjectile_Arrow : public ADunDefProjectile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_Arrow");
		return ptr;
	}

};


// Class UDKGame.DunDefProjectile_Bouncing
// 0x0044 (0x040C - 0x03C8)
class ADunDefProjectile_Bouncing : public ADunDefHomingProjectile
{
public:
	TEnumAsByte<EProjTarget>                           ValidTargets;                                             // 0x03C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	unsigned long                                      bAutoChooseNewTarget : 1;                                 // 0x03CC(0x0004) (Edit)
	unsigned long                                      bMoveForwardWhileHover : 1;                               // 0x03CC(0x0004) (Edit)
	unsigned long                                      bCalcBestTargetBasedOnDistance : 1;                       // 0x03CC(0x0004) (Edit)
	unsigned long                                      bExcludePreviousTargets : 1;                              // 0x03CC(0x0004) (Edit)
	unsigned long                                      bHealingProjectile : 1;                                   // 0x03CC(0x0004) (Edit)
	unsigned long                                      bChangeTargetWhenCurrentTargetDies : 1;                   // 0x03CC(0x0004) (Edit)
	unsigned long                                      bHoverWhenNoTarget : 1;                                   // 0x03CC(0x0004) (Edit)
	unsigned long                                      bOnlyBounceOnAimTarget : 1;                               // 0x03CC(0x0004) (Edit)
	unsigned long                                      bBounceOffWalls : 1;                                      // 0x03CC(0x0004) (Edit)
	int                                                MaxWallBounces;                                           // 0x03D0(0x0004) (Edit)
	int                                                MaxHits;                                                  // 0x03D4(0x0004) (Edit)
	float                                              BounceRange;                                              // 0x03D8(0x0004) (Edit)
	float                                              ScalingPerBounceMultiplier;                               // 0x03DC(0x0004) (Edit)
	TArray<float>                                      ScalingPerBounce;                                         // 0x03E0(0x000C) (Edit, NeedCtorLink)
	float                                              ChooseNewTargetDelay;                                     // 0x03EC(0x0004) (Edit)
	float                                              HoverExpireTime;                                          // 0x03F0(0x0004) (Edit)
	float                                              BounceVelocityMultiplier;                                 // 0x03F4(0x0004) (Edit)
	int                                                NumBounces;                                               // 0x03F8(0x0004)
	int                                                NumWallBounces;                                           // 0x03FC(0x0004)
	int                                                MaxHitToSameTarget;                                       // 0x0400(0x0004)
	float                                              HoverStartTime;                                           // 0x0404(0x0004) (Net, Transient)
	class AActor*                                      currentTarget;                                            // 0x0408(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_Bouncing");
		return ptr;
	}


	void Hover(unsigned long bResetTimer);
	void Tick(float DeltaTime);
	void SetNewTarget(class AActor* NewTarget);
	void SetHomingTarget(class AActor* NewTarget);
	void ChooseNextTarget();
	float DamageScaling();
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	unsigned long IsImpactAllowed(class AActor* Other);
	void InitalizeActorStats(const TScriptInterface<class UIActorModifierInterface>& ActorStatObject, class UObject* CallingObject, int Tier, unsigned long bBaseValueOnly);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefProjectile_Harpoon
// 0x001C (0x0390 - 0x0374)
class ADunDefProjectile_Harpoon : public ADunDefProjectile
{
public:
	float                                              DestructionDelayTime;                                     // 0x0374(0x0004) (Edit)
	int                                                NumAllowedPassThrough;                                    // 0x0378(0x0004) (Edit)
	unsigned long                                      bPlayPawnImpactSoundOnHittingEachPawn : 1;                // 0x037C(0x0004) (Edit)
	unsigned long                                      bDamageOnTouch : 1;                                       // 0x037C(0x0004) (Edit)
	unsigned long                                      bPlayImpactEffectOnHittingEachPawn : 1;                   // 0x037C(0x0004) (Edit)
	unsigned long                                      bIgnorePassThrough : 1;                                   // 0x037C(0x0004) (Edit)
	TArray<class AActor*>                              PreviousHitActors;                                        // 0x0380(0x000C) (NeedCtorLink)
	int                                                NumPassThrough;                                           // 0x038C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_Harpoon");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	unsigned long IsImpactAllowed(class AActor* Other);
};


// Class UDKGame.DunDefProjectile_BowlingBall
// 0x0060 (0x03F0 - 0x0390)
class ADunDefProjectile_BowlingBall : public ADunDefProjectile_Harpoon
{
public:
	int                                                BallBouncesMax;                                           // 0x0390(0x0004) (Edit)
	int                                                BallBouncesMaxPawns;                                      // 0x0394(0x0004) (Edit)
	float                                              BallBounceVelocityDamping;                                // 0x0398(0x0004) (Edit)
	float                                              BallBouncePawnVelocityDamping;                            // 0x039C(0x0004) (Edit)
	float                                              BallBounceZVelocityDamping;                               // 0x03A0(0x0004) (Edit)
	unsigned long                                      bBounceOffPawns : 1;                                      // 0x03A4(0x0004) (Edit)
	unsigned long                                      bRotateOverTime : 1;                                      // 0x03A4(0x0004) (Edit)
	unsigned long                                      bUsePawnVelocityDamping : 1;                              // 0x03A4(0x0004) (Edit)
	unsigned long                                      bUseMeshRotationForImpactEmitter : 1;                     // 0x03A4(0x0004) (Edit)
	unsigned long                                      bAlwaysExplodeOnDestruction : 1;                          // 0x03A4(0x0004) (Edit)
	unsigned long                                      bDontExplodeOnMaxBounces : 1;                             // 0x03A4(0x0004) (Edit)
	unsigned long                                      bHitWallPawn : 1;                                         // 0x03A4(0x0004) (Transient)
	unsigned long                                      bExploded : 1;                                            // 0x03A4(0x0004) (Transient)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x03A8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BowlingBallMeshComp;                                      // 0x03AC(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              RotationSpeedRate;                                        // 0x03B0(0x0004) (Edit)
	float                                              MinBounceSoundSpeed;                                      // 0x03B4(0x0004) (Edit)
	float                                              RotationFollowVelocityLerpSpeed;                          // 0x03B8(0x0004) (Edit)
	float                                              MinumumBounceSoundSpeed;                                  // 0x03BC(0x0004) (Edit)
	class USoundCue*                                   BounceSound;                                              // 0x03C0(0x0004) (Edit)
	float                                              ExplosionTimerAfterImpact;                                // 0x03C4(0x0004) (Edit)
	float                                              DamageOnRadius;                                           // 0x03C8(0x0004) (Edit)
	float                                              PawnSideBounceVariability;                                // 0x03CC(0x0004) (Edit)
	float                                              MinBounceSoundInterval;                                   // 0x03D0(0x0004) (Edit)
	struct FVector                                     PawnVelocityBump;                                         // 0x03D4(0x000C) (Edit)
	int                                                BounceCounter;                                            // 0x03E0(0x0004) (Transient)
	int                                                BounceCounterPawns;                                       // 0x03E4(0x0004) (Transient)
	unsigned char                                      RandomSeed;                                               // 0x03E8(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              LastBoundSoundTime;                                       // 0x03EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_BowlingBall");
		return ptr;
	}


	void Tick(float dt);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Destroyed();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void TimedExplosion();
	void PostBeginPlay();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Landed(const struct FVector& HitNormal, class AActor* Floor);
};


// Class UDKGame.DunDefProjectile_Falling
// 0x0004 (0x0378 - 0x0374)
class ADunDefProjectile_Falling : public ADunDefProjectile
{
public:
	float                                              replicatedGravZMult;                                      // 0x0374(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_Falling");
		return ptr;
	}


	void Landed(const struct FVector& HitNormal, class AActor* Floor);
	void SetGravZ(float newZ);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefProjectile_Fireball
// 0x0000 (0x0374 - 0x0374)
class ADunDefProjectile_Fireball : public ADunDefProjectile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_Fireball");
		return ptr;
	}

};


// Class UDKGame.DunDefProjectile_MagicBolt
// 0x0030 (0x03A4 - 0x0374)
class ADunDefProjectile_MagicBolt : public ADunDefProjectile
{
public:
	float                                              MyChargePercentage;                                       // 0x0374(0x0004) (Net)
	float                                              ChargeEffectMinScale;                                     // 0x0378(0x0004) (Edit)
	float                                              ChargeEffectMaxScale;                                     // 0x037C(0x0004) (Edit)
	float                                              TheDamageMinScale;                                        // 0x0380(0x0004) (Edit)
	float                                              TheDamageMaxScale;                                        // 0x0384(0x0004) (Edit)
	float                                              ExtraDamageMaxScale;                                      // 0x0388(0x0004) (Edit)
	float                                              RadiusMinScale;                                           // 0x038C(0x0004) (Edit)
	float                                              RadiusMaxScale;                                           // 0x0390(0x0004) (Edit)
	float                                              MomentumMinScale;                                         // 0x0394(0x0004) (Edit)
	float                                              MomentumMaxScale;                                         // 0x0398(0x0004) (Edit)
	float                                              CollisionMinSize;                                         // 0x039C(0x0004) (Edit)
	float                                              CollisionMaxSize;                                         // 0x03A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_MagicBolt");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void InitProjectile(const struct FVector& Direction, class APawn* MyInstigator, float baseDamageForScaling, class AActor* myHomingTarget, const TScriptInterface<class UIActorModifierInterface>& MyActorModifier);
	void InitMagicBolt(float ChargePercentage, const struct FVector& Direction, class APawn* MyInstigator, float baseDamageForScaling);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefProjectile_MagicMissile
// 0x0008 (0x037C - 0x0374)
class ADunDefProjectile_MagicMissile : public ADunDefProjectile
{
public:
	unsigned long                                      pushUp : 1;                                               // 0x0374(0x0004) (Edit)
	float                                              pushUpScale;                                              // 0x0378(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefProjectile_MagicMissile");
		return ptr;
	}


	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class UDKGame.DunDefUIController
// 0x0018 (0x01C4 - 0x01AC)
class UDunDefUIController : public UUIInteraction
{
public:
	TArray<struct FName>                               PushToTalkKeys;                                           // 0x01AC(0x000C) (NeedCtorLink)
	TArray<struct FKeyBind>                            Bindings;                                                 // 0x01B8(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefUIController");
		return ptr;
	}


	TArray<struct FName> GetKeys(const struct FString& Command);
	void Initialized();
	unsigned long InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, unsigned long bGamepad);
};


// Class UDKGame.DunDefSkeletonController
// 0x0040 (0x064C - 0x060C)
class ADunDefSkeletonController : public ADunDefEnemyController
{
public:
	unsigned long                                      IsInMeleeSwing : 1;                                       // 0x060C(0x0004)
	struct FVector                                     PreviousMeleeSwingALocation;                              // 0x0610(0x000C)
	struct FVector                                     PreviousMeleeSwingBLocation;                              // 0x061C(0x000C)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x0628(0x000C) (NeedCtorLink)
	int                                                MeleeDamageAmount;                                        // 0x0634(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0638(0x0004) (Edit)
	struct FVector                                     MeleeSwingExtent;                                         // 0x063C(0x000C) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0648(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefSkeletonController");
		return ptr;
	}


	unsigned long AddToSwingHurtList(class AActor* newEntry);
	void EndMeleeSwing();
	void StartMeleeSwing();
	void AwaitResurrection();
};


// Class UDKGame.DunDefToolTipMesh
// 0x0078 (0x0294 - 0x021C)
class ADunDefToolTipMesh : public AActor
{
public:
	float                                              ActivationWeighting;                                      // 0x021C(0x0004) (Edit)
	float                                              ActivationOffset;                                         // 0x0220(0x0004) (Edit)
	float                                              ToolTipTextScale;                                         // 0x0224(0x0004) (Edit)
	float                                              ToolTipTextDescriptionScale;                              // 0x0228(0x0004) (Edit)
	struct FColor                                      DescriptionColor;                                         // 0x022C(0x0004) (Edit)
	struct FColor                                      DescriptionColor_UseOutOfRange;                           // 0x0230(0x0004) (Edit)
	struct FColor                                      DescriptionColor_UseInvalid;                              // 0x0234(0x0004) (Edit)
	struct FString                                     ToolTipText;                                              // 0x0238(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ActivationText;                                           // 0x0244(0x000C) (Edit, Localized, NeedCtorLink)
	struct FVector                                     ToolTipWorldOffset;                                       // 0x0250(0x000C) (Edit)
	struct FVector                                     ToolTipScreenOffset;                                      // 0x025C(0x000C) (Edit)
	class UStaticMeshComponent*                        MyStaticMeshComp;                                         // 0x0268(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x026C(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bDrawToolTip : 1;                                         // 0x0270(0x0004) (Edit)
	unsigned long                                      bAllowActivation : 1;                                     // 0x0270(0x0004) (Edit, Net)
	unsigned long                                      bActivationTriggerServerKismet : 1;                       // 0x0270(0x0004) (Edit)
	unsigned long                                      bActivationTriggerClientKismet : 1;                       // 0x0270(0x0004) (Edit)
	unsigned long                                      bPlayPawnActivationAnimation : 1;                         // 0x0270(0x0004) (Edit)
	unsigned long                                      bOnlyAllowServerActivation : 1;                           // 0x0270(0x0004) (Edit)
	float                                              ActivationDistance;                                       // 0x0274(0x0004) (Edit)
	float                                              ToolTipActivationScreenOffset;                            // 0x0278(0x0004) (Edit)
	struct FName                                       ServerKismetCustomEventName;                              // 0x027C(0x0008) (Edit)
	int                                                ServerKismetCustomEventID;                                // 0x0284(0x0004) (Edit)
	struct FName                                       ClientKismetCustomEventName;                              // 0x0288(0x0008) (Edit)
	int                                                ClientKismetCustomEventID;                                // 0x0290(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefToolTipMesh");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	class UTexture2D* GetActivationIcon(int activationType);
	int GetToolTipPriority();
	unsigned long TakesToolTipPriority(const TScriptInterface<class UDunDefToolTipInterface>& otherToolTip);
	float GetActivationOffset();
	float GetActivationWeighting();
	void Client_Activate(class ADunDefPlayerController* PC, int activationType);
	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	int AllowActivation(class ADunDefPlayerController* PC, int activationType);
	unsigned long ContinueDrawingToolTip(unsigned long ContinueDrawing);
	void DrawToolTip(class UCanvas* C, int PosX, int PosY, class ULocalPlayer* ForPlayer);
};


// Class UDKGame.DunDefToolTipMeshFeedBack
// 0x0004 (0x0298 - 0x0294)
class ADunDefToolTipMeshFeedBack : public ADunDefToolTipMesh
{
public:
	unsigned long                                      bTreatAsPassword : 1;                                     // 0x0294(0x0004) (Edit)
	unsigned long                                      bOnlyAllowInLocalGame : 1;                                // 0x0294(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefToolTipMeshFeedBack");
		return ptr;
	}


	void Server_Activate(class ADunDefPlayerController* PC, unsigned long forceActivation, int activationType);
	void ShowUIKeyboard();
	void KeyboardInputDone(unsigned long Success);
};


// Class UDKGame.TowerBoosterInterface
// 0x0000 (0x003C - 0x003C)
class UTowerBoosterInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.TowerBoosterInterface");
		return ptr;
	}


	float GetTowerBoostAmount(TEnumAsByte<ETowerBoostType> boostType);
	unsigned long HasTowerBoostingType(TEnumAsByte<ETowerBoostType> boostType);
	TScriptInterface<class UDunDefTargetableInterface> GetTowerBoostingTarget();
};


// Class UDKGame.IDifficultyChangedInterface
// 0x0000 (0x003C - 0x003C)
class UIDifficultyChangedInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IDifficultyChangedInterface");
		return ptr;
	}


	void ChangedDifficulty(TEnumAsByte<EGameDifficulty> newDifficulty, TEnumAsByte<EGameDifficulty> oldDifficulty);
};


// Class UDKGame.DunDefTower_AuraDeathlyHallows
// 0x0008 (0x08C8 - 0x08C0)
class ADunDefTower_AuraDeathlyHallows : public ADunDefTower_Aura
{
public:
	int                                                PawnDamagePerInterval;                                    // 0x08C0(0x0004) (Edit)
	class UClass*                                      MyDamgeType;                                              // 0x08C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_AuraDeathlyHallows");
		return ptr;
	}


	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetAttackDamage();
	unsigned long TimedEffectDT(class ADunDefDamageableTarget* dt);
	unsigned long TimedEffect(class ADunDefPawn* P);
};


// Class UDKGame.DunDefTower_AuraEnrage
// 0x000C (0x08CC - 0x08C0)
class ADunDefTower_AuraEnrage : public ADunDefTower_Aura
{
public:
	float                                              ChanceToEnrage;                                           // 0x08C0(0x0004) (Edit)
	float                                              MaximumChanceToEnrage;                                    // 0x08C4(0x0004) (Edit)
	class UClass*                                      MyDamgeType;                                              // 0x08C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_AuraEnrage");
		return ptr;
	}


	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetChanceToEnrage();
	class UClass* GetDamageType();
	void ExitEffect(class ADunDefPawn* P);
	void EntryEffect(class ADunDefPawn* P);
};


// Class UDKGame.DunDefTower_AuraHeal
// 0x0008 (0x08C8 - 0x08C0)
class ADunDefTower_AuraHeal : public ADunDefTower_Aura
{
public:
	int                                                PawnHealingPerInterval;                                   // 0x08C0(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x08C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_AuraHeal");
		return ptr;
	}


	unsigned long IsValidForLifeEnergyDecrease(class ADunDefPawn* P);
	float GetDamageMultiplier();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetHealAmount();
	unsigned long TimedEffect(class ADunDefPawn* P);
};


// Class UDKGame.DunDefTower_AuraStickyGloop
// 0x0010 (0x08D0 - 0x08C0)
class ADunDefTower_AuraStickyGloop : public ADunDefTower_Aura
{
public:
	float                                              GroundSpeedAdjustment;                                    // 0x08C0(0x0004) (Edit)
	float                                              AnimSpeedMultiplier;                                      // 0x08C4(0x0004) (Edit)
	float                                              MinimumSpeed;                                             // 0x08C8(0x0004) (Edit)
	class UClass*                                      MyDamgeType;                                              // 0x08CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_AuraStickyGloop");
		return ptr;
	}


	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetMovementSpeedMultiplier();
	void ExitEffect(class ADunDefPawn* P);
	void EntryEffect(class ADunDefPawn* P);
	unsigned long TimedEffect(class ADunDefPawn* P);
};


// Class UDKGame.DunDefTower_BouncyBlockade
// 0x0060 (0x0898 - 0x0838)
class ADunDefTower_BouncyBlockade : public ADunDefTower_Blockade
{
public:
	float                                              BouncyInterval;                                           // 0x0838(0x0004) (Edit)
	class UClass*                                      BouncyDamageType;                                         // 0x083C(0x0004) (Edit)
	float                                              BouncyDamageAmount;                                       // 0x0840(0x0004) (Edit)
	float                                              BouncyMomentumAmount;                                     // 0x0844(0x0004) (Edit)
	struct FName                                       BouncyAnimationName;                                      // 0x0848(0x0008) (Edit)
	struct FName                                       CustomAnimNodeName;                                       // 0x0850(0x0008) (Edit)
	float                                              BouncyEffectiveRadius;                                    // 0x0858(0x0004) (Edit)
	float                                              BouncyCheckRadius;                                        // 0x085C(0x0004) (Edit)
	struct FVector                                     BouncyZUpKick;                                            // 0x0860(0x000C) (Edit)
	float                                              BouncySpeedMultiplier;                                    // 0x086C(0x0004) (Edit)
	float                                              MassMomentumExponentialScale;                             // 0x0870(0x0004) (Edit)
	float                                              MaximumVictimZDelta;                                      // 0x0874(0x0004) (Edit)
	struct FVector                                     MomentumSideVector;                                       // 0x0878(0x000C) (Edit)
	struct FString                                     AttackDamagePerSecondString;                              // 0x0884(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              LastBouncyTime;                                           // 0x0890(0x0004) (Transient)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x0894(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_BouncyBlockade");
		return ptr;
	}


	unsigned long UsesRange();
	class UClass* GetDamageType();
	float GetAttackInterval();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetAttackDamage();
	void DoBounce();
	void PostBeginPlay();
	void PlayBouncyAnimation();
	void BouncyRadiusCheck();
	void Destroyed();
	void Tick(float DeltaTime);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefTower_ProjectileType
// 0x00B8 (0x08DC - 0x0824)
class ADunDefTower_ProjectileType : public ADunDefTower
{
public:
	float                                              AttackRange;                                              // 0x0824(0x0004) (Edit)
	float                                              AttackInterval;                                           // 0x0828(0x0004) (Edit)
	class ADunDefProjectile*                           AttackProjectileTemplate;                                 // 0x082C(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     AttackMuzzleEffectTemplate;                               // 0x0830(0x0004) (Edit)
	struct FVector                                     AttackMuzzleEffectSpawnOffset;                            // 0x0834(0x000C) (Edit)
	struct FName                                       SkelControlLookAtName;                                    // 0x0840(0x0008) (Edit)
	struct FName                                       ProjectileSpawnSocketName;                                // 0x0848(0x0008) (Edit)
	struct FName                                       ControlLookAtBoneName;                                    // 0x0850(0x0008) (Edit)
	float                                              MaximumTargetYawDegrees;                                  // 0x0858(0x0004) (Edit)
	struct FName                                       ShootAnimationName;                                       // 0x085C(0x0008) (Edit)
	struct FName                                       AnimNodeSlotName;                                         // 0x0864(0x0008) (Edit)
	struct FName                                       AmbientMuzzleEffectSocketName;                            // 0x086C(0x0008) (Edit)
	class UParticleSystemComponent*                    AmbientMuzzleEffect;                                      // 0x0874(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AmbientGroundEffect;                                      // 0x0878(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x087C(0x000C) (Edit)
	unsigned long                                      TakeProjectileOrientationFromSocket : 1;                  // 0x0888(0x0004) (Edit)
	unsigned long                                      bNetworkProjectiles : 1;                                  // 0x0888(0x0004) (Edit)
	unsigned long                                      bLookAtLeadTarget : 1;                                    // 0x0888(0x0004) (Edit)
	unsigned long                                      DoLineOfSightCheck : 1;                                   // 0x0888(0x0004) (Edit)
	unsigned long                                      bUseTargetClassWeighting : 1;                             // 0x0888(0x0004) (Edit)
	unsigned long                                      bHadATarget : 1;                                          // 0x0888(0x0004) (Transient)
	unsigned long                                      bAllowShootProjectile : 1;                                // 0x0888(0x0004) (Transient)
	float                                              TurretInterpSpeed;                                        // 0x088C(0x0004) (Edit)
	struct FVector                                     TargetAimOffset;                                          // 0x0890(0x000C) (Edit)
	TArray<struct FTargetClassWeight>                  TargetClassWeights;                                       // 0x089C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AttackDamagePerSecondString;                              // 0x08A8(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              LastAttackTime;                                           // 0x08B4(0x0004) (Transient)
	class USkelControlLookAt*                          MySkelControlLookAt;                                      // 0x08B8(0x0004) (Transient)
	struct FVector                                     LookAtLocation;                                           // 0x08BC(0x000C) (Transient)
	class UAnimNodeSlot*                               MyAnimNodeSlot;                                           // 0x08C8(0x0004) (Transient)
	class AActor*                                      Target;                                                   // 0x08CC(0x0004) (Net)
	float                                              AnimLength;                                               // 0x08D0(0x0004) (Transient)
	float                                              BaseShootAnimationSpeed;                                  // 0x08D4(0x0004) (Edit)
	float                                              ShootAnimationSpeedMultiplierExponent;                    // 0x08D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_ProjectileType");
		return ptr;
	}


	unsigned long UsesRange();
	float GetShootAnimationSpeed();
	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float PlayShootAnimation();
	float GetAttackTime();
	float GetAttackInterval();
	void DoAttack();
	void UpdateAI(float DeltaTime);
	void UpdateTarget();
	void ValidateTarget();
	float GetTargetClassWeight(class UClass* theClass);
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float GetAttackDamage();
	float GetAttackRange();
	void UpdateTurretLookSkelControl(float DeltaTime);
	void Tick(float DeltaTime);
	unsigned long IsPositionWithinAngleRange(const struct FVector& Position);
	void ShootProjectile();
	void Destroyed();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefTower_BowlingBall
// 0x0000 (0x08DC - 0x08DC)
class ADunDefTower_BowlingBall : public ADunDefTower_ProjectileType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_BowlingBall");
		return ptr;
	}


	void UpdateTurretLookSkelControl(float DeltaTime);
};


// Class UDKGame.DunDefTower_DeadlyStriker
// 0x0000 (0x08DC - 0x08DC)
class ADunDefTower_DeadlyStriker : public ADunDefTower_ProjectileType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_DeadlyStriker");
		return ptr;
	}

};


// Class UDKGame.DunDefTower_Fireball
// 0x0000 (0x08DC - 0x08DC)
class ADunDefTower_Fireball : public ADunDefTower_ProjectileType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_Fireball");
		return ptr;
	}

};


// Class UDKGame.TrapLargeCylinderTriggerWrapper
// 0x0008 (0x0224 - 0x021C)
class ATrapLargeCylinderTriggerWrapper : public AActor
{
public:
	class ADunDefTower_GasTrap*                        parentTrap;                                               // 0x021C(0x0004) (Transient)
	float                                              Radius;                                                   // 0x0220(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.TrapLargeCylinderTriggerWrapper");
		return ptr;
	}


	void SetRadius(float newRad);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class UDKGame.DunDefTower_Harpoon
// 0x0018 (0x08F4 - 0x08DC)
class ADunDefTower_Harpoon : public ADunDefTower_ProjectileType
{
public:
	struct FName                                       SkelControlPitchLookAtName;                               // 0x08DC(0x0008) (Edit)
	class USkeletalMeshComponent*                      ChamberedHarpoonComp;                                     // 0x08E4(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       ChamberedHarpoonSocketName;                               // 0x08E8(0x0008) (Edit)
	class USkelControlLookAt*                          MySkelControlPitchLookAt;                                 // 0x08F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_Harpoon");
		return ptr;
	}


	void ShowChamberedHarpoon();
	void ShootProjectile();
	void UpdateTurretLookSkelControl(float DeltaTime);
	void PostBeginPlay();
};


// Class UDKGame.DunDefTower_MagicMissile
// 0x001C (0x08F8 - 0x08DC)
class ADunDefTower_MagicMissile : public ADunDefTower_ProjectileType
{
public:
	TArray<struct FProjectileEntry>                    ProjectileArray;                                          // 0x08DC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               FiringAnimations;                                         // 0x08E8(0x000C) (Edit, NeedCtorLink)
	float                                              TotalProjectileChance;                                    // 0x08F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_MagicMissile");
		return ptr;
	}


	void ChooseAnimation();
	void ChooseProjectile();
	void ShootProjectile();
	void PostBeginPlay();
};


// Class UDKGame.DunDefTower_JackInTheBox
// 0x0000 (0x08F8 - 0x08F8)
class ADunDefTower_JackInTheBox : public ADunDefTower_MagicMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_JackInTheBox");
		return ptr;
	}


	float GetAttackRange();
};


// Class UDKGame.DunDefTower_ProxMineTrap
// 0x0000 (0x0934 - 0x0934)
class ADunDefTower_ProxMineTrap : public ADunDefTower_GasTrap
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_ProxMineTrap");
		return ptr;
	}

};


// Class UDKGame.DunDefTower_SliceNDice
// 0x00A0 (0x08C4 - 0x0824)
class ADunDefTower_SliceNDice : public ADunDefTower
{
public:
	float                                              SpeedPercentToDeltaYaw;                                   // 0x0824(0x0004) (Edit)
	float                                              SpinUpTime;                                               // 0x0828(0x0004) (Edit)
	float                                              SpinDownTime;                                             // 0x082C(0x0004) (Edit)
	float                                              SpinTimeExponent;                                         // 0x0830(0x0004) (Edit)
	float                                              MinSpeedAttackInterval;                                   // 0x0834(0x0004) (Edit)
	float                                              MaxSpeedAttackInterval;                                   // 0x0838(0x0004) (Edit)
	float                                              MinSpeedAttackRange;                                      // 0x083C(0x0004) (Edit)
	float                                              MaxSpeedAttackRange;                                      // 0x0840(0x0004) (Edit)
	int                                                BladeDamage;                                              // 0x0844(0x0004) (Edit)
	float                                              BladeDamageMomentum;                                      // 0x0848(0x0004) (Edit)
	class UClass*                                      BladeDamageType;                                          // 0x084C(0x0004) (Edit)
	struct FString                                     DamageRateAtMaxSpinString;                                // 0x0850(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DamageAtMaxSpinString;                                    // 0x085C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AttackDamagePerSecondString;                              // 0x0868(0x000C) (Edit, Localized, NeedCtorLink)
	class USoundCue*                                   StartSpinSound;                                           // 0x0874(0x0004) (Edit)
	class USoundCue*                                   StopSpinSound;                                            // 0x0878(0x0004) (Edit)
	class UAudioComponent*                             SpinLoopingSound;                                         // 0x087C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              MinSoundLoopPitch;                                        // 0x0880(0x0004) (Edit)
	float                                              MaxSoundLoopPitch;                                        // 0x0884(0x0004) (Edit)
	float                                              SoundFadeInTime;                                          // 0x0888(0x0004) (Edit)
	float                                              SoundFadeOutTimeMultiplier;                               // 0x088C(0x0004) (Edit)
	float                                              SliceMaxDeltaZ;                                           // 0x0890(0x0004) (Edit)
	float                                              SliceMaxDeltaZUp;                                         // 0x0894(0x0004) (Edit)
	float                                              SliceMaxDeltaZDown;                                       // 0x0898(0x0004) (Edit)
	struct FVector                                     SlicePositionOffset;                                      // 0x089C(0x000C) (Edit)
	float                                              CurrentSpeedPercent;                                      // 0x08A8(0x0004)
	unsigned long                                      bHasTarget : 1;                                           // 0x08AC(0x0004) (Net)
	unsigned long                                      HadTarget : 1;                                            // 0x08AC(0x0004)
	TScriptInterface<class UDunDefTargetableInterface> lastTarget;                                               // 0x08B0(0x0008) (Transient)
	class UAnimNodeBlend*                              BladesBlender;                                            // 0x08B8(0x0004)
	class USkelControlSingleBone*                      SpinBone;                                                 // 0x08BC(0x0004)
	float                                              LastDamageTime;                                           // 0x08C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_SliceNDice");
		return ptr;
	}


	unsigned long UsesRange();
	void Destroyed();
	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float STATIC_StaticGetAttackRange(class UDunDefHero* hero, class ADunDefTower* Tower, float TowerRangeScaler);
	float GetRateDivisor();
	float GetSpinDownTime();
	float GetSpinUpTime();
	float GetAttackRange();
	float GetAttackDamage();
	void UpdateAI(float DeltaTime);
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class UDKGame.DunDefTower_SpikyBlockade
// 0x0028 (0x0860 - 0x0838)
class ADunDefTower_SpikyBlockade : public ADunDefTower_Blockade
{
public:
	float                                              SpikyDamageAllowanceInterval;                             // 0x0838(0x0004) (Edit)
	float                                              SpikyDamageAmount;                                        // 0x083C(0x0004) (Edit)
	class UClass*                                      SpikyDamageType;                                          // 0x0840(0x0004) (Edit)
	float                                              DamageMomentumAmount;                                     // 0x0844(0x0004) (Edit)
	float                                              DamageAttackerRadius;                                     // 0x0848(0x0004) (Edit)
	float                                              DamageAttackerMinDot;                                     // 0x084C(0x0004) (Edit)
	class USoundCue*                                   SpikyDamageEnemySound;                                    // 0x0850(0x0004) (Edit)
	struct FVector                                     DamageDistanceLocOffset;                                  // 0x0854(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTower_SpikyBlockade");
		return ptr;
	}


	void NotifyTookDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class AActor* DamageCauser);
	class UClass* GetDamageType();
	void DrawTowerToolTipStats(class UCanvas* C, float Opacity, class ULocalPlayer* ForPlayer, float canvasScale, float* PosX, float* PosY);
	float GetAttackDamage();
	void DoSpikyDamage(class ADunDefPawn* Other, const struct FVector& dirVec);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
};


// Class UDKGame.DunDefTowerAllowanceVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefTowerAllowanceVolume : public AVolume
{
public:
	unsigned long                                      AllowanceEnabled : 1;                                     // 0x0258(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTowerAllowanceVolume");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
	unsigned long CheckAllowance();
};


// Class UDKGame.DunDefTowerPreventionVolume
// 0x0004 (0x025C - 0x0258)
class ADunDefTowerPreventionVolume : public AVolume
{
public:
	unsigned long                                      PreventionEnabled : 1;                                    // 0x0258(0x0004) (Edit)
	unsigned long                                      bSetEnemiesInvincible : 1;                                // 0x0258(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefTowerPreventionVolume");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	unsigned long PreventTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point, float towerRadius);
	unsigned long AllowTowerAtPoint(class ADunDefPlayerController* PC, class ADunDefTower* towerArch, const struct FVector& Point);
	unsigned long CheckAllowance();
};


// Class UDKGame.DunDefViewportInput
// 0x0018 (0x00F0 - 0x00D8)
class UDunDefViewportInput : public UInput
{
public:
	class USoundCue*                                   CantJoinInMultiplayerSoundCue;                            // 0x00D8(0x0004)
	float                                              LastJoinAttemptTime;                                      // 0x00DC(0x0004)
	float                                              LastCreatePlayerAttempt[0x4];                             // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefViewportInput");
		return ptr;
	}


	void ResetForNewMap();
	unsigned long InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, unsigned long bGamepad);
	void PlayCantJoinSound();
};


// Class UDKGame.DunDefWeapon_Crossbow
// 0x008A (0x0574 - 0x04EA)
class ADunDefWeapon_Crossbow : public ADunDefWeapon
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	struct FName                                       CustomAnimNodeName;                                       // 0x04EC(0x0008) (Edit)
	struct FName                                       ShootAnimName;                                            // 0x04F4(0x0008) (Edit)
	int                                                BaseNumProjectiles;                                       // 0x04FC(0x0004) (Edit)
	float                                              FireIntervalMultiplier;                                   // 0x0500(0x0004) (Edit)
	float                                              BaseReloadSpeed;                                          // 0x0504(0x0004) (Edit)
	float                                              ReloadSpeedBonusLinearScale;                              // 0x0508(0x0004) (Edit)
	float                                              ReloadSpeedBonusExpScale;                                 // 0x050C(0x0004) (Edit)
	float                                              ReloadSpeedMultiplier;                                    // 0x0510(0x0004) (Edit)
	float                                              MinimumReloadTime;                                        // 0x0514(0x0004) (Edit)
	float                                              PostCancelReloadAllowedInterval;                          // 0x0518(0x0004) (Edit)
	float                                              ReloadSpeedNoAmmoMultiplier;                              // 0x051C(0x0004) (Edit)
	float                                              ShootAnimBlendInTime;                                     // 0x0520(0x0004) (Edit)
	float                                              ShootAnimBlendOutTime;                                    // 0x0524(0x0004) (Edit)
	class USoundCue*                                   ReloadSound;                                              // 0x0528(0x0004) (Edit)
	class USoundCue*                                   ReloadFinishedSound;                                      // 0x052C(0x0004) (Edit)
	class USoundCue*                                   ReloadCancelledSound;                                     // 0x0530(0x0004) (Edit)
	class USoundCue*                                   NoReloadAllowedSound;                                     // 0x0534(0x0004) (Edit)
	unsigned long                                      bTurnOnParticleSystemComponent : 1;                       // 0x0538(0x0004) (Edit)
	unsigned long                                      bReplicateFireEvent : 1;                                  // 0x0538(0x0004) (Edit)
	unsigned long                                      bPlayFiringSound : 1;                                     // 0x0538(0x0004) (Edit)
	unsigned long                                      bTurnOnLightComponent : 1;                                // 0x0538(0x0004) (Edit)
	unsigned long                                      bUseFixedReloadSpeed : 1;                                 // 0x0538(0x0004) (Edit)
	unsigned long                                      bUseHighShotPerSecond : 1;                                // 0x0538(0x0004) (Edit)
	unsigned long                                      bReloading : 1;                                           // 0x0538(0x0004)
	unsigned long                                      bFireFirstShot : 1;                                       // 0x0538(0x0004)
	unsigned long                                      bStartedFireEvent : 1;                                    // 0x0538(0x0004) (Transient)
	unsigned long                                      bForceReloadCheckOnActivate : 1;                          // 0x0538(0x0004) (Transient)
	struct FName                                       TurnOnParticleSystemComponentName;                        // 0x053C(0x0008) (Edit)
	struct FName                                       TurnOnLightComponentName;                                 // 0x0544(0x0008) (Edit)
	class USoundCue*                                   FiringSound;                                              // 0x054C(0x0004) (Edit)
	int                                                AmmoConsumptionPerShot;                                   // 0x0550(0x0004) (Edit)
	float                                              FixedReloadSpeed;                                         // 0x0554(0x0004) (Edit)
	class UAnimNodePlayCustomAnim*                     CustomAnimNode;                                           // 0x0558(0x0004)
	int                                                ClipAmmo;                                                 // 0x055C(0x0004) (Net)
	float                                              TotalReloadTime;                                          // 0x0560(0x0004)
	float                                              ReloadStartTime;                                          // 0x0564(0x0004)
	float                                              LastReloadCancelledTime;                                  // 0x0568(0x0004)
	float                                              LastNoReloadAllowedSoundTime;                             // 0x056C(0x0004) (Transient)
	float                                              LastReloadPressedFireTime;                                // 0x0570(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWeapon_Crossbow");
		return ptr;
	}


	void UnHideAdditionalAttachments();
	void ClearAttachedComponents();
	void SetWeaponSpeedMultiplier(float newMult);
	void UsedAbility(class ADunDefPlayerAbility* ability);
	float GetReloadPercent();
	int GetMaxAmmo();
	int GetAmmo();
	float GetAmmoPercent();
	unsigned long UsesAmmo();
	void DetachWeapon();
	void Activate();
	void CheckAmmo();
	void CustomFire(int theFireMode);
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName, unsigned long bDontPlaySound);
	void MoveComponents(unsigned long bReattach);
	void StoppedFire();
	void StartedFire();
	class UActorComponent* GetTaggedComponent(const struct FName& compTag, unsigned long bUseActorComp);
	void ServerReload();
	void ServerStopReload();
	void StartFire(unsigned char FireModeNum);
	unsigned long HasAnyClipAmmo();
	void HandleFinishedFiring();
	void ExtraRefireCheckTimer();
	void CheckReloadFinished();
	void StopReload(unsigned long isPuttingDown);
	void Reload();
	unsigned long NeedsReload();
	void PlayNoReloadAllowedSound();
	unsigned long GetReloadingColors(struct FLinearColor* BarColor, struct FLinearColor* TextColor);
	float GetProtonChargeBlastDamageMultiplier();
	unsigned long IsReloading();
	float GetReloadSpeed();
	int GetTotalAmmo();
	int GetNumProjectiles();
	void PostBeginPlay();
	void PlayedShootAnimation(unsigned long isBigShot);
	void InitializeForHeroEquipment(class UHeroEquipment* weaponEquipment);
	void ExecReplicatedFunction(const struct FName& FunctionName, const struct FName& nameParam1, const struct FName& nameParam2, class AActor* actorParam1, class AActor* actorParam2, const struct FVector& vecParam1, const struct FRotator& rotParam1, float floatParam1, float floatParam2, float floatParam3, float floatParam4, unsigned long boolParam1, unsigned long boolParam2, unsigned long boolParam3, const struct FString& stringParam1, class UObject* objectParam1);
};


// Class UDKGame.DunDefWeapon_MagicStaff
// 0x0132 (0x061C - 0x04EA)
class ADunDefWeapon_MagicStaff : public ADunDefWeapon
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x04EA(0x0002) MISSED OFFSET
	float                                              FullChargeTime;                                           // 0x04EC(0x0004) (Edit)
	float                                              FullAltChargeTime;                                        // 0x04F0(0x0004) (Edit)
	class UParticleSystemComponent*                    ChargeEffect;                                             // 0x04F4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    FullyChargedEffect;                                       // 0x04F8(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              MinChargeEffectScale;                                     // 0x04FC(0x0004) (Edit)
	float                                              MaxChargeEffectScale;                                     // 0x0500(0x0004) (Edit)
	unsigned long                                      bEmberorMoon : 1;                                         // 0x0504(0x0004) (Edit)
	unsigned long                                      bUseHealKnockBack : 1;                                    // 0x0504(0x0004) (Edit)
	unsigned long                                      bUseAttackCD : 1;                                         // 0x0504(0x0004) (Edit)
	unsigned long                                      bUseElementalScallingForRightClick : 1;                   // 0x0504(0x0004) (Edit)
	unsigned long                                      InFiringState : 1;                                        // 0x0504(0x0004) (Net)
	unsigned long                                      InAltFiringState : 1;                                     // 0x0504(0x0004) (Net)
	unsigned long                                      OnCooldown : 1;                                           // 0x0504(0x0004)
	unsigned long                                      bIsRainMaker : 1;                                         // 0x0504(0x0004)
	unsigned long                                      IsDoingKnockback : 1;                                     // 0x0504(0x0004)
	class ADunDefEmitterSpawnable*                     MuzzleFlashEffectTemplate;                                // 0x0508(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     FullyChargedMuzzleFlashEffectTemplate;                    // 0x050C(0x0004) (Edit)
	float                                              MinMuzzleFlashEffectScale;                                // 0x0510(0x0004) (Edit)
	float                                              MaxMuzzleFlashEffectScale;                                // 0x0514(0x0004) (Edit)
	struct FVector                                     MuzzleFlashEffectLocationOffset;                          // 0x0518(0x000C) (Edit)
	struct FRotator                                    MuzzleFlashEffectRotationOffset;                          // 0x0524(0x000C) (Edit)
	class UForceFeedbackWaveform*                      LowChargeShotFF;                                          // 0x0530(0x0004) (Edit, EditInline)
	class UForceFeedbackWaveform*                      MediumChargeShotFF;                                       // 0x0534(0x0004) (Edit, EditInline)
	class UForceFeedbackWaveform*                      MaxChargeShotFF;                                          // 0x0538(0x0004) (Edit, EditInline)
	float                                              MediumChargeFFThreshold;                                  // 0x053C(0x0004) (Edit)
	int                                                NumProjectiles;                                           // 0x0540(0x0004) (Edit)
	class UPointLightComponent*                        ChargeLight;                                              // 0x0544(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             MyAudioComponent1;                                        // 0x0548(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             MyAudioComponent2;                                        // 0x054C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              BaseKnockbackRange;                                       // 0x0550(0x0004) (Edit)
	float                                              BaseKnockbackMomentum;                                    // 0x0554(0x0004) (Edit)
	float                                              KnockbackMovementSpeed;                                   // 0x0558(0x0004) (Edit)
	float                                              KnockbackMovementSpeedScale;                              // 0x055C(0x0004) (Edit)
	class UClass*                                      KnockbackDamageType;                                      // 0x0560(0x0004) (Edit)
	float                                              LinearKnockbackBonusMagScale;                             // 0x0564(0x0004) (Edit)
	float                                              ExpKnockbackBonusMagScale;                                // 0x0568(0x0004) (Edit)
	float                                              LinearKnockbackBonusRangeScale;                           // 0x056C(0x0004) (Edit)
	float                                              ExpKnockbackBonusRangeScale;                              // 0x0570(0x0004) (Edit)
	float                                              MaxMomumentumMassScale;                                   // 0x0574(0x0004) (Edit)
	float                                              MassMomentumScaleExponent;                                // 0x0578(0x0004) (Edit)
	float                                              MomumentumMassScaleBase;                                  // 0x057C(0x0004) (Edit)
	float                                              BaseKnockbackRangeAdditive;                               // 0x0580(0x0004) (Edit)
	float                                              BaseKnockbackMomentumAdditive;                            // 0x0584(0x0004) (Edit)
	float                                              HealKnockBackScalar;                                      // 0x0588(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     KnockbackEffectTemplate;                                  // 0x058C(0x0004) (Edit)
	float                                              KnockbackEffectRangeScale;                                // 0x0590(0x0004) (Edit)
	float                                              BaseChargeSpeed;                                          // 0x0594(0x0004) (Edit)
	float                                              ChargeSpeedBonusLinearScale;                              // 0x0598(0x0004) (Edit)
	float                                              ChargeSpeedBonusExpScale;                                 // 0x059C(0x0004) (Edit)
	float                                              FullchargeRefireInterval;                                 // 0x05A0(0x0004) (Edit)
	struct FVector                                     KnockbackSpawnOffset;                                     // 0x05A4(0x000C) (Edit)
	class USoundCue*                                   KnockbackChargingSound;                                   // 0x05B0(0x0004) (Edit)
	class USoundCue*                                   KnockbackMaxChargeSound;                                  // 0x05B4(0x0004) (Edit)
	class UMaterialInterface*                          KnockbackImpactDecalMaterial;                             // 0x05B8(0x0004) (Edit)
	float                                              KnockbackDecalSizeMin;                                    // 0x05BC(0x0004) (Edit)
	float                                              KnockbackDecalSizeMax;                                    // 0x05C0(0x0004) (Edit)
	float                                              KnockbackDecalRangeMin;                                   // 0x05C4(0x0004) (Edit)
	float                                              KnockbackDecalRangeMax;                                   // 0x05C8(0x0004) (Edit)
	float                                              KnockbackImpactDecalLifespan;                             // 0x05CC(0x0004) (Edit)
	struct FVector                                     KnockbackDecalTraceOffset;                                // 0x05D0(0x000C) (Edit)
	float                                              KnockbackDamageScaleMin;                                  // 0x05DC(0x0004) (Edit)
	float                                              KnockbackDamageScaleMax;                                  // 0x05E0(0x0004) (Edit)
	int                                                CooldownDuration;                                         // 0x05E4(0x0004) (Edit)
	float                                              ElementalDamageForRightClickScalar;                       // 0x05E8(0x0004) (Edit)
	float                                              LastReleasedTime;                                         // 0x05EC(0x0004) (Transient)
	float                                              LastAltReleasedTime;                                      // 0x05F0(0x0004) (Transient)
	float                                              ChargeLightOriginalBrightness;                            // 0x05F4(0x0004) (Transient)
	float                                              BonusDamageMulti;                                         // 0x05F8(0x0004)
	float                                              TimeFromLastFire;                                         // 0x05FC(0x0004)
	float                                              LastFullChargeFireTime;                                   // 0x0600(0x0004)
	float                                              CurrentKnockbackRange;                                    // 0x0604(0x0004)
	int                                                AbilityCooldownTime;                                      // 0x0608(0x0004)
	TArray<TScriptInterface<class UDunDefTargetableInterface>> KnockbackVictims;                                         // 0x060C(0x000C) (NeedCtorLink)
	float                                              MaximumKnockbackRange;                                    // 0x0618(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWeapon_MagicStaff");
		return ptr;
	}


	void DoAttackForceFeedback(class ADunDefPlayerController* theController, int FireMode);
	void SpawnKnockbackDecal(class UMaterialInterface* impactMat, const struct FVector& HitLocation, const struct FVector& HitNormal, float tSize);
	void GetProjectileSpawnTransformation(int Index, class AActor* AimAtTargetOverride, unsigned long bForceNoRotClamping, struct FVector* OutLocation, struct FRotator* OutRotation);
	void ShootProjectiles(int theFireMode);
	int GetEquipmentAdditionalDamageAmount();
	float GetProjectileDamage();
	void CustomFire(int theFireMode);
	unsigned long ShouldRefire();
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	float GetChargeSpeed();
	float GetTotalKnockbackMomentum();
	float GetTotalKnockbackRange(unsigned long IgnoreChargePercent);
	void FireAmmunition();
	void EndFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	void DetachWeapon();
	void RemoveChargeEffects();
	void AttachChargeEffects();
	unsigned long IsRainmaker();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName, unsigned long bDontPlaySound);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class UDKGame.DunDefWeapon_MonkSpear
// 0x000C (0x0600 - 0x05F4)
class ADunDefWeapon_MonkSpear : public ADunDefWeapon_MeleeSword
{
public:
	float                                              ShootInterval;                                            // 0x05F4(0x0004) (Edit)
	float                                              MaxMeleeDistance;                                         // 0x05F8(0x0004) (Edit)
	float                                              LastShootTime;                                            // 0x05FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.DunDefWeapon_MonkSpear");
		return ptr;
	}


	void Tick(float DeltaTime);
	float GetProjectileDamage();
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void CustomFire(int theFireMode);
};


// Class UDKGame.GameInfo_Competitive
// 0x0004 (0x054C - 0x0548)
class AGameInfo_Competitive : public AMain
{
public:
	int                                                ManaToGiveOnRespawn;                                      // 0x0548(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.GameInfo_Competitive");
		return ptr;
	}


	void ScoreKill(class AController* Killer, class AController* Other);
	class APlayerController* GetPlayerEnemyKillStat(class APlayerController* Killer);
	int GetEnemyTargetingTeam(class ADunDefEnemy* theEnemy);
	void PawnPossessedBy(class ADunDefPawn* P, class AController* C, unsigned long bVehicleTransition);
	unsigned long IsCompetitiveGameType();
	unsigned long CheckScore(class APlayerReplicationInfo* Scorer);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void PostBeginPlay();
	void DoPlayerLeaving(class ADunDefPlayerController* PC, unsigned long bForceLocal);
	int GetFreeTargetingTeam(class ADunDefPlayerController* aPC);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
};


// Class UDKGame.GameInfo_MainSixPlayer
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_MainSixPlayer : public AMain
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.GameInfo_MainSixPlayer");
		return ptr;
	}

};


// Class UDKGame.GameInfo_Special
// 0x0000 (0x0548 - 0x0548)
class AGameInfo_Special : public AMain
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.GameInfo_Special");
		return ptr;
	}


	void InitGameReplicationInfo();
	void DoWaveSkipping(unsigned long bAllowArbritraryWaveSkipping);
};


// Class UDKGame.HeroEquipment_Consumable
// 0x0010 (0x0A04 - 0x09F4)
class UHeroEquipment_Consumable : public UHeroEquipment
{
public:
	TEnumAsByte<EConsumableType>                       Type;                                                     // 0x09F4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x09F5(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EEquipmentType>>                ValidEquipmentTypes;                                      // 0x09F8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Consumable");
		return ptr;
	}


	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	unsigned long ValidateEquipmentType(TEnumAsByte<EEquipmentType> EqType);
};


// Class UDKGame.HeroEquipment_Rune
// 0x002C (0x0A30 - 0x0A04)
class UHeroEquipment_Rune : public UHeroEquipment_Consumable
{
public:
	float                                              TransChance;                                              // 0x0A04(0x0004) (Edit)
	float                                              SupremeChance;                                            // 0x0A08(0x0004) (Edit)
	float                                              UltChance;                                                // 0x0A0C(0x0004) (Edit)
	float                                              UltPlusChance;                                            // 0x0A10(0x0004) (Edit)
	float                                              UltPlusPlusChance;                                        // 0x0A14(0x0004) (Edit)
	class UStatObject_Equipment*                       MythEnchantTier;                                          // 0x0A18(0x0004) (Edit)
	class UStatObject_Equipment*                       TransEnchantTier;                                         // 0x0A1C(0x0004) (Edit)
	class UStatObject_Equipment*                       SupEnchantTier;                                           // 0x0A20(0x0004) (Edit)
	class UStatObject_Equipment*                       UltEnchantTier;                                           // 0x0A24(0x0004) (Edit)
	class UStatObject_Equipment*                       UltPlusEnchantTier;                                       // 0x0A28(0x0004) (Edit)
	class UStatObject_Equipment*                       UltPlusPlusEnchantTier;                                   // 0x0A2C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Rune");
		return ptr;
	}


	int GetRuneEnchantTier();
	class UStatObject_Equipment* GetRuneEnchantObject();
	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
};


// Class UDKGame.UI_EquipmentInfo_New
// 0x01C4 (0x0820 - 0x065C)
class UUI_EquipmentInfo_New : public UUI_EquipmentInfo
{
public:
	class UUIButton*                                   CloseHeroInfoButton;                                      // 0x065C(0x0004) (Edit)
	class UUIButton*                                   DropManaButton;                                           // 0x0660(0x0004) (Edit)
	class UUIButton*                                   DropItemButton;                                           // 0x0664(0x0004) (Edit)
	class UUIButton*                                   MoveToItemBoxButton;                                      // 0x0668(0x0004) (Edit)
	class UUIButton*                                   MoveToHeroButton;                                         // 0x066C(0x0004) (Edit)
	class UUI_DropMana*                                DropManaUITemplate;                                       // 0x0670(0x0004) (Edit)
	class UUIDataContainer_Equipment*                  EquipmentDataContainer;                                   // 0x0674(0x0004) (Edit)
	class UUILabel*                                    ForgedByLabel;                                            // 0x0678(0x0004) (Edit)
	class UUILabel*                                    ForgedByDescriptionLabel;                                 // 0x067C(0x0004) (Edit)
	class UUILabel*                                    EquipmentDescriptionLabel;                                // 0x0680(0x0004) (Edit)
	class UUIPanel*                                    ForgingPanel;                                             // 0x0684(0x0004) (Edit)
	class UUILabel*                                    UpgradeInForgeLabel;                                      // 0x0688(0x0004) (Edit)
	class UUILabel*                                    MaxUpgradedLabel;                                         // 0x068C(0x0004) (Edit)
	class UUILabel*                                    InvestingLabel;                                           // 0x0690(0x0004) (Edit)
	class UUILabel*                                    SellWorthLabel;                                           // 0x0694(0x0004) (Edit)
	class UUILabel*                                    NextLevelCostLabel;                                       // 0x0698(0x0004) (Edit)
	class UUIScriptWidget_MaterialInstance*            UpgradeMeterImage;                                        // 0x069C(0x0004) (Edit)
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                                     // 0x06A0(0x0004) (Edit)
	class UUICheckbox*                                 ProUpgradeModeButton;                                     // 0x06A4(0x0004) (Edit)
	class USoundCue*                                   MoveEquipmentSound;                                       // 0x06A8(0x0004) (Edit)
	class USoundCue*                                   TransferFromItemBoxSound;                                 // 0x06AC(0x0004) (Edit)
	class USoundCue*                                   InstantInvestSound;                                       // 0x06B0(0x0004) (Edit)
	class USoundCue*                                   ProUpgradeSound;                                          // 0x06B4(0x0004) (Edit)
	struct FLinearColor                                UsingBankManaColor;                                       // 0x06B8(0x0010) (Edit)
	struct FLinearColor                                UsingHeroManaColor;                                       // 0x06C8(0x0010) (Edit)
	struct FLinearColor                                CustomForgerColor;                                        // 0x06D8(0x0010) (Edit)
	class UUIObject*                                   MainPanel;                                                // 0x06E8(0x0004) (Edit)
	class UUIPanel*                                    EffectsPanel;                                             // 0x06EC(0x0004) (Edit)
	class UUILabel*                                    EffectsLabel;                                             // 0x06F0(0x0004) (Edit)
	struct FName                                       LevelUpAvailableAnimation;                                // 0x06F4(0x0008) (Edit)
	struct FName                                       LevelUpAppliedAnimation;                                  // 0x06FC(0x0008) (Edit)
	struct FName                                       MaxUpgradedAnimation;                                     // 0x0704(0x0008) (Edit)
	struct FString                                     CloseSceneInputCommand;                                   // 0x070C(0x000C) (Edit, NeedCtorLink)
	float                                              InvestmentIncreaseRate;                                   // 0x0718(0x0004) (Edit)
	float                                              InvestmentIncreaseExponent;                               // 0x071C(0x0004) (Edit)
	float                                              BarIntensityLerpSpeed;                                    // 0x0720(0x0004) (Edit)
	float                                              BarNormalIntensity;                                       // 0x0724(0x0004) (Edit)
	float                                              BarInvestingIntensity;                                    // 0x0728(0x0004) (Edit)
	float                                              CurrentBarIntensity;                                      // 0x072C(0x0004) (Transient)
	float                                              TargetBarIntensity;                                       // 0x0730(0x0004) (Transient)
	struct FString                                     LevelString;                                              // 0x0734(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InvestingString;                                          // 0x0740(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UpgradeString;                                            // 0x074C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ApplyLevelUpString;                                       // 0x0758(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MaximumLevelString;                                       // 0x0764(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PickStatString;                                           // 0x0770(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UpgradeInForgeString;                                     // 0x077C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UpgradeNextWaveString;                                    // 0x0788(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MaximumUpgradeString;                                     // 0x0794(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InstantInvestString;                                      // 0x07A0(0x000C) (Localized, NeedCtorLink)
	class UUIButton*                                   CloseButton;                                              // 0x07AC(0x0004) (Edit)
	class UUIButton*                                   InvestManaButton;                                         // 0x07B0(0x0004) (Edit)
	class UUILabel*                                    HeroManaLabel;                                            // 0x07B4(0x0004) (Edit)
	class UUILabel*                                    EquipmentNameLabel;                                       // 0x07B8(0x0004) (Edit)
	class UUILabel*                                    EquipmentManaLabel;                                       // 0x07BC(0x0004) (Edit)
	class UUILabel*                                    CurrentLevelLabel;                                        // 0x07C0(0x0004) (Edit)
	class UUILabel*                                    EquipmentManaDescription;                                 // 0x07C4(0x0004) (Edit)
	class UUIScriptWidget_Button*                      InstantInvestButton;                                      // 0x07C8(0x0004) (Edit)
	float                                              ManaInvestmentInterval;                                   // 0x07CC(0x0004) (Edit)
	float                                              ManaInvestmentAmount;                                     // 0x07D0(0x0004) (Edit)
	struct FVector                                     BoxAspectRatioPanelOffset;                                // 0x07D4(0x000C) (Edit)
	float                                              LastInvestmentTime;                                       // 0x07E0(0x0004)
	float                                              InvestmentTimer;                                          // 0x07E4(0x0004)
	struct FString                                     origNextLevelValue;                                       // 0x07E8(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      DropOnExit : 1;                                           // 0x07F4(0x0004)
	unsigned long                                      MoveToItemBoxOnExit : 1;                                  // 0x07F4(0x0004)
	unsigned long                                      MoveToHeroOnExit : 1;                                     // 0x07F4(0x0004)
	unsigned long                                      bIsGamepadPressed : 1;                                    // 0x07F4(0x0004)
	unsigned long                                      IsPlayingUpgradeAvailableAnimation : 1;                   // 0x07F4(0x0004)
	unsigned long                                      bInvestedAnything : 1;                                    // 0x07F4(0x0004)
	unsigned long                                      bHasEnoughBankManaForUpgrade : 1;                         // 0x07F4(0x0004)
	unsigned long                                      bShiftDown : 1;                                           // 0x07F4(0x0004) (Transient)
	unsigned long                                      bCtrlDown : 1;                                            // 0x07F4(0x0004) (Transient)
	unsigned long                                      bUpdateEffectPanel : 1;                                   // 0x07F4(0x0004) (Transient)
	float                                              CurrentStoredManaPercent;                                 // 0x07F8(0x0004)
	float                                              TargetStoredManaPercent;                                  // 0x07FC(0x0004)
	struct FString                                     UserEquipmentName;                                        // 0x0800(0x000C) (NeedCtorLink)
	struct FString                                     UserForgerName;                                           // 0x080C(0x000C) (NeedCtorLink)
	int                                                PreviousSellWorth;                                        // 0x0818(0x0004) (Transient)
	class UUI_EditboxPopup*                            myEditBoxPopup;                                           // 0x081C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_EquipmentInfo_New");
		return ptr;
	}


	unsigned long HasEnoughBankManaForUpgrade();
	unsigned long IsProUpgradeMode();
	void UIPostRender(class UCanvas* C);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void CloseAllHeroUI();
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SceneActivated(unsigned long bInitialActivation);
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	void CloseWithAnimation();
	void SceneDeactivated();
	void ResetOnExits();
	class UDunDefHero* GetHero();
	void InitForEquipment(class UDunDefHero* hero, class UHeroEquipment* theEquipment, unsigned long IsInForge, class UUI_HeroInfo* heroInfoUI, unsigned long IsRemoteHero, unsigned long IsInEquipmentBox, class AActor* forgeActor, unsigned long bIsInTrade, unsigned long bIsInPlayerShop);
	unsigned long ShowUpgradePanel();
	void UpdateForgeValues(float DeltaTime, unsigned long bNoInterpolation);
	void UpdateInvestment(float DeltaTime);
	unsigned long HasAnyManaPower();
	void UpdateEffectPanel();
	void Update(float DeltaTime);
	struct FName GetCloseAnimation();
};


// Class UDKGame.HeroEquipment_Familiar_Buff_Spawner
// 0x0018 (0x0B14 - 0x0AFC)
class UHeroEquipment_Familiar_Buff_Spawner : public UHeroEquipment_Familiar
{
public:
	float                                              SpawnInterval;                                            // 0x0AFC(0x0004) (Edit)
	unsigned long                                      bRandomBuffs : 1;                                         // 0x0B00(0x0004) (Edit)
	TArray<class ADunDefBuffToken*>                    TokenTemplates;                                           // 0x0B04(0x000C) (Edit, NeedCtorLink)
	float                                              LastSpawnTime;                                            // 0x0B10(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_Buff_Spawner");
		return ptr;
	}


	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void AddedToHero();
};


// Class UDKGame.HeroEquipment_Familiar_WithProjectileAI
// 0x0104 (0x0C00 - 0x0AFC)
class UHeroEquipment_Familiar_WithProjectileAI : public UHeroEquipment_Familiar
{
public:
	float                                              ProjectileShootInterval;                                  // 0x0AFC(0x0004) (Edit)
	class ADunDefProjectile*                           ProjectileTemplate;                                       // 0x0B00(0x0004) (Edit)
	class ADunDefProjectile*                           ProjectileTemplateAlt;                                    // 0x0B04(0x0004) (Edit)
	TArray<class ADunDefProjectile*>                   ProjectileTemplates;                                      // 0x0B08(0x000C) (Edit, NeedCtorLink)
	struct FName                                       FamiliarSocketName;                                       // 0x0B14(0x0008) (Edit)
	struct FName                                       MuzzleSocketName;                                         // 0x0B1C(0x0008) (Edit)
	struct FName                                       ShootEffectSocket;                                        // 0x0B24(0x0008) (Edit)
	float                                              TargetRange;                                              // 0x0B2C(0x0004) (Edit)
	unsigned long                                      ScaleHeroDamage : 1;                                      // 0x0B30(0x0004) (Edit)
	unsigned long                                      bUseFixedShootSpeed : 1;                                  // 0x0B30(0x0004) (Edit)
	unsigned long                                      bShootProjectileWithoutTarget : 1;                        // 0x0B30(0x0004) (Edit)
	unsigned long                                      bForceProjectileMuzzleRotation : 1;                       // 0x0B30(0x0004) (Edit)
	unsigned long                                      bIgnoreHurtAnimationWhenShooting : 1;                     // 0x0B30(0x0004) (Edit)
	unsigned long                                      bSlowEnemyTarget : 1;                                     // 0x0B30(0x0004) (Edit)
	unsigned long                                      bWeakenEnemyTarget : 1;                                   // 0x0B30(0x0004) (Edit)
	unsigned long                                      bUseProjectileImpactedDelegate : 1;                       // 0x0B30(0x0004) (Edit)
	unsigned long                                      bMythicalScaleHeroDamage : 1;                             // 0x0B30(0x0004) (Edit)
	unsigned long                                      bChooseHealingTarget : 1;                                 // 0x0B30(0x0004) (Edit)
	unsigned long                                      bProjectilesCollideWithOwner : 1;                         // 0x0B30(0x0004) (Edit)
	unsigned long                                      bAddManaForDamage : 1;                                    // 0x0B30(0x0004) (Edit)
	unsigned long                                      bUseAltProjectile : 1;                                    // 0x0B30(0x0004) (Edit)
	unsigned long                                      bIgnoreElementInTargeting : 1;                            // 0x0B30(0x0004) (Edit)
	unsigned long                                      bDoShotsPerSecondBonusCap : 1;                            // 0x0B30(0x0004) (Edit)
	unsigned long                                      bChooseRandomProjectileTemplate : 1;                      // 0x0B30(0x0004) (Edit)
	unsigned long                                      DoLineOfSightCheck : 1;                                   // 0x0B30(0x0004) (Edit)
	unsigned long                                      bUseStackingDamagePerArchetype : 1;                       // 0x0B30(0x0004) (Edit)
	unsigned long                                      bDidAddManaForDamage : 1;                                 // 0x0B30(0x0004) (Transient)
	TArray<struct FVector>                             ProjectileSpawnOffsets;                                   // 0x0B34(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     ProjectileSpawnOffset;                                    // 0x0B40(0x000C) (Edit)
	TArray<struct FRotator>                            ProjectileRotOffsets;                                     // 0x0B4C(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      ProjectileDelays;                                         // 0x0B58(0x000C) (Edit, NeedCtorLink)
	float                                              MinimumProjectileSpeed;                                   // 0x0B64(0x0004) (Edit)
	float                                              ProjectileSpeedBonusMultiplier;                           // 0x0B68(0x0004) (Edit)
	float                                              MaxAttackAnimationSpeed;                                  // 0x0B6C(0x0004) (Edit)
	float                                              ProjectileDamageMultiplier;                               // 0x0B70(0x0004) (Edit)
	float                                              ShotsPerSecondExponent;                                   // 0x0B74(0x0004) (Edit)
	float                                              ShotsPerSecondAnimExponent;                               // 0x0B78(0x0004) (Edit)
	float                                              AbsoluteDamageMultiplier;                                 // 0x0B7C(0x0004) (Edit)
	float                                              SlowEnemyTargetPercentage;                                // 0x0B80(0x0004) (Edit)
	float                                              WeakenEnemyTargetPercentage;                              // 0x0B84(0x0004) (Edit)
	float                                              EnemyClearSlowTime;                                       // 0x0B88(0x0004) (Edit)
	float                                              MythicalScaleDamageStatExponent;                          // 0x0B8C(0x0004) (Edit)
	float                                              EnemyClearWeakenTime;                                     // 0x0B90(0x0004) (Edit)
	float                                              NightmareDamageMultiplier;                                // 0x0B94(0x0004) (Edit)
	float                                              ExtraNightmareDamageMultiplier;                           // 0x0B98(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     MythicalScaleDamageStatType;                              // 0x0B9C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0B9D(0x0003) MISSED OFFSET
	class USoundCue*                                   ShootSound;                                               // 0x0BA0(0x0004) (Edit)
	class UParticleSystem*                             ShootEffect;                                              // 0x0BA4(0x0004) (Edit)
	float                                              BaseHealAmount;                                           // 0x0BA8(0x0004) (Edit)
	float                                              HealAmountMultiplier;                                     // 0x0BAC(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x0BB0(0x0004) (Edit)
	float                                              AltProjectileMinimumRange;                                // 0x0BB4(0x0004) (Edit)
	float                                              HealingPriorityHealthPercentage;                          // 0x0BB8(0x0004) (Edit)
	struct FName                                       AttackAnimationAlt;                                       // 0x0BBC(0x0008) (Edit)
	int                                                ShotsPerSecondBonusCap;                                   // 0x0BC4(0x0004) (Edit)
	float                                              BaseDamageToManaRatio;                                    // 0x0BC8(0x0004) (Edit)
	float                                              ManaMultiplier;                                           // 0x0BCC(0x0004) (Edit)
	float                                              MaxManaPerDamage;                                         // 0x0BD0(0x0004) (Edit)
	float                                              MinManaPerDamage;                                         // 0x0BD4(0x0004) (Edit)
	float                                              MaxManaMultiplierExponent;                                // 0x0BD8(0x0004) (Edit)
	float                                              DamageManaMultiplierExponent;                             // 0x0BDC(0x0004) (Edit)
	class UHeroEquipment*                              StackingDamageArchetype;                                  // 0x0BE0(0x0004) (Edit)
	float                                              PercIncreasePerStack;                                     // 0x0BE4(0x0004) (Edit)
	float                                              LastShootProjectileTime;                                  // 0x0BE8(0x0004) (Transient)
	TScriptInterface<class UDunDefTargetableInterface> BestTargetRef;                                            // 0x0BEC(0x0008)
	TArray<struct UHeroEquipment_Familiar_WithProjectileAI_FDelayedShot> DelayedShots;                                             // 0x0BF4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_WithProjectileAI");
		return ptr;
	}


	float GetHealAmount();
	void OnDunDefProjectileImpacted(class ADunDefProjectile* aProjectile, class AActor* impactedOn);
	void NotifyEquipment_PawnTookDamage(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void ShootProjectile(unsigned long bIsAltProjectile);
	void GetMuzzleTransformation(class USkeletalMeshComponent* myMeshComp, struct FVector* SpawnLocation, struct FRotator* SpawnRotation);
	int GetWeaponDamage();
	void ApplyPrimaryDamageMultiplierDisplay(int* StatValue);
	float GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp);
	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	unsigned long AllowStatLevelUp(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement);
	float GetAttackInterval(unsigned long bIncludeShotsPerSecondExponent);
	class UClass* GetElementalDamageType();
	float GetProjectileElementalDamage();
	float GetProjectileDamage(class ADunDefProjectile* projectileArch);
	float GetProjectileSpeed(class ADunDefProjectile* projectileArch);
	int GetNumProjectiles();
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	void ShutDown(unsigned long isDestruction);
	void AttachedComponent(class UPrimitiveComponent* aComp);
	void UpdateAI(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void UpdateDelayedShots(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	float GetArchetypeStackDamageMulti();
	TScriptInterface<class UDunDefTargetableInterface> GetBestTarget();
	TScriptInterface<class UDunDefTargetableInterface> GetBestHealingTarget(float CheckHealthPercentageThreshold);
};


// Class UDKGame.HeroEquipment_Familiar_Melee
// 0x006C (0x0C6C - 0x0C00)
class UHeroEquipment_Familiar_Melee : public UHeroEquipment_Familiar_WithProjectileAI
{
public:
	float                                              MeleeHitRadius;                                           // 0x0C00(0x0004) (Edit)
	float                                              MeleeDamageMomentum;                                      // 0x0C04(0x0004) (Edit)
	class UClass*                                      MeleeDamageType;                                          // 0x0C08(0x0004) (Edit)
	float                                              MaxKnockbackMultiplier;                                   // 0x0C0C(0x0004) (Edit)
	float                                              KnockbackBonusLinearScale;                                // 0x0C10(0x0004) (Edit)
	float                                              KnockbackBonusExpScale;                                   // 0x0C14(0x0004) (Edit)
	unsigned long                                      bAlsoShootProjectile : 1;                                 // 0x0C18(0x0004) (Edit)
	unsigned long                                      ScaleMeleeDamageForHero : 1;                              // 0x0C18(0x0004) (Edit)
	unsigned long                                      bUseRandomizedDamage : 1;                                 // 0x0C18(0x0004) (Edit)
	unsigned long                                      bDoMeleeHealing : 1;                                      // 0x0C18(0x0004) (Edit)
	unsigned long                                      bIsAttacking : 1;                                         // 0x0C18(0x0004)
	float                                              MeleeRange;                                               // 0x0C1C(0x0004) (Edit)
	float                                              ScaleDamageStatExponent;                                  // 0x0C20(0x0004) (Edit)
	float                                              ExtraNightmareMeleeDamageMultiplier;                      // 0x0C24(0x0004) (Edit)
	struct FName                                       AlsoShootProjectileAnimation;                             // 0x0C28(0x0008) (Edit)
	TEnumAsByte<ELevelUpValueType>                     ScaleMeleeDamageForHeroStatType;                          // 0x0C30(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C31(0x0003) MISSED OFFSET
	int                                                RandomizedDamageMultiplierMaximum;                        // 0x0C34(0x0004) (Edit)
	float                                              RandomizedDamageMultiplierDivisor;                        // 0x0C38(0x0004) (Edit)
	float                                              BaseDamageToHealRatio;                                    // 0x0C3C(0x0004) (Edit)
	float                                              EquipmentDamageMultiplierBase;                            // 0x0C40(0x0004) (Edit)
	float                                              MaxHealPerDamage;                                         // 0x0C44(0x0004) (Edit)
	float                                              MinHealPerDamage;                                         // 0x0C48(0x0004) (Edit)
	float                                              MaxHealMultiplierExponent;                                // 0x0C4C(0x0004) (Edit)
	float                                              DamageHealMultiplierExponent;                             // 0x0C50(0x0004) (Edit)
	TArray<class UDunDefBuff*>                         BuffsToApplyOnMeleeHit;                                   // 0x0C54(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              SwingHurtList;                                            // 0x0C60(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_Melee");
		return ptr;
	}


	void AttachedComponent(class UPrimitiveComponent* aComp);
	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void ShutDown(unsigned long isDestruction);
	void NotifyEquipment_PawnJumped();
	void NotifyEquipment_PawnTookDamage(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	unsigned long isEnemyInRange();
	void UpdateAI(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	float GetHealMultiplier();
	float GetMomentumMultiplier();
	void UpdateAttackSwing(float DeltaTime);
	unsigned long AddToSwingHurtList(class ADunDefPlayer* myOwner, class AActor* newEntry);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
};


// Class UDKGame.HeroEquipment_Familiar_MoneyGiver
// 0x0018 (0x0B14 - 0x0AFC)
class UHeroEquipment_Familiar_MoneyGiver : public UHeroEquipment_Familiar
{
public:
	float                                              BaseDamageToManaRatio;                                    // 0x0AFC(0x0004) (Edit)
	float                                              EquipmentDamageMultiplierBase;                            // 0x0B00(0x0004) (Edit)
	float                                              MaxManaPerDamage;                                         // 0x0B04(0x0004) (Edit)
	float                                              MinManaPerDamage;                                         // 0x0B08(0x0004) (Edit)
	float                                              MaxManaMultiplierExponent;                                // 0x0B0C(0x0004) (Edit)
	float                                              DamageManaMultiplierExponent;                             // 0x0B10(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_MoneyGiver");
		return ptr;
	}


	int GetWeaponDamage();
	float GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp);
	float GetManaMultiplier();
	void NotifyEquipment_WeaponDidDamage(class ADunDefPlayer* fromPlayer, const TScriptInterface<class UDunDefTargetableInterface>& aTarget, int Damage, const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType);
};


// Class UDKGame.HeroEquipment_Familiar_PawnBooster
// 0x0098 (0x0B94 - 0x0AFC)
class UHeroEquipment_Familiar_PawnBooster : public UHeroEquipment_Familiar
{
public:
	float                                              BaseBoostRange;                                           // 0x0AFC(0x0004) (Edit)
	float                                              BoostRangeStatBase;                                       // 0x0B00(0x0004) (Edit)
	float                                              BoostRangeStatExponent;                                   // 0x0B04(0x0004) (Edit)
	float                                              MaxRangeBoostStat;                                        // 0x0B08(0x0004) (Edit)
	float                                              MaxEffectiveRangeBoostStat;                               // 0x0B0C(0x0004) (Edit)
	float                                              BoostRangeStatMultiplier;                                 // 0x0B10(0x0004) (Edit)
	float                                              BoostStatBase;                                            // 0x0B14(0x0004) (Edit)
	float                                              BoostStatExponent;                                        // 0x0B18(0x0004) (Edit)
	float                                              BaseBoost;                                                // 0x0B1C(0x0004) (Edit)
	float                                              MaxBoostStat;                                             // 0x0B20(0x0004) (Edit)
	float                                              BoostStatMultiplier;                                      // 0x0B24(0x0004) (Edit)
	float                                              EffectSpawnInterval;                                      // 0x0B28(0x0004) (Edit)
	float                                              AttackAnimationChancePercent;                             // 0x0B2C(0x0004) (Edit)
	float                                              AttackAnimationInterval;                                  // 0x0B30(0x0004) (Edit)
	float                                              FirstBoostInterval;                                       // 0x0B34(0x0004) (Edit)
	int                                                BoostStatUpgradeInterval;                                 // 0x0B38(0x0004) (Edit)
	int                                                MaxNumberOfPawnsToBoost;                                  // 0x0B3C(0x0004) (Edit)
	int                                                SoftMaxNumberOfPawnsToBoost;                              // 0x0B40(0x0004) (Edit)
	TEnumAsByte<EPawnBoostType>                        MyBoostType;                                              // 0x0B44(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0B45(0x0003) MISSED OFFSET
	class UParticleSystem*                             BoostEffect;                                              // 0x0B48(0x0004) (Edit)
	struct FName                                       BoostAnimName;                                            // 0x0B4C(0x0008) (Edit)
	float                                              BoostAnimMinInterval;                                     // 0x0B54(0x0004) (Edit)
	float                                              BoostAnimMaxInterval;                                     // 0x0B58(0x0004) (Edit)
	float                                              BoostAnimPlayRate;                                        // 0x0B5C(0x0004) (Edit)
	TScriptInterface<class UDunDefTargetableInterface> BestTargetRef;                                            // 0x0B60(0x0008) (Transient)
	TArray<TScriptInterface<class UDunDefTargetableInterface>> AdditionalTargetRefs;                                     // 0x0B68(0x000C) (Transient, NeedCtorLink)
	float                                              LastEffectSpawnedTime;                                    // 0x0B74(0x0004) (Transient)
	float                                              LastAttackedAnimationTime;                                // 0x0B78(0x0004) (Transient)
	float                                              LastBoostAnimTimer;                                       // 0x0B7C(0x0004) (Transient)
	float                                              NextBoostAnimTimer;                                       // 0x0B80(0x0004) (Transient)
	unsigned long                                      bDebug : 1;                                               // 0x0B84(0x0004) (Edit)
	unsigned long                                      ProModeFocused : 1;                                       // 0x0B84(0x0004)
	int                                                projectedRange;                                           // 0x0B88(0x0004)
	int                                                projectedPlayers;                                         // 0x0B8C(0x0004)
	int                                                projectedBoost;                                           // 0x0B90(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_PawnBooster");
		return ptr;
	}


	void AddRandomizeValues(float equipmentQuality, unsigned long doResetStatsToTemplate, unsigned long bDontUseMissionRandomizerMultiplier, float RandomizerMultiplierOverride, unsigned long bIsForShop, unsigned long bAllowTranscendentGear);
	void NotifyOfBoostedRemoval(class APawn* removedBoostee);
	void AttachedComponent(class UPrimitiveComponent* aComp);
	int GetStatLevelUpAmountIterations(TEnumAsByte<EEquipmentStatType> EQS, int Value, int statSubIndex);
	int GetNextStatLevelUpValue(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long SetAsValue);
	void InitFromNetInfo(const struct FEquipmentNetInfo& Info, class UObject* fromDroppedEquipment);
	unsigned long CheckStatLevelUpIterations(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, int EquipmentLevelToCheck, float Value);
	unsigned long AllowStatLevelUp(TEnumAsByte<EEquipmentStatType> EQS, int statSubIndex, unsigned long IsInForgeUI, unsigned long bIgnoreManaRequirement);
	void NotifyEquipment_PawnAttacked(int FireMode);
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void GetFurthestAdditionalTarget(const struct FVector& playerLoc, class AActor** furthestTarget, float* furthestRange);
	void UpdateAdditionalBoostTargets();
	void RemoveAllTargets();
	void ShutDown(unsigned long isDestruction);
	TScriptInterface<class UDunDefTargetableInterface> GetBestAdditionalBoostTarget();
	TScriptInterface<class UDunDefTargetableInterface> GetBestTarget();
	float GetBoostRange();
	float GetPawnBoostAmount(TEnumAsByte<EPawnBoostType> boostType);
	unsigned long HasPawnBoostingType(TEnumAsByte<EPawnBoostType> checkType);
	void GetBoostedTargets(TArray<class APawn*>* boostedTargets);
};


// Class UDKGame.HeroEquipment_Familiar_PlayerHealer
// 0x0034 (0x0B30 - 0x0AFC)
class UHeroEquipment_Familiar_PlayerHealer : public UHeroEquipment_Familiar
{
public:
	float                                              HealInterval;                                             // 0x0AFC(0x0004) (Edit)
	float                                              MaxAttackAnimationSpeed;                                  // 0x0B00(0x0004) (Edit)
	float                                              HealRange;                                                // 0x0B04(0x0004) (Edit)
	class ADunDefEmitterSpawnable*                     PawnHealEffect;                                           // 0x0B08(0x0004) (Edit)
	float                                              BaseHealAmount;                                           // 0x0B0C(0x0004) (Edit)
	float                                              FalloffExponent;                                          // 0x0B10(0x0004) (Edit)
	float                                              MinimumHealDistancePercent;                               // 0x0B14(0x0004) (Edit)
	float                                              HealAmountMultiplier;                                     // 0x0B18(0x0004) (Edit)
	float                                              NightmareHealingMultiplier;                               // 0x0B1C(0x0004) (Edit)
	unsigned long                                      bUseFixedHealSpeed : 1;                                   // 0x0B20(0x0004) (Edit)
	float                                              LastHealTime;                                             // 0x0B24(0x0004) (Transient)
	TScriptInterface<class UDunDefTargetableInterface> BestTargetRef;                                            // 0x0B28(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.HeroEquipment_Familiar_PlayerHealer");
		return ptr;
	}


	void ShutDown(unsigned long isDestruction);
	void NotifyEquipment_AnimNotifyAttachment(int NotifyID, class USkeletalMeshComponent* equipmentSkelComp);
	void DoHealing();
	int GetWeaponDamage();
	void ApplyPrimaryDamageMultiplierDisplay(int* StatValue);
	float GetEquipmentStatValue(TEnumAsByte<EEquipmentStatType> equipmentStatType, unsigned long returnFinalAddedValue, unsigned long includeStatLevelUp);
	float GetAttackInterval();
	float GetHealAmount();
	void NotifyEquipment_PawnAttacked(int FireMode);
	struct FRotator GetDesiredSphereRotationalPlacement(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer, unsigned char* HasTarget);
	struct FRotator GetDesiredDirection(class USkeletalMeshComponent* myMeshComp, class ADunDefPlayer* myPlayer);
	void UpdateAI(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	void TickedByPawn(class ADunDefPlayer* PlayerOwner, float DeltaTime);
	TScriptInterface<class UDunDefTargetableInterface> GetBestTarget();
	void AttachedComponent(class UPrimitiveComponent* aComp);
};


// Class UDKGame.IActorEventHandler
// 0x0000 (0x003C - 0x003C)
class UIActorEventHandler : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IActorEventHandler");
		return ptr;
	}


	void AdjustDealtDamage(class AActor* damagedTarget, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, int OriginalDamage, int* inDamage, struct FVector* Momentum);
	void ReportBuffRemoved(class UDunDefBuff* BuffRemoved);
	void ReportBuffAdded(class UDunDefBuff* BuffAdded);
	void ReportActorDealtDamage(int dealtDamage, class AActor* Victim, class UClass* TheDamageType, class AActor* DamageCauser, class AController* DamageInstigator, int adjustedDamage, class UObject* whatDidDamage);
	void ReportTookDamage(int dealtDamage, class AActor* damager, class UClass* TheDamageType, int adjustedDamage);
	void ReportHealedActor(int healedAmount, class AActor* healed);
	void ReportKilledActor(class AActor* killedActor, class UClass* TheDamageType, class AController* Killer, class AActor* KillingActor, class UObject* WhatKilledThem);
};


// Class UDKGame.IBuffModifierInterface
// 0x0000 (0x003C - 0x003C)
class UIBuffModifierInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IBuffModifierInterface");
		return ptr;
	}


	TScriptInterface<class UIBuffModifierInterface> GetStatModifierObject();
	float GetStatValueByTag(float initalValue, const struct FString& StatTag, const TScriptInterface<class UIBuffModifierInterface>& TagActor, TEnumAsByte<ELevelUpValueType> statType, unsigned long bBaseValueOnly);
	void InitalizeForBuff(const TScriptInterface<class UIBuffModifierInterface>& ActorStatObject, int Tier, unsigned long bBaseValueOnly);
};


// Class UDKGame.IHeroChangedInterface
// 0x0000 (0x003C - 0x003C)
class UIHeroChangedInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.IHeroChangedInterface");
		return ptr;
	}


	void HeroChanged(class UDunDefHero* newHero, class UDunDefHero* oldHero);
};


// Class UDKGame.LastDamageInfoFilter
// 0x0024 (0x0060 - 0x003C)
class ULastDamageInfoFilter : public UObject
{
public:
	TArray<class UActorFilter*>                        ActorFilter_lastDamageCauser;                             // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UActorFilter*>                        ActorFilter_lastWhatHitMe;                                // 0x0048(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UActorFilter_DamageTypeComparison*>   ActorFilter_lastDamageType;                               // 0x0054(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.LastDamageInfoFilter");
		return ptr;
	}


	unsigned long STATIC_IsActorAllowed(const struct FsLastDamageInfo& theObject, unsigned long is_OR_filters, TArray<class ULastDamageInfoFilter*>* filters);
	unsigned long IsAllowed(const struct FsLastDamageInfo& theObject);
};


// Class UDKGame.UI_PlayerShop
// 0x0060 (0x086C - 0x080C)
class UUI_PlayerShop : public UUI_ItemBox
{
public:
	class UUIButton*                                   RemoveFromPlayerShopButton;                               // 0x080C(0x0004) (Edit)
	class UUIButton*                                   IncreaseItemCost;                                         // 0x0810(0x0004) (Edit)
	class UUIButton*                                   ReduceItemCost;                                           // 0x0814(0x0004) (Edit)
	class UUIButton*                                   DecreaseItemCost;                                         // 0x0818(0x0004) (Edit)
	class UUIButton*                                   SetItemCostButton;                                        // 0x081C(0x0004) (Edit)
	class UUIButton*                                   BuyItemButton;                                            // 0x0820(0x0004) (Edit)
	class UUIScriptWidget_Button*                      ToggleAFKShopMode;                                        // 0x0824(0x0004) (Edit)
	class UUILabel*                                    PlayerShopNameLabel;                                      // 0x0828(0x0004) (Edit)
	class UUILabel*                                    PurchaseEquipmentManaCostLabel;                           // 0x082C(0x0004) (Edit)
	class UUILabel*                                    RequiresShopModeLabel;                                    // 0x0830(0x0004) (Edit)
	class UUILabel*                                    WillRequireShopModeLabel;                                 // 0x0834(0x0004) (Edit)
	struct FString                                     PlayerShopNameString;                                     // 0x0838(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     EnableShopString;                                         // 0x0844(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     DisableShopString;                                        // 0x0850(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIImage*                                    heroIconImage;                                            // 0x085C(0x0004) (Edit)
	class APlayerShopManager*                          myPlayerShopManager;                                      // 0x0860(0x0004)
	class UUI_EditboxPopup*                            myEditBoxPopup;                                           // 0x0864(0x0004) (Transient)
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                                     // 0x0868(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_PlayerShop");
		return ptr;
	}


	void SceneActivated(unsigned long bInitialActivation);
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	void CloseWithAnimation();
	void SceneDeactivated();
	void ItemUpdateOccured(class UHeroEquipment* InEquipment);
	void FolderUpdateOccured(int FolderID, int ParentID, const struct FString& FolderName);
	void FolderDeletionOccured(int FolderID);
	unsigned long EntryEnabledCheck(const TScriptInterface<class UDataListEntryInterface>& dataEntry);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void MoveUpAFolder();
	void UpdateItemPath();
	void NotifyDraggedEvent(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	unsigned long SupportsDraggedOntoItem(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	void Update(float DeltaTime);
	void RefreshEquipmentList(int forUserID);
};


// Class UDKGame.PlayerStart_Movable
// 0x0000 (0x02FC - 0x02FC)
class APlayerStart_Movable : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.PlayerStart_Movable");
		return ptr;
	}

};


// Class UDKGame.ScrollablePopupParent
// 0x0000 (0x003C - 0x003C)
class UScrollablePopupParent : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.ScrollablePopupParent");
		return ptr;
	}


	void RenderPopup(class UCanvas* C);
};


// Class UDKGame.UI_Trade
// 0x0140 (0x077C - 0x063C)
class UUI_Trade : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           EquipmentDataListMine;                                    // 0x063C(0x0004) (Edit)
	class UUIPanel_DataList*                           EquipmentDataListTheirs;                                  // 0x0640(0x0004) (Edit)
	class UUIDataContainer_Equipment_DataList*         EquipmentDataListContainer;                               // 0x0644(0x0004) (Edit)
	class UUIButton*                                   CloseButton;                                              // 0x0648(0x0004) (Edit)
	class UUIButton*                                   ShowEquipmentInfoButton;                                  // 0x064C(0x0004) (Edit)
	class UUIButton*                                   CancelTrade;                                              // 0x0650(0x0004) (Edit)
	class UUIButton*                                   TradeHelper;                                              // 0x0654(0x0004) (Edit)
	class UUIScriptWidget_Button*                      ConfirmTradeButton;                                       // 0x0658(0x0004) (Edit)
	class UUI_EquipmentInfo_New*                       EquipmentInfoUITemplate;                                  // 0x065C(0x0004) (Edit)
	class UUILabel*                                    TradeManaMine;                                            // 0x0660(0x0004) (Edit)
	class UUILabel*                                    TradeManaTheirs;                                          // 0x0664(0x0004) (Edit)
	class UUILabel*                                    ConfirmedMine;                                            // 0x0668(0x0004) (Edit)
	class UUILabel*                                    ConfirmedTheirs;                                          // 0x066C(0x0004) (Edit)
	class UUILabel*                                    NameMine;                                                 // 0x0670(0x0004) (Edit)
	class UUILabel*                                    NameTheirs;                                               // 0x0674(0x0004) (Edit)
	class UUILabel*                                    TradeTitleLabel;                                          // 0x0678(0x0004) (Edit)
	class UUILabel*                                    ManaTitleTheirs;                                          // 0x067C(0x0004) (Edit)
	class UUILabel*                                    ManaTitleMin;                                             // 0x0680(0x0004) (Edit)
	class UUIButton*                                   IncrementButton;                                          // 0x0684(0x0004) (Edit)
	class UUIButton*                                   DecrementButton;                                          // 0x0688(0x0004) (Edit)
	class UUIButton*                                   SetManaButton;                                            // 0x068C(0x0004) (Edit)
	class USoundCue*                                   RemoveFromTradeSound;                                     // 0x0690(0x0004) (Edit)
	float                                              ManaChangeRate;                                           // 0x0694(0x0004) (Edit)
	float                                              ManaInvestmentInterval;                                   // 0x0698(0x0004) (Edit)
	float                                              StartRoundingTime;                                        // 0x069C(0x0004) (Edit)
	int                                                RoundingAmount;                                           // 0x06A0(0x0004) (Edit)
	float                                              MiniInvestmentInterval;                                   // 0x06A4(0x0004) (Edit)
	struct FString                                     ConfirmedString;                                          // 0x06A8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UnconfirmedString;                                        // 0x06B4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ConfirmString;                                            // 0x06C0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UnconfirmString;                                          // 0x06CC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TradeTitleString;                                         // 0x06D8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CloseButtonString;                                        // 0x06E4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ShowItemButtonString;                                     // 0x06F0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     CancelButtonString;                                       // 0x06FC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     TradeManaString;                                          // 0x0708(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      UnconfirmTextColor;                                       // 0x0714(0x0004) (Edit)
	struct FColor                                      ConfirmTextColor;                                         // 0x0718(0x0004) (Edit)
	class UUI_EditboxPopup*                            EditBoxPopupTemplate;                                     // 0x071C(0x0004) (Edit)
	class ATradeManager*                               myTradeManager;                                           // 0x0720(0x0004)
	class UUIButton*                                   TradePanelHelper;                                         // 0x0724(0x0004) (Edit)
	class UUIResolutionContainer*                      ResolutionContainerToResize;                              // 0x0728(0x0004) (Edit)
	class UUIObject*                                   MainExtentsWidget;                                        // 0x072C(0x0004) (Edit)
	float                                              TradeModeScalarValue;                                     // 0x0730(0x0004) (Edit)
	unsigned long                                      bInTradeMode : 1;                                         // 0x0734(0x0004)
	unsigned long                                      WasIncrementing : 1;                                      // 0x0734(0x0004)
	unsigned long                                      WasDecrementing : 1;                                      // 0x0734(0x0004)
	unsigned long                                      bFadingIn : 1;                                            // 0x0734(0x0004)
	unsigned long                                      Decrementing : 1;                                         // 0x0734(0x0004)
	unsigned long                                      Incrementing : 1;                                         // 0x0734(0x0004)
	float                                              Timer;                                                    // 0x0738(0x0004)
	float                                              ManaInvestmentTimer;                                      // 0x073C(0x0004)
	struct FHighDigitInt                               LastManaToDrop;                                           // 0x0740(0x0010)
	float                                              LastStartIncrementTime;                                   // 0x0750(0x0004) (Transient)
	struct FHighDigitInt                               ManaToDrop;                                               // 0x0754(0x0010)
	struct FHighDigitInt                               zeroBox;                                                  // 0x0764(0x0010)
	float                                              lastTimeConfirmButton;                                    // 0x0774(0x0004) (Transient)
	float                                              ConfirmButtonInterval;                                    // 0x0778(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_Trade");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void ShowEquipmentInfo();
	void EquipmentEntrySelected(class UUIButton_DataListEntry* Button);
	void RefreshedList();
	void Update(float DeltaTime);
	void RefreshEquipmentLists();
	void RemoveEquipment();
	void EditBoxPopUpCompleted(const struct FString& EditBoxResult);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void PostInitialSceneUpdate();
	class UDunDefHero* GetHero();
	void InitializeForTradeManager(class ATradeManager* aTradeManager);
	void NotifyDraggedEvent(class UUIScreenObject* InDraggee, class UUIScreenObject* InDraggedOn);
	void SceneActivated(unsigned long bInitialActivation);
	void SceneDeactivated();
	void UpdateManaToDrop(float DeltaTime, int Sign);
	struct FHighDigitInt GetTotalMana();
	struct FHighDigitInt GetMaxTradeMana();
};


// Class UDKGame.UI_CharacterSelect
// 0x0128 (0x0764 - 0x063C)
class UUI_CharacterSelect : public UDunDefUIScene
{
public:
	TArray<class UUIImage_PlayerSelect*>               CharacterSelectionBoxes;                                  // 0x063C(0x000C) (Edit, NeedCtorLink)
	TArray<class UUILabel*>                            CharacterTagNames;                                        // 0x0648(0x000C) (Edit, NeedCtorLink)
	class UUILabel*                                    OwningTagName;                                            // 0x0654(0x0004) (Edit)
	TArray<class UUILabel*>                            CharacterSelectionNames;                                  // 0x0658(0x000C) (Edit, NeedCtorLink)
	TArray<class UUILabel*>                            CharacterSelectionLevels;                                 // 0x0664(0x000C) (Edit, NeedCtorLink)
	class UUIButton*                                   StartButton;                                              // 0x0670(0x0004) (Edit)
	class UUIButton*                                   BackButton;                                               // 0x0674(0x0004) (Edit)
	class UUIButton*                                   ExportToLocalButton;                                      // 0x0678(0x0004) (Edit)
	class UUIButton*                                   MenuButton;                                               // 0x067C(0x0004) (Edit)
	class UUI_HeroSelection*                           HeroSelectionSceneTemplate;                               // 0x0680(0x0004) (Edit)
	class UUI_CreateHero*                              CreateHeroUIScene;                                        // 0x0684(0x0004) (Edit)
	TArray<class UUIButton*>                           ChooseCharacterButtons;                                   // 0x0688(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      DLCSplashMacOnly : 1;                                     // 0x0694(0x0004) (Edit)
	unsigned long                                      hasKeyboardPlayer : 1;                                    // 0x0694(0x0004)
	unsigned long                                      notAClick : 1;                                            // 0x0694(0x0004)
	unsigned long                                      OnePlayerSelected : 1;                                    // 0x0694(0x0004)
	unsigned long                                      bIsLeftKeyDown : 1;                                       // 0x0694(0x0004) (Transient)
	unsigned long                                      bIsRightKeyDown : 1;                                      // 0x0694(0x0004) (Transient)
	TArray<class UUIImage*>                            ControllerImages;                                         // 0x0698(0x000C) (Edit, NeedCtorLink)
	TArray<class USurface*>                            gamepadImages;                                            // 0x06A4(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    keyboardImage;                                            // 0x06B0(0x0004) (Edit)
	class USoundCue*                                   ReopenHeroSelectionSound;                                 // 0x06B4(0x0004) (Edit)
	class UUI_MainMenu*                                MainMenuScene;                                            // 0x06B8(0x0004) (Edit)
	class UUILabel*                                    PlayOnlineLabel;                                          // 0x06BC(0x0004) (Edit)
	class UUILabel*                                    PlayLocalLabel;                                           // 0x06C0(0x0004) (Edit)
	class UUIImage*                                    MultiplayerModeImage;                                     // 0x06C4(0x0004) (Edit)
	class UDunDefUIScene*                              DLCSplashUITemplateMac;                                   // 0x06C8(0x0004) (Edit)
	class UDunDefUIScene*                              DLCSplashUITemplatePC;                                    // 0x06CC(0x0004) (Edit)
	struct FString                                     PressStartString;                                         // 0x06D0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     PlayOnlineString;                                         // 0x06DC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     PlayLocalString;                                          // 0x06E8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ClickToJoinString;                                        // 0x06F4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExportToLocalTitle;                                       // 0x0700(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExportToLocalDescription;                                 // 0x070C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExportedToLocalTitle;                                     // 0x0718(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ExportedToLocalDescription;                               // 0x0724(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CantAddSplitPlayerTitle;                              // 0x0730(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MSG_CantAddSplitPlayerDescription;                        // 0x073C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChangeButtonStringTag;                                    // 0x0748(0x000C) (Edit, NeedCtorLink)
	class ULocalPlayer*                                removedSinglePlayer;                                      // 0x0754(0x0004)
	struct FString                                     BoxSelectedString;                                        // 0x0758(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_CharacterSelect");
		return ptr;
	}


	unsigned long AcceptedSaveWarning(class UUI_MessageBox* theMessageBox, const struct FString& ButtonPressed, int whichPlayer);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	unsigned long IsGamepadOwned();
	unsigned long AllowInputAlias(const struct FName& InputKeyName, const struct FName& InputAliasName);
	void SetCustomValueForKismet(int CustomValue);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	class UUIObject* GetFirstFreeCharacterBox();
	unsigned long CanAddPlayer(int ControllerId);
	void StartLocalSession(int ControllerId);
	void OnLocalSessionCreated(const struct FName& SessionName, unsigned long bWasSuccessful);
	class ULocalPlayer* CreatePlayerForController(int ControllerId, unsigned long isKeyboard);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	unsigned long CheckHeroForPlayer(unsigned long forceSelect, class ULocalPlayer* thePlayer);
	class ADunDefPlayerSelectUICharacter* GetCharacterForPlayerIndex(int PlayerIndex);
	void UpdateCharacterForIndex(int Index);
	void ChoseHero(class ULocalPlayer* LP, class UDunDefHero* hero);
	void UpdatePlayerSelections(int forceSelect);
	unsigned long AnyPlayersSelected();
	unsigned long ChoseCharacter(class UUIScreenObject* Object, int PlayerIndex);
	unsigned long StartButtonClicked(class UUIScreenObject* Object, int PlayerIndex);
	unsigned long MenuButtonClicked(class UUIScreenObject* Object, int PlayerIndex);
	unsigned long BackButtonClicked(class UUIScreenObject* Object, int PlayerIndex);
	void HandleKeyboardPlayerRemoved(class UDunDefLocalPlayer* LP);
	class ULocalPlayer* GetPlayerForIndex(int PlayerIndex);
	class UUIScreenObject* GetChooseCharacterForPlayer(class ULocalPlayer* pl);
	void Update(float DeltaTime);
	void NotifyControllerStatusChanged(int ControllerId, unsigned long bConnected);
	void PostInitialSceneUpdate();
	void SceneActivated(unsigned long bInitialActivation);
	void SceneDeactivated();
};


// Class UDKGame.UIImage_PlayerSelect
// 0x0148 (0x05F4 - 0x04AC)
class UUIImage_PlayerSelect : public UUIImage
{
public:
	int                                                PlayerIndex;                                              // 0x04AC(0x0004) (Edit)
	class UUIImage*                                    BackgroundImage;                                          // 0x04B0(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MyMaterial;                                               // 0x04B4(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MyBGMaterial;                                             // 0x04B8(0x0004) (Edit)
	class UUILabel*                                    PlayerNameLabel;                                          // 0x04BC(0x0004) (Edit)
	struct FLinearColor                                NameLabelSelectedColor;                                   // 0x04C0(0x0010) (Edit)
	struct FLinearColor                                NameLabelUnselectedColor;                                 // 0x04D0(0x0010) (Edit)
	struct FLinearColor                                SelectedColor;                                            // 0x04E0(0x0010) (Edit)
	struct FLinearColor                                UnselectedColor;                                          // 0x04F0(0x0010) (Edit)
	struct FName                                       SelectionParameterName;                                   // 0x0500(0x0008) (Edit)
	struct FLinearColor                                UnselectedMainRingColor;                                  // 0x0508(0x0010) (Edit)
	struct FLinearColor                                UnselectedGlowColor;                                      // 0x0518(0x0010) (Edit)
	struct FLinearColor                                UnselectedInnerFontColor;                                 // 0x0528(0x0010) (Edit)
	struct FLinearColor                                UnselectedInnerCloudColor;                                // 0x0538(0x0010) (Edit)
	float                                              UnselectedOpacity;                                        // 0x0548(0x0004) (Edit)
	struct FLinearColor                                SelectedMainRingColor;                                    // 0x054C(0x0010) (Edit)
	struct FLinearColor                                SelectedGlowColor;                                        // 0x055C(0x0010) (Edit)
	struct FLinearColor                                SelectedInnerFontColor;                                   // 0x056C(0x0010) (Edit)
	struct FLinearColor                                SelectedInnerCloudColor;                                  // 0x057C(0x0010) (Edit)
	float                                              SelectedOpacity;                                          // 0x058C(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MyMaterialInstance;                                       // 0x0590(0x0004) (Transient)
	class UMaterialInstanceConstant*                   MyBGMaterialInstance;                                     // 0x0594(0x0004) (Transient)
	struct FLinearColor                                CurrentMainMaterialColor;                                 // 0x0598(0x0010)
	struct FLinearColor                                CurrentMainRingColor;                                     // 0x05A8(0x0010)
	struct FLinearColor                                CurrentGlowColor;                                         // 0x05B8(0x0010)
	struct FLinearColor                                CurrentInnerFontColor;                                    // 0x05C8(0x0010)
	struct FLinearColor                                CurrentInnerCloudColor;                                   // 0x05D8(0x0010)
	class ADunDefPlayerSelectUICharacter*              myCharacter;                                              // 0x05E8(0x0004) (Transient)
	unsigned long                                      CurrentlySelected : 1;                                    // 0x05EC(0x0004) (Transient)
	float                                              SelectedLerp;                                             // 0x05F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIImage_PlayerSelect");
		return ptr;
	}


	void Update(float DeltaTime);
	void Destroyed();
	void Created();
	void Unselected();
	void ChoseHero(class UDunDefHero* hero);
	void Selected();
};


// Class UDKGame.UI_CreateHeroBase
// 0x0058 (0x0694 - 0x063C)
class UUI_CreateHeroBase : public UDunDefUIScene
{
public:
	TArray<struct UUI_CreateHeroBase_FHeroClassInfo>   classInfo;                                                // 0x063C(0x000C) (NeedCtorLink)
	struct FString                                     currentNameString;                                        // 0x0648(0x000C) (NeedCtorLink)
	int                                                selectedClass;                                            // 0x0654(0x0004)
	int                                                templateIndex;                                            // 0x0658(0x0004)
	int                                                CurrentCostumeIndex;                                      // 0x065C(0x0004)
	struct FLinearColor                                color1;                                                   // 0x0660(0x0010)
	struct FLinearColor                                color2;                                                   // 0x0670(0x0010)
	struct FLinearColor                                color3;                                                   // 0x0680(0x0010)
	class USoundCue*                                   CreateHeroSound;                                          // 0x0690(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_CreateHeroBase");
		return ptr;
	}


	void ConfirmCreateHero();
	void CreateHero();
	void FindOutAllAboutHeroes();
	class UDunDefHeroManager* GetHeroManager();
};


// Class UDKGame.UI_CreateHero
// 0x0130 (0x07C4 - 0x0694)
class UUI_CreateHero : public UUI_CreateHeroBase
{
public:
	class UUIObject*                                   class_Panel;                                              // 0x0694(0x0004) (Edit)
	class UUILabelButton*                              class_PreviousButton;                                     // 0x0698(0x0004) (Edit)
	class UUILabelButton*                              class_NextButton;                                         // 0x069C(0x0004) (Edit)
	class UUILabelButton*                              class_OkButton;                                           // 0x06A0(0x0004) (Edit)
	class UUILabelButton*                              CostumeBuyButton;                                         // 0x06A4(0x0004) (Edit)
	class UUILabelButton*                              HeroBuyButton;                                            // 0x06A8(0x0004) (Edit)
	class UUIButton*                                   class_BackButton;                                         // 0x06AC(0x0004) (Edit)
	class UUIImage*                                    class_RenderTarget;                                       // 0x06B0(0x0004) (Edit)
	class UUILabel*                                    class_Name;                                               // 0x06B4(0x0004) (Edit)
	class UUILabel*                                    CostumeUnlockDescriptionLabel;                            // 0x06B8(0x0004) (Edit)
	class UUILabel*                                    class_Description;                                        // 0x06BC(0x0004) (Edit)
	class UUILabel*                                    class_DescriptionLarge;                                   // 0x06C0(0x0004) (Edit)
	class UUILabel*                                    LockedByDemoLabel;                                        // 0x06C4(0x0004) (Edit)
	TArray<class UUILabel*>                            SkillLabels;                                              // 0x06C8(0x000C) (Edit, NeedCtorLink)
	TArray<class USoundCue*>                           HeroDescriptionSounds;                                    // 0x06D4(0x000C) (Edit, NeedCtorLink)
	class UUIImage*                                    LockedImage;                                              // 0x06E0(0x0004) (Edit)
	class USoundCue*                                   LockedInDemoSound;                                        // 0x06E4(0x0004) (Edit)
	class USoundCue*                                   AdvanceToNextPageSound;                                   // 0x06E8(0x0004) (Edit)
	class USoundCue*                                   ReturnToPreviousPageSound;                                // 0x06EC(0x0004) (Edit)
	class USoundCue*                                   CycleColorTemplateSound;                                  // 0x06F0(0x0004) (Edit)
	class UUIImage*                                    ControllerImage;                                          // 0x06F4(0x0004) (Edit)
	TArray<class USurface*>                            gamepadImages;                                            // 0x06F8(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    keyboardImage;                                            // 0x0704(0x0004) (Edit)
	class UUIObject*                                   color_Panel;                                              // 0x0708(0x0004) (Edit)
	class UUIPanel*                                    color_Primary;                                            // 0x070C(0x0004) (Edit)
	class UUIPanel*                                    color_Secondary;                                          // 0x0710(0x0004) (Edit)
	class UUIPanel*                                    color_Accessory;                                          // 0x0714(0x0004) (Edit)
	class UUILabelButton*                              color_NextButton;                                         // 0x0718(0x0004) (Edit)
	class UUILabelButton*                              color_PreviousButton;                                     // 0x071C(0x0004) (Edit)
	class UUIImage*                                    color_RenderTarget;                                       // 0x0720(0x0004) (Edit)
	class UUILabelButton*                              color_NextTemplate;                                       // 0x0724(0x0004) (Edit)
	class UUILabelButton*                              color_PreviousTemplate;                                   // 0x0728(0x0004) (Edit)
	class UUILabel*                                    color_TemplateName;                                       // 0x072C(0x0004) (Edit)
	class UUILabel*                                    ChangeCostumeLabel;                                       // 0x0730(0x0004) (Edit)
	class UUILabelButton*                              ChangeCostumeButton;                                      // 0x0734(0x0004) (Edit)
	class UUISlider*                                   color_selectedSlider;                                     // 0x0738(0x0004)
	class UUIObject*                                   name_Panel;                                               // 0x073C(0x0004) (Edit)
	class UUIEditBox*                                  name_NameBox;                                             // 0x0740(0x0004) (Edit)
	class UUILabelButton*                              name_EditButton;                                          // 0x0744(0x0004) (Edit)
	class UUILabelButton*                              name_RandomButton;                                        // 0x0748(0x0004) (Edit)
	class UUILabelButton*                              name_PreviousButton;                                      // 0x074C(0x0004) (Edit)
	class UUILabelButton*                              name_NextButton;                                          // 0x0750(0x0004) (Edit)
	class UUIImage*                                    name_RenderTarget;                                        // 0x0754(0x0004) (Edit)
	class UUIButton*                                   EditNameButton;                                           // 0x0758(0x0004) (Edit)
	class USoundCue*                                   FinishEditingHeroSound;                                   // 0x075C(0x0004) (Edit)
	struct FString                                     MSG_PickNameTitle;                                        // 0x0760(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_PickNameDescription;                                  // 0x076C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       BadStringAnimation;                                       // 0x0778(0x0008) (Edit)
	class ADunDefPlayerSelectUICharacter*              renderCharacter;                                          // 0x0780(0x0004)
	class UDunDefHero*                                 editingHero;                                              // 0x0784(0x0004)
	class UDunDefHero*                                 stolenHero;                                               // 0x0788(0x0004)
	struct FString                                     customTemplateName;                                       // 0x078C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChangeCostumeButtonName;                                  // 0x0798(0x000C) (Localized, NeedCtorLink)
	struct FString                                     BuyCostumeButtonName;                                     // 0x07A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     BuyHeroButtonName;                                        // 0x07B0(0x000C) (Localized, NeedCtorLink)
	float                                              AudioTimer;                                               // 0x07BC(0x0004) (Transient)
	unsigned long                                      bIsLeftKeyDown : 1;                                       // 0x07C0(0x0004) (Transient)
	unsigned long                                      bIsRightKeyDown : 1;                                      // 0x07C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_CreateHero");
		return ptr;
	}


	unsigned long IsKeyboardOwned();
	unsigned long IsGamepadOwned();
	void EvaluateKeyboardInput(struct FString* keyboardResult);
	void FindNextSubstring(const struct FString& subStr, unsigned long bRemove, int* trackPos, int* auxTrackPos, struct FString* keyboardResult);
	void RemoveCharacter(int Index, struct FString* keyboardResult);
	void SceneDeactivated();
	void Update(float DeltaTime);
	void CloseWithAnimation();
	void Exit();
	void FinishEditingHero();
	void KeyboardInputRejected(const struct FString& Result);
	void NotifyValueChanged(class UUIObject* Widget, int PlayerIndex);
	unsigned long NotifyButtonClicked(class UUIScreenObject* Widget, int PlayerIndex);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long InterceptedInputKey(struct FInputEventParameters* EventParms);
	void EditHero(class UDunDefHero* toEdit);
	class ADunDefPlayerSelectUICharacter* GetCharacterForPlayerIndex(int PlayerIndex);
	void SetRandomName();
	void UpdateRenderCharacter();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.UI_HeroInfoNew
// 0x00B8 (0x0700 - 0x0648)
class UUI_HeroInfoNew : public UUI_HeroInfo
{
public:
	struct FName                                       HideInventoryAnim;                                        // 0x0648(0x0008) (Edit)
	struct FName                                       ShowInventoryAnim;                                        // 0x0650(0x0008) (Edit)
	class UUI_EquipmentInfo*                           EquipmentInfoUITemplate;                                  // 0x0658(0x0004) (Edit)
	class UUILabel*                                    HeroNameLabel;                                            // 0x065C(0x0004) (Edit)
	class UUILabel*                                    HeroLevelLabel;                                           // 0x0660(0x0004) (Edit)
	class UUIButton*                                   RemoveManaButton;                                         // 0x0664(0x0004) (Edit)
	class UUIButton*                                   ResetButton;                                              // 0x0668(0x0004) (Edit)
	class UUIButton*                                   NextPageButton;                                           // 0x066C(0x0004) (Edit)
	class UUIButton*                                   PrevPageButton;                                           // 0x0670(0x0004) (Edit)
	class UUI_DropMana*                                DropManaUITemplate;                                       // 0x0674(0x0004) (Edit)
	struct FName                                       LevelUpFinishedAnim;                                      // 0x0678(0x0008) (Edit)
	struct FName                                       LevelUpAvailableAnim;                                     // 0x0680(0x0008) (Edit)
	struct FName                                       ExtraBackgroundLayerAnim;                                 // 0x0688(0x0008) (Edit)
	TArray<class UUIScriptWidget_HeroStat*>            HeroStatButtons;                                          // 0x0690(0x000C) (Edit, NeedCtorLink)
	class UUILabel*                                    LevelUpInBuildPhaseLabel;                                 // 0x069C(0x0004) (Edit)
	class UUILabel*                                    PointsToSpendLabel;                                       // 0x06A0(0x0004) (Edit)
	class UUIScreenObject*                             PointsToSpendPanel;                                       // 0x06A4(0x0004) (Edit)
	class UUIScriptWidget_HeroInfoExpBar*              ExpBar;                                                   // 0x06A8(0x0004) (Edit)
	class UUIButton*                                   tCloseButton;                                             // 0x06AC(0x0004) (Edit)
	class UUIButton*                                   RemoveAllGearButton;                                      // 0x06B0(0x0004) (Edit)
	class USoundCue*                                   RevertPointSound;                                         // 0x06B4(0x0004) (Edit)
	class UUILabel*                                    TowersLabel;                                              // 0x06B8(0x0004) (Edit)
	struct FString                                     LevelString;                                              // 0x06BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LevelUpPreString;                                         // 0x06C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LevelUpPostString;                                        // 0x06D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     CloseSceneInputCommand;                                   // 0x06E0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      InventoryHidden : 1;                                      // 0x06EC(0x0004)
	unsigned long                                      bIsLevelUpAvailable : 1;                                  // 0x06EC(0x0004)
	unsigned long                                      bShiftHeld : 1;                                           // 0x06EC(0x0004)
	unsigned long                                      bControlHeld : 1;                                         // 0x06EC(0x0004)
	class UUIScriptWidget_EquipmentIconButton*         lastEquipmentIcon;                                        // 0x06F0(0x0004)
	int                                                PointsToSpend;                                            // 0x06F4(0x0004)
	int                                                OriginalPointsToSpend;                                    // 0x06F8(0x0004)
	int                                                NumLevelUps;                                              // 0x06FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_HeroInfoNew");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void RemoveAllGear();
	void CloseEquipmentScenes();
	float GetTotalMana();
	void Update(float DeltaTime);
	unsigned long CanLevelUpStat(TEnumAsByte<ELevelUpValueType> Stat, int numPoints, unsigned char* bDoesStatForceRequirement);
	void RemovePoint(class UUIScriptWidget_HeroStat* statButton);
	void SpendPoint(class UUIScriptWidget_HeroStat* statButton, TEnumAsByte<ELevelUpValueType> Stat);
	void AllocatePointsToStats();
	void ResetLevelUpAllocations();
	void UpdateLevelUp(float DeltaTime);
	void FinishLevelUp();
	void ShowLevelUpAvailable();
	void ShowInventory();
	void HideInventory();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void InitializeForHero(class UDunDefHero* hero, unsigned long IsRemoteHero);
	void CloseWithAnimation();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.UI_CreateHeroInGame
// 0x0088 (0x071C - 0x0694)
class UUI_CreateHeroInGame : public UUI_CreateHeroBase
{
public:
	class UUIObject*                                   class_Panel;                                              // 0x0694(0x0004) (Edit)
	class UUIButton*                                   class_PreviousButton;                                     // 0x0698(0x0004) (Edit)
	class UUIButton*                                   class_NextButton;                                         // 0x069C(0x0004) (Edit)
	class UUIButton*                                   class_OkButton;                                           // 0x06A0(0x0004) (Edit)
	class UUIButton*                                   class_CancelButton;                                       // 0x06A4(0x0004) (Edit)
	class UUILabelButton*                              HeroBuyButton;                                            // 0x06A8(0x0004) (Edit)
	class UUILabel*                                    class_Name;                                               // 0x06AC(0x0004) (Edit)
	class UUILabel*                                    class_DescriptionLarge;                                   // 0x06B0(0x0004) (Edit)
	class UUILabel*                                    class_Description;                                        // 0x06B4(0x0004) (Edit)
	class UUILabel*                                    LockedByDemoLabel;                                        // 0x06B8(0x0004) (Edit)
	class UUIImage*                                    HeroIcon;                                                 // 0x06BC(0x0004) (Edit)
	class UMaterialInstanceConstant*                   HeroMaterial;                                             // 0x06C0(0x0004) (Edit)
	class UUIImage*                                    LockedImage;                                              // 0x06C4(0x0004) (Edit)
	TArray<class UUILabel*>                            SkillLabels;                                              // 0x06C8(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   LockedInDemoSound;                                        // 0x06D4(0x0004) (Edit)
	class USoundCue*                                   CycleHeroSound;                                           // 0x06D8(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MyHeroMaterial;                                           // 0x06DC(0x0004) (Transient)
	struct FHeroColorTemplate                          aColorTemplate;                                           // 0x06E0(0x003C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_CreateHeroInGame");
		return ptr;
	}


	unsigned long NotifyButtonClicked(class UUIScreenObject* Widget, int PlayerIndex);
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.UI_CustomizeCrystal
// 0x00A8 (0x06E4 - 0x063C)
class UUI_CustomizeCrystal : public UDunDefUIScene
{
public:
	class UUILabelButton*                              PreviousCoreType;                                         // 0x063C(0x0004) (Edit)
	class UUILabelButton*                              NextCoreType;                                             // 0x0640(0x0004) (Edit)
	class UUILabel*                                    nameLabel;                                                // 0x0644(0x0004) (Edit)
	class UUILabel*                                    requirementLabel;                                         // 0x0648(0x0004) (Edit)
	class UUIPanel*                                    mainColor;                                                // 0x064C(0x0004) (Edit)
	class UUIPanel*                                    auraColor;                                                // 0x0650(0x0004) (Edit)
	class UUIPanel*                                    soulColor;                                                // 0x0654(0x0004) (Edit)
	class UUILabelButton*                              BackButton;                                               // 0x0658(0x0004) (Edit)
	class USoundCue*                                   CycleCoreSound;                                           // 0x065C(0x0004) (Edit)
	class USoundCue*                                   CycleCoreColorSound;                                      // 0x0660(0x0004) (Edit)
	class USoundCue*                                   AcceptCrystalCoreValidSound;                              // 0x0664(0x0004) (Edit)
	class USoundCue*                                   AcceptCrystalCoreInvalidSound;                            // 0x0668(0x0004) (Edit)
	class UUIObject*                                   MainColorPanel;                                           // 0x066C(0x0004) (Edit)
	class UUISlider*                                   selectedSlider;                                           // 0x0670(0x0004)
	int                                                coreIndex;                                                // 0x0674(0x0004)
	int                                                originalCoreIndex;                                        // 0x0678(0x0004)
	struct FLinearColor                                color1;                                                   // 0x067C(0x0010)
	struct FLinearColor                                color2;                                                   // 0x068C(0x0010)
	struct FLinearColor                                color3;                                                   // 0x069C(0x0010)
	TArray<class UStaticMeshComponent*>                componentsToHide;                                         // 0x06AC(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	class AActor*                                      OldViewTarget;                                            // 0x06B8(0x0004)
	class USeqAct_Interp*                              activeMatinee;                                            // 0x06BC(0x0004)
	class ADunDefCrystalCore*                          Core;                                                     // 0x06C0(0x0004)
	class ACameraActor*                                crystalCam;                                               // 0x06C4(0x0004)
	struct FString                                     LockedString;                                             // 0x06C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RequiredString;                                           // 0x06D4(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      locked : 1;                                               // 0x06E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_CustomizeCrystal");
		return ptr;
	}


	void SceneDeactivated();
	void ShutDown(unsigned long saveChanges);
	void SetCoreIndex(int Index);
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void NotifyValueChanged(class UUIObject* Widget, int PlayerIndex);
	void UpdateColors(unsigned long SetSliders);
	unsigned long NotifyButtonClicked(class UUIScreenObject* Widget, int PlayerIndex);
	void UISetup();
	void LevelSetup();
	void CoreSetup();
	class UDunDefHeroManager* GetHeroManager();
	void SceneActivated(unsigned long bInitialActivation);
};


// Class UDKGame.UI_DropMana
// 0x0054 (0x0690 - 0x063C)
class UUI_DropMana : public UDunDefUIScene
{
public:
	class UUIButton*                                   DecrementButton;                                          // 0x063C(0x0004) (Edit)
	class UUIButton*                                   IncrementButton;                                          // 0x0640(0x0004) (Edit)
	class UUIButton*                                   ConfirmButton;                                            // 0x0644(0x0004) (Edit)
	class UUIButton*                                   CancelButton;                                             // 0x0648(0x0004) (Edit)
	class UUIScriptWidget_Button*                      DropAllButton;                                            // 0x064C(0x0004) (Edit)
	class UUILabel*                                    ManaLabel;                                                // 0x0650(0x0004) (Edit)
	float                                              ManaChangeRate;                                           // 0x0654(0x0004) (Edit)
	float                                              LobbyManaChangeMultiplier;                                // 0x0658(0x0004) (Edit)
	float                                              ManaInvestmentInterval;                                   // 0x065C(0x0004) (Edit)
	float                                              StartRoundingTime;                                        // 0x0660(0x0004) (Edit)
	int                                                RoundingAmount;                                           // 0x0664(0x0004) (Edit)
	struct FString                                     DropAllString;                                            // 0x0668(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              MiniInvestmentInterval;                                   // 0x0674(0x0004) (Edit)
	int                                                ManaToDrop;                                               // 0x0678(0x0004)
	unsigned long                                      WasIncrementing : 1;                                      // 0x067C(0x0004)
	unsigned long                                      WasDecrementing : 1;                                      // 0x067C(0x0004)
	unsigned long                                      Decrementing : 1;                                         // 0x067C(0x0004)
	unsigned long                                      Incrementing : 1;                                         // 0x067C(0x0004)
	unsigned long                                      bFadingIn : 1;                                            // 0x067C(0x0004)
	float                                              Timer;                                                    // 0x0680(0x0004)
	float                                              ManaInvestmentTimer;                                      // 0x0684(0x0004)
	int                                                LastManaToDrop;                                           // 0x0688(0x0004)
	float                                              LastStartIncrementTime;                                   // 0x068C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_DropMana");
		return ptr;
	}


	void PostInitialize();
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void DropBankedMana();
	void Update(float DeltaTime);
	void SceneActivated(unsigned long bInitialActivation);
	void SceneDeactivated();
	void UpdateManaToDrop(float DeltaTime, int Sign);
	float GetTotalMana();
};


// Class UDKGame.UI_EditboxPopup
// 0x0050 (0x068C - 0x063C)
class UUI_EditboxPopup : public UDunDefUIScene
{
public:
	unsigned long                                      bShowConsoleKeyboardUIOnStartup : 1;                      // 0x063C(0x0004) (Edit)
	unsigned long                                      bForceToAlphaNumeric : 1;                                 // 0x063C(0x0004) (Edit)
	unsigned long                                      bAllowEscapeToCancel : 1;                                 // 0x063C(0x0004) (Edit)
	unsigned long                                      bShownKeyboard : 1;                                       // 0x063C(0x0004)
	float                                              ShowConsoleKeyboardUIStartDelay;                          // 0x0640(0x0004) (Edit)
	class UUIEditBox*                                  MyEditBox;                                                // 0x0644(0x0004) (Edit)
	class UUIButton*                                   EditStringButton;                                         // 0x0648(0x0004) (Edit)
	class UUIButton*                                   ConfirmButton;                                            // 0x064C(0x0004) (Edit)
	class UUILabel*                                    CustomStringLabel;                                        // 0x0650(0x0004) (Edit)
	struct FString                                     ConsoleEditBoxPopupDescription;                           // 0x0654(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     ConsoleEditBoxPopupTitleText;                             // 0x0660(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       GamepadButtonToOpenKeyboard;                              // 0x066C(0x0008) (Edit)
	struct FName                                       AltOpeningAnimation;                                      // 0x0674(0x0008) (Edit)
	struct FName                                       BadStringAnimation;                                       // 0x067C(0x0008) (Edit)
	int                                                MinimumCharactersNumber;                                  // 0x0684(0x0004) (Edit)
	class UDunDefUIScene*                              OwnerScene;                                               // 0x0688(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_EditboxPopup");
		return ptr;
	}


	void SetMinimumCharacters(int NewMinimum);
	unsigned long IsKeyboardOwned();
	unsigned long IsGamepadOwned();
	unsigned long ClickedEditBox(class UUIScreenObject* EventObject, int PlayerIndex);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void PostInitialSceneUpdate();
	void SceneDeactivated();
	void SceneActivated(unsigned long bInitialActivation);
	void ShowConsoleKeyboard();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void EvaluateKeyboardInput(struct FString* keyboardResult);
	void Update(float DeltaTime);
	void CloseWithAnimation();
	void SetOwnerAndDefaultString(class UDunDefUIScene* theOwner, const struct FString& defaultString, const struct FString& defaultLabel);
};


// Class UDKGame.UIScriptWidget_MaterialInstance
// 0x001C (0x04E8 - 0x04CC)
class UUIScriptWidget_MaterialInstance : public UUIScriptWidget
{
public:
	class UMaterialInstanceConstant*                   MICSurface;                                               // 0x04CC(0x0004) (Edit)
	TArray<struct FMICFloatParam>                      MICFloatParams;                                           // 0x04D0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMICVectorParam>                     MICVectorParams;                                          // 0x04DC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_MaterialInstance");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void SetMICVectorParam(const struct FLinearColor& Value, const struct FName& ParamName, int useParamIndex);
	void SetMICFloatParam(float Value, const struct FName& ParamName, int useParamIndex);
};


// Class UDKGame.UIDataContainer_Equipment
// 0x0014 (0x0488 - 0x0474)
class UUIDataContainer_Equipment : public UUIObject
{
public:
	unsigned long                                      bIsPlayerShop : 1;                                        // 0x0474(0x0004) (Edit)
	unsigned long                                      IsRemoteHero : 1;                                         // 0x0474(0x0004)
	unsigned long                                      bCompareStats : 1;                                        // 0x0474(0x0004)
	class UDunDefHero*                                 myHero;                                                   // 0x0478(0x0004)
	class UHeroEquipment*                              myEquipment;                                              // 0x047C(0x0004)
	class UHeroEquipment*                              MyHeroEquipmentOfType;                                    // 0x0480(0x0004)
	class UHeroEquipment*                              OtherComparisonEquipment;                                 // 0x0484(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIDataContainer_Equipment");
		return ptr;
	}


	class UDunDefHero* GetHero();
	class UHeroEquipment* GetComparisonEquipment(class UUIScriptWidget_EquipmentIconButton* equipmentButton);
	class UHeroEquipment* GetEquipment(class UUIScriptWidget_EquipmentIconButton* equipmentButton);
	void InitializeEquipmentData(class UDunDefHero* theHero, class UHeroEquipment* theEquipment, unsigned long compareStats, unsigned long bIsRemoteHero, class UHeroEquipment* theOtherComparisonEquipment);
};


// Class UDKGame.UIScriptWidget_EquipmentStat
// 0x0144 (0x0708 - 0x05C4)
class UUIScriptWidget_EquipmentStat : public UUIScriptWidget_Button
{
public:
	unsigned long                                      IsDamageResistanceStat : 1;                               // 0x05C4(0x0004) (Edit)
	unsigned long                                      IsEquipmentStat : 1;                                      // 0x05C4(0x0004) (Edit)
	unsigned long                                      IsInputUI : 1;                                            // 0x05C4(0x0004) (Edit)
	unsigned long                                      bPreviewUpgradeEffect : 1;                                // 0x05C4(0x0004) (Edit)
	unsigned long                                      AllowStatLevelUp : 1;                                     // 0x05C4(0x0004) (Transient)
	unsigned long                                      FoundStat : 1;                                            // 0x05C4(0x0004) (Transient)
	unsigned long                                      LastFullEquipmentSet : 1;                                 // 0x05C4(0x0004) (Transient)
	unsigned long                                      bShift : 1;                                               // 0x05C4(0x0004) (Transient)
	unsigned long                                      bCtrl : 1;                                                // 0x05C4(0x0004) (Transient)
	int                                                StatIndex;                                                // 0x05C8(0x0004) (Edit)
	float                                              widgetBaseScaleX;                                         // 0x05CC(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x05D0(0x0004) (Edit)
	float                                              TextCenterOffsetX;                                        // 0x05D4(0x0004) (Edit)
	float                                              ResistanceTextCenterOffsetX;                              // 0x05D8(0x0004) (Edit)
	float                                              TextCenterOffsetY;                                        // 0x05DC(0x0004) (Edit)
	float                                              ResistanceTextCenterOffsetY;                              // 0x05E0(0x0004) (Edit)
	float                                              IconCenterOffsetX;                                        // 0x05E4(0x0004) (Edit)
	float                                              IconCenterOffsetY;                                        // 0x05E8(0x0004) (Edit)
	float                                              IconSizeX;                                                // 0x05EC(0x0004) (Edit)
	float                                              IconSizeY;                                                // 0x05F0(0x0004) (Edit)
	class USurface*                                    EditorPreviewStatIcon;                                    // 0x05F4(0x0004) (Edit)
	float                                              AltTooltipTextScale;                                      // 0x05F8(0x0004) (Edit)
	struct FString                                     TestStatDescription;                                      // 0x05FC(0x000C) (Edit, NeedCtorLink)
	float                                              AltToolTipOwnerOffsetX;                                   // 0x0608(0x0004) (Edit)
	float                                              AltToolTipOwnerOffsetY;                                   // 0x060C(0x0004) (Edit)
	float                                              UpgradeTextCenterOffsetX;                                 // 0x0610(0x0004) (Edit)
	float                                              UpgradeTextCenterOffsetY;                                 // 0x0614(0x0004) (Edit)
	float                                              UpgradeIconCenterOffsetY;                                 // 0x0618(0x0004) (Edit)
	float                                              UpgradeIconCenterOffsetX;                                 // 0x061C(0x0004) (Edit)
	float                                              UpgradeIconWidth;                                         // 0x0620(0x0004) (Edit)
	float                                              UpgradeIconHeight;                                        // 0x0624(0x0004) (Edit)
	float                                              PercentageSignScale;                                      // 0x0628(0x0004) (Edit)
	float                                              UpgradeTextScale;                                         // 0x062C(0x0004) (Edit)
	struct FColor                                      UpgradeTextColor;                                         // 0x0630(0x0004) (Edit)
	struct FLinearColor                                UpgradeTextGradientColor;                                 // 0x0634(0x0010) (Edit)
	float                                              UpgradeTextBounceSpeed;                                   // 0x0644(0x0004) (Edit)
	class USurface*                                    UpgradeOverlay;                                           // 0x0648(0x0004) (Edit)
	float                                              UpgradeButtonBounceSpeed;                                 // 0x064C(0x0004) (Edit)
	struct FLinearColor                                StatLevelUpFocusedBGColor;                                // 0x0650(0x0010) (Edit)
	struct FColor                                      StateLevelUpTextColor;                                    // 0x0660(0x0004) (Edit)
	struct FColor                                      StatFullEquipmentBoostedTextColor;                        // 0x0664(0x0004) (Edit)
	struct FColor                                      AltTextColor;                                             // 0x0668(0x0004) (Edit)
	struct FLinearColor                                AltTextGradientColor;                                     // 0x066C(0x0010) (Edit)
	struct FColor                                      StatComparisonTextColors[0x3];                            // 0x067C(0x0004) (Edit)
	struct FLinearColor                                StatComparisonTextGradientColor;                          // 0x0688(0x0010) (Edit)
	struct FLinearColor                                UpgradedStatIconBGColor;                                  // 0x0698(0x0010) (Edit)
	struct FName                                       ClickedForUpgradeAnimation;                               // 0x06A8(0x0008) (Edit)
	struct FName                                       ProClickedForUpgradeAnimation;                            // 0x06B0(0x0008) (Edit)
	float                                              HighlightAfterUpgradingTime;                              // 0x06B8(0x0004) (Edit)
	struct FString                                     DamageResistanceString;                                   // 0x06BC(0x000C) (Transient, Localized, NeedCtorLink)
	struct FString                                     BonusString;                                              // 0x06C8(0x000C) (Transient, Localized, NeedCtorLink)
	struct FString                                     UpgradeString;                                            // 0x06D4(0x000C) (Transient, Localized, NeedCtorLink)
	struct FString                                     DamageResistancePercentSign;                              // 0x06E0(0x000C) (Transient, Localized, NeedCtorLink)
	class UHeroEquipment*                              LastEquipment;                                            // 0x06EC(0x0004) (Transient)
	TEnumAsByte<EEquipmentStatType>                    equipmentStatType;                                        // 0x06F0(0x0001) (Transient)
	TEnumAsByte<ELevelUpValueType>                     HeroStatType;                                             // 0x06F1(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x06F2(0x0002) MISSED OFFSET
	class UClass*                                      damageResistanceType;                                     // 0x06F4(0x0004) (Transient)
	class UUIDataContainer_Equipment*                  MyDataContainer;                                          // 0x06F8(0x0004) (Transient)
	float                                              DontDrawToolTipTimer;                                     // 0x06FC(0x0004) (Transient)
	int                                                lastValue;                                                // 0x0700(0x0004) (Transient)
	float                                              lastTimeChecked;                                          // 0x0704(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_EquipmentStat");
		return ptr;
	}


	void LostFocus();
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void ApplyLevelUp(const struct FString& UserEquipmentName, const struct FString& UserForgerName, class UHeroEquipment* Equipment, int numUpgrades);
	struct FString GetStatDescription();
	struct FString GetToolTipString();
	struct FLinearColor GetTextGradientColor(unsigned long bEnabled);
	struct FColor GetStatTextDrawColor(unsigned long bEnabled, unsigned long isNegative);
	float GetScaleMultiplier();
	struct FLinearColor GetBackgroundDrawColor(unsigned long bEnabled);
	void ApplyStatDisplayAdd(class UHeroEquipment* Equipment, int* Value);
	void ApplyStatDisplayMult(class UHeroEquipment* Equipment, int* Value);
	int GetStatValue(class UHeroEquipment* Equipment);
	int GetUpgradedStatValue();
	unsigned long CheckAllowLevelup(class UHeroEquipment* Equipment, unsigned long IsInForgeUI, unsigned long ProUpgradeMode);
	unsigned long ShouldCensorEquipment();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	unsigned long HasEnoughBankManaForUpgrade();
	unsigned long IsProUpgradeMode();
	struct FLinearColor GetFocusedBGColor();
	class UDunDefHero* GetHero();
	class UHeroEquipment* GetEquipment();
	class UUIDataContainer_Equipment* GetDataContainer();
};


// Class UDKGame.UI_MultiplayerMenu
// 0x0124 (0x0760 - 0x063C)
class UUI_MultiplayerMenu : public UDunDefUIScene
{
public:
	struct FString                                     MSG_NoGamesFoundTitle;                                    // 0x063C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_NoGamesFoundDescription;                              // 0x0648(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreateGameFailedTitle;                                // 0x0654(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreateGameFailedDescription;                          // 0x0660(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatingGameTitle;                                    // 0x066C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatingGameDescription;                              // 0x0678(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningGameTitle;                                     // 0x0684(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_JoiningGameDescription;                               // 0x0690(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_SearchFailedTitle;                                    // 0x069C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_SearchFailedDescription;                              // 0x06A8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_NoGamesQuickMatchTitle;                               // 0x06B4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_NoGamesQuickMatchDescription;                         // 0x06C0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_SearchingForGamesTitle;                               // 0x06CC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_SearchingForGamesDescription;                         // 0x06D8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatePrivateMatchTitle;                              // 0x06E4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_CreatePrivateMatchDescription;                        // 0x06F0(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIButton_Scripted*                          btnQuickMatch;                                            // 0x06FC(0x0004) (Transient)
	class UUIButton_Scripted*                          btnCustomMatch;                                           // 0x0700(0x0004) (Transient)
	class UUIButton_Scripted*                          btnPrivateMatch;                                          // 0x0704(0x0004) (Transient)
	class UUIButton_Scripted*                          btnShopMatch;                                             // 0x0708(0x0004) (Transient)
	class UUIButton_Scripted*                          btnBack;                                                  // 0x070C(0x0004) (Transient)
	class UUIButton_Scripted*                          btnManageInvites;                                         // 0x0710(0x0004) (Transient)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0714(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0718(0x0008)
	class UDataStoreClient*                            DSClient;                                                 // 0x0720(0x0004)
	class UUIDataStore_OnlineGameSettings*             SettingsDataStore;                                        // 0x0724(0x0004)
	class UUIDataStore_OnlineGameSearch*               SearchDataStore;                                          // 0x0728(0x0004)
	int                                                curGameIndex;                                             // 0x072C(0x0004)
	unsigned long                                      isLAN : 1;                                                // 0x0730(0x0004)
	unsigned long                                      justCanceledJoin : 1;                                     // 0x0730(0x0004)
	class USoundCue*                                   SearchingForGamesSound;                                   // 0x0734(0x0004) (Edit)
	class UUIImage*                                    MultiplayerModeImage;                                     // 0x0738(0x0004) (Edit)
	class UUIButton*                                   DefenderStoreButton;                                      // 0x073C(0x0004) (Edit)
	class UUI_GameSpyLogin*                            GameSpyLoginScene;                                        // 0x0740(0x0004) (Edit)
	class UUI_PasswordPrompt*                          PasswordPrompt;                                           // 0x0744(0x0004) (Edit)
	struct FString                                     PartySessionsString;                                      // 0x0748(0x000C) (Edit, Localized, NeedCtorLink)
	class UUILabelButton*                              PartySessionsButton;                                      // 0x0754(0x0004) (Edit)
	float                                              JoinRetryTimer;                                           // 0x0758(0x0004)
	float                                              JoinRetryDelay;                                           // 0x075C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_MultiplayerMenu");
		return ptr;
	}


	unsigned long IsGamepadOwned();
	unsigned long IsKeyboardOwned();
	void OnQuickMatchJoinComplete(const struct FName& SessionName, unsigned long wasSuccessful);
	void OnCreateComplete(const struct FName& SessionName, unsigned long wasSuccessful);
	void OnDestroyForCancelComplete(const struct FName& SessionName, unsigned long bWasSuccessful);
	void CleanupSession();
	unsigned long OnCreateCancelled(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void ShowCancelCreateButton();
	void DoQuickMatchCreate(const struct FString& withGameName);
	unsigned long OnQuickMatchCreatePrompt(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	unsigned long OnCancelQuickMatchJoin(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	unsigned long OnCancelQuickMatchSearch(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	unsigned long JoinNextGame();
	void OnQuickMatchSearchComplete(unsigned long wasSuccessful);
	void StartQuickMatch();
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long OnButtonClicked(class UUIScreenObject* EventObject, int PlayerIndex);
	unsigned long OnPrivateMatchConfirmClicked(class UUI_MessageBox* Sender, const struct FString& ButtonPressed, int PlayerIndex);
	void CreatePrivateMatch(const struct FString& withPassword);
	void SetupDefaultOnlineSettings();
	void SceneDeactivated();
	void SceneActivated(unsigned long initialActivation);
};


// Class UDKGame.UIPanel_Leaderboard
// 0x0184 (0x0604 - 0x0480)
class UUIPanel_Leaderboard : public UUIPanel
{
public:
	class UUILabel*                                    leaderboardLabel;                                         // 0x0480(0x0004) (Edit)
	class UUIList*                                     LeaderboardList;                                          // 0x0484(0x0004) (Edit)
	class UUILabel*                                    leaderboardTitle;                                         // 0x0488(0x0004) (Edit)
	class UUILabel*                                    ViewMode;                                                 // 0x048C(0x0004) (Edit)
	class UUILabel*                                    GameMode;                                                 // 0x0490(0x0004) (Edit)
	class UUILabel*                                    retrieveLabel;                                            // 0x0494(0x0004) (Edit)
	class UUIPanel*                                    gameModePanel;                                            // 0x0498(0x0004) (Edit)
	class UUIButton_Scripted*                          nextMode;                                                 // 0x049C(0x0004) (Edit)
	class UUIButton_Scripted*                          PrevMode;                                                 // 0x04A0(0x0004) (Edit)
	class UUIButton_Scripted*                          nextGameMode;                                             // 0x04A4(0x0004) (Edit)
	class UUIButton_Scripted*                          prevGameMode;                                             // 0x04A8(0x0004) (Edit)
	struct FLinearColor                                myEntryTextColor;                                         // 0x04AC(0x0010) (Edit)
	class UTexture2D*                                  ToggleViewModeTexture;                                    // 0x04BC(0x0004) (Edit)
	class UTexture2D*                                  ToggleGameModeTexture;                                    // 0x04C0(0x0004) (Edit)
	class UUIImage*                                    ToggleModeImage;                                          // 0x04C4(0x0004) (Edit)
	class UUIImage*                                    ToggleGameModeImage;                                      // 0x04C8(0x0004) (Edit)
	class UUIImage*                                    gamepadScrollFeedback;                                    // 0x04CC(0x0004) (Edit)
	int                                                RowCount;                                                 // 0x04D0(0x0004) (Edit)
	struct FString                                     entryNotFoundString;                                      // 0x04D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     emptyLeaderboardString;                                   // 0x04E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     modeString;                                               // 0x04EC(0x000C) (NeedCtorLink)
	struct FString                                     GameModeString;                                           // 0x04F8(0x000C) (NeedCtorLink)
	TArray<class ULocalPlayer*>                        localPlayers;                                             // 0x0504(0x000C) (NeedCtorLink)
	int                                                LocalPlayerIndex;                                         // 0x0510(0x0004)
	int                                                gameModeIndex;                                            // 0x0514(0x0004)
	struct FStatHeroInfo                               myHeroInfo;                                               // 0x0518(0x0050) (NeedCtorLink)
	struct FString                                     TopRankingsView;                                          // 0x0568(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FriendsView;                                              // 0x0574(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InfiniteWaveString;                                       // 0x0580(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RetrieveString;                                           // 0x058C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     pureStrategyString;                                       // 0x0598(0x000C) (Localized, NeedCtorLink)
	struct FString                                     campaignString;                                           // 0x05A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChallengeString;                                          // 0x05B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MyScoreString;                                            // 0x05BC(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      IsRetrieving : 1;                                         // 0x05C8(0x0004)
	unsigned long                                      ScrolledUp : 1;                                           // 0x05C8(0x0004)
	unsigned long                                      initialActivation : 1;                                    // 0x05C8(0x0004)
	unsigned long                                      filterSet : 1;                                            // 0x05C8(0x0004)
	unsigned long                                      keyboardOwner : 1;                                        // 0x05C8(0x0004)
	unsigned long                                      isShown : 1;                                              // 0x05C8(0x0004)
	unsigned long                                      shouldFocusList : 1;                                      // 0x05C8(0x0004)
	unsigned long                                      noExactRecord : 1;                                        // 0x05C8(0x0004)
	unsigned long                                      GameModeToggling : 1;                                     // 0x05C8(0x0004)
	unsigned long                                      bReadPending : 1;                                         // 0x05C8(0x0004) (Transient)
	unsigned long                                      needsQueuedRead : 1;                                      // 0x05C8(0x0004)
	class UUILabel*                                    gamerCardFeedbackLabel;                                   // 0x05CC(0x0004)
	int                                                RetryLimit;                                               // 0x05D0(0x0004)
	int                                                RetryCount;                                               // 0x05D4(0x0004)
	int                                                nonExactHeroLevel;                                        // 0x05D8(0x0004)
	int                                                localPlayerAdjustedRecord;                                // 0x05DC(0x0004)
	struct FString                                     nonExactHeroName;                                         // 0x05E0(0x000C) (NeedCtorLink)
	int                                                ControllerPending;                                        // 0x05EC(0x0004) (Transient)
	float                                              retryTimer;                                               // 0x05F0(0x0004) (Transient)
	TArray<struct FArchetypeToHeroClassMapping>        heroClassNames;                                           // 0x05F4(0x000C) (NeedCtorLink)
	int                                                queuedReadIndex;                                          // 0x0600(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIPanel_Leaderboard");
		return ptr;
	}


	void SetGamercardFeedbackLabel(class UUILabel* labelToSet);
	void ShowGamercard(unsigned char ControllerIndex);
	void ApplyColumnFormatting(int CellIndex, struct FString* CellValue);
	struct FArchetypeToHeroClassMapping FindHeroClassMapping(const struct FString& archetypeName);
	void SetViewModeForLevel();
	void ToggleGameMode(int Dir);
	void ToggleMode(int Dir);
	void ViewLocalPlayer();
	void ViewTopRankings();
	void ViewFriends();
	void SetViewModeLabel();
	void ClearFilter();
	void ResetFilterString();
	void SetFilterString(class APlayerController* Player);
	void ScrollFailed(int Direction);
	int FindMyRecord();
	void SetRetrieving(unsigned long retrieving);
	void OnlineReadComplete(unsigned long bWasSuccessful);
	void OnReadComplete(unsigned long bWasSuccessful);
	void QueueNextRead(int ControllerId);
	void CheckMinimumRecords(int selectedRecord);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void SetTitle();
	int GetPlayModeFromString(const struct FString& LeaderboardName);
	int GetDifficultyFromString(const struct FString& LeaderboardName);
	void UpdateLeaderboard(float DeltaTime);
	unsigned long AttemptRead(int ControllerId);
	void AddHighlightedOwner(const struct FString& leaderboardEntryOwner);
	void HighlightLocalEntries();
	void RemovePlayersWithNoHeroes();
	struct FString GetLocalPlayerName(class ULocalPlayer* curPlayer);
	void Deactivate();
	void HideModeToggle();
	void ShowModeToggle();
	void HideGameModeToggle(unsigned long HidePanel);
	void ShowGameModeToggle();
	unsigned long Activate(unsigned long listFocus);
};


// Class UDKGame.UIScriptWidget_GameStatsPopup
// 0x0030 (0x04FC - 0x04CC)
class UUIScriptWidget_GameStatsPopup : public UUIScriptWidget
{
public:
	class USurface*                                    BackgroundTex;                                            // 0x04CC(0x0004) (Edit)
	struct FColor                                      BackgroundColor;                                          // 0x04D0(0x0004) (Edit)
	class UUIPanel*                                    clipPanel;                                                // 0x04D4(0x0004) (Edit)
	struct FVector2D                                   BorderBuffer;                                             // 0x04D8(0x0008) (Edit)
	class UFont*                                       PopupFont;                                                // 0x04E0(0x0004) (Edit)
	TScriptInterface<class UScrollablePopupParent>     statsScene;                                               // 0x04E4(0x0008)
	float                                              scrollStart;                                              // 0x04EC(0x0004)
	float                                              scrollMin;                                                // 0x04F0(0x0004)
	float                                              scrollSpeed;                                              // 0x04F4(0x0004)
	unsigned long                                      visible : 1;                                              // 0x04F8(0x0004)
	unsigned long                                      scrollUp : 1;                                             // 0x04F8(0x0004)
	unsigned long                                      scrollDown : 1;                                           // 0x04F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_GameStatsPopup");
		return ptr;
	}


	void SetScrollBoundary(float newScrollMin);
	void UpdateScrollAmount(float Amount);
	void UpdateScroll(float Dir, float DeltaTime);
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void SetScene(const TScriptInterface<class UScrollablePopupParent>& Scene);
};


// Class UDKGame.UIImage_HealthBar
// 0x007C (0x0528 - 0x04AC)
class UUIImage_HealthBar : public UUIImage
{
public:
	float                                              LastHealthPercent;                                        // 0x04AC(0x0004) (Transient)
	class UMaterialInstanceConstant*                   theMIC;                                                   // 0x04B0(0x0004) (Transient)
	float                                              LastTakeDamageTime;                                       // 0x04B4(0x0004)
	float                                              HealthFlashInterp;                                        // 0x04B8(0x0004)
	struct FLinearColor                                MaterialColor;                                            // 0x04BC(0x0010)
	class UUILabel*                                    NumbersLabel;                                             // 0x04CC(0x0004) (Edit)
	class UUILabel*                                    NumbersLabelMax;                                          // 0x04D0(0x0004) (Edit)
	unsigned long                                      FlashOnDecrease : 1;                                      // 0x04D4(0x0004) (Edit)
	unsigned long                                      bInterpolateValue : 1;                                    // 0x04D4(0x0004) (Edit)
	unsigned long                                      onlyDisplayCurrentValueOnLabel : 1;                       // 0x04D4(0x0004) (Edit)
	unsigned long                                      bOnlyInterpUp : 1;                                        // 0x04D4(0x0004) (Edit)
	float                                              InterpSpeed;                                              // 0x04D8(0x0004) (Edit)
	int                                                PreviousCurrentValue;                                     // 0x04DC(0x0004)
	int                                                PreviousMaxValue;                                         // 0x04E0(0x0004)
	struct FLinearColor                                OriginalHealthColor;                                      // 0x04E4(0x0010)
	struct FString                                     LabelPreTextToAppend;                                     // 0x04F4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LabelPostTextToAppend;                                    // 0x0500(0x000C) (Edit, Localized, NeedCtorLink)
	class UMaterialInterface*                          BarMaterial;                                              // 0x050C(0x0004) (Edit)
	float                                              InterpCurrentPercent;                                     // 0x0510(0x0004)
	float                                              InterpTargetPercent;                                      // 0x0514(0x0004)
	struct FLinearColor                                LastHealthColor;                                          // 0x0518(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIImage_HealthBar");
		return ptr;
	}


	void SetHealthPercent(float healthPercent, int CurrentValue, int MaxValue, unsigned long bUseString, const struct FString& labelOverride, unsigned long overrideBarColor, const struct FLinearColor& barColorToUse, unsigned long overrideTextColor, const struct FLinearColor& textColorToUse, unsigned long bForceUpdate);
	void Update(float DeltaTime);
	void Created();
};


// Class UDKGame.UIImage_ProgressBar
// 0x0018 (0x0540 - 0x0528)
class UUIImage_ProgressBar : public UUIImage_HealthBar
{
public:
	struct FName                                       BarColorParamName;                                        // 0x0528(0x0008) (Edit)
	struct FLinearColor                                LastProgressBarColor;                                     // 0x0530(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIImage_ProgressBar");
		return ptr;
	}


	void SetProgress(float Percent, const struct FLinearColor& ProgressBarColor);
};


// Class UDKGame.UIScriptWidget_InvisibleWidget
// 0x0008 (0x04D4 - 0x04CC)
class UUIScriptWidget_InvisibleWidget : public UUIScriptWidget
{
public:
	class UUI_GameStats*                               statsScene;                                               // 0x04CC(0x0004)
	int                                                selectorIndex;                                            // 0x04D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_InvisibleWidget");
		return ptr;
	}


	void ActiveStateChanged(class UUIObject* Sender, int PlayerIndex, class UUIState* NewState, class UUIState* OldState);
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
};


// Class UDKGame.UIScriptWidget_HeroStat
// 0x00F0 (0x06B4 - 0x05C4)
class UUIScriptWidget_HeroStat : public UUIScriptWidget_Button
{
public:
	unsigned long                                      IsDamageResistanceStat : 1;                               // 0x05C4(0x0004) (Edit)
	unsigned long                                      bEditorPreviewLevelUp : 1;                                // 0x05C4(0x0004) (Edit)
	unsigned long                                      IsHeroSceneButton : 1;                                    // 0x05C4(0x0004) (Edit)
	unsigned long                                      bDoesStatHaveLevelRequirement : 1;                        // 0x05C4(0x0004) (Edit)
	TEnumAsByte<ELevelUpValueType>                     statType;                                                 // 0x05C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05C9(0x0003) MISSED OFFSET
	class UClass*                                      damageResistanceType;                                     // 0x05CC(0x0004) (Edit)
	float                                              widgetBaseScaleX;                                         // 0x05D0(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x05D4(0x0004) (Edit)
	float                                              TextCenterOffsetX;                                        // 0x05D8(0x0004) (Edit)
	float                                              TextCenterOffsetY;                                        // 0x05DC(0x0004) (Edit)
	float                                              IconCenterOffsetX;                                        // 0x05E0(0x0004) (Edit)
	float                                              IconCenterOffsetY;                                        // 0x05E4(0x0004) (Edit)
	float                                              IconSizeX;                                                // 0x05E8(0x0004) (Edit)
	float                                              IconSizeY;                                                // 0x05EC(0x0004) (Edit)
	class USurface*                                    EditorPreviewStatIcon;                                    // 0x05F0(0x0004) (Edit)
	class USurface*                                    LevelUpOverlay;                                           // 0x05F4(0x0004) (Edit)
	float                                              UpgradeTextCenterOffsetX;                                 // 0x05F8(0x0004) (Edit)
	float                                              UpgradeTextCenterOffsetY;                                 // 0x05FC(0x0004) (Edit)
	float                                              UpgradeTextScale;                                         // 0x0600(0x0004) (Edit)
	struct FColor                                      UpgradeTextColor;                                         // 0x0604(0x0004) (Edit)
	struct FLinearColor                                UpgradeTextGradientColor;                                 // 0x0608(0x0010) (Edit)
	float                                              UpgradeTextBounceSpeed;                                   // 0x0618(0x0004) (Edit)
	float                                              PercentageSignScale;                                      // 0x061C(0x0004) (Edit)
	float                                              LevelUpOverlaySizeX;                                      // 0x0620(0x0004) (Edit)
	float                                              LevelUpOverlaySizeY;                                      // 0x0624(0x0004) (Edit)
	float                                              LevelUpOverlayOffsetX;                                    // 0x0628(0x0004) (Edit)
	float                                              LevelUpOverlayOffsetY;                                    // 0x062C(0x0004) (Edit)
	float                                              LevelUpAllocationTextScale;                               // 0x0630(0x0004) (Edit)
	float                                              LevelUpAllocationTextOffsetX;                             // 0x0634(0x0004) (Edit)
	float                                              LevelUpAllocationTextOffsetY;                             // 0x0638(0x0004) (Edit)
	struct FColor                                      LevelUpAllocationTextColor;                               // 0x063C(0x0004) (Edit)
	struct FLinearColor                                LevelUpAllocationTextGradientColor;                       // 0x0640(0x0010) (Edit)
	class UFont*                                       LevelUpAllocationTextFont;                                // 0x0650(0x0004) (Edit)
	float                                              UpgradeButtonBounceSpeed;                                 // 0x0654(0x0004) (Edit)
	struct FName                                       ClickedForUpgradeAnimation;                               // 0x0658(0x0008) (Edit)
	struct FColor                                      StatTextColors[0x3];                                      // 0x0660(0x0004) (Edit)
	struct FString                                     HeroDamageResistanceString;                               // 0x066C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     heroString;                                               // 0x0678(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     EquipmentString;                                          // 0x0684(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     UpgradeString;                                            // 0x0690(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DamageResistancePercentSign;                              // 0x069C(0x000C) (Localized, NeedCtorLink)
	int                                                LevelUpPoints;                                            // 0x06A8(0x0004) (Transient)
	class UDunDefHero*                                 myHero;                                                   // 0x06AC(0x0004) (Transient)
	float                                              LastLevelUpClickedTime;                                   // 0x06B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HeroStat");
		return ptr;
	}


	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void AllocatePointsToStats();
	void ResetLevelUpAllocation();
	struct FColor GetStatTextDrawColor(int equipmentEnhancementType);
	void GetToolTipTextBlocks(TArray<struct FTextEx>* TextBlocks);
	struct FString GetToolTipString();
	float GetScaleMultiplier();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class UUI_HeroInfoNew* GetHeroScene();
	class UDunDefHero* GetHero();
};


// Class UDKGame.UIScriptWidget_EquipmentIconButton
// 0x01E0 (0x07F8 - 0x0618)
class UUIScriptWidget_EquipmentIconButton : public UUIButton_DataListEntry
{
public:
	class USurface*                                    TextBoxBackground;                                        // 0x0618(0x0004) (Edit)
	unsigned long                                      bDrawIconBackground : 1;                                  // 0x061C(0x0004) (Edit)
	unsigned long                                      bDrawTextName : 1;                                        // 0x061C(0x0004) (Edit)
	unsigned long                                      bForceDisabled : 1;                                       // 0x061C(0x0004) (Edit)
	unsigned long                                      bClearValueOnLostFocus : 1;                               // 0x061C(0x0004) (Edit)
	unsigned long                                      bUseEquipmentDataContainer : 1;                           // 0x061C(0x0004) (Edit)
	unsigned long                                      bEditorPreviewFullEquipmentSet : 1;                       // 0x061C(0x0004) (Edit)
	unsigned long                                      bShowEquipmentWorth : 1;                                  // 0x061C(0x0004) (Edit)
	unsigned long                                      bUseAltEquipment : 1;                                     // 0x061C(0x0004) (Edit)
	unsigned long                                      bFindAnyAltEquipment : 1;                                 // 0x061C(0x0004) (Edit)
	unsigned long                                      bAllowDragging : 1;                                       // 0x061C(0x0004) (Edit)
	unsigned long                                      bIsInTrade : 1;                                           // 0x061C(0x0004) (Transient)
	unsigned long                                      bIsDragging : 1;                                          // 0x061C(0x0004)
	unsigned long                                      bDrawingDraggable : 1;                                    // 0x061C(0x0004)
	unsigned long                                      bHasControl : 1;                                          // 0x061C(0x0004) (Transient)
	unsigned long                                      bIsQualityOutlineEnabled : 1;                             // 0x061C(0x0004) (Edit)
	unsigned long                                      bPreviewOutlineInEditor : 1;                              // 0x061C(0x0004) (Edit)
	float                                              widgetBaseScaleX;                                         // 0x0620(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x0624(0x0004) (Edit)
	float                                              TextCenterOffsetX;                                        // 0x0628(0x0004) (Edit)
	float                                              TextCenterOffsetY;                                        // 0x062C(0x0004) (Edit)
	float                                              TextBoxSizeX;                                             // 0x0630(0x0004) (Edit)
	float                                              TextBoxSizeY;                                             // 0x0634(0x0004) (Edit)
	struct FLinearColor                                TextBoxBGColor;                                           // 0x0638(0x0010) (Edit)
	float                                              IconCenterOffsetX;                                        // 0x0648(0x0004) (Edit)
	float                                              IconCenterOffsetY;                                        // 0x064C(0x0004) (Edit)
	float                                              IconSizeX;                                                // 0x0650(0x0004) (Edit)
	float                                              IconSizeY;                                                // 0x0654(0x0004) (Edit)
	class USurface*                                    EditorPreviewEquipmentIcon;                               // 0x0658(0x0004) (Edit)
	struct FString                                     EditorPreviewEquipmentName;                               // 0x065C(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EEquipmentType>                        MyEquipmentType;                                          // 0x0668(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0669(0x0003) MISSED OFFSET
	struct FColor                                      EquipmentWorthTextColor;                                  // 0x066C(0x0004) (Edit)
	struct FColor                                      EquipmentStackSizeTextColor;                              // 0x0670(0x0004) (Edit)
	float                                              EquipmentWorthTextScale;                                  // 0x0674(0x0004) (Edit)
	float                                              EquipmentWorthTextOffsetX;                                // 0x0678(0x0004) (Edit)
	float                                              EquipmentWorthTextOffsetY;                                // 0x067C(0x0004) (Edit)
	struct FLinearColor                                EquipmentWorthTextGradientColor;                          // 0x0680(0x0010) (Edit)
	struct FLinearColor                                DenialTextLevelGradientColor;                             // 0x0690(0x0010) (Edit)
	struct FLinearColor                                DenialTextClassGradientColor;                             // 0x06A0(0x0010) (Edit)
	struct FLinearColor                                EquipmentStackSizeTextGradientColor;                      // 0x06B0(0x0010) (Edit)
	struct FColor                                      DenialLevelSelectedTextColor;                             // 0x06C0(0x0004) (Edit)
	struct FColor                                      DenialLevelTextColor;                                     // 0x06C4(0x0004) (Edit)
	struct FColor                                      DenialClassSelectedTextColor;                             // 0x06C8(0x0004) (Edit)
	struct FColor                                      DenialClassTextColor;                                     // 0x06CC(0x0004) (Edit)
	class UUIPrefab*                                   ToolTipOverlayPrefab;                                     // 0x06D0(0x0004) (Edit)
	class USurface*                                    FullEquipmentSetOverlay;                                  // 0x06D4(0x0004) (Edit)
	class USurface*                                    LockedOverlay;                                            // 0x06D8(0x0004) (Edit)
	class USurface*                                    TradeOverlay;                                             // 0x06DC(0x0004) (Edit)
	class USurface*                                    ActiveFolderOverlay;                                      // 0x06E0(0x0004) (Edit)
	float                                              LockedOverlaySizeX;                                       // 0x06E4(0x0004) (Edit)
	float                                              LockedOverlaySizeY;                                       // 0x06E8(0x0004) (Edit)
	float                                              LockedOverlayOffsetX;                                     // 0x06EC(0x0004) (Edit)
	float                                              LockedOverlayOffsetY;                                     // 0x06F0(0x0004) (Edit)
	float                                              TradeOverlaySizeX;                                        // 0x06F4(0x0004) (Edit)
	float                                              TradeOverlaySizeY;                                        // 0x06F8(0x0004) (Edit)
	float                                              TradeOverlayOffsetX;                                      // 0x06FC(0x0004) (Edit)
	float                                              TradeOverlayOffsetY;                                      // 0x0700(0x0004) (Edit)
	float                                              textBoxPaddingX;                                          // 0x0704(0x0004) (Edit)
	float                                              textBoxPaddingY;                                          // 0x0708(0x0004) (Edit)
	float                                              FullEquipmentSetOverlaySizeX;                             // 0x070C(0x0004) (Edit)
	float                                              FullEquipmentSetOverlaySizeY;                             // 0x0710(0x0004) (Edit)
	float                                              FullEquipmentSetOverlayOffsetX;                           // 0x0714(0x0004) (Edit)
	float                                              FullEquipmentSetOverlayOffsetY;                           // 0x0718(0x0004) (Edit)
	float                                              ComparisonToolTipFocusTime;                               // 0x071C(0x0004) (Edit)
	struct FVector                                     ToolTipScale;                                             // 0x0720(0x000C) (Edit)
	struct FVector                                     ToolTipTranslationOffset;                                 // 0x072C(0x000C) (Edit)
	struct FVector                                     ComparisonToolTipTranslationOffset;                       // 0x0738(0x000C) (Edit)
	TArray<class USurface*>                            QCIcons;                                                  // 0x0744(0x000C) (Edit, NeedCtorLink)
	float                                              QCIconOffsetX;                                            // 0x0750(0x0004) (Edit)
	float                                              QCIconOffsetY;                                            // 0x0754(0x0004) (Edit)
	float                                              QCIconSize;                                               // 0x0758(0x0004) (Edit)
	class USurface*                                    DefaultFolderTexture;                                     // 0x075C(0x0004) (Edit)
	class USoundCue*                                   NavigateToFolderSound;                                    // 0x0760(0x0004) (Edit)
	class UDunDefHero*                                 myHero;                                                   // 0x0764(0x0004)
	class UUIDataContainer_Equipment*                  MyDataContainer;                                          // 0x0768(0x0004)
	float                                              LastFocusedTime;                                          // 0x076C(0x0004)
	int                                                itemsInFolder;                                            // 0x0770(0x0004) (Transient)
	class UMaterialInstanceConstant*                   QualityOutline;                                           // 0x0774(0x0004) (Edit)
	struct FLinearColor                                QualityLinearColor;                                       // 0x0778(0x0010) (Edit)
	float                                              QualityOutlineSizeX;                                      // 0x0788(0x0004) (Edit)
	float                                              QualityOutlineSizeY;                                      // 0x078C(0x0004) (Edit)
	float                                              QualityOutlineOffsetX;                                    // 0x0790(0x0004) (Edit)
	float                                              QualityOutlineOffsetY;                                    // 0x0794(0x0004) (Edit)
	struct FLinearColor                                MythicalOutlineLinearColor;                               // 0x0798(0x0010) (Edit, Const)
	struct FLinearColor                                TranscendentOutlineLinearColor;                           // 0x07A8(0x0010) (Edit, Const)
	struct FLinearColor                                SupremeOutlineLinearColor;                                // 0x07B8(0x0010) (Edit, Const)
	struct FLinearColor                                UltimateOutlineLinearColor;                               // 0x07C8(0x0010) (Edit, Const)
	struct FLinearColor                                UltimatePlusOutlineLinearColor;                           // 0x07D8(0x0010) (Edit, Const)
	struct FLinearColor                                UltimatePlusPlusOutlineLinearColor;                       // 0x07E8(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_EquipmentIconButton");
		return ptr;
	}


	void InitializeFromDataListEntry(class UUIPanel_DataList* DataList, const TScriptInterface<class UDataListEntryInterface>& _dataListEntryInterface);
	unsigned long IsClickable();
	void LostFocus();
	void GainedFocus();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class UHeroEquipment* GetEquipment();
	class UDunDefHero* GetHero();
	class UUIDataContainer_Equipment* GetDataContainer();
	void DraggedOnto(class UUIScreenObject* InDraggedOn);
	unsigned long SupportsDraggedOntoItem(class UUIScriptWidget_Button* DraggedOntoItem);
	void DragItemEnd(class UUIScreenObject* Sender, int PlayerIndex);
	void DragItemBegin(class UUIScreenObject* Sender, int PlayerIndex);
	void DoubleClickOccured(class UUIScreenObject* Sender, int PlayerIndex);
	void Initialized();
};


// Class UDKGame.UIScriptWidget_HeroInfoExpBar
// 0x007C (0x0548 - 0x04CC)
class UUIScriptWidget_HeroInfoExpBar : public UUIScriptWidget
{
public:
	float                                              TextCenterOffsetX;                                        // 0x04CC(0x0004) (Edit)
	float                                              TextCenterOffsetY;                                        // 0x04D0(0x0004) (Edit)
	struct FColor                                      BackgroundColor;                                          // 0x04D4(0x0004) (Edit)
	class UMaterialInstanceConstant*                   BarMIC;                                                   // 0x04D8(0x0004) (Edit)
	float                                              TextScale;                                                // 0x04DC(0x0004) (Edit)
	float                                              TextBouncyScale;                                          // 0x04E0(0x0004) (Edit)
	float                                              TextBouncyScaleSpeed;                                     // 0x04E4(0x0004) (Edit)
	struct FColor                                      TextColor;                                                // 0x04E8(0x0004) (Edit)
	struct FColor                                      LevelUpTextColor;                                         // 0x04EC(0x0004) (Edit)
	class UFont*                                       TextFont;                                                 // 0x04F0(0x0004) (Edit)
	struct FLinearColor                                TextGradientColor;                                        // 0x04F4(0x0010) (Edit)
	struct FLinearColor                                LevelUpTextGradientColor;                                 // 0x0504(0x0010) (Edit)
	struct FName                                       PercentParamName;                                         // 0x0514(0x0008) (Edit)
	struct FString                                     PreValuesString;                                          // 0x051C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     PostValuesString;                                         // 0x0528(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      isEditorRender : 1;                                       // 0x0534(0x0004)
	unsigned long                                      IsLevelUp : 1;                                            // 0x0534(0x0004)
	struct FString                                     LevelUpDisplayString;                                     // 0x0538(0x000C) (NeedCtorLink)
	class UDunDefHero*                                 myHero;                                                   // 0x0544(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HeroInfoExpBar");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class ADunDefPlayer* GetPlayer();
	class UDunDefHero* GetHero();
};


// Class UDKGame.UIScriptWidget_Combobox
// 0x00C4 (0x0688 - 0x05C4)
class UUIScriptWidget_Combobox : public UUIScriptWidget_Button
{
public:
	struct FBoxOverlay                                 OverlayBorder;                                            // 0x05C4(0x000C) (Edit)
	struct FComboboxFlags                              BehaviorSettings;                                         // 0x05D0(0x000C) (Edit)
	struct FString                                     Title;                                                    // 0x05DC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      TextFocusColor;                                           // 0x05E8(0x0004) (Edit)
	struct FVector2D                                   TitlePadding;                                             // 0x05EC(0x0008) (Edit)
	class USurface*                                    TitleBackground;                                          // 0x05F4(0x0004) (Edit)
	class USurface*                                    TitleBackgroundFocused;                                   // 0x05F8(0x0004) (Edit)
	class USurface*                                    TitleBackgroundExpanded;                                  // 0x05FC(0x0004) (Edit)
	TArray<struct FString>                             Elements;                                                 // 0x0600(0x000C) (Edit, NeedCtorLink)
	class USurface*                                    ElementBackground;                                        // 0x060C(0x0004) (Edit)
	class USurface*                                    ElementBackgroundFocused;                                 // 0x0610(0x0004) (Edit)
	float                                              ElementHeight;                                            // 0x0614(0x0004) (Edit)
	class UFont*                                       ElementsFont;                                             // 0x0618(0x0004) (Edit)
	class USurface*                                    BottomBorderBackground;                                   // 0x061C(0x0004) (Edit)
	class USurface*                                    BottomBorderBackgroundFocused;                            // 0x0620(0x0004) (Edit)
	unsigned long                                      bEditorForceExpand : 1;                                   // 0x0624(0x0004) (Edit)
	unsigned long                                      bDrawCustomTextBox : 1;                                   // 0x0624(0x0004) (Edit)
	unsigned long                                      bExpanded : 1;                                            // 0x0624(0x0004)
	unsigned long                                      bDrawLeftArrow : 1;                                       // 0x0624(0x0004) (Transient)
	unsigned long                                      bDrawRightArrow : 1;                                      // 0x0624(0x0004) (Transient)
	class USurface*                                    ToggleBtnIcon;                                            // 0x0628(0x0004) (Edit)
	class USurface*                                    ToggleBtnIconFocused;                                     // 0x062C(0x0004) (Edit)
	float                                              ToggleBtnRotation;                                        // 0x0630(0x0004) (Edit)
	float                                              ToggleBtnRotationDefault;                                 // 0x0634(0x0004) (Edit)
	float                                              ToggleIconReferenceSize;                                  // 0x0638(0x0004) (Edit)
	class USurface*                                    EndCapIcon;                                               // 0x063C(0x0004) (Edit)
	struct FVector2D                                   EndCapOffset;                                             // 0x0640(0x0008) (Edit)
	struct FVector2D                                   EndCapSize;                                               // 0x0648(0x0008) (Edit)
	float                                              ElementsFontScale;                                        // 0x0650(0x0004) (Edit)
	class USurface*                                    LeftArrowIcon;                                            // 0x0654(0x0004) (Edit)
	class USurface*                                    RightArrowIcon;                                           // 0x0658(0x0004) (Edit)
	int                                                CurrentFocusSelection;                                    // 0x065C(0x0004)
	int                                                LastSelection;                                            // 0x0660(0x0004)
	float                                              OriginalWidgetHeight;                                     // 0x0664(0x0004)
	float                                              ExpandedStartTime;                                        // 0x0668(0x0004)
	int                                                ClickCount;                                               // 0x066C(0x0004) (Transient)
	struct FScriptDelegate                             __NotifySelectionChanged__Delegate;                       // 0x0670(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __NotifyTitleClicked__Delegate;                           // 0x067C(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_Combobox");
		return ptr;
	}


	void Pressed(class UUIScreenObject* Sender, int PlayerIndex);
	void SceneReleasedClick();
	void ToggleOptionList();
	void CollapseOptionList();
	void ExpandOptionList();
	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
	void LostFocus();
	void ComboBoxElementSelected(int Idx, unsigned long notifySelection);
	void ClearSelection(const struct FString& newTitle, unsigned long notifySelection);
	unsigned long IsToggleBtnFocused();
	unsigned long IsTitleFocused();
	int GetFocusedElement();
	int GetFocusedSelection();
	void DeIncrementSelection();
	void IncrementSelection();
	void SetFocusedElement(int aFocusSeletion);
	class USurface* GetComboElementBackgroundImage(int Idx, unsigned long bFocused);
	class USurface* GetTitleBackgroundImage(unsigned long bFocused);
	class USurface* GetToggleIconImage(unsigned long bFocused);
	class USurface* GetToggleBackgroundImage(unsigned long bFocused);
	int GetElementsCount();
	float GetComboBoxElementSize();
	unsigned long GetWidgetCursorPosition(float X1, float Y1, float X2, float Y2, float* outCursorX, float* outCursorY);
	void UpdateFocusSelection(float X1, float Y1, float X2, float Y2, float TitleRatio);
	void DrawBox(class UCanvas* C, float Width, float Height, float StrawWidth);
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void OnInitialSceneUpdateDelegate();
	void OnNotifyResolutionChanged(struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize);
	int FindComboElement(const struct FString& Option);
	void SelectValue(unsigned long triggerNotifications, struct FString* val);
	void SetSelectedComboElement(int Idx, unsigned long triggerNotifications);
	void SetComboElements(TArray<struct FString> newComboElements, unsigned long triggerNotifications);
	struct FString GetElementString(int Idx);
	struct FString GetSelectedString();
	int GetSelectedElementIdx();
	void NotifyTitleClicked(int selectedElementIdx);
	void NotifySelectionChanged(int selectedElementIdx);
};


// Class UDKGame.UIDataContainer_Equipment_DataList
// 0x0000 (0x0488 - 0x0488)
class UUIDataContainer_Equipment_DataList : public UUIDataContainer_Equipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIDataContainer_Equipment_DataList");
		return ptr;
	}


	class UDunDefHero* GetHero();
	class UHeroEquipment* GetHeroCurrentEquipmentOfType(class UUIScriptWidget_EquipmentIconButton* equipmentButton);
	class UHeroEquipment* GetEquipment(class UUIScriptWidget_EquipmentIconButton* equipmentButton);
	void InitDataContainer_Equipment_DataList(class UDunDefHero* hero);
};


// Class UDKGame.UI_Leaderboard
// 0x00A0 (0x06DC - 0x063C)
class UUI_Leaderboard : public UDunDefUIScene
{
public:
	class UUIList*                                     LeaderboardList;                                          // 0x063C(0x0004) (Edit)
	class UUILabel*                                    leaderboardTitle;                                         // 0x0640(0x0004) (Edit)
	class UUILabel*                                    ViewMode;                                                 // 0x0644(0x0004) (Edit)
	class UUILabel*                                    retrieveLabel;                                            // 0x0648(0x0004) (Edit)
	class UUIButton_Scripted*                          nextMode;                                                 // 0x064C(0x0004) (Edit)
	class UUIButton_Scripted*                          PrevMode;                                                 // 0x0650(0x0004) (Edit)
	TArray<class ULocalPlayer*>                        localPlayers;                                             // 0x0654(0x000C) (NeedCtorLink)
	int                                                LocalPlayerIndex;                                         // 0x0660(0x0004)
	struct FStatHeroInfo                               myHeroInfo;                                               // 0x0664(0x0050) (NeedCtorLink)
	struct FString                                     TopRankingsView;                                          // 0x06B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InfiniteWaveString;                                       // 0x06C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     RetrieveString;                                           // 0x06CC(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      IsRetrieving : 1;                                         // 0x06D8(0x0004)
	unsigned long                                      ScrolledUp : 1;                                           // 0x06D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_Leaderboard");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	void ToggleMode(int Dir);
	void SetFilterString(class APlayerController* Player);
	void SetTitle();
	int GetPlayModeFromString(const struct FString& LeaderboardName);
	int GetDifficultyFromString(const struct FString& LeaderboardName);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void SceneActivated(unsigned long bInitialActivation);
	void ScrollFailed(int Direction);
	void OnReadComplete(unsigned long bWasSuccessful);
	int FindMyRecord();
	void SetRetrieving(unsigned long retrieving);
	void PostInitialize();
	void Initialized();
};


// Class UDKGame.UI_TitleScreen
// 0x0040 (0x067C - 0x063C)
class UUI_TitleScreen : public UDunDefUIScene
{
public:
	class USoundCue*                                   ProceedCue;                                               // 0x063C(0x0004) (Edit)
	class UDunDefUIScene*                              MainMenuScene;                                            // 0x0640(0x0004) (Edit)
	float                                              SaveNotificationDelay;                                    // 0x0644(0x0004) (Edit)
	struct FName                                       AnimatedLogoTag;                                          // 0x0648(0x0008) (Edit)
	float                                              StarterTimer;                                             // 0x0650(0x0004) (Edit)
	unsigned long                                      RequirePassword : 1;                                      // 0x0654(0x0004) (Config)
	unsigned long                                      PasswordSuccess : 1;                                      // 0x0654(0x0004) (Transient)
	struct FString                                     SpecialPassword;                                          // 0x0658(0x000C) (Config, NeedCtorLink)
	struct FString                                     PasswordDescription;                                      // 0x0664(0x000C) (Config, NeedCtorLink)
	struct FString                                     TitleDescription;                                         // 0x0670(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_TitleScreen");
		return ptr;
	}


	float PlayDunDefUIAnim(const struct FName& DunDefUIAnimSeqName, class UUIScreenObject* widgetToPlayOn, unsigned long forceNoSound, float playSpeed);
	void Update(float DeltaTime);
	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long ShowPasswordKeyboard();
	void PasswordInputDone(unsigned long Success);
	void PostInitialize();
	void Initialized();
};


// Class UDKGame.UI_PasswordPrompt
// 0x0034 (0x0670 - 0x063C)
class UUI_PasswordPrompt : public UDunDefUIScene
{
public:
	class UUIEditBox*                                  passwordBox;                                              // 0x063C(0x0004) (Edit)
	class UUIScriptWidget_Button*                      CancelButton;                                             // 0x0640(0x0004) (Edit)
	class UUIScriptWidget_Button*                      okButton;                                                 // 0x0644(0x0004) (Edit)
	class UUILabel*                                    TitleLabel;                                               // 0x0648(0x0004) (Edit)
	struct FString                                     MSG_PasswordTitle;                                        // 0x064C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_PasswordDescription;                                  // 0x0658(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      isGameName : 1;                                           // 0x0664(0x0004)
	class UUI_MultiplayerMenu*                         multiplayerMenu;                                          // 0x0668(0x0004)
	class UUI_NetworkMultiplayer*                      ServerList;                                               // 0x066C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_PasswordPrompt");
		return ptr;
	}


	unsigned long IsGamepadOwned();
	void SceneDeactivated();
	unsigned long IsKeyboardOwned();
	void Update(float DeltaTime);
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void InitForGameName();
	void Initialized();
};


// Class UDKGame.UI_SessionBrowser_EntryPanel
// 0x0010 (0x0490 - 0x0480)
class UUI_SessionBrowser_EntryPanel : public UUIPanel
{
public:
	class UUIButton_SessionBrowser_Entry*              BrowserButton;                                            // 0x0480(0x0004) (Edit)
	struct FOnlineGameSearchResult                     SessionResult;                                            // 0x0484(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_SessionBrowser_EntryPanel");
		return ptr;
	}


	void Created();
	void NotifyButtonClicked(class UUIObject* Widget);
};


// Class UDKGame.UI_SearchFilters
// 0x00F8 (0x0734 - 0x063C)
class UUI_SearchFilters : public UDunDefUIScene
{
public:
	class UUIPanel_DataList*                           CampaignMapDataList;                                      // 0x063C(0x0004) (Edit)
	class UUIPanel_DataList*                           ChallengeMapDataList;                                     // 0x0640(0x0004) (Edit)
	class UUICheckBox_Scripted*                        CampaignsCheckbox;                                        // 0x0644(0x0004) (Edit)
	class UUICheckBox_Scripted*                        ChallengesCheckbox;                                       // 0x0648(0x0004) (Edit)
	class UUICheckBox_Scripted*                        EasyCheckbox;                                             // 0x064C(0x0004) (Edit)
	class UUICheckBox_Scripted*                        MediumCheckbox;                                           // 0x0650(0x0004) (Edit)
	class UUICheckBox_Scripted*                        HardCheckbox;                                             // 0x0654(0x0004) (Edit)
	class UUICheckBox_Scripted*                        InsaneCheckbox;                                           // 0x0658(0x0004) (Edit)
	class UUICheckBox_Scripted*                        NightmareCheckbox;                                        // 0x065C(0x0004) (Edit)
	class UUICheckBox_Scripted*                        RuthlessCheckbox;                                         // 0x0660(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                BuildOn;                                                  // 0x0664(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                BuildOff;                                                 // 0x0668(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                BuildAny;                                                 // 0x066C(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                SurvivalOn;                                               // 0x0670(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                SurvivalOff;                                              // 0x0674(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                SurvivalAny;                                              // 0x0678(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                StrategyOn;                                               // 0x067C(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                StrategyOff;                                              // 0x0680(0x0004) (Edit)
	class UUIScriptWidget_ToggleButton*                StrategyAny;                                              // 0x0684(0x0004) (Edit)
	class UUIButton*                                   ButtonCycleBuild;                                         // 0x0688(0x0004) (Edit)
	class UUIButton*                                   ButtonCycleSurvival;                                      // 0x068C(0x0004) (Edit)
	class UUIButton*                                   ButtonCycleStrategy;                                      // 0x0690(0x0004) (Edit)
	class UUICheckBox_Scripted*                        filterHostLevel;                                          // 0x0694(0x0004) (Edit)
	class UUIPanel*                                    HostLevelContainer;                                       // 0x0698(0x0004) (Edit)
	class UUINumericOptionList*                        FilterHostLevelStartList;                                 // 0x069C(0x0004) (Edit)
	class UUINumericOptionList*                        FilterHostLevelEndList;                                   // 0x06A0(0x0004) (Edit)
	class UUILabel*                                    HeroClassLabel;                                           // 0x06A4(0x0004) (Edit)
	class UUIScriptWidget_Button*                      HeroClassPrev;                                            // 0x06A8(0x0004) (Edit)
	class UUIScriptWidget_Button*                      HeroClassNext;                                            // 0x06AC(0x0004) (Edit)
	class UUIPanel*                                    OptionsPanel1;                                            // 0x06B0(0x0004) (Edit)
	class UUIPanel*                                    OptionsPanel2;                                            // 0x06B4(0x0004) (Edit)
	class UUIScriptWidget_Button*                      MoreOptionsButton;                                        // 0x06B8(0x0004) (Edit)
	struct FString                                     MSG_OneDifficultyRequiredTitle;                           // 0x06BC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MSG_OneDifficultyRequiredDescription;                     // 0x06C8(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     AnyString;                                                // 0x06D4(0x000C) (Edit, Localized, NeedCtorLink)
	class UUIScriptWidget_Button*                      AcceptButton;                                             // 0x06E0(0x0004) (Edit)
	class UUIScriptWidget_Button*                      CancelButton;                                             // 0x06E4(0x0004) (Edit)
	class UUI_NetworkMultiplayer*                      MultiplayerUI;                                            // 0x06E8(0x0004) (Transient)
	unsigned long                                      readyForFilterInit : 1;                                   // 0x06EC(0x0004) (Transient)
	unsigned long                                      switchOptions : 1;                                        // 0x06EC(0x0004)
	class UUIImage*                                    survivalContainer;                                        // 0x06F0(0x0004) (Edit)
	class UUIImage*                                    buildContainer;                                           // 0x06F4(0x0004) (Edit)
	class UUIImage*                                    strategyContainer;                                        // 0x06F8(0x0004) (Edit)
	unsigned char                                      savedSurvivalValue;                                       // 0x06FC(0x0001) (Transient)
	unsigned char                                      savedBuildValue;                                          // 0x06FD(0x0001) (Transient)
	unsigned char                                      savedStrategyValue;                                       // 0x06FE(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x06FF(0x0001) MISSED OFFSET
	struct FSearchFilterSettings                       originalSettings;                                         // 0x0700(0x0024) (Transient, NeedCtorLink)
	TArray<struct UUI_SearchFilters_FHeroClassInfo>    heroClasses;                                              // 0x0724(0x000C) (NeedCtorLink)
	int                                                selectedHeroClassIndex;                                   // 0x0730(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UI_SearchFilters");
		return ptr;
	}


	unsigned long OnReceivedInputKey(struct FInputEventParameters* EventParms);
	unsigned long IsGamepadOwned();
	unsigned long IsKeyboardOwned();
	void RestoreRadialValues();
	void SaveRadialValues();
	void Update(float DeltaTime);
	unsigned long HasCampaignMissionsSelected();
	void CheckDifficultyChange(class UUICheckBox_Scripted* Widget);
	void SwitchOptionsPanel();
	unsigned long NotifyWidgetClicked(class UUIObject* Widget);
	void SearchFiltersSelectionChanged(class UUIObject* Widget, unsigned long bFromMouseClick);
	void ChangeAllDataListSelectionEntries(class UUICheckBox_Scripted* ParentBox, class UUIPanel_DataList* DataList, unsigned long bSelect, unsigned long bOnlyAffectTop);
	void UncheckAll(class UUIObject* theException);
	void ApplyFilterSettings(unsigned long doSave);
	void LoadFilterSettings();
	void AfterDataListUpdate(class UUIPanel_DataList* aDataList);
	void BeforeDataListUpdate(class UUIPanel_DataList* aDataList);
	void PostInitialSceneUpdate();
	void RefreshedChallengeList();
	void BeforeRefreshedChallengeList();
	void RefreshedCampaignList();
	void BeforeRefreshedCampaignList();
};


// Class UDKGame.UICheckBox_Scripted
// 0x0000 (0x04E0 - 0x04E0)
class UUICheckBox_Scripted : public UUICheckbox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UICheckBox_Scripted");
		return ptr;
	}


	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
};


// Class UDKGame.UILabel_KeyBinding
// 0x0034 (0x0500 - 0x04CC)
class UUILabel_KeyBinding : public UUILabel
{
public:
	struct FString                                     DisplayBindingDescriptionForBindingName;                  // 0x04CC(0x000C) (Edit, NeedCtorLink)
	struct FName                                       DisplayBindingDescriptionForKeyName;                      // 0x04D8(0x0008) (Edit)
	struct FString                                     DisplayKeyDescriptionForBindingName;                      // 0x04E0(0x000C) (Edit, NeedCtorLink)
	struct FName                                       DisplayKeyDescriptionForKeyName;                          // 0x04EC(0x0008) (Edit)
	struct FString                                     forActiveHeroArchetypePath;                               // 0x04F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UILabel_KeyBinding");
		return ptr;
	}


	void DoInit();
};


// Class UDKGame.UIButton_SessionBrowser_Entry
// 0x0000 (0x0508 - 0x0508)
class UUIButton_SessionBrowser_Entry : public UUIToggleButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIButton_SessionBrowser_Entry");
		return ptr;
	}


	unsigned long ButtonClicked(class UUIScreenObject* Sender, int PlayerIndex);
};


// Class UDKGame.UIDataContainer_EquipmentOverlay
// 0x0000 (0x0488 - 0x0488)
class UUIDataContainer_EquipmentOverlay : public UUIDataContainer_Equipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIDataContainer_EquipmentOverlay");
		return ptr;
	}

};


// Class UDKGame.UIScript_ActionWheelHotkey
// 0x0040 (0x050C - 0x04CC)
class UUIScript_ActionWheelHotkey : public UUIScriptWidget
{
public:
	int                                                hotKeyIndex;                                              // 0x04CC(0x0004) (Edit)
	class UTexture2D*                                  emptyTexture;                                             // 0x04D0(0x0004) (Edit)
	unsigned long                                      bDrawHotkeyNumber : 1;                                    // 0x04D4(0x0004) (Edit)
	unsigned long                                      bSetString : 1;                                           // 0x04D4(0x0004) (Transient)
	struct FVector                                     HotKeyNumberOffset;                                       // 0x04D8(0x000C) (Edit)
	class UFont*                                       HotKeyNumberFont;                                         // 0x04E4(0x0004) (Edit)
	struct FColor                                      HotKeyNumberColor;                                        // 0x04E8(0x0004) (Edit)
	float                                              HotKeyNumberScale;                                        // 0x04EC(0x0004) (Edit)
	struct FLinearColor                                HotKeyNumberBottomColor;                                  // 0x04F0(0x0010) (Edit)
	struct FString                                     numberString;                                             // 0x0500(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScript_ActionWheelHotkey");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
};


// Class UDKGame.UIScriptWidget_ButtonMultiImage
// 0x001C (0x0634 - 0x0618)
class UUIScriptWidget_ButtonMultiImage : public UUIButton_DataListEntry
{
public:
	float                                              widgetBaseScaleX;                                         // 0x0618(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x061C(0x0004) (Edit)
	int                                                MultiImageIndexToSetFromDataObject;                       // 0x0620(0x0004) (Edit)
	unsigned long                                      bSetDisplayStringFromDataObject : 1;                      // 0x0624(0x0004) (Edit)
	unsigned long                                      bSetBackgroundImageFromDataObject : 1;                    // 0x0624(0x0004) (Edit)
	TArray<struct FMultiImageEntry>                    MultiImageEntries;                                        // 0x0628(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_ButtonMultiImage");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void InitializeFromDataListEntry(class UUIPanel_DataList* DataList, const TScriptInterface<class UDataListEntryInterface>& Entry);
};


// Class UDKGame.UIScriptWidget_HealthManaIcon
// 0x0070 (0x053C - 0x04CC)
class UUIScriptWidget_HealthManaIcon : public UUIScriptWidget
{
public:
	float                                              widgetBaseScaleX;                                         // 0x04CC(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x04D0(0x0004) (Edit)
	float                                              TextMinCenterOffsetX;                                     // 0x04D4(0x0004) (Edit)
	float                                              TextMinCenterOffsetY;                                     // 0x04D8(0x0004) (Edit)
	float                                              TextMaxCenterOffsetX;                                     // 0x04DC(0x0004) (Edit)
	float                                              TextMaxCenterOffsetY;                                     // 0x04E0(0x0004) (Edit)
	float                                              IconCenterOffsetX;                                        // 0x04E4(0x0004) (Edit)
	float                                              IconCenterOffsetY;                                        // 0x04E8(0x0004) (Edit)
	float                                              IconSizeX;                                                // 0x04EC(0x0004) (Edit)
	float                                              IconSizeY;                                                // 0x04F0(0x0004) (Edit)
	struct FColor                                      BackgroundColor;                                          // 0x04F4(0x0004) (Edit)
	class USurface*                                    IconTex;                                                  // 0x04F8(0x0004) (Edit)
	class USurface*                                    BackgroundTex;                                            // 0x04FC(0x0004) (Edit)
	float                                              TextScale;                                                // 0x0500(0x0004) (Edit)
	struct FColor                                      TextMinDrawColor;                                         // 0x0504(0x0004) (Edit)
	struct FColor                                      TextMaxDrawColor;                                         // 0x0508(0x0004) (Edit)
	class UFont*                                       TextFont;                                                 // 0x050C(0x0004) (Edit)
	struct FLinearColor                                TextMinGradientColor;                                     // 0x0510(0x0010) (Edit)
	struct FLinearColor                                TextMaxGradientColor;                                     // 0x0520(0x0010) (Edit)
	float                                              TextShadowScaleMultiplier;                                // 0x0530(0x0004) (Edit)
	unsigned long                                      IsHealthIndicator : 1;                                    // 0x0534(0x0004) (Edit)
	unsigned long                                      isEditorRender : 1;                                       // 0x0534(0x0004)
	class UDunDefHero*                                 myHero;                                                   // 0x0538(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HealthManaIcon");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class ADunDefPlayer* GetPlayer();
	class UDunDefHero* GetHero();
};


// Class UDKGame.UIScriptWidget_HeroIcon
// 0x000C (0x04D8 - 0x04CC)
class UUIScriptWidget_HeroIcon : public UUIScriptWidget
{
public:
	struct FColor                                      iconColor;                                                // 0x04CC(0x0004) (Edit)
	class UDunDefHero*                                 myHero;                                                   // 0x04D0(0x0004)
	unsigned long                                      isEditorRender : 1;                                       // 0x04D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HeroIcon");
		return ptr;
	}


	struct FColor GetIconColor();
	class USurface* GetIcon();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	void RenderEditor(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class UDunDefHero* GetHero();
};


// Class UDKGame.UIScriptWidget_HeroSelectionButton
// 0x008C (0x06A4 - 0x0618)
class UUIScriptWidget_HeroSelectionButton : public UUIButton_DataListEntry
{
public:
	float                                              TextYPadding;                                             // 0x0618(0x0004) (Edit)
	float                                              BottomTextYPadding;                                       // 0x061C(0x0004) (Edit)
	float                                              HeroNameTextScale;                                        // 0x0620(0x0004) (Edit)
	float                                              HeroLevelTextScale;                                       // 0x0624(0x0004) (Edit)
	float                                              HealthAndManaTextScale;                                   // 0x0628(0x0004) (Edit)
	struct FString                                     LevelString;                                              // 0x062C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     HealthString;                                             // 0x0638(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     manaString;                                               // 0x0644(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MaxManaString;                                            // 0x0650(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MaxHealthString;                                          // 0x065C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FColor                                      healthColor;                                              // 0x0668(0x0004) (Edit)
	struct FColor                                      ManaColor;                                                // 0x066C(0x0004) (Edit)
	float                                              HeroIconWidth;                                            // 0x0670(0x0004) (Edit)
	float                                              HeroIconHeight;                                           // 0x0674(0x0004) (Edit)
	float                                              HealthManaShadowScale;                                    // 0x0678(0x0004) (Edit)
	float                                              LevelShadowScale;                                         // 0x067C(0x0004) (Edit)
	float                                              NameShadowScale;                                          // 0x0680(0x0004) (Edit)
	float                                              widgetBaseScaleX;                                         // 0x0684(0x0004) (Edit)
	float                                              widgetBaseScaleY;                                         // 0x0688(0x0004) (Edit)
	float                                              LevelStringYOffset;                                       // 0x068C(0x0004) (Edit)
	class UTexture2D*                                  MuteIcon;                                                 // 0x0690(0x0004) (Edit)
	unsigned long                                      bAlwaysDrawMuteIcon : 1;                                  // 0x0694(0x0004) (Edit)
	unsigned long                                      bDontFlush : 1;                                           // 0x0694(0x0004) (Transient)
	float                                              MuteIconSize;                                             // 0x0698(0x0004) (Edit)
	float                                              MuteIconOffsetX;                                          // 0x069C(0x0004) (Edit)
	float                                              MuteIconOffsetY;                                          // 0x06A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HeroSelectionButton");
		return ptr;
	}


	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class UDunDefHero* GetHero();
};


// Class UDKGame.UIScriptWidget_HeroPlayerListButton
// 0x0034 (0x06D8 - 0x06A4)
class UUIScriptWidget_HeroPlayerListButton : public UUIScriptWidget_HeroSelectionButton
{
public:
	struct FColor                                      PlayerNameTextColor;                                      // 0x06A4(0x0004) (Edit)
	struct FLinearColor                                PlayerNameTextGradientColor;                              // 0x06A8(0x0010) (Edit)
	float                                              PlayerNameTextYPadding;                                   // 0x06B8(0x0004) (Edit)
	float                                              PlayerNameTextScale;                                      // 0x06BC(0x0004) (Edit)
	float                                              PlayerNameTextShadowScale;                                // 0x06C0(0x0004) (Edit)
	float                                              MinPlayerNameScaler;                                      // 0x06C4(0x0004) (Edit)
	struct FString                                     EditorDisplayString;                                      // 0x06C8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bClearValueOnLostFocus : 1;                               // 0x06D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class UDKGame.UIScriptWidget_HeroPlayerListButton");
		return ptr;
	}


	void LostFocus();
	void RenderGame(class UCanvas* C, float X1, float X2, float Y1, float Y2);
	class UDunDefHero* GetHero();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
